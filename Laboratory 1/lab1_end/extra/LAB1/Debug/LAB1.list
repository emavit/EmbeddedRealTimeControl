
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfc8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800c1c8  0800c1c8  0001c1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d0  0800c3d0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3d0  0800c3d0  0001c3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3d8  0800c3d8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3d8  0800c3d8  0001c3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3dc  0800c3dc  0001c3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005110  20000080  0800c460  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005190  0800c460  00025190  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023850  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee1  00000000  00000000  000438fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b70  00000000  00000000  000477e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  00049350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f01  00000000  00000000  0004ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e3a  00000000  00000000  0004fc39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010feed  00000000  00000000  00072a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00182960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008054  00000000  00000000  001829b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c1b0 	.word	0x0800c1b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800c1b0 	.word	0x0800c1b0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <countBit>:
int actual_wait = INITIAL_WAIT_TIME;
int actual_keyboard_value = 0;
int frequency = 0;


uint8_t countBit(uint8_t n){
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
	while(n){
 8000602:	e009      	b.n	8000618 <countBit+0x24>
		count += n & 1;
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4413      	add	r3, r2
 8000610:	73fb      	strb	r3, [r7, #15]
		n>>=1;
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	085b      	lsrs	r3, r3, #1
 8000616:	71fb      	strb	r3, [r7, #7]
	while(n){
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f2      	bne.n	8000604 <countBit+0x10>
	}
	return count;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af04      	add	r7, sp, #16
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]


  printf("Interrupt on pin (%d).\n", GPIO_Pin);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	4619      	mov	r1, r3
 800063a:	4844      	ldr	r0, [pc, #272]	; (800074c <HAL_GPIO_EXTI_Callback+0x120>)
 800063c:	f00a fed6 	bl	800b3ec <iprintf>

  /* your code here */
  uint8_t buf[2], data;


  HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &buf[0], 1, HAL_TIMEOUT);
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	2301      	movs	r3, #1
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	2227      	movs	r2, #39	; 0x27
 8000652:	217e      	movs	r1, #126	; 0x7e
 8000654:	483e      	ldr	r0, [pc, #248]	; (8000750 <HAL_GPIO_EXTI_Callback+0x124>)
 8000656:	f002 ffe3 	bl	8003620 <HAL_I2C_Mem_Read>
 800065a:	4603      	mov	r3, r0
 800065c:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK)
 800065e:	7dfb      	ldrb	r3, [r7, #23]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d004      	beq.n	800066e <HAL_GPIO_EXTI_Callback+0x42>
    printf("I2C communication error (%X).\n", status);
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	4619      	mov	r1, r3
 8000668:	483a      	ldr	r0, [pc, #232]	; (8000754 <HAL_GPIO_EXTI_Callback+0x128>)
 800066a:	f00a febf 	bl	800b3ec <iprintf>
  status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &buf[1], 1, HAL_TIMEOUT);
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2301      	movs	r3, #1
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	3301      	adds	r3, #1
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	2228      	movs	r2, #40	; 0x28
 8000682:	217e      	movs	r1, #126	; 0x7e
 8000684:	4832      	ldr	r0, [pc, #200]	; (8000750 <HAL_GPIO_EXTI_Callback+0x124>)
 8000686:	f002 ffcb 	bl	8003620 <HAL_I2C_Mem_Read>
 800068a:	4603      	mov	r3, r0
 800068c:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK)
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d004      	beq.n	800069e <HAL_GPIO_EXTI_Callback+0x72>
      printf("I2C communication error (%X).\n", status);
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	4619      	mov	r1, r3
 8000698:	482e      	ldr	r0, [pc, #184]	; (8000754 <HAL_GPIO_EXTI_Callback+0x128>)
 800069a:	f00a fea7 	bl	800b3ec <iprintf>
  int row = countBit(~buf[0]-1);
 800069e:	7a3a      	ldrb	r2, [r7, #8]
 80006a0:	f06f 0301 	mvn.w	r3, #1
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa3 	bl	80005f4 <countBit>
 80006ae:	4603      	mov	r3, r0
 80006b0:	613b      	str	r3, [r7, #16]
  int column = countBit(~buf[1]-1);
 80006b2:	7a7a      	ldrb	r2, [r7, #9]
 80006b4:	f06f 0301 	mvn.w	r3, #1
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff99 	bl	80005f4 <countBit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	60fb      	str	r3, [r7, #12]
  printf("Keypad button: (%c).\n",keypadLayout[column][row]);
 80006c6:	4a24      	ldr	r2, [pc, #144]	; (8000758 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	441a      	add	r2, r3
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4821      	ldr	r0, [pc, #132]	; (800075c <HAL_GPIO_EXTI_Callback+0x130>)
 80006d8:	f00a fe88 	bl	800b3ec <iprintf>

  // EASY WAY
  //int frequency = (int) keypadLayout[column][row]-48;

  // HARD WAY
  if(keypadLayout[column][row] == '#')
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	441a      	add	r2, r3
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b23      	cmp	r3, #35	; 0x23
 80006ec:	d107      	bne.n	80006fe <HAL_GPIO_EXTI_Callback+0xd2>
  {
	  frequency = actual_keyboard_value;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <HAL_GPIO_EXTI_Callback+0x134>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <HAL_GPIO_EXTI_Callback+0x138>)
 80006f4:	6013      	str	r3, [r2, #0]
	  actual_keyboard_value = 0;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <HAL_GPIO_EXTI_Callback+0x134>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e011      	b.n	8000722 <HAL_GPIO_EXTI_Callback+0xf6>
  }
  else
  {
	  actual_keyboard_value = actual_keyboard_value*10 + ((int) keypadLayout[column][row]-48);
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_GPIO_EXTI_Callback+0x134>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4619      	mov	r1, r3
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <HAL_GPIO_EXTI_Callback+0x12c>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	441a      	add	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	3b30      	subs	r3, #48	; 0x30
 800071c:	440b      	add	r3, r1
 800071e:	4a10      	ldr	r2, [pc, #64]	; (8000760 <HAL_GPIO_EXTI_Callback+0x134>)
 8000720:	6013      	str	r3, [r2, #0]
  }


  if (frequency == 0)
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_GPIO_EXTI_Callback+0x138>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d103      	bne.n	8000732 <HAL_GPIO_EXTI_Callback+0x106>
	  actual_wait = 0;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_GPIO_EXTI_Callback+0x13c>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
  else
	  actual_wait = 1000 / frequency;



}
 8000730:	e007      	b.n	8000742 <HAL_GPIO_EXTI_Callback+0x116>
	  actual_wait = 1000 / frequency;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_GPIO_EXTI_Callback+0x138>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800073a:	fb92 f3f3 	sdiv	r3, r2, r3
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000740:	6013      	str	r3, [r2, #0]
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	0800c200 	.word	0x0800c200
 8000750:	200000e4 	.word	0x200000e4
 8000754:	0800c218 	.word	0x0800c218
 8000758:	0800c2f4 	.word	0x0800c2f4
 800075c:	0800c238 	.word	0x0800c238
 8000760:	20000670 	.word	0x20000670
 8000764:	20000674 	.word	0x20000674
 8000768:	20000000 	.word	0x20000000

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f001 ffc0 	bl	80026f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 fa3b 	bl	8000bf0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initialise_monitor_handles();
 800077a:	f00a fbed 	bl	800af58 <initialise_monitor_handles>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f001 f809 	bl	8001794 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000782:	f000 ffd7 	bl	8001734 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000786:	f000 faa5 	bl	8000cd4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800078a:	f000 faf5 	bl	8000d78 <MX_I2C1_Init>
  MX_I2C2_Init();
 800078e:	f000 fb33 	bl	8000df8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000792:	f000 fb71 	bl	8000e78 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000796:	f000 fbad 	bl	8000ef4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800079a:	f000 fc7b 	bl	8001094 <MX_TIM2_Init>
  MX_TIM3_Init();
 800079e:	f000 fd13 	bl	80011c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007a2:	f000 fd67 	bl	8001274 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007a6:	f000 fdbb 	bl	8001320 <MX_TIM5_Init>
  MX_TIM8_Init();
 80007aa:	f000 fe31 	bl	8001410 <MX_TIM8_Init>
  MX_UART4_Init();
 80007ae:	f000 ff01 	bl	80015b4 <MX_UART4_Init>
  MX_UART5_Init();
 80007b2:	f000 ff2f 	bl	8001614 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80007b6:	f000 ff5d 	bl	8001674 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007ba:	f000 ff8b 	bl	80016d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2110      	movs	r1, #16
 80007c2:	48bc      	ldr	r0, [pc, #752]	; (8000ab4 <main+0x348>)
 80007c4:	f002 fd3c 	bl	8003240 <HAL_GPIO_WritePin>

  /* Disable EXTI4_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80007c8:	200a      	movs	r0, #10
 80007ca:	f002 fb7f 	bl	8002ecc <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80007ce:	2312      	movs	r3, #18
 80007d0:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80007d2:	23c8      	movs	r3, #200	; 0xc8
 80007d4:	9302      	str	r3, [sp, #8]
 80007d6:	2301      	movs	r3, #1
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	1dbb      	adds	r3, r7, #6
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	227d      	movs	r2, #125	; 0x7d
 80007e2:	217e      	movs	r1, #126	; 0x7e
 80007e4:	48b4      	ldr	r0, [pc, #720]	; (8000ab8 <main+0x34c>)
 80007e6:	f002 fe07 	bl	80033f8 <HAL_I2C_Mem_Write>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d004      	beq.n	80007fe <main+0x92>
    printf("I2C communication error (%X).\n", status);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4619      	mov	r1, r3
 80007f8:	48b0      	ldr	r0, [pc, #704]	; (8000abc <main+0x350>)
 80007fa:	f00a fdf7 	bl	800b3ec <iprintf>

  data = 0x34;
 80007fe:	2334      	movs	r3, #52	; 0x34
 8000800:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000802:	23c8      	movs	r3, #200	; 0xc8
 8000804:	9302      	str	r3, [sp, #8]
 8000806:	2301      	movs	r3, #1
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	1dbb      	adds	r3, r7, #6
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2301      	movs	r3, #1
 8000810:	227d      	movs	r2, #125	; 0x7d
 8000812:	217e      	movs	r1, #126	; 0x7e
 8000814:	48a8      	ldr	r0, [pc, #672]	; (8000ab8 <main+0x34c>)
 8000816:	f002 fdef 	bl	80033f8 <HAL_I2C_Mem_Write>
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d004      	beq.n	800082e <main+0xc2>
    printf("I2C communication error (%X).\n", status);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4619      	mov	r1, r3
 8000828:	48a4      	ldr	r0, [pc, #656]	; (8000abc <main+0x350>)
 800082a:	f00a fddf 	bl	800b3ec <iprintf>

  HAL_Delay(100);
 800082e:	2064      	movs	r0, #100	; 0x64
 8000830:	f001 ff8e 	bl	8002750 <HAL_Delay>

  /* Set KeyPad scanning engine */

  /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
  data = 0x40;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 8000838:	23c8      	movs	r3, #200	; 0xc8
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	2301      	movs	r3, #1
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	221e      	movs	r2, #30
 8000848:	217e      	movs	r1, #126	; 0x7e
 800084a:	489b      	ldr	r0, [pc, #620]	; (8000ab8 <main+0x34c>)
 800084c:	f002 fdd4 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <main+0xf8>
    printf("I2C communication error (%X).\n", status);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4619      	mov	r1, r3
 800085e:	4897      	ldr	r0, [pc, #604]	; (8000abc <main+0x350>)
 8000860:	f00a fdc4 	bl	800b3ec <iprintf>

  /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
  data = 0xF0;
 8000864:	23f0      	movs	r3, #240	; 0xf0
 8000866:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000868:	23c8      	movs	r3, #200	; 0xc8
 800086a:	9302      	str	r3, [sp, #8]
 800086c:	2301      	movs	r3, #1
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	1dbb      	adds	r3, r7, #6
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	220f      	movs	r2, #15
 8000878:	217e      	movs	r1, #126	; 0x7e
 800087a:	488f      	ldr	r0, [pc, #572]	; (8000ab8 <main+0x34c>)
 800087c:	f002 fdbc 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000880:	4603      	mov	r3, r0
 8000882:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d004      	beq.n	8000894 <main+0x128>
    printf("I2C communication error (%X).\n", status);
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4619      	mov	r1, r3
 800088e:	488b      	ldr	r0, [pc, #556]	; (8000abc <main+0x350>)
 8000890:	f00a fdac 	bl	800b3ec <iprintf>

  /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
  data = 0x0F;
 8000894:	230f      	movs	r3, #15
 8000896:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000898:	23c8      	movs	r3, #200	; 0xc8
 800089a:	9302      	str	r3, [sp, #8]
 800089c:	2301      	movs	r3, #1
 800089e:	9301      	str	r3, [sp, #4]
 80008a0:	1dbb      	adds	r3, r7, #6
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2301      	movs	r3, #1
 80008a6:	220e      	movs	r2, #14
 80008a8:	217e      	movs	r1, #126	; 0x7e
 80008aa:	4883      	ldr	r0, [pc, #524]	; (8000ab8 <main+0x34c>)
 80008ac:	f002 fda4 	bl	80033f8 <HAL_I2C_Mem_Write>
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d004      	beq.n	80008c4 <main+0x158>
    printf("I2C communication error (%X).\n", status);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4619      	mov	r1, r3
 80008be:	487f      	ldr	r0, [pc, #508]	; (8000abc <main+0x350>)
 80008c0:	f00a fd94 	bl	800b3ec <iprintf>

  /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
  data = 0x0F;
 80008c4:	230f      	movs	r3, #15
 80008c6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 80008c8:	23c8      	movs	r3, #200	; 0xc8
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	2301      	movs	r3, #1
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	1dbb      	adds	r3, r7, #6
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	220b      	movs	r2, #11
 80008d8:	217e      	movs	r1, #126	; 0x7e
 80008da:	4877      	ldr	r0, [pc, #476]	; (8000ab8 <main+0x34c>)
 80008dc:	f002 fd8c 	bl	80033f8 <HAL_I2C_Mem_Write>
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <main+0x188>
    printf("I2C communication error (%X).\n", status);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4619      	mov	r1, r3
 80008ee:	4873      	ldr	r0, [pc, #460]	; (8000abc <main+0x350>)
 80008f0:	f00a fd7c 	bl	800b3ec <iprintf>

  /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
  data = 0x0F;
 80008f4:	230f      	movs	r3, #15
 80008f6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 80008f8:	23c8      	movs	r3, #200	; 0xc8
 80008fa:	9302      	str	r3, [sp, #8]
 80008fc:	2301      	movs	r3, #1
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	1dbb      	adds	r3, r7, #6
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	2206      	movs	r2, #6
 8000908:	217e      	movs	r1, #126	; 0x7e
 800090a:	486b      	ldr	r0, [pc, #428]	; (8000ab8 <main+0x34c>)
 800090c:	f002 fd74 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d004      	beq.n	8000924 <main+0x1b8>
    printf("I2C communication error (%X).\n", status);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4619      	mov	r1, r3
 800091e:	4867      	ldr	r0, [pc, #412]	; (8000abc <main+0x350>)
 8000920:	f00a fd64 	bl	800b3ec <iprintf>

  /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
  data = 0x0F;
 8000924:	230f      	movs	r3, #15
 8000926:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 8000928:	23c8      	movs	r3, #200	; 0xc8
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	2301      	movs	r3, #1
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	2223      	movs	r2, #35	; 0x23
 8000938:	217e      	movs	r1, #126	; 0x7e
 800093a:	485f      	ldr	r0, [pc, #380]	; (8000ab8 <main+0x34c>)
 800093c:	f002 fd5c 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <main+0x1e8>
    printf("I2C communication error (%X).\n", status);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4619      	mov	r1, r3
 800094e:	485b      	ldr	r0, [pc, #364]	; (8000abc <main+0x350>)
 8000950:	f00a fd4c 	bl	800b3ec <iprintf>

  /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
  data = 0x05;
 8000954:	2305      	movs	r3, #5
 8000956:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8000958:	23c8      	movs	r3, #200	; 0xc8
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2222      	movs	r2, #34	; 0x22
 8000968:	217e      	movs	r1, #126	; 0x7e
 800096a:	4853      	ldr	r0, [pc, #332]	; (8000ab8 <main+0x34c>)
 800096c:	f002 fd44 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <main+0x218>
    printf("I2C communication error (%X).\n", status);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4619      	mov	r1, r3
 800097e:	484f      	ldr	r0, [pc, #316]	; (8000abc <main+0x350>)
 8000980:	f00a fd34 	bl	800b3ec <iprintf>

  /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
  data = 0x7D;
 8000984:	237d      	movs	r3, #125	; 0x7d
 8000986:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 8000988:	23c8      	movs	r3, #200	; 0xc8
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2301      	movs	r3, #1
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	1dbb      	adds	r3, r7, #6
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2301      	movs	r3, #1
 8000996:	2225      	movs	r2, #37	; 0x25
 8000998:	217e      	movs	r1, #126	; 0x7e
 800099a:	4847      	ldr	r0, [pc, #284]	; (8000ab8 <main+0x34c>)
 800099c:	f002 fd2c 	bl	80033f8 <HAL_I2C_Mem_Write>
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <main+0x248>
    printf("I2C communication error (%X).\n", status);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4843      	ldr	r0, [pc, #268]	; (8000abc <main+0x350>)
 80009b0:	f00a fd1c 	bl	800b3ec <iprintf>

  /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
  data = 0x1B;
 80009b4:	231b      	movs	r3, #27
 80009b6:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 80009b8:	23c8      	movs	r3, #200	; 0xc8
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2301      	movs	r3, #1
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2301      	movs	r3, #1
 80009c6:	2226      	movs	r2, #38	; 0x26
 80009c8:	217e      	movs	r1, #126	; 0x7e
 80009ca:	483b      	ldr	r0, [pc, #236]	; (8000ab8 <main+0x34c>)
 80009cc:	f002 fd14 	bl	80033f8 <HAL_I2C_Mem_Write>
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d004      	beq.n	80009e4 <main+0x278>
    printf("I2C communication error (%X).\n", status);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	4619      	mov	r1, r3
 80009de:	4837      	ldr	r0, [pc, #220]	; (8000abc <main+0x350>)
 80009e0:	f00a fd04 	bl	800b3ec <iprintf>

  /* Enable EXTI4_IRQ after SX1509 initialization */
  HAL_Delay(100);
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f001 feb3 	bl	8002750 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009ea:	200a      	movs	r0, #10
 80009ec:	f002 fa60 	bl	8002eb0 <HAL_NVIC_EnableIRQ>

  /* Disable EXTI2_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80009f0:	2008      	movs	r0, #8
 80009f2:	f002 fa6b 	bl	8002ecc <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80009f6:	2312      	movs	r3, #18
 80009f8:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80009fa:	23c8      	movs	r3, #200	; 0xc8
 80009fc:	9302      	str	r3, [sp, #8]
 80009fe:	2301      	movs	r3, #1
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2301      	movs	r3, #1
 8000a08:	227d      	movs	r2, #125	; 0x7d
 8000a0a:	217c      	movs	r1, #124	; 0x7c
 8000a0c:	482a      	ldr	r0, [pc, #168]	; (8000ab8 <main+0x34c>)
 8000a0e:	f002 fcf3 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d004      	beq.n	8000a26 <main+0x2ba>
    printf("I2C communication error (%X).\n", status);
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4826      	ldr	r0, [pc, #152]	; (8000abc <main+0x350>)
 8000a22:	f00a fce3 	bl	800b3ec <iprintf>

  data = 0x34;
 8000a26:	2334      	movs	r3, #52	; 0x34
 8000a28:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000a2a:	23c8      	movs	r3, #200	; 0xc8
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	1dbb      	adds	r3, r7, #6
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2301      	movs	r3, #1
 8000a38:	227d      	movs	r2, #125	; 0x7d
 8000a3a:	217c      	movs	r1, #124	; 0x7c
 8000a3c:	481e      	ldr	r0, [pc, #120]	; (8000ab8 <main+0x34c>)
 8000a3e:	f002 fcdb 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d004      	beq.n	8000a56 <main+0x2ea>
    printf("I2C communication error (%X).\n", status);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481a      	ldr	r0, [pc, #104]	; (8000abc <main+0x350>)
 8000a52:	f00a fccb 	bl	800b3ec <iprintf>

  HAL_Delay(100);
 8000a56:	2064      	movs	r0, #100	; 0x64
 8000a58:	f001 fe7a 	bl	8002750 <HAL_Delay>

  /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000a5c:	23ff      	movs	r3, #255	; 0xff
 8000a5e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000a60:	23c8      	movs	r3, #200	; 0xc8
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	2301      	movs	r3, #1
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	1dbb      	adds	r3, r7, #6
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	220f      	movs	r2, #15
 8000a70:	217c      	movs	r1, #124	; 0x7c
 8000a72:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <main+0x34c>)
 8000a74:	f002 fcc0 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d004      	beq.n	8000a8c <main+0x320>
    printf("I2C communication error (%X).\n", status);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <main+0x350>)
 8000a88:	f00a fcb0 	bl	800b3ec <iprintf>

  /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000a8c:	23ff      	movs	r3, #255	; 0xff
 8000a8e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000a90:	23c8      	movs	r3, #200	; 0xc8
 8000a92:	9302      	str	r3, [sp, #8]
 8000a94:	2301      	movs	r3, #1
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	220e      	movs	r2, #14
 8000aa0:	217c      	movs	r1, #124	; 0x7c
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <main+0x34c>)
 8000aa4:	f002 fca8 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	e006      	b.n	8000ac0 <main+0x354>
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	200000e4 	.word	0x200000e4
 8000abc:	0800c218 	.word	0x0800c218
 8000ac0:	d004      	beq.n	8000acc <main+0x360>
    printf("I2C communication error (%X).\n", status);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <main+0x44c>)
 8000ac8:	f00a fc90 	bl	800b3ec <iprintf>

  /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
  data = 0x00;
 8000acc:	2300      	movs	r3, #0
 8000ace:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000ad0:	23c8      	movs	r3, #200	; 0xc8
 8000ad2:	9302      	str	r3, [sp, #8]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2301      	movs	r3, #1
 8000ade:	2213      	movs	r2, #19
 8000ae0:	217c      	movs	r1, #124	; 0x7c
 8000ae2:	4836      	ldr	r0, [pc, #216]	; (8000bbc <main+0x450>)
 8000ae4:	f002 fc88 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <main+0x390>
    printf("I2C communication error (%X).\n", status);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4619      	mov	r1, r3
 8000af6:	4830      	ldr	r0, [pc, #192]	; (8000bb8 <main+0x44c>)
 8000af8:	f00a fc78 	bl	800b3ec <iprintf>

  /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000afc:	23aa      	movs	r3, #170	; 0xaa
 8000afe:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000b00:	23c8      	movs	r3, #200	; 0xc8
 8000b02:	9302      	str	r3, [sp, #8]
 8000b04:	2301      	movs	r3, #1
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	1dbb      	adds	r3, r7, #6
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	2216      	movs	r2, #22
 8000b10:	217c      	movs	r1, #124	; 0x7c
 8000b12:	482a      	ldr	r0, [pc, #168]	; (8000bbc <main+0x450>)
 8000b14:	f002 fc70 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d004      	beq.n	8000b2c <main+0x3c0>
    printf("I2C communication error (%X).\n", status);
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	4619      	mov	r1, r3
 8000b26:	4824      	ldr	r0, [pc, #144]	; (8000bb8 <main+0x44c>)
 8000b28:	f00a fc60 	bl	800b3ec <iprintf>

  /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000b2c:	23aa      	movs	r3, #170	; 0xaa
 8000b2e:	71bb      	strb	r3, [r7, #6]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000b30:	23c8      	movs	r3, #200	; 0xc8
 8000b32:	9302      	str	r3, [sp, #8]
 8000b34:	2301      	movs	r3, #1
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	1dbb      	adds	r3, r7, #6
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	2217      	movs	r2, #23
 8000b40:	217c      	movs	r1, #124	; 0x7c
 8000b42:	481e      	ldr	r0, [pc, #120]	; (8000bbc <main+0x450>)
 8000b44:	f002 fc58 	bl	80033f8 <HAL_I2C_Mem_Write>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d004      	beq.n	8000b5c <main+0x3f0>
    printf("I2C communication error (%X).\n", status);
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4619      	mov	r1, r3
 8000b56:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <main+0x44c>)
 8000b58:	f00a fc48 	bl	800b3ec <iprintf>

  /* Enable EXTI2_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000b5c:	2064      	movs	r0, #100	; 0x64
 8000b5e:	f001 fdf7 	bl	8002750 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b62:	2008      	movs	r0, #8
 8000b64:	f002 f9a4 	bl	8002eb0 <HAL_NVIC_EnableIRQ>


  printf("Ready\n");
 8000b68:	4815      	ldr	r0, [pc, #84]	; (8000bc0 <main+0x454>)
 8000b6a:	f00a fcc5 	bl	800b4f8 <puts>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b6e:	f006 fc2f 	bl	80073d0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemSync */
  BinarySemSyncHandle = osSemaphoreNew(1, 0, &BinarySemSync_attributes);
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <main+0x458>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	2001      	movs	r0, #1
 8000b78:	f006 fd68 	bl	800764c <osSemaphoreNew>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <main+0x45c>)
 8000b80:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of lineSensorTask */
  lineSensorTaskHandle = osThreadNew(StatLineSensorTask, NULL, &lineSensorTask_attributes);
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <main+0x460>)
 8000b84:	2100      	movs	r1, #0
 8000b86:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <main+0x464>)
 8000b88:	f006 fc8c 	bl	80074a4 <osThreadNew>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <main+0x468>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* creation of led1task */
  led1taskHandle = osThreadNew(StartLed1task, NULL, &led1task_attributes);
 8000b92:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <main+0x46c>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	4811      	ldr	r0, [pc, #68]	; (8000bdc <main+0x470>)
 8000b98:	f006 fc84 	bl	80074a4 <osThreadNew>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <main+0x474>)
 8000ba0:	6013      	str	r3, [r2, #0]

  /* creation of led2task */
  led2taskHandle = osThreadNew(StartLed2task, NULL, &led2task_attributes);
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <main+0x478>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4810      	ldr	r0, [pc, #64]	; (8000be8 <main+0x47c>)
 8000ba8:	f006 fc7c 	bl	80074a4 <osThreadNew>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <main+0x480>)
 8000bb0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bb2:	f006 fc41 	bl	8007438 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <main+0x44a>
 8000bb8:	0800c218 	.word	0x0800c218
 8000bbc:	200000e4 	.word	0x200000e4
 8000bc0:	0800c250 	.word	0x0800c250
 8000bc4:	0800c2e4 	.word	0x0800c2e4
 8000bc8:	2000066c 	.word	0x2000066c
 8000bcc:	0800c278 	.word	0x0800c278
 8000bd0:	08001a25 	.word	0x08001a25
 8000bd4:	20000660 	.word	0x20000660
 8000bd8:	0800c29c 	.word	0x0800c29c
 8000bdc:	08001a89 	.word	0x08001a89
 8000be0:	20000664 	.word	0x20000664
 8000be4:	0800c2c0 	.word	0x0800c2c0
 8000be8:	08001ab9 	.word	0x08001ab9
 8000bec:	20000668 	.word	0x20000668

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b094      	sub	sp, #80	; 0x50
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	2234      	movs	r2, #52	; 0x34
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f00a fb57 	bl	800b2b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c14:	f003 f950 	bl	8003eb8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <SystemClock_Config+0xdc>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <SystemClock_Config+0xdc>)
 8000c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c22:	6413      	str	r3, [r2, #64]	; 0x40
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <SystemClock_Config+0xdc>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <SystemClock_Config+0xe0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c38:	4a25      	ldr	r2, [pc, #148]	; (8000cd0 <SystemClock_Config+0xe0>)
 8000c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <SystemClock_Config+0xe0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c60:	2304      	movs	r3, #4
 8000c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c64:	2360      	movs	r3, #96	; 0x60
 8000c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 f97d 	bl	8003f78 <HAL_RCC_OscConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c84:	f000 ff3a 	bl	8001afc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c88:	f003 f926 	bl	8003ed8 <HAL_PWREx_EnableOverDrive>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c92:	f000 ff33 	bl	8001afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c96:	230f      	movs	r3, #15
 8000c98:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fc0e 	bl	80044d4 <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000cbe:	f000 ff1d 	bl	8001afc <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3750      	adds	r7, #80	; 0x50
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <MX_ADC1_Init+0x9c>)
 8000cea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cf2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <MX_ADC1_Init+0xa0>)
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d36:	f001 fd2f 	bl	8002798 <HAL_ADC_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d40:	f000 fedc 	bl	8001afc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d44:	2303      	movs	r3, #3
 8000d46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_ADC1_Init+0x98>)
 8000d56:	f001 fd63 	bl	8002820 <HAL_ADC_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d60:	f000 fecc 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000009c 	.word	0x2000009c
 8000d70:	40012000 	.word	0x40012000
 8000d74:	0f000001 	.word	0x0f000001

08000d78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_I2C1_Init+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <MX_I2C1_Init+0x7c>)
 8000d86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_I2C1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_I2C1_Init+0x74>)
 8000db4:	f002 fa90 	bl	80032d8 <HAL_I2C_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dbe:	f000 fe9d 	bl	8001afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <MX_I2C1_Init+0x74>)
 8000dc6:	f002 ffdf 	bl	8003d88 <HAL_I2CEx_ConfigAnalogFilter>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd0:	f000 fe94 	bl	8001afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_I2C1_Init+0x74>)
 8000dd8:	f003 f821 	bl	8003e1e <HAL_I2CEx_ConfigDigitalFilter>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 fe8b 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000e4 	.word	0x200000e4
 8000df0:	40005400 	.word	0x40005400
 8000df4:	20303e5d 	.word	0x20303e5d

08000df8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <MX_I2C2_Init+0x78>)
 8000e00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <MX_I2C2_Init+0x7c>)
 8000e06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e32:	480e      	ldr	r0, [pc, #56]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e34:	f002 fa50 	bl	80032d8 <HAL_I2C_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e3e:	f000 fe5d 	bl	8001afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e46:	f002 ff9f 	bl	8003d88 <HAL_I2CEx_ConfigAnalogFilter>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e50:	f000 fe54 	bl	8001afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_I2C2_Init+0x74>)
 8000e58:	f002 ffe1 	bl	8003e1e <HAL_I2CEx_ConfigDigitalFilter>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 fe4b 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000138 	.word	0x20000138
 8000e70:	40005800 	.word	0x40005800
 8000e74:	20303e5d 	.word	0x20303e5d

08000e78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_SPI1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_SPI1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eaa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_SPI1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_SPI1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_SPI1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_SPI1_Init+0x74>)
 8000ed8:	f004 f97c 	bl	80051d4 <HAL_SPI_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f000 fe0b 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000018c 	.word	0x2000018c
 8000ef0:	40013000 	.word	0x40013000

08000ef4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b09a      	sub	sp, #104	; 0x68
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	222c      	movs	r2, #44	; 0x2c
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f00a f9bf 	bl	800b2b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f34:	4b55      	ldr	r3, [pc, #340]	; (800108c <MX_TIM1_Init+0x198>)
 8000f36:	4a56      	ldr	r2, [pc, #344]	; (8001090 <MX_TIM1_Init+0x19c>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000f3a:	4b54      	ldr	r3, [pc, #336]	; (800108c <MX_TIM1_Init+0x198>)
 8000f3c:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000f40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b52      	ldr	r3, [pc, #328]	; (800108c <MX_TIM1_Init+0x198>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000f48:	4b50      	ldr	r3, [pc, #320]	; (800108c <MX_TIM1_Init+0x198>)
 8000f4a:	22c8      	movs	r2, #200	; 0xc8
 8000f4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4e:	4b4f      	ldr	r3, [pc, #316]	; (800108c <MX_TIM1_Init+0x198>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f54:	4b4d      	ldr	r3, [pc, #308]	; (800108c <MX_TIM1_Init+0x198>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b4c      	ldr	r3, [pc, #304]	; (800108c <MX_TIM1_Init+0x198>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f60:	484a      	ldr	r0, [pc, #296]	; (800108c <MX_TIM1_Init+0x198>)
 8000f62:	f004 f9e2 	bl	800532a <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f6c:	f000 fdc6 	bl	8001afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4843      	ldr	r0, [pc, #268]	; (800108c <MX_TIM1_Init+0x198>)
 8000f7e:	f004 fedb 	bl	8005d38 <HAL_TIM_ConfigClockSource>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f88:	f000 fdb8 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f8c:	483f      	ldr	r0, [pc, #252]	; (800108c <MX_TIM1_Init+0x198>)
 8000f8e:	f004 fa9b 	bl	80054c8 <HAL_TIM_PWM_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f98:	f000 fdb0 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fac:	4619      	mov	r1, r3
 8000fae:	4837      	ldr	r0, [pc, #220]	; (800108c <MX_TIM1_Init+0x198>)
 8000fb0:	f005 fc76 	bl	80068a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fba:	f000 fd9f 	bl	8001afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	2360      	movs	r3, #96	; 0x60
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	482a      	ldr	r0, [pc, #168]	; (800108c <MX_TIM1_Init+0x198>)
 8000fe4:	f004 fd94 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fee:	f000 fd85 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4824      	ldr	r0, [pc, #144]	; (800108c <MX_TIM1_Init+0x198>)
 8000ffc:	f004 fd88 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001006:	f000 fd79 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800100a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800100e:	2208      	movs	r2, #8
 8001010:	4619      	mov	r1, r3
 8001012:	481e      	ldr	r0, [pc, #120]	; (800108c <MX_TIM1_Init+0x198>)
 8001014:	f004 fd7c 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800101e:	f000 fd6d 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001026:	220c      	movs	r2, #12
 8001028:	4619      	mov	r1, r3
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <MX_TIM1_Init+0x198>)
 800102c:	f004 fd70 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001036:	f000 fd61 	bl	8001afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800104e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001052:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800105c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <MX_TIM1_Init+0x198>)
 8001070:	f005 fca4 	bl	80069bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800107a:	f000 fd3f 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <MX_TIM1_Init+0x198>)
 8001080:	f000 ffc6 	bl	8002010 <HAL_TIM_MspPostInit>

}
 8001084:	bf00      	nop
 8001086:	3768      	adds	r7, #104	; 0x68
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200001f0 	.word	0x200001f0
 8001090:	40010000 	.word	0x40010000

08001094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b092      	sub	sp, #72	; 0x48
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]
 80010c6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010c8:	463b      	mov	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <MX_TIM2_Init+0x130>)
 80010d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <MX_TIM2_Init+0x130>)
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <MX_TIM2_Init+0x130>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <MX_TIM2_Init+0x130>)
 80010ea:	f04f 32ff 	mov.w	r2, #4294967295
 80010ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <MX_TIM2_Init+0x130>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <MX_TIM2_Init+0x130>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fc:	4831      	ldr	r0, [pc, #196]	; (80011c4 <MX_TIM2_Init+0x130>)
 80010fe:	f004 f914 	bl	800532a <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001108:	f000 fcf8 	bl	8001afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001112:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001116:	4619      	mov	r1, r3
 8001118:	482a      	ldr	r0, [pc, #168]	; (80011c4 <MX_TIM2_Init+0x130>)
 800111a:	f004 fe0d 	bl	8005d38 <HAL_TIM_ConfigClockSource>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001124:	f000 fcea 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001128:	4826      	ldr	r0, [pc, #152]	; (80011c4 <MX_TIM2_Init+0x130>)
 800112a:	f004 f9cd 	bl	80054c8 <HAL_TIM_PWM_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001134:	f000 fce2 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001138:	4822      	ldr	r0, [pc, #136]	; (80011c4 <MX_TIM2_Init+0x130>)
 800113a:	f004 fa26 	bl	800558a <HAL_TIM_IC_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001144:	f000 fcda 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001150:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001154:	4619      	mov	r1, r3
 8001156:	481b      	ldr	r0, [pc, #108]	; (80011c4 <MX_TIM2_Init+0x130>)
 8001158:	f005 fba2 	bl	80068a0 <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001162:	f000 fccb 	bl	8001afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001166:	2360      	movs	r3, #96	; 0x60
 8001168:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	4811      	ldr	r0, [pc, #68]	; (80011c4 <MX_TIM2_Init+0x130>)
 8001180:	f004 fcc6 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800118a:	f000 fcb7 	bl	8001afc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001192:	2301      	movs	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	2208      	movs	r2, #8
 80011a2:	4619      	mov	r1, r3
 80011a4:	4807      	ldr	r0, [pc, #28]	; (80011c4 <MX_TIM2_Init+0x130>)
 80011a6:	f004 fc16 	bl	80059d6 <HAL_TIM_IC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80011b0:	f000 fca4 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <MX_TIM2_Init+0x130>)
 80011b6:	f000 ff2b 	bl	8002010 <HAL_TIM_MspPostInit>

}
 80011ba:	bf00      	nop
 80011bc:	3748      	adds	r7, #72	; 0x48
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000023c 	.word	0x2000023c

080011c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2224      	movs	r2, #36	; 0x24
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00a f86b 	bl	800b2b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_TIM3_Init+0xa4>)
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_TIM3_Init+0xa8>)
 80011ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_TIM3_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_TIM3_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_TIM3_Init+0xa4>)
 80011fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM3_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_TIM3_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001224:	2301      	movs	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM3_Init+0xa4>)
 8001238:	f004 fa08 	bl	800564c <HAL_TIM_Encoder_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001242:	f000 fc5b 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM3_Init+0xa4>)
 8001254:	f005 fb24 	bl	80068a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800125e:	f000 fc4d 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000288 	.word	0x20000288
 8001270:	40000400 	.word	0x40000400

08001274 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	2224      	movs	r2, #36	; 0x24
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00a f815 	bl	800b2b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	463b      	mov	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_TIM4_Init+0xa4>)
 8001294:	4a21      	ldr	r2, [pc, #132]	; (800131c <MX_TIM4_Init+0xa8>)
 8001296:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_TIM4_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <MX_TIM4_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_TIM4_Init+0xa4>)
 80012a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_TIM4_Init+0xa4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_TIM4_Init+0xa4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012c0:	2301      	movs	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012d0:	2301      	movs	r3, #1
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	4619      	mov	r1, r3
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_TIM4_Init+0xa4>)
 80012e4:	f004 f9b2 	bl	800564c <HAL_TIM_Encoder_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012ee:	f000 fc05 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_TIM4_Init+0xa4>)
 8001300:	f005 face 	bl	80068a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800130a:	f000 fbf7 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	; 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200002d4 	.word	0x200002d4
 800131c:	40000800 	.word	0x40000800

08001320 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001340:	463b      	mov	r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
 800134e:	615a      	str	r2, [r3, #20]
 8001350:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001352:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <MX_TIM5_Init+0xe8>)
 8001354:	4a2d      	ldr	r2, [pc, #180]	; (800140c <MX_TIM5_Init+0xec>)
 8001356:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <MX_TIM5_Init+0xe8>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <MX_TIM5_Init+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <MX_TIM5_Init+0xe8>)
 8001366:	f04f 32ff 	mov.w	r2, #4294967295
 800136a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b26      	ldr	r3, [pc, #152]	; (8001408 <MX_TIM5_Init+0xe8>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <MX_TIM5_Init+0xe8>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001378:	4823      	ldr	r0, [pc, #140]	; (8001408 <MX_TIM5_Init+0xe8>)
 800137a:	f003 ffd6 	bl	800532a <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001384:	f000 fbba 	bl	8001afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	481c      	ldr	r0, [pc, #112]	; (8001408 <MX_TIM5_Init+0xe8>)
 8001396:	f004 fccf 	bl	8005d38 <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013a0:	f000 fbac 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013a4:	4818      	ldr	r0, [pc, #96]	; (8001408 <MX_TIM5_Init+0xe8>)
 80013a6:	f004 f88f 	bl	80054c8 <HAL_TIM_PWM_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013b0:	f000 fba4 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <MX_TIM5_Init+0xe8>)
 80013c4:	f005 fa6c 	bl	80068a0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013ce:	f000 fb95 	bl	8001afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d2:	2360      	movs	r3, #96	; 0x60
 80013d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e2:	463b      	mov	r3, r7
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <MX_TIM5_Init+0xe8>)
 80013ea:	f004 fb91 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013f4:	f000 fb82 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <MX_TIM5_Init+0xe8>)
 80013fa:	f000 fe09 	bl	8002010 <HAL_TIM_MspPostInit>

}
 80013fe:	bf00      	nop
 8001400:	3738      	adds	r7, #56	; 0x38
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000320 	.word	0x20000320
 800140c:	40000c00 	.word	0x40000c00

08001410 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b09a      	sub	sp, #104	; 0x68
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	222c      	movs	r2, #44	; 0x2c
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f009 ff31 	bl	800b2b2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001450:	4b56      	ldr	r3, [pc, #344]	; (80015ac <MX_TIM8_Init+0x19c>)
 8001452:	4a57      	ldr	r2, [pc, #348]	; (80015b0 <MX_TIM8_Init+0x1a0>)
 8001454:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001456:	4b55      	ldr	r3, [pc, #340]	; (80015ac <MX_TIM8_Init+0x19c>)
 8001458:	f240 32bf 	movw	r2, #959	; 0x3bf
 800145c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b53      	ldr	r3, [pc, #332]	; (80015ac <MX_TIM8_Init+0x19c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001464:	4b51      	ldr	r3, [pc, #324]	; (80015ac <MX_TIM8_Init+0x19c>)
 8001466:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800146a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <MX_TIM8_Init+0x19c>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001472:	4b4e      	ldr	r3, [pc, #312]	; (80015ac <MX_TIM8_Init+0x19c>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <MX_TIM8_Init+0x19c>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800147e:	484b      	ldr	r0, [pc, #300]	; (80015ac <MX_TIM8_Init+0x19c>)
 8001480:	f003 ff53 	bl	800532a <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800148a:	f000 fb37 	bl	8001afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001498:	4619      	mov	r1, r3
 800149a:	4844      	ldr	r0, [pc, #272]	; (80015ac <MX_TIM8_Init+0x19c>)
 800149c:	f004 fc4c 	bl	8005d38 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80014a6:	f000 fb29 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014aa:	4840      	ldr	r0, [pc, #256]	; (80015ac <MX_TIM8_Init+0x19c>)
 80014ac:	f004 f80c 	bl	80054c8 <HAL_TIM_PWM_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80014b6:	f000 fb21 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ca:	4619      	mov	r1, r3
 80014cc:	4837      	ldr	r0, [pc, #220]	; (80015ac <MX_TIM8_Init+0x19c>)
 80014ce:	f005 f9e7 	bl	80068a0 <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80014d8:	f000 fb10 	bl	8001afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014dc:	2360      	movs	r3, #96	; 0x60
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014e8:	2300      	movs	r3, #0
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f0:	2300      	movs	r3, #0
 80014f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014fc:	2200      	movs	r2, #0
 80014fe:	4619      	mov	r1, r3
 8001500:	482a      	ldr	r0, [pc, #168]	; (80015ac <MX_TIM8_Init+0x19c>)
 8001502:	f004 fb05 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800150c:	f000 faf6 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001514:	2204      	movs	r2, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4824      	ldr	r0, [pc, #144]	; (80015ac <MX_TIM8_Init+0x19c>)
 800151a:	f004 faf9 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001524:	f000 faea 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152c:	2208      	movs	r2, #8
 800152e:	4619      	mov	r1, r3
 8001530:	481e      	ldr	r0, [pc, #120]	; (80015ac <MX_TIM8_Init+0x19c>)
 8001532:	f004 faed 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 800153c:	f000 fade 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001540:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001544:	220c      	movs	r2, #12
 8001546:	4619      	mov	r1, r3
 8001548:	4818      	ldr	r0, [pc, #96]	; (80015ac <MX_TIM8_Init+0x19c>)
 800154a:	f004 fae1 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001554:	f000 fad2 	bl	8001afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800156c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001570:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800157a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4807      	ldr	r0, [pc, #28]	; (80015ac <MX_TIM8_Init+0x19c>)
 800158e:	f005 fa15 	bl	80069bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001598:	f000 fab0 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800159c:	4803      	ldr	r0, [pc, #12]	; (80015ac <MX_TIM8_Init+0x19c>)
 800159e:	f000 fd37 	bl	8002010 <HAL_TIM_MspPostInit>

}
 80015a2:	bf00      	nop
 80015a4:	3768      	adds	r7, #104	; 0x68
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000036c 	.word	0x2000036c
 80015b0:	40010400 	.word	0x40010400

080015b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_UART4_Init+0x58>)
 80015ba:	4a15      	ldr	r2, [pc, #84]	; (8001610 <MX_UART4_Init+0x5c>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_UART4_Init+0x58>)
 80015c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_UART4_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_UART4_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_UART4_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_UART4_Init+0x58>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_UART4_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_UART4_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_UART4_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_UART4_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_UART4_Init+0x58>)
 80015f8:	f005 fa7c 	bl	8006af4 <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001602:	f000 fa7b 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200003b8 	.word	0x200003b8
 8001610:	40004c00 	.word	0x40004c00

08001614 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_UART5_Init+0x58>)
 800161a:	4a15      	ldr	r2, [pc, #84]	; (8001670 <MX_UART5_Init+0x5c>)
 800161c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_UART5_Init+0x58>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_UART5_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_UART5_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_UART5_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_UART5_Init+0x58>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_UART5_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_UART5_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_UART5_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_UART5_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_UART5_Init+0x58>)
 8001658:	f005 fa4c 	bl	8006af4 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001662:	f000 fa4b 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000440 	.word	0x20000440
 8001670:	40005000 	.word	0x40005000

08001674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_USART1_UART_Init+0x58>)
 800167a:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <MX_USART1_UART_Init+0x5c>)
 800167c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_USART1_UART_Init+0x58>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_USART1_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_USART1_UART_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_USART1_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_USART1_UART_Init+0x58>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_USART1_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_USART1_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <MX_USART1_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_USART1_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_USART1_UART_Init+0x58>)
 80016b8:	f005 fa1c 	bl	8006af4 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016c2:	f000 fa1b 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200004c8 	.word	0x200004c8
 80016d0:	40011000 	.word	0x40011000

080016d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016da:	4a15      	ldr	r2, [pc, #84]	; (8001730 <MX_USART2_UART_Init+0x5c>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USART2_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART2_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USART2_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART2_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USART2_UART_Init+0x58>)
 8001718:	f005 f9ec 	bl	8006af4 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001722:	f000 f9eb 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000550 	.word	0x20000550
 8001730:	40004400 	.word	0x40004400

08001734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_USART3_UART_Init+0x58>)
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <MX_USART3_UART_Init+0x5c>)
 800173c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_USART3_UART_Init+0x58>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_USART3_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_USART3_UART_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_USART3_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART3_UART_Init+0x58>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_USART3_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_USART3_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_USART3_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_USART3_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_USART3_UART_Init+0x58>)
 8001778:	f005 f9bc 	bl	8006af4 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001782:	f000 f9bb 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200005d8 	.word	0x200005d8
 8001790:	40004800 	.word	0x40004800

08001794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	; 0x38
 8001798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017aa:	4b97      	ldr	r3, [pc, #604]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a96      	ldr	r2, [pc, #600]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017b0:	f043 0310 	orr.w	r3, r3, #16
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b94      	ldr	r3, [pc, #592]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	4b91      	ldr	r3, [pc, #580]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a90      	ldr	r2, [pc, #576]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b8e      	ldr	r3, [pc, #568]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017da:	4b8b      	ldr	r3, [pc, #556]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a8a      	ldr	r2, [pc, #552]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017e0:	f043 0320 	orr.w	r3, r3, #32
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f2:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a84      	ldr	r2, [pc, #528]	; (8001a08 <MX_GPIO_Init+0x274>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b7f      	ldr	r3, [pc, #508]	; (8001a08 <MX_GPIO_Init+0x274>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a7e      	ldr	r2, [pc, #504]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b7c      	ldr	r3, [pc, #496]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4b79      	ldr	r3, [pc, #484]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a78      	ldr	r2, [pc, #480]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b76      	ldr	r3, [pc, #472]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	4b73      	ldr	r3, [pc, #460]	; (8001a08 <MX_GPIO_Init+0x274>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a72      	ldr	r2, [pc, #456]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b70      	ldr	r3, [pc, #448]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001852:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a6c      	ldr	r2, [pc, #432]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <MX_GPIO_Init+0x274>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|Led5_Pin|Led6_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2178      	movs	r1, #120	; 0x78
 800186e:	4867      	ldr	r0, [pc, #412]	; (8001a0c <MX_GPIO_Init+0x278>)
 8001870:	f001 fce6 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	f244 0181 	movw	r1, #16513	; 0x4081
 800187a:	4865      	ldr	r0, [pc, #404]	; (8001a10 <MX_GPIO_Init+0x27c>)
 800187c:	f001 fce0 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	4863      	ldr	r0, [pc, #396]	; (8001a14 <MX_GPIO_Init+0x280>)
 8001886:	f001 fcdb 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin Led5_Pin Led6_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin|Led5_Pin|Led6_Pin;
 800188a:	2378      	movs	r3, #120	; 0x78
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	485a      	ldr	r0, [pc, #360]	; (8001a0c <MX_GPIO_Init+0x278>)
 80018a2:	f001 fb21 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 80018a6:	f643 7308 	movw	r3, #16136	; 0x3f08
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	4856      	ldr	r0, [pc, #344]	; (8001a18 <MX_GPIO_Init+0x284>)
 80018be:	f001 fb13 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 80018c2:	2310      	movs	r3, #16
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	4850      	ldr	r0, [pc, #320]	; (8001a18 <MX_GPIO_Init+0x284>)
 80018d8:	f001 fb06 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018dc:	2332      	movs	r3, #50	; 0x32
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018ec:	230b      	movs	r3, #11
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	4849      	ldr	r0, [pc, #292]	; (8001a1c <MX_GPIO_Init+0x288>)
 80018f8:	f001 faf6 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018fc:	2386      	movs	r3, #134	; 0x86
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800190c:	230b      	movs	r3, #11
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	4842      	ldr	r0, [pc, #264]	; (8001a20 <MX_GPIO_Init+0x28c>)
 8001918:	f001 fae6 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800191c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	4619      	mov	r1, r3
 8001934:	4836      	ldr	r0, [pc, #216]	; (8001a10 <MX_GPIO_Init+0x27c>)
 8001936:	f001 fad7 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800193a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800194c:	230b      	movs	r3, #11
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	482e      	ldr	r0, [pc, #184]	; (8001a10 <MX_GPIO_Init+0x27c>)
 8001958:	f001 fac6 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800195c:	2340      	movs	r3, #64	; 0x40
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800196c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001970:	4619      	mov	r1, r3
 8001972:	4828      	ldr	r0, [pc, #160]	; (8001a14 <MX_GPIO_Init+0x280>)
 8001974:	f001 fab8 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	4822      	ldr	r0, [pc, #136]	; (8001a14 <MX_GPIO_Init+0x280>)
 800198c:	f001 faac 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001990:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019a2:	230a      	movs	r3, #10
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	481c      	ldr	r0, [pc, #112]	; (8001a20 <MX_GPIO_Init+0x28c>)
 80019ae:	f001 fa9b 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4816      	ldr	r0, [pc, #88]	; (8001a20 <MX_GPIO_Init+0x28c>)
 80019c8:	f001 fa8e 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019de:	230b      	movs	r3, #11
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	480a      	ldr	r0, [pc, #40]	; (8001a14 <MX_GPIO_Init+0x280>)
 80019ea:	f001 fa7d 	bl	8002ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2105      	movs	r1, #5
 80019f2:	200a      	movs	r0, #10
 80019f4:	f001 fa40 	bl	8002e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019f8:	200a      	movs	r0, #10
 80019fa:	f001 fa59 	bl	8002eb0 <HAL_NVIC_EnableIRQ>

}
 80019fe:	bf00      	nop
 8001a00:	3738      	adds	r7, #56	; 0x38
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40021800 	.word	0x40021800
 8001a18:	40021400 	.word	0x40021400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020000 	.word	0x40020000

08001a24 <StatLineSensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StatLineSensorTask */
void StatLineSensorTask(void *argument)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af04      	add	r7, sp, #16
 8001a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreRelease(BinarySemSyncHandle);
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <StatLineSensorTask+0x54>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f005 ff0d 	bl	8007850 <osSemaphoreRelease>
	uint8_t buff;
	HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &buff, 1, HAL_TIMEOUT);
 8001a36:	2364      	movs	r3, #100	; 0x64
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	f107 030e 	add.w	r3, r7, #14
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2301      	movs	r3, #1
 8001a46:	2210      	movs	r2, #16
 8001a48:	217c      	movs	r1, #124	; 0x7c
 8001a4a:	480c      	ldr	r0, [pc, #48]	; (8001a7c <StatLineSensorTask+0x58>)
 8001a4c:	f001 fde8 	bl	8003620 <HAL_I2C_Mem_Read>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <StatLineSensorTask+0x40>
	  	printf("I2C communication error (%X).\n", status);
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4808      	ldr	r0, [pc, #32]	; (8001a80 <StatLineSensorTask+0x5c>)
 8001a60:	f009 fcc4 	bl	800b3ec <iprintf>
	printf("(%d).\n", buff);
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4806      	ldr	r0, [pc, #24]	; (8001a84 <StatLineSensorTask+0x60>)
 8001a6a:	f009 fcbf 	bl	800b3ec <iprintf>
    osDelay(1000);
 8001a6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a72:	f005 fdbd 	bl	80075f0 <osDelay>
  {
 8001a76:	e7d9      	b.n	8001a2c <StatLineSensorTask+0x8>
 8001a78:	2000066c 	.word	0x2000066c
 8001a7c:	200000e4 	.word	0x200000e4
 8001a80:	0800c218 	.word	0x0800c218
 8001a84:	0800c258 	.word	0x0800c258

08001a88 <StartLed1task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed1task */
void StartLed1task(void *argument)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed1task */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(BinarySemSyncHandle, osWaitForever);
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <StartLed1task+0x28>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fe73 	bl	8007784 <osSemaphoreAcquire>
  	  HAL_GPIO_TogglePin(GPIOE, Led5_Pin);
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <StartLed1task+0x2c>)
 8001aa2:	f001 fbe6 	bl	8003272 <HAL_GPIO_TogglePin>

      osDelay(10);
 8001aa6:	200a      	movs	r0, #10
 8001aa8:	f005 fda2 	bl	80075f0 <osDelay>
	  osSemaphoreAcquire(BinarySemSyncHandle, osWaitForever);
 8001aac:	e7f0      	b.n	8001a90 <StartLed1task+0x8>
 8001aae:	bf00      	nop
 8001ab0:	2000066c 	.word	0x2000066c
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <StartLed2task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLed2task */
void StartLed2task(void *argument)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLed2task */
  /* Infinite loop */
  for(;;)
  {
	  	HAL_GPIO_TogglePin(GPIOE, Led6_Pin);
 8001ac0:	2140      	movs	r1, #64	; 0x40
 8001ac2:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <StartLed2task+0x1c>)
 8001ac4:	f001 fbd5 	bl	8003272 <HAL_GPIO_TogglePin>
	    osDelay(333);
 8001ac8:	f240 104d 	movw	r0, #333	; 0x14d
 8001acc:	f005 fd90 	bl	80075f0 <osDelay>
	  	HAL_GPIO_TogglePin(GPIOE, Led6_Pin);
 8001ad0:	e7f6      	b.n	8001ac0 <StartLed2task+0x8>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aea:	f000 fe11 	bl	8002710 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40001000 	.word	0x40001000

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <Error_Handler+0x8>
	...

08001b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	210f      	movs	r1, #15
 8001b42:	f06f 0001 	mvn.w	r0, #1
 8001b46:	f001 f997 	bl	8002e78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <HAL_ADC_MspInit+0x74>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d123      	bne.n	8001bc2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_ADC_MspInit+0x78>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_ADC_MspInit+0x78>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_ADC_MspInit+0x78>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_ADC_MspInit+0x78>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_ADC_MspInit+0x78>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_ADC_MspInit+0x78>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001baa:	2308      	movs	r3, #8
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_ADC_MspInit+0x7c>)
 8001bbe:	f001 f993 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bc2:	bf00      	nop
 8001bc4:	3728      	adds	r7, #40	; 0x28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b0b0      	sub	sp, #192	; 0xc0
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	2290      	movs	r2, #144	; 0x90
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f009 fb5a 	bl	800b2b2 <memset>
  if(hi2c->Instance==I2C1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a44      	ldr	r2, [pc, #272]	; (8001d14 <HAL_I2C_MspInit+0x13c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d13e      	bne.n	8001c86 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 feb3 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001c24:	f7ff ff6a 	bl	8001afc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4a3a      	ldr	r2, [pc, #232]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001c2e:	f043 0302 	orr.w	r3, r3, #2
 8001c32:	6313      	str	r3, [r2, #48]	; 0x30
 8001c34:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c48:	2312      	movs	r3, #18
 8001c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c64:	4619      	mov	r1, r3
 8001c66:	482d      	ldr	r0, [pc, #180]	; (8001d1c <HAL_I2C_MspInit+0x144>)
 8001c68:	f001 f93e 	bl	8002ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a29      	ldr	r2, [pc, #164]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c84:	e041      	b.n	8001d0a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <HAL_I2C_MspInit+0x148>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d13c      	bne.n	8001d0a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c94:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 fe6f 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001cac:	f7ff ff26 	bl	8001afc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001cb6:	f043 0320 	orr.w	r3, r3, #32
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cce:	2312      	movs	r3, #18
 8001cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ce6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cea:	4619      	mov	r1, r3
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <HAL_I2C_MspInit+0x14c>)
 8001cee:	f001 f8fb 	bl	8002ee8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001cf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_I2C_MspInit+0x140>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
}
 8001d0a:	bf00      	nop
 8001d0c:	37c0      	adds	r7, #192	; 0xc0
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40005400 	.word	0x40005400
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40005800 	.word	0x40005800
 8001d24:	40021400 	.word	0x40021400

08001d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a33      	ldr	r2, [pc, #204]	; (8001e14 <HAL_SPI_MspInit+0xec>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d160      	bne.n	8001e0c <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a32      	ldr	r2, [pc, #200]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a2c      	ldr	r2, [pc, #176]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_SPI_MspInit+0xf0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001daa:	2320      	movs	r3, #32
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dba:	2305      	movs	r3, #5
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 031c 	add.w	r3, r7, #28
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <HAL_SPI_MspInit+0xf4>)
 8001dc6:	f001 f88f 	bl	8002ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dda:	2305      	movs	r3, #5
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	480e      	ldr	r0, [pc, #56]	; (8001e20 <HAL_SPI_MspInit+0xf8>)
 8001de6:	f001 f87f 	bl	8002ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dfc:	2305      	movs	r3, #5
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4807      	ldr	r0, [pc, #28]	; (8001e24 <HAL_SPI_MspInit+0xfc>)
 8001e08:	f001 f86e 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e0c:	bf00      	nop
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40013000 	.word	0x40013000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	40021800 	.word	0x40021800

08001e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a32      	ldr	r2, [pc, #200]	; (8001f10 <HAL_TIM_Base_MspInit+0xe8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d10c      	bne.n	8001e64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e62:	e051      	b.n	8001f08 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d129      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a28      	ldr	r2, [pc, #160]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4817      	ldr	r0, [pc, #92]	; (8001f18 <HAL_TIM_Base_MspInit+0xf0>)
 8001ebc:	f001 f814 	bl	8002ee8 <HAL_GPIO_Init>
}
 8001ec0:	e022      	b.n	8001f08 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <HAL_TIM_Base_MspInit+0xf4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d10c      	bne.n	8001ee6 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	e010      	b.n	8001f08 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <HAL_TIM_Base_MspInit+0xf8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d10b      	bne.n	8001f08 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	6453      	str	r3, [r2, #68]	; 0x44
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_TIM_Base_MspInit+0xec>)
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	3730      	adds	r7, #48	; 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40000c00 	.word	0x40000c00
 8001f20:	40010400 	.word	0x40010400

08001f24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2e      	ldr	r2, [pc, #184]	; (8001ffc <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d128      	bne.n	8001f98 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f46:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a27      	ldr	r2, [pc, #156]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b25      	ldr	r3, [pc, #148]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001f76:	2330      	movs	r3, #48	; 0x30
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f86:	2302      	movs	r3, #2
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8a:	f107 031c 	add.w	r3, r7, #28
 8001f8e:	4619      	mov	r1, r3
 8001f90:	481c      	ldr	r0, [pc, #112]	; (8002004 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f92:	f000 ffa9 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f96:	e02d      	b.n	8001ff4 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d128      	bne.n	8001ff4 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a16      	ldr	r2, [pc, #88]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001fd2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	4807      	ldr	r0, [pc, #28]	; (800200c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ff0:	f000 ff7a 	bl	8002ee8 <HAL_GPIO_Init>
}
 8001ff4:	bf00      	nop
 8001ff6:	3730      	adds	r7, #48	; 0x30
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40023800 	.word	0x40023800
 8002004:	40020400 	.word	0x40020400
 8002008:	40000800 	.word	0x40000800
 800200c:	40020c00 	.word	0x40020c00

08002010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a45      	ldr	r2, [pc, #276]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d11d      	bne.n	800206e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002032:	4b45      	ldr	r3, [pc, #276]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a44      	ldr	r2, [pc, #272]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 8002038:	f043 0310 	orr.w	r3, r3, #16
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b42      	ldr	r3, [pc, #264]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 800204a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800205c:	2301      	movs	r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	4839      	ldr	r0, [pc, #228]	; (800214c <HAL_TIM_MspPostInit+0x13c>)
 8002068:	f000 ff3e 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800206c:	e066      	b.n	800213c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002076:	d11d      	bne.n	80020b4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a32      	ldr	r2, [pc, #200]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b30      	ldr	r3, [pc, #192]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020a2:	2301      	movs	r3, #1
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	4828      	ldr	r0, [pc, #160]	; (8002150 <HAL_TIM_MspPostInit+0x140>)
 80020ae:	f000 ff1b 	bl	8002ee8 <HAL_GPIO_Init>
}
 80020b2:	e043      	b.n	800213c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM5)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <HAL_TIM_MspPostInit+0x144>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d11c      	bne.n	80020f8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 80020d6:	2301      	movs	r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020e6:	2302      	movs	r3, #2
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	4817      	ldr	r0, [pc, #92]	; (8002150 <HAL_TIM_MspPostInit+0x140>)
 80020f2:	f000 fef9 	bl	8002ee8 <HAL_GPIO_Init>
}
 80020f6:	e021      	b.n	800213c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM8)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a16      	ldr	r2, [pc, #88]	; (8002158 <HAL_TIM_MspPostInit+0x148>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d11c      	bne.n	800213c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 800211a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800212c:	2303      	movs	r3, #3
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <HAL_TIM_MspPostInit+0x14c>)
 8002138:	f000 fed6 	bl	8002ee8 <HAL_GPIO_Init>
}
 800213c:	bf00      	nop
 800213e:	3730      	adds	r7, #48	; 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40010000 	.word	0x40010000
 8002148:	40023800 	.word	0x40023800
 800214c:	40021000 	.word	0x40021000
 8002150:	40020000 	.word	0x40020000
 8002154:	40000c00 	.word	0x40000c00
 8002158:	40010400 	.word	0x40010400
 800215c:	40020800 	.word	0x40020800

08002160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b0b6      	sub	sp, #216	; 0xd8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002178:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800217c:	2290      	movs	r2, #144	; 0x90
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f009 f896 	bl	800b2b2 <memset>
  if(huart->Instance==UART4)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4aa0      	ldr	r2, [pc, #640]	; (800240c <HAL_UART_MspInit+0x2ac>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d13e      	bne.n	800220e <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 fbef 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80021ac:	f7ff fca6 	bl	8001afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021b0:	4b97      	ldr	r3, [pc, #604]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	4a96      	ldr	r2, [pc, #600]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80021b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021ba:	6413      	str	r3, [r2, #64]	; 0x40
 80021bc:	4b94      	ldr	r3, [pc, #592]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c8:	4b91      	ldr	r3, [pc, #580]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	4a90      	ldr	r2, [pc, #576]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6313      	str	r3, [r2, #48]	; 0x30
 80021d4:	4b8e      	ldr	r3, [pc, #568]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80021e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021fa:	2308      	movs	r3, #8
 80021fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002200:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002204:	4619      	mov	r1, r3
 8002206:	4883      	ldr	r0, [pc, #524]	; (8002414 <HAL_UART_MspInit+0x2b4>)
 8002208:	f000 fe6e 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800220c:	e151      	b.n	80024b2 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a81      	ldr	r2, [pc, #516]	; (8002418 <HAL_UART_MspInit+0x2b8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d160      	bne.n	80022da <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002224:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002228:	4618      	mov	r0, r3
 800222a:	f002 fbab 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002234:	f7ff fc62 	bl	8001afc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002238:	4b75      	ldr	r3, [pc, #468]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	4a74      	ldr	r2, [pc, #464]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
 8002244:	4b72      	ldr	r3, [pc, #456]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a6e      	ldr	r2, [pc, #440]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	6313      	str	r3, [r2, #48]	; 0x30
 800225c:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002268:	4b69      	ldr	r3, [pc, #420]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4a68      	ldr	r2, [pc, #416]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 800226e:	f043 0304 	orr.w	r3, r3, #4
 8002272:	6313      	str	r3, [r2, #48]	; 0x30
 8002274:	4b66      	ldr	r3, [pc, #408]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	623b      	str	r3, [r7, #32]
 800227e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002284:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800229a:	2308      	movs	r3, #8
 800229c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022a4:	4619      	mov	r1, r3
 80022a6:	485d      	ldr	r0, [pc, #372]	; (800241c <HAL_UART_MspInit+0x2bc>)
 80022a8:	f000 fe1e 	bl	8002ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80022c6:	2308      	movs	r3, #8
 80022c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4850      	ldr	r0, [pc, #320]	; (8002414 <HAL_UART_MspInit+0x2b4>)
 80022d4:	f000 fe08 	bl	8002ee8 <HAL_GPIO_Init>
}
 80022d8:	e0eb      	b.n	80024b2 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a50      	ldr	r2, [pc, #320]	; (8002420 <HAL_UART_MspInit+0x2c0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d151      	bne.n	8002388 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022e4:	2340      	movs	r3, #64	; 0x40
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022e8:	2300      	movs	r3, #0
 80022ea:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fb47 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80022fc:	f7ff fbfe 	bl	8001afc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 8002306:	f043 0310 	orr.w	r3, r3, #16
 800230a:	6453      	str	r3, [r2, #68]	; 0x44
 800230c:	4b40      	ldr	r3, [pc, #256]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	4a3c      	ldr	r2, [pc, #240]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 800231e:	f043 0302 	orr.w	r3, r3, #2
 8002322:	6313      	str	r3, [r2, #48]	; 0x30
 8002324:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800234a:	2304      	movs	r3, #4
 800234c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002354:	4619      	mov	r1, r3
 8002356:	4831      	ldr	r0, [pc, #196]	; (800241c <HAL_UART_MspInit+0x2bc>)
 8002358:	f000 fdc6 	bl	8002ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800235c:	2340      	movs	r3, #64	; 0x40
 800235e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002374:	2307      	movs	r3, #7
 8002376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800237e:	4619      	mov	r1, r3
 8002380:	4826      	ldr	r0, [pc, #152]	; (800241c <HAL_UART_MspInit+0x2bc>)
 8002382:	f000 fdb1 	bl	8002ee8 <HAL_GPIO_Init>
}
 8002386:	e094      	b.n	80024b2 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a25      	ldr	r2, [pc, #148]	; (8002424 <HAL_UART_MspInit+0x2c4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d14c      	bne.n	800242c <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002396:	2300      	movs	r3, #0
 8002398:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 faf0 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x24e>
      Error_Handler();
 80023aa:	f7ff fba7 	bl	8001afc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a17      	ldr	r2, [pc, #92]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80023cc:	f043 0308 	orr.w	r3, r3, #8
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_UART_MspInit+0x2b0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023de:	2360      	movs	r3, #96	; 0x60
 80023e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023f6:	2307      	movs	r3, #7
 80023f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002400:	4619      	mov	r1, r3
 8002402:	4809      	ldr	r0, [pc, #36]	; (8002428 <HAL_UART_MspInit+0x2c8>)
 8002404:	f000 fd70 	bl	8002ee8 <HAL_GPIO_Init>
}
 8002408:	e053      	b.n	80024b2 <HAL_UART_MspInit+0x352>
 800240a:	bf00      	nop
 800240c:	40004c00 	.word	0x40004c00
 8002410:	40023800 	.word	0x40023800
 8002414:	40020800 	.word	0x40020800
 8002418:	40005000 	.word	0x40005000
 800241c:	40020400 	.word	0x40020400
 8002420:	40011000 	.word	0x40011000
 8002424:	40004400 	.word	0x40004400
 8002428:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a22      	ldr	r2, [pc, #136]	; (80024bc <HAL_UART_MspInit+0x35c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d13d      	bne.n	80024b2 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002442:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002446:	4618      	mov	r0, r3
 8002448:	f002 fa9c 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002452:	f7ff fb53 	bl	8001afc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002456:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_UART_MspInit+0x360>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <HAL_UART_MspInit+0x360>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_UART_MspInit+0x360>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_UART_MspInit+0x360>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <HAL_UART_MspInit+0x360>)
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_UART_MspInit+0x360>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002486:	f44f 7340 	mov.w	r3, #768	; 0x300
 800248a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024a0:	2307      	movs	r3, #7
 80024a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_UART_MspInit+0x364>)
 80024ae:	f000 fd1b 	bl	8002ee8 <HAL_GPIO_Init>
}
 80024b2:	bf00      	nop
 80024b4:	37d8      	adds	r7, #216	; 0xd8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40004800 	.word	0x40004800
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020c00 	.word	0x40020c00

080024c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024d8:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_InitTick+0xe0>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_InitTick+0xe0>)
 80024de:	f043 0310 	orr.w	r3, r3, #16
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_InitTick+0xe0>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024f0:	f107 0210 	add.w	r2, r7, #16
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fa10 	bl	8004920 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800250a:	f002 f9e1 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 800250e:	6378      	str	r0, [r7, #52]	; 0x34
 8002510:	e004      	b.n	800251c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002512:	f002 f9dd 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 8002516:	4603      	mov	r3, r0
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_InitTick+0xe4>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	0c9b      	lsrs	r3, r3, #18
 8002526:	3b01      	subs	r3, #1
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_InitTick+0xe8>)
 800252c:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <HAL_InitTick+0xec>)
 800252e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_InitTick+0xe8>)
 8002532:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002536:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_InitTick+0xe8>)
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_InitTick+0xe8>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <HAL_InitTick+0xe8>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_InitTick+0xe8>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002550:	4817      	ldr	r0, [pc, #92]	; (80025b0 <HAL_InitTick+0xe8>)
 8002552:	f002 feea 	bl	800532a <HAL_TIM_Base_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800255c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002560:	2b00      	cmp	r3, #0
 8002562:	d11b      	bne.n	800259c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002564:	4812      	ldr	r0, [pc, #72]	; (80025b0 <HAL_InitTick+0xe8>)
 8002566:	f002 ff37 	bl	80053d8 <HAL_TIM_Base_Start_IT>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002574:	2b00      	cmp	r3, #0
 8002576:	d111      	bne.n	800259c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002578:	2036      	movs	r0, #54	; 0x36
 800257a:	f000 fc99 	bl	8002eb0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d808      	bhi.n	8002596 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	2036      	movs	r0, #54	; 0x36
 800258a:	f000 fc75 	bl	8002e78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_InitTick+0xf0>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	e002      	b.n	800259c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800259c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3738      	adds	r7, #56	; 0x38
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	431bde83 	.word	0x431bde83
 80025b0:	20000678 	.word	0x20000678
 80025b4:	40001000 	.word	0x40001000
 80025b8:	20000008 	.word	0x20000008

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 80025ec:	2010      	movs	r0, #16
 80025ee:	f000 fe5b 	bl	80032a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <TIM6_DAC_IRQHandler+0x10>)
 80025fe:	f003 f8cb 	bl	8005798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000678 	.word	0x20000678

0800260c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002614:	4a14      	ldr	r2, [pc, #80]	; (8002668 <_sbrk+0x5c>)
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <_sbrk+0x60>)
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <_sbrk+0x64>)
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <_sbrk+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	429a      	cmp	r2, r3
 800263a:	d207      	bcs.n	800264c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800263c:	f008 fd08 	bl	800b050 <__errno>
 8002640:	4603      	mov	r3, r0
 8002642:	220c      	movs	r2, #12
 8002644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
 800264a:	e009      	b.n	8002660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <_sbrk+0x64>)
 800265c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20080000 	.word	0x20080000
 800266c:	00000400 	.word	0x00000400
 8002670:	200006c4 	.word	0x200006c4
 8002674:	20005190 	.word	0x20005190

08002678 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <SystemInit+0x28>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <SystemInit+0x28>)
 8002684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SystemInit+0x28>)
 800268e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002692:	609a      	str	r2, [r3, #8]
#endif
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026aa:	e003      	b.n	80026b4 <LoopCopyDataInit>

080026ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026b2:	3104      	adds	r1, #4

080026b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026b4:	480b      	ldr	r0, [pc, #44]	; (80026e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026bc:	d3f6      	bcc.n	80026ac <CopyDataInit>
  ldr  r2, =_sbss
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026c0:	e002      	b.n	80026c8 <LoopFillZerobss>

080026c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026c4:	f842 3b04 	str.w	r3, [r2], #4

080026c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026cc:	d3f9      	bcc.n	80026c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ce:	f7ff ffd3 	bl	8002678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f008 fdb9 	bl	800b248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7fe f849 	bl	800076c <main>
  bx  lr    
 80026da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026dc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80026e0:	0800c3e0 	.word	0x0800c3e0
  ldr  r0, =_sdata
 80026e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026e8:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80026ec:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80026f0:	20005190 	.word	0x20005190

080026f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <ADC_IRQHandler>

080026f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fa:	2003      	movs	r0, #3
 80026fc:	f000 fbb1 	bl	8002e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002700:	200f      	movs	r0, #15
 8002702:	f7ff fee1 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002706:	f7ff f9ff 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_IncTick+0x20>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_IncTick+0x24>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <HAL_IncTick+0x24>)
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	2000000c 	.word	0x2000000c
 8002734:	200006c8 	.word	0x200006c8

08002738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_GetTick+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200006c8 	.word	0x200006c8

08002750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff ffee 	bl	8002738 <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d005      	beq.n	8002776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_Delay+0x44>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002776:	bf00      	nop
 8002778:	f7ff ffde 	bl	8002738 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d8f7      	bhi.n	8002778 <HAL_Delay+0x28>
  {
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2000000c 	.word	0x2000000c

08002798 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e031      	b.n	8002812 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff f9ce 	bl	8001b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d116      	bne.n	8002804 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_ADC_Init+0x84>)
 80027dc:	4013      	ands	r3, r2
 80027de:	f043 0202 	orr.w	r2, r3, #2
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f970 	bl	8002acc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	f043 0201 	orr.w	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
 8002802:	e001      	b.n	8002808 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	ffffeefd 	.word	0xffffeefd

08002820 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1c>
 8002838:	2302      	movs	r3, #2
 800283a:	e136      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x28a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b09      	cmp	r3, #9
 800284a:	d93a      	bls.n	80028c2 <HAL_ADC_ConfigChannel+0xa2>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002854:	d035      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68d9      	ldr	r1, [r3, #12]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	3b1e      	subs	r3, #30
 800286c:	2207      	movs	r2, #7
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	400a      	ands	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a8d      	ldr	r2, [pc, #564]	; (8002ab8 <HAL_ADC_ConfigChannel+0x298>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10a      	bne.n	800289c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68d9      	ldr	r1, [r3, #12]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	061a      	lsls	r2, r3, #24
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289a:	e035      	b.n	8002908 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68d9      	ldr	r1, [r3, #12]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4403      	add	r3, r0
 80028b4:	3b1e      	subs	r3, #30
 80028b6:	409a      	lsls	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c0:	e022      	b.n	8002908 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6919      	ldr	r1, [r3, #16]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	2207      	movs	r2, #7
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43da      	mvns	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	400a      	ands	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6919      	ldr	r1, [r3, #16]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	4618      	mov	r0, r3
 80028f8:	4603      	mov	r3, r0
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4403      	add	r3, r0
 80028fe:	409a      	lsls	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b06      	cmp	r3, #6
 800290e:	d824      	bhi.n	800295a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	3b05      	subs	r3, #5
 8002922:	221f      	movs	r2, #31
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43da      	mvns	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	400a      	ands	r2, r1
 8002930:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	b29b      	uxth	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b05      	subs	r3, #5
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	635a      	str	r2, [r3, #52]	; 0x34
 8002958:	e04c      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d824      	bhi.n	80029ac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b23      	subs	r3, #35	; 0x23
 8002974:	221f      	movs	r2, #31
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	400a      	ands	r2, r1
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	4618      	mov	r0, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	3b23      	subs	r3, #35	; 0x23
 800299e:	fa00 f203 	lsl.w	r2, r0, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
 80029aa:	e023      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	3b41      	subs	r3, #65	; 0x41
 80029be:	221f      	movs	r2, #31
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43da      	mvns	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	400a      	ands	r2, r1
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b41      	subs	r3, #65	; 0x41
 80029e8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a30      	ldr	r2, [pc, #192]	; (8002abc <HAL_ADC_ConfigChannel+0x29c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10a      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x1f4>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a06:	d105      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a2c      	ldr	r2, [pc, #176]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a12:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a28      	ldr	r2, [pc, #160]	; (8002abc <HAL_ADC_ConfigChannel+0x29c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d10f      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x21e>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b12      	cmp	r3, #18
 8002a24:	d10b      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002a26:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a30:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a32:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a3c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_ADC_ConfigChannel+0x29c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d12b      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x280>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <HAL_ADC_ConfigChannel+0x298>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d003      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x23a>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b11      	cmp	r3, #17
 8002a58:	d122      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a60:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a64:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a70:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_ADC_ConfigChannel+0x298>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d111      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0c9a      	lsrs	r2, r3, #18
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a92:	e002      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f9      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	10000012 	.word	0x10000012
 8002abc:	40012000 	.word	0x40012000
 8002ac0:	40012300 	.word	0x40012300
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	431bde83 	.word	0x431bde83

08002acc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ad4:	4b78      	ldr	r3, [pc, #480]	; (8002cb8 <ADC_Init+0x1ec>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a77      	ldr	r2, [pc, #476]	; (8002cb8 <ADC_Init+0x1ec>)
 8002ada:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ade:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ae0:	4b75      	ldr	r3, [pc, #468]	; (8002cb8 <ADC_Init+0x1ec>)
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4973      	ldr	r1, [pc, #460]	; (8002cb8 <ADC_Init+0x1ec>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002afc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	021a      	lsls	r2, r3, #8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6899      	ldr	r1, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <ADC_Init+0x1f0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d022      	beq.n	8002ba6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6899      	ldr	r1, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	e00f      	b.n	8002bc6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0202 	bic.w	r2, r2, #2
 8002bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6899      	ldr	r1, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	005a      	lsls	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01b      	beq.n	8002c2c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	035a      	lsls	r2, r3, #13
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	e007      	b.n	8002c3c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	051a      	lsls	r2, r3, #20
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6899      	ldr	r1, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c7e:	025a      	lsls	r2, r3, #9
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6899      	ldr	r1, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	029a      	lsls	r2, r3, #10
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40012300 	.word	0x40012300
 8002cbc:	0f000001 	.word	0x0f000001

08002cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <__NVIC_SetPriorityGrouping+0x40>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <__NVIC_SetPriorityGrouping+0x40>)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00
 8002d04:	05fa0000 	.word	0x05fa0000

08002d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <__NVIC_GetPriorityGrouping+0x18>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0307 	and.w	r3, r3, #7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	db0b      	blt.n	8002d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4907      	ldr	r1, [pc, #28]	; (8002d5c <__NVIC_EnableIRQ+0x38>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2001      	movs	r0, #1
 8002d46:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db12      	blt.n	8002d98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	490a      	ldr	r1, [pc, #40]	; (8002da4 <__NVIC_DisableIRQ+0x44>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	3320      	adds	r3, #32
 8002d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d8c:	f3bf 8f4f 	dsb	sy
}
 8002d90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d92:	f3bf 8f6f 	isb	sy
}
 8002d96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff28 	bl	8002cc0 <__NVIC_SetPriorityGrouping>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8a:	f7ff ff3d 	bl	8002d08 <__NVIC_GetPriorityGrouping>
 8002e8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	6978      	ldr	r0, [r7, #20]
 8002e96:	f7ff ffb1 	bl	8002dfc <NVIC_EncodePriority>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff80 	bl	8002da8 <__NVIC_SetPriority>
}
 8002ea8:	bf00      	nop
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff30 	bl	8002d24 <__NVIC_EnableIRQ>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff40 	bl	8002d60 <__NVIC_DisableIRQ>
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e175      	b.n	80031f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f08:	2201      	movs	r2, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	f040 8164 	bne.w	80031ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d005      	beq.n	8002f3e <HAL_GPIO_Init+0x56>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d130      	bne.n	8002fa0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	2203      	movs	r2, #3
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f74:	2201      	movs	r2, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 0201 	and.w	r2, r3, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d017      	beq.n	8002fdc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d123      	bne.n	8003030 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	08da      	lsrs	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3208      	adds	r2, #8
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0203 	and.w	r2, r3, #3
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 80be 	beq.w	80031ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003072:	4b66      	ldr	r3, [pc, #408]	; (800320c <HAL_GPIO_Init+0x324>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	4a65      	ldr	r2, [pc, #404]	; (800320c <HAL_GPIO_Init+0x324>)
 8003078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307c:	6453      	str	r3, [r2, #68]	; 0x44
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_GPIO_Init+0x324>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800308a:	4a61      	ldr	r2, [pc, #388]	; (8003210 <HAL_GPIO_Init+0x328>)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_GPIO_Init+0x32c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d037      	beq.n	8003126 <HAL_GPIO_Init+0x23e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a57      	ldr	r2, [pc, #348]	; (8003218 <HAL_GPIO_Init+0x330>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d031      	beq.n	8003122 <HAL_GPIO_Init+0x23a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a56      	ldr	r2, [pc, #344]	; (800321c <HAL_GPIO_Init+0x334>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d02b      	beq.n	800311e <HAL_GPIO_Init+0x236>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a55      	ldr	r2, [pc, #340]	; (8003220 <HAL_GPIO_Init+0x338>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d025      	beq.n	800311a <HAL_GPIO_Init+0x232>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a54      	ldr	r2, [pc, #336]	; (8003224 <HAL_GPIO_Init+0x33c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01f      	beq.n	8003116 <HAL_GPIO_Init+0x22e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a53      	ldr	r2, [pc, #332]	; (8003228 <HAL_GPIO_Init+0x340>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d019      	beq.n	8003112 <HAL_GPIO_Init+0x22a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a52      	ldr	r2, [pc, #328]	; (800322c <HAL_GPIO_Init+0x344>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_GPIO_Init+0x226>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a51      	ldr	r2, [pc, #324]	; (8003230 <HAL_GPIO_Init+0x348>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00d      	beq.n	800310a <HAL_GPIO_Init+0x222>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <HAL_GPIO_Init+0x34c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <HAL_GPIO_Init+0x21e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4f      	ldr	r2, [pc, #316]	; (8003238 <HAL_GPIO_Init+0x350>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_GPIO_Init+0x21a>
 80030fe:	2309      	movs	r3, #9
 8003100:	e012      	b.n	8003128 <HAL_GPIO_Init+0x240>
 8003102:	230a      	movs	r3, #10
 8003104:	e010      	b.n	8003128 <HAL_GPIO_Init+0x240>
 8003106:	2308      	movs	r3, #8
 8003108:	e00e      	b.n	8003128 <HAL_GPIO_Init+0x240>
 800310a:	2307      	movs	r3, #7
 800310c:	e00c      	b.n	8003128 <HAL_GPIO_Init+0x240>
 800310e:	2306      	movs	r3, #6
 8003110:	e00a      	b.n	8003128 <HAL_GPIO_Init+0x240>
 8003112:	2305      	movs	r3, #5
 8003114:	e008      	b.n	8003128 <HAL_GPIO_Init+0x240>
 8003116:	2304      	movs	r3, #4
 8003118:	e006      	b.n	8003128 <HAL_GPIO_Init+0x240>
 800311a:	2303      	movs	r3, #3
 800311c:	e004      	b.n	8003128 <HAL_GPIO_Init+0x240>
 800311e:	2302      	movs	r3, #2
 8003120:	e002      	b.n	8003128 <HAL_GPIO_Init+0x240>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <HAL_GPIO_Init+0x240>
 8003126:	2300      	movs	r3, #0
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	f002 0203 	and.w	r2, r2, #3
 800312e:	0092      	lsls	r2, r2, #2
 8003130:	4093      	lsls	r3, r2
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003138:	4935      	ldr	r1, [pc, #212]	; (8003210 <HAL_GPIO_Init+0x328>)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3302      	adds	r3, #2
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003146:	4b3d      	ldr	r3, [pc, #244]	; (800323c <HAL_GPIO_Init+0x354>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800316a:	4a34      	ldr	r2, [pc, #208]	; (800323c <HAL_GPIO_Init+0x354>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003170:	4b32      	ldr	r3, [pc, #200]	; (800323c <HAL_GPIO_Init+0x354>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003194:	4a29      	ldr	r2, [pc, #164]	; (800323c <HAL_GPIO_Init+0x354>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800319a:	4b28      	ldr	r3, [pc, #160]	; (800323c <HAL_GPIO_Init+0x354>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031be:	4a1f      	ldr	r2, [pc, #124]	; (800323c <HAL_GPIO_Init+0x354>)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_GPIO_Init+0x354>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_GPIO_Init+0x354>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	f67f ae86 	bls.w	8002f08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3724      	adds	r7, #36	; 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	40013800 	.word	0x40013800
 8003214:	40020000 	.word	0x40020000
 8003218:	40020400 	.word	0x40020400
 800321c:	40020800 	.word	0x40020800
 8003220:	40020c00 	.word	0x40020c00
 8003224:	40021000 	.word	0x40021000
 8003228:	40021400 	.word	0x40021400
 800322c:	40021800 	.word	0x40021800
 8003230:	40021c00 	.word	0x40021c00
 8003234:	40022000 	.word	0x40022000
 8003238:	40022400 	.word	0x40022400
 800323c:	40013c00 	.word	0x40013c00

08003240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
 800324c:	4613      	mov	r3, r2
 800324e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003250:	787b      	ldrb	r3, [r7, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003256:	887a      	ldrh	r2, [r7, #2]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800325c:	e003      	b.n	8003266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	041a      	lsls	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	619a      	str	r2, [r3, #24]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003284:	887a      	ldrh	r2, [r7, #2]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	041a      	lsls	r2, r3, #16
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	43d9      	mvns	r1, r3
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	400b      	ands	r3, r1
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	619a      	str	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d006      	beq.n	80032cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032be:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd f9b0 	bl	800062c <HAL_GPIO_EXTI_Callback>
  }
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40013c00 	.word	0x40013c00

080032d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e07f      	b.n	80033ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe fc6a 	bl	8001bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	; 0x24
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003328:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003338:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	e006      	b.n	8003360 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800335e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d104      	bne.n	8003372 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003370:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_I2C_Init+0x11c>)
 800337e:	430b      	orrs	r3, r1
 8003380:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003390:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69d9      	ldr	r1, [r3, #28]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	02008000 	.word	0x02008000

080033f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	817b      	strh	r3, [r7, #10]
 800340a:	460b      	mov	r3, r1
 800340c:	813b      	strh	r3, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b20      	cmp	r3, #32
 800341c:	f040 80f9 	bne.w	8003612 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_I2C_Mem_Write+0x34>
 8003426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0ed      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Mem_Write+0x4e>
 8003442:	2302      	movs	r3, #2
 8003444:	e0e6      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800344e:	f7ff f973 	bl	8002738 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2319      	movs	r3, #25
 800345a:	2201      	movs	r2, #1
 800345c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fac3 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d1      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2221      	movs	r2, #33	; 0x21
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a3a      	ldr	r2, [r7, #32]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003498:	88f8      	ldrh	r0, [r7, #6]
 800349a:	893a      	ldrh	r2, [r7, #8]
 800349c:	8979      	ldrh	r1, [r7, #10]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4603      	mov	r3, r0
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f9d3 	bl	8003854 <I2C_RequestMemoryWrite>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0a9      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2bff      	cmp	r3, #255	; 0xff
 80034c8:	d90e      	bls.n	80034e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22ff      	movs	r2, #255	; 0xff
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	2300      	movs	r3, #0
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fc1f 	bl	8003d24 <I2C_TransferConfig>
 80034e6:	e00f      	b.n	8003508 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	8979      	ldrh	r1, [r7, #10]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fc0e 	bl	8003d24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 faad 	bl	8003a6c <I2C_WaitOnTXISFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e07b      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d034      	beq.n	80035c0 <HAL_I2C_Mem_Write+0x1c8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d130      	bne.n	80035c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa3f 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e04d      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	2bff      	cmp	r3, #255	; 0xff
 8003580:	d90e      	bls.n	80035a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	22ff      	movs	r2, #255	; 0xff
 8003586:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	b2da      	uxtb	r2, r3
 800358e:	8979      	ldrh	r1, [r7, #10]
 8003590:	2300      	movs	r3, #0
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fbc3 	bl	8003d24 <I2C_TransferConfig>
 800359e:	e00f      	b.n	80035c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	8979      	ldrh	r1, [r7, #10]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fbb2 	bl	8003d24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d19e      	bne.n	8003508 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fa8c 	bl	8003aec <I2C_WaitOnSTOPFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e01a      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2220      	movs	r2, #32
 80035e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_I2C_Mem_Write+0x224>)
 80035f2:	400b      	ands	r3, r1
 80035f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	fe00e800 	.word	0xfe00e800

08003620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b20      	cmp	r3, #32
 8003644:	f040 80fd 	bne.w	8003842 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_I2C_Mem_Read+0x34>
 800364e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0f1      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_I2C_Mem_Read+0x4e>
 800366a:	2302      	movs	r3, #2
 800366c:	e0ea      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003676:	f7ff f85f 	bl	8002738 <HAL_GetTick>
 800367a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2319      	movs	r3, #25
 8003682:	2201      	movs	r2, #1
 8003684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f9af 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0d5      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2222      	movs	r2, #34	; 0x22
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036c0:	88f8      	ldrh	r0, [r7, #6]
 80036c2:	893a      	ldrh	r2, [r7, #8]
 80036c4:	8979      	ldrh	r1, [r7, #10]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4603      	mov	r3, r0
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f913 	bl	80038fc <I2C_RequestMemoryRead>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0ad      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2bff      	cmp	r3, #255	; 0xff
 80036f0:	d90e      	bls.n	8003710 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	8979      	ldrh	r1, [r7, #10]
 8003700:	4b52      	ldr	r3, [pc, #328]	; (800384c <HAL_I2C_Mem_Read+0x22c>)
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fb0b 	bl	8003d24 <I2C_TransferConfig>
 800370e:	e00f      	b.n	8003730 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	b2da      	uxtb	r2, r3
 8003720:	8979      	ldrh	r1, [r7, #10]
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_I2C_Mem_Read+0x22c>)
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fafa 	bl	8003d24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	2200      	movs	r2, #0
 8003738:	2104      	movs	r1, #4
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f956 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07c      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d034      	beq.n	80037f0 <HAL_I2C_Mem_Read+0x1d0>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d130      	bne.n	80037f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	2200      	movs	r2, #0
 8003796:	2180      	movs	r1, #128	; 0x80
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f927 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e04d      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2bff      	cmp	r3, #255	; 0xff
 80037b0:	d90e      	bls.n	80037d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	22ff      	movs	r2, #255	; 0xff
 80037b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	8979      	ldrh	r1, [r7, #10]
 80037c0:	2300      	movs	r3, #0
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 faab 	bl	8003d24 <I2C_TransferConfig>
 80037ce:	e00f      	b.n	80037f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	8979      	ldrh	r1, [r7, #10]
 80037e2:	2300      	movs	r3, #0
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fa9a 	bl	8003d24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d19a      	bne.n	8003730 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f974 	bl	8003aec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e01a      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2220      	movs	r2, #32
 8003814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_I2C_Mem_Read+0x230>)
 8003822:	400b      	ands	r3, r1
 8003824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003842:	2302      	movs	r3, #2
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	80002400 	.word	0x80002400
 8003850:	fe00e800 	.word	0xfe00e800

08003854 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	460b      	mov	r3, r1
 8003868:	813b      	strh	r3, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	8979      	ldrh	r1, [r7, #10]
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <I2C_RequestMemoryWrite+0xa4>)
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fa51 	bl	8003d24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	69b9      	ldr	r1, [r7, #24]
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f8f0 	bl	8003a6c <I2C_WaitOnTXISFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e02c      	b.n	80038f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800389c:	893b      	ldrh	r3, [r7, #8]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	629a      	str	r2, [r3, #40]	; 0x28
 80038a6:	e015      	b.n	80038d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038a8:	893b      	ldrh	r3, [r7, #8]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f8d6 	bl	8003a6c <I2C_WaitOnTXISFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e012      	b.n	80038f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038ca:	893b      	ldrh	r3, [r7, #8]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2200      	movs	r2, #0
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f884 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	80002000 	.word	0x80002000

080038fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	461a      	mov	r2, r3
 800390a:	4603      	mov	r3, r0
 800390c:	817b      	strh	r3, [r7, #10]
 800390e:	460b      	mov	r3, r1
 8003910:	813b      	strh	r3, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	8979      	ldrh	r1, [r7, #10]
 800391c:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <I2C_RequestMemoryRead+0xa4>)
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	2300      	movs	r3, #0
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f9fe 	bl	8003d24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	69b9      	ldr	r1, [r7, #24]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f89d 	bl	8003a6c <I2C_WaitOnTXISFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e02c      	b.n	8003996 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003942:	893b      	ldrh	r3, [r7, #8]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
 800394c:	e015      	b.n	800397a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800394e:	893b      	ldrh	r3, [r7, #8]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	b29b      	uxth	r3, r3
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	69b9      	ldr	r1, [r7, #24]
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f883 	bl	8003a6c <I2C_WaitOnTXISFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e012      	b.n	8003996 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003970:	893b      	ldrh	r3, [r7, #8]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2200      	movs	r2, #0
 8003982:	2140      	movs	r1, #64	; 0x40
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f831 	bl	80039ec <I2C_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	80002000 	.word	0x80002000

080039a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d103      	bne.n	80039c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d007      	beq.n	80039e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	619a      	str	r2, [r3, #24]
  }
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039fc:	e022      	b.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d01e      	beq.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a06:	f7fe fe97 	bl	8002738 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d302      	bcc.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d113      	bne.n	8003a44 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	f043 0220 	orr.w	r2, r3, #32
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e00f      	b.n	8003a64 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d0cd      	beq.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a78:	e02c      	b.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f870 	bl	8003b64 <I2C_IsErrorOccurred>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e02a      	b.n	8003ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d01e      	beq.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fe fe4f 	bl	8002738 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d113      	bne.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	f043 0220 	orr.w	r2, r3, #32
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e007      	b.n	8003ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d1cb      	bne.n	8003a7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af8:	e028      	b.n	8003b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f830 	bl	8003b64 <I2C_IsErrorOccurred>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e026      	b.n	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe fe13 	bl	8002738 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d113      	bne.n	8003b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	f043 0220 	orr.w	r2, r3, #32
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e007      	b.n	8003b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d1cf      	bne.n	8003afa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d068      	beq.n	8003c62 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2210      	movs	r2, #16
 8003b96:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b98:	e049      	b.n	8003c2e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d045      	beq.n	8003c2e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fe fdc9 	bl	8002738 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_IsErrorOccurred+0x54>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d13a      	bne.n	8003c2e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bda:	d121      	bne.n	8003c20 <I2C_IsErrorOccurred+0xbc>
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003be2:	d01d      	beq.n	8003c20 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d01a      	beq.n	8003c20 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bf8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bfa:	f7fe fd9d 	bl	8002738 <HAL_GetTick>
 8003bfe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c00:	e00e      	b.n	8003c20 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c02:	f7fe fd99 	bl	8002738 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b19      	cmp	r3, #25
 8003c0e:	d907      	bls.n	8003c20 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	f043 0320 	orr.w	r3, r3, #32
 8003c16:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003c1e:	e006      	b.n	8003c2e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d1e9      	bne.n	8003c02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d003      	beq.n	8003c44 <I2C_IsErrorOccurred+0xe0>
 8003c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0aa      	beq.n	8003b9a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2220      	movs	r2, #32
 8003c52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	f043 0304 	orr.w	r3, r3, #4
 8003c5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ca6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	f043 0302 	orr.w	r3, r3, #2
 8003cbe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01c      	beq.n	8003d12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff fe63 	bl	80039a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <I2C_IsErrorOccurred+0x1bc>)
 8003cea:	400b      	ands	r3, r1
 8003cec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3728      	adds	r7, #40	; 0x28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	fe00e800 	.word	0xfe00e800

08003d24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	817b      	strh	r3, [r7, #10]
 8003d32:	4613      	mov	r3, r2
 8003d34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d36:	897b      	ldrh	r3, [r7, #10]
 8003d38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d3c:	7a7b      	ldrb	r3, [r7, #9]
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	0d5b      	lsrs	r3, r3, #21
 8003d5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <I2C_TransferConfig+0x60>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	43db      	mvns	r3, r3
 8003d68:	ea02 0103 	and.w	r1, r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	03ff63ff 	.word	0x03ff63ff

08003d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d138      	bne.n	8003e10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e032      	b.n	8003e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d139      	bne.n	8003ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e033      	b.n	8003eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2224      	movs	r2, #36	; 0x24
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	021b      	lsls	r3, r3, #8
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec6:	6013      	str	r3, [r2, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40007000 	.word	0x40007000

08003ed8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eec:	6413      	str	r3, [r2, #64]	; 0x40
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f06:	f7fe fc17 	bl	8002738 <HAL_GetTick>
 8003f0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f0c:	e009      	b.n	8003f22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f0e:	f7fe fc13 	bl	8002738 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f1c:	d901      	bls.n	8003f22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e022      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2e:	d1ee      	bne.n	8003f0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f3c:	f7fe fbfc 	bl	8002738 <HAL_GetTick>
 8003f40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f42:	e009      	b.n	8003f58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f44:	f7fe fbf8 	bl	8002738 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f52:	d901      	bls.n	8003f58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e007      	b.n	8003f68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f64:	d1ee      	bne.n	8003f44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40007000 	.word	0x40007000

08003f78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f80:	2300      	movs	r3, #0
 8003f82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e29b      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8087 	beq.w	80040aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f9c:	4b96      	ldr	r3, [pc, #600]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa8:	4b93      	ldr	r3, [pc, #588]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d112      	bne.n	8003fda <HAL_RCC_OscConfig+0x62>
 8003fb4:	4b90      	ldr	r3, [pc, #576]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc0:	d10b      	bne.n	8003fda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc2:	4b8d      	ldr	r3, [pc, #564]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d06c      	beq.n	80040a8 <HAL_RCC_OscConfig+0x130>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d168      	bne.n	80040a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e275      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x7a>
 8003fe4:	4b84      	ldr	r3, [pc, #528]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a83      	ldr	r2, [pc, #524]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e02e      	b.n	8004050 <HAL_RCC_OscConfig+0xd8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x9c>
 8003ffa:	4b7f      	ldr	r3, [pc, #508]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7e      	ldr	r2, [pc, #504]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b7c      	ldr	r3, [pc, #496]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7b      	ldr	r2, [pc, #492]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 800400c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e01d      	b.n	8004050 <HAL_RCC_OscConfig+0xd8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800401c:	d10c      	bne.n	8004038 <HAL_RCC_OscConfig+0xc0>
 800401e:	4b76      	ldr	r3, [pc, #472]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a75      	ldr	r2, [pc, #468]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4b73      	ldr	r3, [pc, #460]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a72      	ldr	r2, [pc, #456]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e00b      	b.n	8004050 <HAL_RCC_OscConfig+0xd8>
 8004038:	4b6f      	ldr	r3, [pc, #444]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a6e      	ldr	r2, [pc, #440]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 800403e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b6c      	ldr	r3, [pc, #432]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a6b      	ldr	r2, [pc, #428]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 800404a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fe fb6e 	bl	8002738 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004060:	f7fe fb6a 	bl	8002738 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e229      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	4b61      	ldr	r3, [pc, #388]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0xe8>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fe fb5a 	bl	8002738 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7fe fb56 	bl	8002738 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e215      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	4b57      	ldr	r3, [pc, #348]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x110>
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d069      	beq.n	800418a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040b6:	4b50      	ldr	r3, [pc, #320]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c2:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d11c      	bne.n	8004108 <HAL_RCC_OscConfig+0x190>
 80040ce:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d116      	bne.n	8004108 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_RCC_OscConfig+0x17a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e1e9      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	493d      	ldr	r1, [pc, #244]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	e040      	b.n	800418a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d023      	beq.n	8004158 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004110:	4b39      	ldr	r3, [pc, #228]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a38      	ldr	r2, [pc, #224]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fe fb0c 	bl	8002738 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004124:	f7fe fb08 	bl	8002738 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e1c7      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4929      	ldr	r1, [pc, #164]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
 8004156:	e018      	b.n	800418a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004158:	4b27      	ldr	r3, [pc, #156]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a26      	ldr	r2, [pc, #152]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe fae8 	bl	8002738 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416c:	f7fe fae4 	bl	8002738 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e1a3      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d038      	beq.n	8004208 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d019      	beq.n	80041d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419e:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80041a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a2:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fe fac5 	bl	8002738 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b2:	f7fe fac1 	bl	8002738 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e180      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80041c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x23a>
 80041d0:	e01a      	b.n	8004208 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80041d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d6:	4a08      	ldr	r2, [pc, #32]	; (80041f8 <HAL_RCC_OscConfig+0x280>)
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fe faab 	bl	8002738 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e6:	f7fe faa7 	bl	8002738 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d903      	bls.n	80041fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e166      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
 80041f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fc:	4b92      	ldr	r3, [pc, #584]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80041fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ee      	bne.n	80041e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80a4 	beq.w	800435e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004216:	4b8c      	ldr	r3, [pc, #560]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10d      	bne.n	800423e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	4b89      	ldr	r3, [pc, #548]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	4a88      	ldr	r2, [pc, #544]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422c:	6413      	str	r3, [r2, #64]	; 0x40
 800422e:	4b86      	ldr	r3, [pc, #536]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423e:	4b83      	ldr	r3, [pc, #524]	; (800444c <HAL_RCC_OscConfig+0x4d4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d118      	bne.n	800427c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800424a:	4b80      	ldr	r3, [pc, #512]	; (800444c <HAL_RCC_OscConfig+0x4d4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7f      	ldr	r2, [pc, #508]	; (800444c <HAL_RCC_OscConfig+0x4d4>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004256:	f7fe fa6f 	bl	8002738 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425e:	f7fe fa6b 	bl	8002738 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b64      	cmp	r3, #100	; 0x64
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e12a      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004270:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x4d4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x31a>
 8004284:	4b70      	ldr	r3, [pc, #448]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a6f      	ldr	r2, [pc, #444]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
 8004290:	e02d      	b.n	80042ee <HAL_RCC_OscConfig+0x376>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x33c>
 800429a:	4b6b      	ldr	r3, [pc, #428]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	4a6a      	ldr	r2, [pc, #424]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	6713      	str	r3, [r2, #112]	; 0x70
 80042a6:	4b68      	ldr	r3, [pc, #416]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a67      	ldr	r2, [pc, #412]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042ac:	f023 0304 	bic.w	r3, r3, #4
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	e01c      	b.n	80042ee <HAL_RCC_OscConfig+0x376>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b05      	cmp	r3, #5
 80042ba:	d10c      	bne.n	80042d6 <HAL_RCC_OscConfig+0x35e>
 80042bc:	4b62      	ldr	r3, [pc, #392]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	4a61      	ldr	r2, [pc, #388]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	6713      	str	r3, [r2, #112]	; 0x70
 80042c8:	4b5f      	ldr	r3, [pc, #380]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a5e      	ldr	r2, [pc, #376]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	e00b      	b.n	80042ee <HAL_RCC_OscConfig+0x376>
 80042d6:	4b5c      	ldr	r3, [pc, #368]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a5b      	ldr	r2, [pc, #364]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70
 80042e2:	4b59      	ldr	r3, [pc, #356]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a58      	ldr	r2, [pc, #352]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80042e8:	f023 0304 	bic.w	r3, r3, #4
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d015      	beq.n	8004322 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f6:	f7fe fa1f 	bl	8002738 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fe fa1b 	bl	8002738 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	; 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e0d8      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004314:	4b4c      	ldr	r3, [pc, #304]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ee      	beq.n	80042fe <HAL_RCC_OscConfig+0x386>
 8004320:	e014      	b.n	800434c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f7fe fa09 	bl	8002738 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004328:	e00a      	b.n	8004340 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fe fa05 	bl	8002738 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	; 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e0c2      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004340:	4b41      	ldr	r3, [pc, #260]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ee      	bne.n	800432a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d105      	bne.n	800435e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004352:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	4a3c      	ldr	r2, [pc, #240]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80ae 	beq.w	80044c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004368:	4b37      	ldr	r3, [pc, #220]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	d06d      	beq.n	8004450 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d14b      	bne.n	8004414 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a31      	ldr	r2, [pc, #196]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fe f9d6 	bl	8002738 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004390:	f7fe f9d2 	bl	8002738 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e091      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	4b29      	ldr	r3, [pc, #164]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	3b01      	subs	r3, #1
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	071b      	lsls	r3, r3, #28
 80043da:	491b      	ldr	r1, [pc, #108]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e0:	4b19      	ldr	r3, [pc, #100]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 80043e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fe f9a4 	bl	8002738 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fe f9a0 	bl	8002738 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e05f      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x47c>
 8004412:	e057      	b.n	80044c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0b      	ldr	r2, [pc, #44]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 800441a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800441e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fe f98a 	bl	8002738 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fe f986 	bl	8002738 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e045      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_RCC_OscConfig+0x4d0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x4b0>
 8004446:	e03d      	b.n	80044c4 <HAL_RCC_OscConfig+0x54c>
 8004448:	40023800 	.word	0x40023800
 800444c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004450:	4b1f      	ldr	r3, [pc, #124]	; (80044d0 <HAL_RCC_OscConfig+0x558>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d030      	beq.n	80044c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d129      	bne.n	80044c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d122      	bne.n	80044c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004480:	4013      	ands	r3, r2
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004486:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004488:	4293      	cmp	r3, r2
 800448a:	d119      	bne.n	80044c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	3b01      	subs	r3, #1
 800449a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d10f      	bne.n	80044c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800

080044d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0d0      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044ec:	4b6a      	ldr	r3, [pc, #424]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d910      	bls.n	800451c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fa:	4b67      	ldr	r3, [pc, #412]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 020f 	bic.w	r2, r3, #15
 8004502:	4965      	ldr	r1, [pc, #404]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b63      	ldr	r3, [pc, #396]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0b8      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d020      	beq.n	800456a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004534:	4b59      	ldr	r3, [pc, #356]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a58      	ldr	r2, [pc, #352]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 800453a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800453e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800454c:	4b53      	ldr	r3, [pc, #332]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a52      	ldr	r2, [pc, #328]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004556:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004558:	4b50      	ldr	r3, [pc, #320]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	494d      	ldr	r1, [pc, #308]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d040      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	4b47      	ldr	r3, [pc, #284]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d115      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e07f      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004596:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e073      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06b      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045b6:	4b39      	ldr	r3, [pc, #228]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f023 0203 	bic.w	r2, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4936      	ldr	r1, [pc, #216]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c8:	f7fe f8b6 	bl	8002738 <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ce:	e00a      	b.n	80045e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d0:	f7fe f8b2 	bl	8002738 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	; 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e053      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	4b2d      	ldr	r3, [pc, #180]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 020c 	and.w	r2, r3, #12
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d1eb      	bne.n	80045d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f8:	4b27      	ldr	r3, [pc, #156]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d210      	bcs.n	8004628 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 020f 	bic.w	r2, r3, #15
 800460e:	4922      	ldr	r1, [pc, #136]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b20      	ldr	r3, [pc, #128]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d001      	beq.n	8004628 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e032      	b.n	800468e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004634:	4b19      	ldr	r3, [pc, #100]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4916      	ldr	r1, [pc, #88]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	490e      	ldr	r1, [pc, #56]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004662:	4313      	orrs	r3, r2
 8004664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004666:	f000 f821 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 800466a:	4602      	mov	r2, r0
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	490a      	ldr	r1, [pc, #40]	; (80046a0 <HAL_RCC_ClockConfig+0x1cc>)
 8004678:	5ccb      	ldrb	r3, [r1, r3]
 800467a:	fa22 f303 	lsr.w	r3, r2, r3
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <HAL_RCC_ClockConfig+0x1d4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fd ff1e 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40023c00 	.word	0x40023c00
 800469c:	40023800 	.word	0x40023800
 80046a0:	0800c304 	.word	0x0800c304
 80046a4:	20000004 	.word	0x20000004
 80046a8:	20000008 	.word	0x20000008

080046ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b0:	b094      	sub	sp, #80	; 0x50
 80046b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	647b      	str	r3, [r7, #68]	; 0x44
 80046b8:	2300      	movs	r3, #0
 80046ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046bc:	2300      	movs	r3, #0
 80046be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c4:	4b79      	ldr	r3, [pc, #484]	; (80048ac <HAL_RCC_GetSysClockFreq+0x200>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d00d      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x40>
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	f200 80e1 	bhi.w	8004898 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x34>
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d003      	beq.n	80046e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046de:	e0db      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e0:	4b73      	ldr	r3, [pc, #460]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046e4:	e0db      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e6:	4b73      	ldr	r3, [pc, #460]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80046e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046ea:	e0d8      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ec:	4b6f      	ldr	r3, [pc, #444]	; (80048ac <HAL_RCC_GetSysClockFreq+0x200>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046f6:	4b6d      	ldr	r3, [pc, #436]	; (80048ac <HAL_RCC_GetSysClockFreq+0x200>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d063      	beq.n	80047ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004702:	4b6a      	ldr	r3, [pc, #424]	; (80048ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	2200      	movs	r2, #0
 800470a:	63bb      	str	r3, [r7, #56]	; 0x38
 800470c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004714:	633b      	str	r3, [r7, #48]	; 0x30
 8004716:	2300      	movs	r3, #0
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
 800471a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800471e:	4622      	mov	r2, r4
 8004720:	462b      	mov	r3, r5
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f04f 0100 	mov.w	r1, #0
 800472a:	0159      	lsls	r1, r3, #5
 800472c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004730:	0150      	lsls	r0, r2, #5
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4621      	mov	r1, r4
 8004738:	1a51      	subs	r1, r2, r1
 800473a:	6139      	str	r1, [r7, #16]
 800473c:	4629      	mov	r1, r5
 800473e:	eb63 0301 	sbc.w	r3, r3, r1
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004750:	4659      	mov	r1, fp
 8004752:	018b      	lsls	r3, r1, #6
 8004754:	4651      	mov	r1, sl
 8004756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800475a:	4651      	mov	r1, sl
 800475c:	018a      	lsls	r2, r1, #6
 800475e:	4651      	mov	r1, sl
 8004760:	ebb2 0801 	subs.w	r8, r2, r1
 8004764:	4659      	mov	r1, fp
 8004766:	eb63 0901 	sbc.w	r9, r3, r1
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800477a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800477e:	4690      	mov	r8, r2
 8004780:	4699      	mov	r9, r3
 8004782:	4623      	mov	r3, r4
 8004784:	eb18 0303 	adds.w	r3, r8, r3
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	462b      	mov	r3, r5
 800478c:	eb49 0303 	adc.w	r3, r9, r3
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800479e:	4629      	mov	r1, r5
 80047a0:	024b      	lsls	r3, r1, #9
 80047a2:	4621      	mov	r1, r4
 80047a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047a8:	4621      	mov	r1, r4
 80047aa:	024a      	lsls	r2, r1, #9
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b2:	2200      	movs	r2, #0
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047bc:	f7fb fd98 	bl	80002f0 <__aeabi_uldivmod>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4613      	mov	r3, r2
 80047c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c8:	e058      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ca:	4b38      	ldr	r3, [pc, #224]	; (80048ac <HAL_RCC_GetSysClockFreq+0x200>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	099b      	lsrs	r3, r3, #6
 80047d0:	2200      	movs	r2, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	4611      	mov	r1, r2
 80047d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047da:	623b      	str	r3, [r7, #32]
 80047dc:	2300      	movs	r3, #0
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
 80047e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	f04f 0100 	mov.w	r1, #0
 80047f0:	0159      	lsls	r1, r3, #5
 80047f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f6:	0150      	lsls	r0, r2, #5
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4641      	mov	r1, r8
 80047fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004802:	4649      	mov	r1, r9
 8004804:	eb63 0b01 	sbc.w	fp, r3, r1
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004814:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004818:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800481c:	ebb2 040a 	subs.w	r4, r2, sl
 8004820:	eb63 050b 	sbc.w	r5, r3, fp
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	00eb      	lsls	r3, r5, #3
 800482e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004832:	00e2      	lsls	r2, r4, #3
 8004834:	4614      	mov	r4, r2
 8004836:	461d      	mov	r5, r3
 8004838:	4643      	mov	r3, r8
 800483a:	18e3      	adds	r3, r4, r3
 800483c:	603b      	str	r3, [r7, #0]
 800483e:	464b      	mov	r3, r9
 8004840:	eb45 0303 	adc.w	r3, r5, r3
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004852:	4629      	mov	r1, r5
 8004854:	028b      	lsls	r3, r1, #10
 8004856:	4621      	mov	r1, r4
 8004858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800485c:	4621      	mov	r1, r4
 800485e:	028a      	lsls	r2, r1, #10
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004866:	2200      	movs	r2, #0
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	61fa      	str	r2, [r7, #28]
 800486c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004870:	f7fb fd3e 	bl	80002f0 <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4613      	mov	r3, r2
 800487a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_GetSysClockFreq+0x200>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	3301      	adds	r3, #1
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800488c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800488e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004896:	e002      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800489a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800489c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3750      	adds	r7, #80	; 0x50
 80048a4:	46bd      	mov	sp, r7
 80048a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	007a1200 	.word	0x007a1200

080048b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <HAL_RCC_GetHCLKFreq+0x14>)
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000004 	.word	0x20000004

080048d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048d4:	f7ff fff0 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	0a9b      	lsrs	r3, r3, #10
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4903      	ldr	r1, [pc, #12]	; (80048f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e6:	5ccb      	ldrb	r3, [r1, r3]
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40023800 	.word	0x40023800
 80048f4:	0800c314 	.word	0x0800c314

080048f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048fc:	f7ff ffdc 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 8004900:	4602      	mov	r2, r0
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0b5b      	lsrs	r3, r3, #13
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4903      	ldr	r1, [pc, #12]	; (800491c <HAL_RCC_GetPCLK2Freq+0x24>)
 800490e:	5ccb      	ldrb	r3, [r1, r3]
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	0800c314 	.word	0x0800c314

08004920 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	220f      	movs	r2, #15
 800492e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <HAL_RCC_GetClockConfig+0x5c>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0203 	and.w	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <HAL_RCC_GetClockConfig+0x5c>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <HAL_RCC_GetClockConfig+0x5c>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCC_GetClockConfig+0x5c>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	08db      	lsrs	r3, r3, #3
 800495a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004962:	4b07      	ldr	r3, [pc, #28]	; (8004980 <HAL_RCC_GetClockConfig+0x60>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 020f 	and.w	r2, r3, #15
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	601a      	str	r2, [r3, #0]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800
 8004980:	40023c00 	.word	0x40023c00

08004984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d012      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049ac:	4b69      	ldr	r3, [pc, #420]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a68      	ldr	r2, [pc, #416]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049b6:	6093      	str	r3, [r2, #8]
 80049b8:	4b66      	ldr	r3, [pc, #408]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	4964      	ldr	r1, [pc, #400]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d017      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049de:	4b5d      	ldr	r3, [pc, #372]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ec:	4959      	ldr	r1, [pc, #356]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049fc:	d101      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d017      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a1a:	4b4e      	ldr	r3, [pc, #312]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	494a      	ldr	r1, [pc, #296]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a38:	d101      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 808b 	beq.w	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a68:	4b3a      	ldr	r3, [pc, #232]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	4a39      	ldr	r2, [pc, #228]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a72:	6413      	str	r3, [r2, #64]	; 0x40
 8004a74:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a80:	4b35      	ldr	r3, [pc, #212]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a34      	ldr	r2, [pc, #208]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fd fe54 	bl	8002738 <HAL_GetTick>
 8004a90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a94:	f7fd fe50 	bl	8002738 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e38f      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ab2:	4b28      	ldr	r3, [pc, #160]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d035      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d02e      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ad0:	4b20      	ldr	r3, [pc, #128]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ada:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	4a1d      	ldr	r2, [pc, #116]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	4a1a      	ldr	r2, [pc, #104]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004af8:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d114      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fd fe18 	bl	8002738 <HAL_GetTick>
 8004b08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b0c:	f7fd fe14 	bl	8002738 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e351      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0ee      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b3a:	d111      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b48:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b4a:	400b      	ands	r3, r1
 8004b4c:	4901      	ldr	r1, [pc, #4]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
 8004b52:	e00b      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40007000 	.word	0x40007000
 8004b5c:	0ffffcff 	.word	0x0ffffcff
 8004b60:	4bac      	ldr	r3, [pc, #688]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4aab      	ldr	r2, [pc, #684]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b6a:	6093      	str	r3, [r2, #8]
 8004b6c:	4ba9      	ldr	r3, [pc, #676]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	49a6      	ldr	r1, [pc, #664]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d010      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b8a:	4ba2      	ldr	r3, [pc, #648]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b90:	4aa0      	ldr	r2, [pc, #640]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b9a:	4b9e      	ldr	r3, [pc, #632]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	499b      	ldr	r1, [pc, #620]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bb8:	4b96      	ldr	r3, [pc, #600]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc6:	4993      	ldr	r1, [pc, #588]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bda:	4b8e      	ldr	r3, [pc, #568]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be8:	498a      	ldr	r1, [pc, #552]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bfc:	4b85      	ldr	r3, [pc, #532]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0a:	4982      	ldr	r1, [pc, #520]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c1e:	4b7d      	ldr	r3, [pc, #500]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	4979      	ldr	r1, [pc, #484]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c40:	4b74      	ldr	r3, [pc, #464]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	f023 0203 	bic.w	r2, r3, #3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	4971      	ldr	r1, [pc, #452]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c62:	4b6c      	ldr	r3, [pc, #432]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	f023 020c 	bic.w	r2, r3, #12
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c70:	4968      	ldr	r1, [pc, #416]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c84:	4b63      	ldr	r3, [pc, #396]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	4960      	ldr	r1, [pc, #384]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ca6:	4b5b      	ldr	r3, [pc, #364]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb4:	4957      	ldr	r1, [pc, #348]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cc8:	4b52      	ldr	r3, [pc, #328]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd6:	494f      	ldr	r1, [pc, #316]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cea:	4b4a      	ldr	r3, [pc, #296]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf8:	4946      	ldr	r1, [pc, #280]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d0c:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1a:	493e      	ldr	r1, [pc, #248]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d2e:	4b39      	ldr	r3, [pc, #228]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3c:	4935      	ldr	r1, [pc, #212]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d50:	4b30      	ldr	r3, [pc, #192]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5e:	492d      	ldr	r1, [pc, #180]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d011      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d72:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d80:	4924      	ldr	r1, [pc, #144]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d90:	d101      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d92:	2301      	movs	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004db2:	4b18      	ldr	r3, [pc, #96]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc0:	4914      	ldr	r1, [pc, #80]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00b      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de4:	490b      	ldr	r1, [pc, #44]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00f      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e08:	4902      	ldr	r1, [pc, #8]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e10:	e002      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004e12:	bf00      	nop
 8004e14:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00b      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e24:	4b8a      	ldr	r3, [pc, #552]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	4986      	ldr	r1, [pc, #536]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00b      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e48:	4b81      	ldr	r3, [pc, #516]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e58:	497d      	ldr	r1, [pc, #500]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d006      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 80d6 	beq.w	8005020 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e74:	4b76      	ldr	r3, [pc, #472]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a75      	ldr	r2, [pc, #468]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e80:	f7fd fc5a 	bl	8002738 <HAL_GetTick>
 8004e84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e88:	f7fd fc56 	bl	8002738 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e195      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e9a:	4b6d      	ldr	r3, [pc, #436]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d021      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d11d      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004eba:	4b65      	ldr	r3, [pc, #404]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec0:	0c1b      	lsrs	r3, r3, #16
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ec8:	4b61      	ldr	r3, [pc, #388]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ece:	0e1b      	lsrs	r3, r3, #24
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	019a      	lsls	r2, r3, #6
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	071b      	lsls	r3, r3, #28
 8004eee:	4958      	ldr	r1, [pc, #352]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0a:	d00a      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d02e      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f20:	d129      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f22:	4b4b      	ldr	r3, [pc, #300]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f30:	4b47      	ldr	r3, [pc, #284]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f36:	0f1b      	lsrs	r3, r3, #28
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	019a      	lsls	r2, r3, #6
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	431a      	orrs	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	071b      	lsls	r3, r3, #28
 8004f56:	493e      	ldr	r1, [pc, #248]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f5e:	4b3c      	ldr	r3, [pc, #240]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f64:	f023 021f 	bic.w	r2, r3, #31
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4938      	ldr	r1, [pc, #224]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01d      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f82:	4b33      	ldr	r3, [pc, #204]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f88:	0e1b      	lsrs	r3, r3, #24
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f90:	4b2f      	ldr	r3, [pc, #188]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f96:	0f1b      	lsrs	r3, r3, #28
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	019a      	lsls	r2, r3, #6
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	431a      	orrs	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	071b      	lsls	r3, r3, #28
 8004fb6:	4926      	ldr	r1, [pc, #152]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d011      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	019a      	lsls	r2, r3, #6
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	061b      	lsls	r3, r3, #24
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	071b      	lsls	r3, r3, #28
 8004fe6:	491a      	ldr	r1, [pc, #104]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fee:	4b18      	ldr	r3, [pc, #96]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a17      	ldr	r2, [pc, #92]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffa:	f7fd fb9d 	bl	8002738 <HAL_GetTick>
 8004ffe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005002:	f7fd fb99 	bl	8002738 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b64      	cmp	r3, #100	; 0x64
 800500e:	d901      	bls.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e0d8      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005014:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b01      	cmp	r3, #1
 8005024:	f040 80ce 	bne.w	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a08      	ldr	r2, [pc, #32]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800502e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005034:	f7fd fb80 	bl	8002738 <HAL_GetTick>
 8005038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800503a:	e00b      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800503c:	f7fd fb7c 	bl	8002738 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d904      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e0bb      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005054:	4b5e      	ldr	r3, [pc, #376]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800505c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005060:	d0ec      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800507e:	2b00      	cmp	r3, #0
 8005080:	d02e      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d12a      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800508a:	4b51      	ldr	r3, [pc, #324]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005098:	4b4d      	ldr	r3, [pc, #308]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	0f1b      	lsrs	r3, r3, #28
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	019a      	lsls	r2, r3, #6
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	061b      	lsls	r3, r3, #24
 80050b8:	431a      	orrs	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	071b      	lsls	r3, r3, #28
 80050be:	4944      	ldr	r1, [pc, #272]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050c6:	4b42      	ldr	r3, [pc, #264]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	3b01      	subs	r3, #1
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	493d      	ldr	r1, [pc, #244]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d022      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f4:	d11d      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050f6:	4b36      	ldr	r3, [pc, #216]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	0e1b      	lsrs	r3, r3, #24
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005104:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	0f1b      	lsrs	r3, r3, #28
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	019a      	lsls	r2, r3, #6
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	431a      	orrs	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	061b      	lsls	r3, r3, #24
 8005124:	431a      	orrs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	071b      	lsls	r3, r3, #28
 800512a:	4929      	ldr	r1, [pc, #164]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d028      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800513e:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	0e1b      	lsrs	r3, r3, #24
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800514c:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	019a      	lsls	r2, r3, #6
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	041b      	lsls	r3, r3, #16
 8005164:	431a      	orrs	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	061b      	lsls	r3, r3, #24
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	071b      	lsls	r3, r3, #28
 8005172:	4917      	ldr	r1, [pc, #92]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800517a:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800517c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	4911      	ldr	r1, [pc, #68]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a0e      	ldr	r2, [pc, #56]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519c:	f7fd facc 	bl	8002738 <HAL_GetTick>
 80051a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051a4:	f7fd fac8 	bl	8002738 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	; 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e007      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051b6:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c2:	d1ef      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800

080051d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e09d      	b.n	8005322 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d108      	bne.n	8005200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051f6:	d009      	beq.n	800520c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	61da      	str	r2, [r3, #28]
 80051fe:	e005      	b.n	800520c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc fd7e 	bl	8001d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005242:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800524c:	d902      	bls.n	8005254 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e002      	b.n	800525a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005258:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005262:	d007      	beq.n	8005274 <HAL_SPI_Init+0xa0>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800526c:	d002      	beq.n	8005274 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b6:	ea42 0103 	orr.w	r1, r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	0c1b      	lsrs	r3, r3, #16
 80052d0:	f003 0204 	and.w	r2, r3, #4
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052f0:	ea42 0103 	orr.w	r1, r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69da      	ldr	r2, [r3, #28]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005310:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e049      	b.n	80053d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7fc fd69 	bl	8001e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4610      	mov	r0, r2
 800536a:	f000 fdd7 	bl	8005f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d001      	beq.n	80053f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e054      	b.n	800549a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d022      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x80>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d01d      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x80>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a22      	ldr	r2, [pc, #136]	; (80054ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d018      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x80>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d013      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x80>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00e      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x80>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d009      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x80>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <HAL_TIM_Base_Start_IT+0xe4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d004      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0x80>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d115      	bne.n	8005484 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <HAL_TIM_Base_Start_IT+0xec>)
 8005460:	4013      	ands	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b06      	cmp	r3, #6
 8005468:	d015      	beq.n	8005496 <HAL_TIM_Base_Start_IT+0xbe>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005470:	d011      	beq.n	8005496 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005482:	e008      	b.n	8005496 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	e000      	b.n	8005498 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40000c00 	.word	0x40000c00
 80054b8:	40010400 	.word	0x40010400
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40001800 	.word	0x40001800
 80054c4:	00010007 	.word	0x00010007

080054c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e049      	b.n	800556e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f841 	bl	8005576 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f000 fd08 	bl	8005f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e049      	b.n	8005630 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f841 	bl	8005638 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f000 fca7 	bl	8005f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e08f      	b.n	8005780 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7fc fc55 	bl	8001f24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6899      	ldr	r1, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b3e      	ldr	r3, [pc, #248]	; (8005788 <HAL_TIM_Encoder_Init+0x13c>)
 800568e:	400b      	ands	r3, r1
 8005690:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3304      	adds	r3, #4
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f000 fc3d 	bl	8005f1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4b31      	ldr	r3, [pc, #196]	; (800578c <HAL_TIM_Encoder_Init+0x140>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	4313      	orrs	r3, r2
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4b2b      	ldr	r3, [pc, #172]	; (8005790 <HAL_TIM_Encoder_Init+0x144>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <HAL_TIM_Encoder_Init+0x148>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	4313      	orrs	r3, r2
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	011a      	lsls	r2, r3, #4
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	031b      	lsls	r3, r3, #12
 800570c:	4313      	orrs	r3, r2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	4313      	orrs	r3, r2
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	fffebff8 	.word	0xfffebff8
 800578c:	fffffcfc 	.word	0xfffffcfc
 8005790:	fffff3f3 	.word	0xfffff3f3
 8005794:	ffff0f0f 	.word	0xffff0f0f

08005798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d122      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d11b      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0202 	mvn.w	r2, #2
 80057c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fb80 	bl	8005ee0 <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fb72 	bl	8005ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fb83 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d122      	bne.n	8005848 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d11b      	bne.n	8005848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0204 	mvn.w	r2, #4
 8005818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fb56 	bl	8005ee0 <HAL_TIM_IC_CaptureCallback>
 8005834:	e005      	b.n	8005842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fb48 	bl	8005ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fb59 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b08      	cmp	r3, #8
 8005854:	d122      	bne.n	800589c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b08      	cmp	r3, #8
 8005862:	d11b      	bne.n	800589c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0208 	mvn.w	r2, #8
 800586c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2204      	movs	r2, #4
 8005872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fb2c 	bl	8005ee0 <HAL_TIM_IC_CaptureCallback>
 8005888:	e005      	b.n	8005896 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fb1e 	bl	8005ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fb2f 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b10      	cmp	r3, #16
 80058a8:	d122      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d11b      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0210 	mvn.w	r2, #16
 80058c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2208      	movs	r2, #8
 80058c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fb02 	bl	8005ee0 <HAL_TIM_IC_CaptureCallback>
 80058dc:	e005      	b.n	80058ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 faf4 	bl	8005ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fb05 	bl	8005ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d10e      	bne.n	800591c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d107      	bne.n	800591c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0201 	mvn.w	r2, #1
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fc f8de 	bl	8001ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b80      	cmp	r3, #128	; 0x80
 8005928:	d10e      	bne.n	8005948 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005934:	2b80      	cmp	r3, #128	; 0x80
 8005936:	d107      	bne.n	8005948 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f8c2 	bl	8006acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005956:	d10e      	bne.n	8005976 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005962:	2b80      	cmp	r3, #128	; 0x80
 8005964:	d107      	bne.n	8005976 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800596e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 f8b5 	bl	8006ae0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d10e      	bne.n	80059a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d107      	bne.n	80059a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800599a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fab3 	bl	8005f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d10e      	bne.n	80059ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d107      	bne.n	80059ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f06f 0220 	mvn.w	r2, #32
 80059c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f875 	bl	8006ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b086      	sub	sp, #24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e088      	b.n	8005b06 <HAL_TIM_IC_ConfigChannel+0x130>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11b      	bne.n	8005a3a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f000 fd81 	bl	8006518 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699a      	ldr	r2, [r3, #24]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 020c 	bic.w	r2, r2, #12
 8005a24:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6999      	ldr	r1, [r3, #24]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	619a      	str	r2, [r3, #24]
 8005a38:	e060      	b.n	8005afc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d11c      	bne.n	8005a7a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6819      	ldr	r1, [r3, #0]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f000 fe05 	bl	800665e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a62:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6999      	ldr	r1, [r3, #24]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	021a      	lsls	r2, r3, #8
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	619a      	str	r2, [r3, #24]
 8005a78:	e040      	b.n	8005afc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6819      	ldr	r1, [r3, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f000 fe52 	bl	8006738 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 020c 	bic.w	r2, r2, #12
 8005aa2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69d9      	ldr	r1, [r3, #28]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	61da      	str	r2, [r3, #28]
 8005ab6:	e021      	b.n	8005afc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b0c      	cmp	r3, #12
 8005abc:	d11c      	bne.n	8005af8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	6819      	ldr	r1, [r3, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f000 fe6f 	bl	80067b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ae0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69d9      	ldr	r1, [r3, #28]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	021a      	lsls	r2, r3, #8
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	61da      	str	r2, [r3, #28]
 8005af6:	e001      	b.n	8005afc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e0ff      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b14      	cmp	r3, #20
 8005b3a:	f200 80f0 	bhi.w	8005d1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b3e:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005d1f 	.word	0x08005d1f
 8005b4c:	08005d1f 	.word	0x08005d1f
 8005b50:	08005d1f 	.word	0x08005d1f
 8005b54:	08005bd9 	.word	0x08005bd9
 8005b58:	08005d1f 	.word	0x08005d1f
 8005b5c:	08005d1f 	.word	0x08005d1f
 8005b60:	08005d1f 	.word	0x08005d1f
 8005b64:	08005c1b 	.word	0x08005c1b
 8005b68:	08005d1f 	.word	0x08005d1f
 8005b6c:	08005d1f 	.word	0x08005d1f
 8005b70:	08005d1f 	.word	0x08005d1f
 8005b74:	08005c5b 	.word	0x08005c5b
 8005b78:	08005d1f 	.word	0x08005d1f
 8005b7c:	08005d1f 	.word	0x08005d1f
 8005b80:	08005d1f 	.word	0x08005d1f
 8005b84:	08005c9d 	.word	0x08005c9d
 8005b88:	08005d1f 	.word	0x08005d1f
 8005b8c:	08005d1f 	.word	0x08005d1f
 8005b90:	08005d1f 	.word	0x08005d1f
 8005b94:	08005cdd 	.word	0x08005cdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fa5c 	bl	800605c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0208 	orr.w	r2, r2, #8
 8005bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0204 	bic.w	r2, r2, #4
 8005bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6999      	ldr	r1, [r3, #24]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	619a      	str	r2, [r3, #24]
      break;
 8005bd6:	e0a5      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 faae 	bl	8006140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6999      	ldr	r1, [r3, #24]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	021a      	lsls	r2, r3, #8
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	619a      	str	r2, [r3, #24]
      break;
 8005c18:	e084      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fb05 	bl	8006230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69da      	ldr	r2, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0208 	orr.w	r2, r2, #8
 8005c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0204 	bic.w	r2, r2, #4
 8005c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69d9      	ldr	r1, [r3, #28]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	61da      	str	r2, [r3, #28]
      break;
 8005c58:	e064      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fb5b 	bl	800631c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69d9      	ldr	r1, [r3, #28]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	021a      	lsls	r2, r3, #8
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	61da      	str	r2, [r3, #28]
      break;
 8005c9a:	e043      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fb92 	bl	80063cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0208 	orr.w	r2, r2, #8
 8005cb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0204 	bic.w	r2, r2, #4
 8005cc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cda:	e023      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fbc4 	bl	8006470 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	021a      	lsls	r2, r3, #8
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d1c:	e002      	b.n	8005d24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	75fb      	strb	r3, [r7, #23]
      break;
 8005d22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop

08005d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_TIM_ConfigClockSource+0x1c>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e0b4      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x186>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	4b56      	ldr	r3, [pc, #344]	; (8005ec8 <HAL_TIM_ConfigClockSource+0x190>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8c:	d03e      	beq.n	8005e0c <HAL_TIM_ConfigClockSource+0xd4>
 8005d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d92:	f200 8087 	bhi.w	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9a:	f000 8086 	beq.w	8005eaa <HAL_TIM_ConfigClockSource+0x172>
 8005d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da2:	d87f      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b70      	cmp	r3, #112	; 0x70
 8005da6:	d01a      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0xa6>
 8005da8:	2b70      	cmp	r3, #112	; 0x70
 8005daa:	d87b      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b60      	cmp	r3, #96	; 0x60
 8005dae:	d050      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x11a>
 8005db0:	2b60      	cmp	r3, #96	; 0x60
 8005db2:	d877      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b50      	cmp	r3, #80	; 0x50
 8005db6:	d03c      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0xfa>
 8005db8:	2b50      	cmp	r3, #80	; 0x50
 8005dba:	d873      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d058      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x13a>
 8005dc0:	2b40      	cmp	r3, #64	; 0x40
 8005dc2:	d86f      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d064      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc8:	2b30      	cmp	r3, #48	; 0x30
 8005dca:	d86b      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d060      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d867      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d05c      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d05a      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ddc:	e062      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6899      	ldr	r1, [r3, #8]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f000 fd37 	bl	8006860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	609a      	str	r2, [r3, #8]
      break;
 8005e0a:	e04f      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	6899      	ldr	r1, [r3, #8]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f000 fd20 	bl	8006860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e2e:	609a      	str	r2, [r3, #8]
      break;
 8005e30:	e03c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6859      	ldr	r1, [r3, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f000 fbde 	bl	8006600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2150      	movs	r1, #80	; 0x50
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fced 	bl	800682a <TIM_ITRx_SetConfig>
      break;
 8005e50:	e02c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6859      	ldr	r1, [r3, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f000 fc3a 	bl	80066d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2160      	movs	r1, #96	; 0x60
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fcdd 	bl	800682a <TIM_ITRx_SetConfig>
      break;
 8005e70:	e01c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6859      	ldr	r1, [r3, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f000 fbbe 	bl	8006600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2140      	movs	r1, #64	; 0x40
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fccd 	bl	800682a <TIM_ITRx_SetConfig>
      break;
 8005e90:	e00c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f000 fcc4 	bl	800682a <TIM_ITRx_SetConfig>
      break;
 8005ea2:	e003      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea8:	e000      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	fffeff88 	.word	0xfffeff88

08005ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a40      	ldr	r2, [pc, #256]	; (8006030 <TIM_Base_SetConfig+0x114>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <TIM_Base_SetConfig+0x40>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3a:	d00f      	beq.n	8005f5c <TIM_Base_SetConfig+0x40>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a3d      	ldr	r2, [pc, #244]	; (8006034 <TIM_Base_SetConfig+0x118>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00b      	beq.n	8005f5c <TIM_Base_SetConfig+0x40>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a3c      	ldr	r2, [pc, #240]	; (8006038 <TIM_Base_SetConfig+0x11c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d007      	beq.n	8005f5c <TIM_Base_SetConfig+0x40>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a3b      	ldr	r2, [pc, #236]	; (800603c <TIM_Base_SetConfig+0x120>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_Base_SetConfig+0x40>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a3a      	ldr	r2, [pc, #232]	; (8006040 <TIM_Base_SetConfig+0x124>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d108      	bne.n	8005f6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a2f      	ldr	r2, [pc, #188]	; (8006030 <TIM_Base_SetConfig+0x114>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d02b      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7c:	d027      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a2c      	ldr	r2, [pc, #176]	; (8006034 <TIM_Base_SetConfig+0x118>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d023      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a2b      	ldr	r2, [pc, #172]	; (8006038 <TIM_Base_SetConfig+0x11c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d01f      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a2a      	ldr	r2, [pc, #168]	; (800603c <TIM_Base_SetConfig+0x120>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01b      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a29      	ldr	r2, [pc, #164]	; (8006040 <TIM_Base_SetConfig+0x124>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d017      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a28      	ldr	r2, [pc, #160]	; (8006044 <TIM_Base_SetConfig+0x128>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d013      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a27      	ldr	r2, [pc, #156]	; (8006048 <TIM_Base_SetConfig+0x12c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00f      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a26      	ldr	r2, [pc, #152]	; (800604c <TIM_Base_SetConfig+0x130>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00b      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a25      	ldr	r2, [pc, #148]	; (8006050 <TIM_Base_SetConfig+0x134>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d007      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a24      	ldr	r2, [pc, #144]	; (8006054 <TIM_Base_SetConfig+0x138>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_Base_SetConfig+0xb2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a23      	ldr	r2, [pc, #140]	; (8006058 <TIM_Base_SetConfig+0x13c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d108      	bne.n	8005fe0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a0a      	ldr	r2, [pc, #40]	; (8006030 <TIM_Base_SetConfig+0x114>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d003      	beq.n	8006014 <TIM_Base_SetConfig+0xf8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a0c      	ldr	r2, [pc, #48]	; (8006040 <TIM_Base_SetConfig+0x124>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d103      	bne.n	800601c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	615a      	str	r2, [r3, #20]
}
 8006022:	bf00      	nop
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40010000 	.word	0x40010000
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40010400 	.word	0x40010400
 8006044:	40014000 	.word	0x40014000
 8006048:	40014400 	.word	0x40014400
 800604c:	40014800 	.word	0x40014800
 8006050:	40001800 	.word	0x40001800
 8006054:	40001c00 	.word	0x40001c00
 8006058:	40002000 	.word	0x40002000

0800605c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f023 0201 	bic.w	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4b2b      	ldr	r3, [pc, #172]	; (8006134 <TIM_OC1_SetConfig+0xd8>)
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 0302 	bic.w	r3, r3, #2
 80060a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a21      	ldr	r2, [pc, #132]	; (8006138 <TIM_OC1_SetConfig+0xdc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_OC1_SetConfig+0x64>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a20      	ldr	r2, [pc, #128]	; (800613c <TIM_OC1_SetConfig+0xe0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10c      	bne.n	80060da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0308 	bic.w	r3, r3, #8
 80060c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f023 0304 	bic.w	r3, r3, #4
 80060d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a16      	ldr	r2, [pc, #88]	; (8006138 <TIM_OC1_SetConfig+0xdc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d003      	beq.n	80060ea <TIM_OC1_SetConfig+0x8e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a15      	ldr	r2, [pc, #84]	; (800613c <TIM_OC1_SetConfig+0xe0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d111      	bne.n	800610e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	621a      	str	r2, [r3, #32]
}
 8006128:	bf00      	nop
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	fffeff8f 	.word	0xfffeff8f
 8006138:	40010000 	.word	0x40010000
 800613c:	40010400 	.word	0x40010400

08006140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0210 	bic.w	r2, r3, #16
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4b2e      	ldr	r3, [pc, #184]	; (8006224 <TIM_OC2_SetConfig+0xe4>)
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	021b      	lsls	r3, r3, #8
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f023 0320 	bic.w	r3, r3, #32
 800618a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a23      	ldr	r2, [pc, #140]	; (8006228 <TIM_OC2_SetConfig+0xe8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_OC2_SetConfig+0x68>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a22      	ldr	r2, [pc, #136]	; (800622c <TIM_OC2_SetConfig+0xec>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d10d      	bne.n	80061c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a18      	ldr	r2, [pc, #96]	; (8006228 <TIM_OC2_SetConfig+0xe8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC2_SetConfig+0x94>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a17      	ldr	r2, [pc, #92]	; (800622c <TIM_OC2_SetConfig+0xec>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d113      	bne.n	80061fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	feff8fff 	.word	0xfeff8fff
 8006228:	40010000 	.word	0x40010000
 800622c:	40010400 	.word	0x40010400

08006230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <TIM_OC3_SetConfig+0xe0>)
 800625c:	4013      	ands	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a22      	ldr	r2, [pc, #136]	; (8006314 <TIM_OC3_SetConfig+0xe4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_OC3_SetConfig+0x66>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a21      	ldr	r2, [pc, #132]	; (8006318 <TIM_OC3_SetConfig+0xe8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d10d      	bne.n	80062b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800629c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a17      	ldr	r2, [pc, #92]	; (8006314 <TIM_OC3_SetConfig+0xe4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_OC3_SetConfig+0x92>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a16      	ldr	r2, [pc, #88]	; (8006318 <TIM_OC3_SetConfig+0xe8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d113      	bne.n	80062ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	621a      	str	r2, [r3, #32]
}
 8006304:	bf00      	nop
 8006306:	371c      	adds	r7, #28
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	fffeff8f 	.word	0xfffeff8f
 8006314:	40010000 	.word	0x40010000
 8006318:	40010400 	.word	0x40010400

0800631c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <TIM_OC4_SetConfig+0xa4>)
 8006348:	4013      	ands	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <TIM_OC4_SetConfig+0xa8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_OC4_SetConfig+0x68>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a12      	ldr	r2, [pc, #72]	; (80063c8 <TIM_OC4_SetConfig+0xac>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d109      	bne.n	8006398 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	019b      	lsls	r3, r3, #6
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	feff8fff 	.word	0xfeff8fff
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40010400 	.word	0x40010400

080063cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <TIM_OC5_SetConfig+0x98>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800640c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a12      	ldr	r2, [pc, #72]	; (8006468 <TIM_OC5_SetConfig+0x9c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_OC5_SetConfig+0x5e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a11      	ldr	r2, [pc, #68]	; (800646c <TIM_OC5_SetConfig+0xa0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d109      	bne.n	800643e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006430:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	621a      	str	r2, [r3, #32]
}
 8006458:	bf00      	nop
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	fffeff8f 	.word	0xfffeff8f
 8006468:	40010000 	.word	0x40010000
 800646c:	40010400 	.word	0x40010400

08006470 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4b1c      	ldr	r3, [pc, #112]	; (800650c <TIM_OC6_SetConfig+0x9c>)
 800649c:	4013      	ands	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	051b      	lsls	r3, r3, #20
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <TIM_OC6_SetConfig+0xa0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_OC6_SetConfig+0x60>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a12      	ldr	r2, [pc, #72]	; (8006514 <TIM_OC6_SetConfig+0xa4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d109      	bne.n	80064e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	621a      	str	r2, [r3, #32]
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	feff8fff 	.word	0xfeff8fff
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400

08006518 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f023 0201 	bic.w	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a28      	ldr	r2, [pc, #160]	; (80065e4 <TIM_TI1_SetConfig+0xcc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01b      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654c:	d017      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a25      	ldr	r2, [pc, #148]	; (80065e8 <TIM_TI1_SetConfig+0xd0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a24      	ldr	r2, [pc, #144]	; (80065ec <TIM_TI1_SetConfig+0xd4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a23      	ldr	r2, [pc, #140]	; (80065f0 <TIM_TI1_SetConfig+0xd8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00b      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <TIM_TI1_SetConfig+0xdc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a21      	ldr	r2, [pc, #132]	; (80065f8 <TIM_TI1_SetConfig+0xe0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_TI1_SetConfig+0x66>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4a20      	ldr	r2, [pc, #128]	; (80065fc <TIM_TI1_SetConfig+0xe4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d101      	bne.n	8006582 <TIM_TI1_SetConfig+0x6a>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <TIM_TI1_SetConfig+0x6c>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e003      	b.n	80065a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f023 030a 	bic.w	r3, r3, #10
 80065bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f003 030a 	and.w	r3, r3, #10
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40010000 	.word	0x40010000
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40000800 	.word	0x40000800
 80065f0:	40000c00 	.word	0x40000c00
 80065f4:	40010400 	.word	0x40010400
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40001800 	.word	0x40001800

08006600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800662a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f023 030a 	bic.w	r3, r3, #10
 800663c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
 800666a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	f023 0210 	bic.w	r2, r3, #16
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800669c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	031b      	lsls	r3, r3, #12
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	4313      	orrs	r3, r2
 80066be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f023 0210 	bic.w	r2, r3, #16
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006702:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	031b      	lsls	r3, r3, #12
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006714:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	621a      	str	r2, [r3, #32]
}
 800672c:	bf00      	nop
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 0303 	bic.w	r3, r3, #3
 8006764:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006774:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	b2db      	uxtb	r3, r3
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006788:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	621a      	str	r2, [r3, #32]
}
 80067a4:	bf00      	nop
 80067a6:	371c      	adds	r7, #28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	021b      	lsls	r3, r3, #8
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	031b      	lsls	r3, r3, #12
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006802:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	031b      	lsls	r3, r3, #12
 8006808:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	f043 0307 	orr.w	r3, r3, #7
 800684c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	609a      	str	r2, [r3, #8]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800687a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	021a      	lsls	r2, r3, #8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	431a      	orrs	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4313      	orrs	r3, r2
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	609a      	str	r2, [r3, #8]
}
 8006894:	bf00      	nop
 8006896:	371c      	adds	r7, #28
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e06d      	b.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a30      	ldr	r2, [pc, #192]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d004      	beq.n	80068ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2f      	ldr	r2, [pc, #188]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d108      	bne.n	80068fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006904:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a20      	ldr	r2, [pc, #128]	; (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d022      	beq.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692a:	d01d      	beq.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d018      	beq.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d013      	beq.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1a      	ldr	r2, [pc, #104]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00e      	beq.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d009      	beq.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a16      	ldr	r2, [pc, #88]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d004      	beq.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d10c      	bne.n	8006982 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800696e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40010400 	.word	0x40010400
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800
 80069b0:	40000c00 	.word	0x40000c00
 80069b4:	40014000 	.word	0x40014000
 80069b8:	40001800 	.word	0x40001800

080069bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e065      	b.n	8006aa4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	041b      	lsls	r3, r3, #16
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d115      	bne.n	8006a92 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	051b      	lsls	r3, r3, #20
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40010400 	.word	0x40010400

08006ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e040      	b.n	8006b88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fb fb22 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2224      	movs	r2, #36	; 0x24
 8006b20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f82c 	bl	8006b90 <UART_SetConfig>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e022      	b.n	8006b88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa84 	bl	8007058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fb0b 	bl	800719c <UART_CheckIdleState>
 8006b86:	4603      	mov	r3, r0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4ba6      	ldr	r3, [pc, #664]	; (8006e54 <UART_SetConfig+0x2c4>)
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	6979      	ldr	r1, [r7, #20]
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a94      	ldr	r2, [pc, #592]	; (8006e58 <UART_SetConfig+0x2c8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d120      	bne.n	8006c4e <UART_SetConfig+0xbe>
 8006c0c:	4b93      	ldr	r3, [pc, #588]	; (8006e5c <UART_SetConfig+0x2cc>)
 8006c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d816      	bhi.n	8006c48 <UART_SetConfig+0xb8>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <UART_SetConfig+0x90>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c31 	.word	0x08006c31
 8006c24:	08006c3d 	.word	0x08006c3d
 8006c28:	08006c37 	.word	0x08006c37
 8006c2c:	08006c43 	.word	0x08006c43
 8006c30:	2301      	movs	r3, #1
 8006c32:	77fb      	strb	r3, [r7, #31]
 8006c34:	e150      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c36:	2302      	movs	r3, #2
 8006c38:	77fb      	strb	r3, [r7, #31]
 8006c3a:	e14d      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c3c:	2304      	movs	r3, #4
 8006c3e:	77fb      	strb	r3, [r7, #31]
 8006c40:	e14a      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c42:	2308      	movs	r3, #8
 8006c44:	77fb      	strb	r3, [r7, #31]
 8006c46:	e147      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e144      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a83      	ldr	r2, [pc, #524]	; (8006e60 <UART_SetConfig+0x2d0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d132      	bne.n	8006cbe <UART_SetConfig+0x12e>
 8006c58:	4b80      	ldr	r3, [pc, #512]	; (8006e5c <UART_SetConfig+0x2cc>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5e:	f003 030c 	and.w	r3, r3, #12
 8006c62:	2b0c      	cmp	r3, #12
 8006c64:	d828      	bhi.n	8006cb8 <UART_SetConfig+0x128>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <UART_SetConfig+0xdc>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006ca1 	.word	0x08006ca1
 8006c70:	08006cb9 	.word	0x08006cb9
 8006c74:	08006cb9 	.word	0x08006cb9
 8006c78:	08006cb9 	.word	0x08006cb9
 8006c7c:	08006cad 	.word	0x08006cad
 8006c80:	08006cb9 	.word	0x08006cb9
 8006c84:	08006cb9 	.word	0x08006cb9
 8006c88:	08006cb9 	.word	0x08006cb9
 8006c8c:	08006ca7 	.word	0x08006ca7
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006cb9 	.word	0x08006cb9
 8006c9c:	08006cb3 	.word	0x08006cb3
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e118      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	77fb      	strb	r3, [r7, #31]
 8006caa:	e115      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cac:	2304      	movs	r3, #4
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e112      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	77fb      	strb	r3, [r7, #31]
 8006cb6:	e10f      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cb8:	2310      	movs	r3, #16
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e10c      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a68      	ldr	r2, [pc, #416]	; (8006e64 <UART_SetConfig+0x2d4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d120      	bne.n	8006d0a <UART_SetConfig+0x17a>
 8006cc8:	4b64      	ldr	r3, [pc, #400]	; (8006e5c <UART_SetConfig+0x2cc>)
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cd2:	2b30      	cmp	r3, #48	; 0x30
 8006cd4:	d013      	beq.n	8006cfe <UART_SetConfig+0x16e>
 8006cd6:	2b30      	cmp	r3, #48	; 0x30
 8006cd8:	d814      	bhi.n	8006d04 <UART_SetConfig+0x174>
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d009      	beq.n	8006cf2 <UART_SetConfig+0x162>
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d810      	bhi.n	8006d04 <UART_SetConfig+0x174>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <UART_SetConfig+0x15c>
 8006ce6:	2b10      	cmp	r3, #16
 8006ce8:	d006      	beq.n	8006cf8 <UART_SetConfig+0x168>
 8006cea:	e00b      	b.n	8006d04 <UART_SetConfig+0x174>
 8006cec:	2300      	movs	r3, #0
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e0f2      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e0ef      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cf8:	2304      	movs	r3, #4
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e0ec      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006cfe:	2308      	movs	r3, #8
 8006d00:	77fb      	strb	r3, [r7, #31]
 8006d02:	e0e9      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d04:	2310      	movs	r3, #16
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e0e6      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a56      	ldr	r2, [pc, #344]	; (8006e68 <UART_SetConfig+0x2d8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d120      	bne.n	8006d56 <UART_SetConfig+0x1c6>
 8006d14:	4b51      	ldr	r3, [pc, #324]	; (8006e5c <UART_SetConfig+0x2cc>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d20:	d013      	beq.n	8006d4a <UART_SetConfig+0x1ba>
 8006d22:	2bc0      	cmp	r3, #192	; 0xc0
 8006d24:	d814      	bhi.n	8006d50 <UART_SetConfig+0x1c0>
 8006d26:	2b80      	cmp	r3, #128	; 0x80
 8006d28:	d009      	beq.n	8006d3e <UART_SetConfig+0x1ae>
 8006d2a:	2b80      	cmp	r3, #128	; 0x80
 8006d2c:	d810      	bhi.n	8006d50 <UART_SetConfig+0x1c0>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <UART_SetConfig+0x1a8>
 8006d32:	2b40      	cmp	r3, #64	; 0x40
 8006d34:	d006      	beq.n	8006d44 <UART_SetConfig+0x1b4>
 8006d36:	e00b      	b.n	8006d50 <UART_SetConfig+0x1c0>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e0cc      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e0c9      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d44:	2304      	movs	r3, #4
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e0c6      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d4a:	2308      	movs	r3, #8
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e0c3      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d50:	2310      	movs	r3, #16
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e0c0      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a44      	ldr	r2, [pc, #272]	; (8006e6c <UART_SetConfig+0x2dc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d125      	bne.n	8006dac <UART_SetConfig+0x21c>
 8006d60:	4b3e      	ldr	r3, [pc, #248]	; (8006e5c <UART_SetConfig+0x2cc>)
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d6e:	d017      	beq.n	8006da0 <UART_SetConfig+0x210>
 8006d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d74:	d817      	bhi.n	8006da6 <UART_SetConfig+0x216>
 8006d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d7a:	d00b      	beq.n	8006d94 <UART_SetConfig+0x204>
 8006d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d80:	d811      	bhi.n	8006da6 <UART_SetConfig+0x216>
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <UART_SetConfig+0x1fe>
 8006d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d8a:	d006      	beq.n	8006d9a <UART_SetConfig+0x20a>
 8006d8c:	e00b      	b.n	8006da6 <UART_SetConfig+0x216>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e0a1      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d94:	2302      	movs	r3, #2
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e09e      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006d9a:	2304      	movs	r3, #4
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e09b      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006da0:	2308      	movs	r3, #8
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e098      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006da6:	2310      	movs	r3, #16
 8006da8:	77fb      	strb	r3, [r7, #31]
 8006daa:	e095      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a2f      	ldr	r2, [pc, #188]	; (8006e70 <UART_SetConfig+0x2e0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d125      	bne.n	8006e02 <UART_SetConfig+0x272>
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <UART_SetConfig+0x2cc>)
 8006db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc4:	d017      	beq.n	8006df6 <UART_SetConfig+0x266>
 8006dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dca:	d817      	bhi.n	8006dfc <UART_SetConfig+0x26c>
 8006dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd0:	d00b      	beq.n	8006dea <UART_SetConfig+0x25a>
 8006dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd6:	d811      	bhi.n	8006dfc <UART_SetConfig+0x26c>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <UART_SetConfig+0x254>
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de0:	d006      	beq.n	8006df0 <UART_SetConfig+0x260>
 8006de2:	e00b      	b.n	8006dfc <UART_SetConfig+0x26c>
 8006de4:	2301      	movs	r3, #1
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e076      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006dea:	2302      	movs	r3, #2
 8006dec:	77fb      	strb	r3, [r7, #31]
 8006dee:	e073      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006df0:	2304      	movs	r3, #4
 8006df2:	77fb      	strb	r3, [r7, #31]
 8006df4:	e070      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006df6:	2308      	movs	r3, #8
 8006df8:	77fb      	strb	r3, [r7, #31]
 8006dfa:	e06d      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e06a      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1b      	ldr	r2, [pc, #108]	; (8006e74 <UART_SetConfig+0x2e4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d138      	bne.n	8006e7e <UART_SetConfig+0x2ee>
 8006e0c:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <UART_SetConfig+0x2cc>)
 8006e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e1a:	d017      	beq.n	8006e4c <UART_SetConfig+0x2bc>
 8006e1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e20:	d82a      	bhi.n	8006e78 <UART_SetConfig+0x2e8>
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e26:	d00b      	beq.n	8006e40 <UART_SetConfig+0x2b0>
 8006e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2c:	d824      	bhi.n	8006e78 <UART_SetConfig+0x2e8>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <UART_SetConfig+0x2aa>
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e36:	d006      	beq.n	8006e46 <UART_SetConfig+0x2b6>
 8006e38:	e01e      	b.n	8006e78 <UART_SetConfig+0x2e8>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e04b      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e40:	2302      	movs	r3, #2
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e048      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e46:	2304      	movs	r3, #4
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e045      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e042      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e52:	bf00      	nop
 8006e54:	efff69f3 	.word	0xefff69f3
 8006e58:	40011000 	.word	0x40011000
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	40004400 	.word	0x40004400
 8006e64:	40004800 	.word	0x40004800
 8006e68:	40004c00 	.word	0x40004c00
 8006e6c:	40005000 	.word	0x40005000
 8006e70:	40011400 	.word	0x40011400
 8006e74:	40007800 	.word	0x40007800
 8006e78:	2310      	movs	r3, #16
 8006e7a:	77fb      	strb	r3, [r7, #31]
 8006e7c:	e02c      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a72      	ldr	r2, [pc, #456]	; (800704c <UART_SetConfig+0x4bc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d125      	bne.n	8006ed4 <UART_SetConfig+0x344>
 8006e88:	4b71      	ldr	r3, [pc, #452]	; (8007050 <UART_SetConfig+0x4c0>)
 8006e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e96:	d017      	beq.n	8006ec8 <UART_SetConfig+0x338>
 8006e98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e9c:	d817      	bhi.n	8006ece <UART_SetConfig+0x33e>
 8006e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea2:	d00b      	beq.n	8006ebc <UART_SetConfig+0x32c>
 8006ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea8:	d811      	bhi.n	8006ece <UART_SetConfig+0x33e>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <UART_SetConfig+0x326>
 8006eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb2:	d006      	beq.n	8006ec2 <UART_SetConfig+0x332>
 8006eb4:	e00b      	b.n	8006ece <UART_SetConfig+0x33e>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	77fb      	strb	r3, [r7, #31]
 8006eba:	e00d      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	e00a      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ec2:	2304      	movs	r3, #4
 8006ec4:	77fb      	strb	r3, [r7, #31]
 8006ec6:	e007      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	e004      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ece:	2310      	movs	r3, #16
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e001      	b.n	8006ed8 <UART_SetConfig+0x348>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee0:	d15b      	bne.n	8006f9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ee2:	7ffb      	ldrb	r3, [r7, #31]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d828      	bhi.n	8006f3a <UART_SetConfig+0x3aa>
 8006ee8:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0x360>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f15 	.word	0x08006f15
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f25 	.word	0x08006f25
 8006efc:	08006f3b 	.word	0x08006f3b
 8006f00:	08006f2b 	.word	0x08006f2b
 8006f04:	08006f3b 	.word	0x08006f3b
 8006f08:	08006f3b 	.word	0x08006f3b
 8006f0c:	08006f3b 	.word	0x08006f3b
 8006f10:	08006f33 	.word	0x08006f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f14:	f7fd fcdc 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 8006f18:	61b8      	str	r0, [r7, #24]
        break;
 8006f1a:	e013      	b.n	8006f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f1c:	f7fd fcec 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 8006f20:	61b8      	str	r0, [r7, #24]
        break;
 8006f22:	e00f      	b.n	8006f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f24:	4b4b      	ldr	r3, [pc, #300]	; (8007054 <UART_SetConfig+0x4c4>)
 8006f26:	61bb      	str	r3, [r7, #24]
        break;
 8006f28:	e00c      	b.n	8006f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2a:	f7fd fbbf 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 8006f2e:	61b8      	str	r0, [r7, #24]
        break;
 8006f30:	e008      	b.n	8006f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f36:	61bb      	str	r3, [r7, #24]
        break;
 8006f38:	e004      	b.n	8006f44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	77bb      	strb	r3, [r7, #30]
        break;
 8006f42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d074      	beq.n	8007034 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	005a      	lsls	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	441a      	add	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2b0f      	cmp	r3, #15
 8006f64:	d916      	bls.n	8006f94 <UART_SetConfig+0x404>
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6c:	d212      	bcs.n	8006f94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f023 030f 	bic.w	r3, r3, #15
 8006f76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	89fb      	ldrh	r3, [r7, #14]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	89fa      	ldrh	r2, [r7, #14]
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	e04f      	b.n	8007034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	77bb      	strb	r3, [r7, #30]
 8006f98:	e04c      	b.n	8007034 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f9a:	7ffb      	ldrb	r3, [r7, #31]
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d828      	bhi.n	8006ff2 <UART_SetConfig+0x462>
 8006fa0:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x418>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fcd 	.word	0x08006fcd
 8006fac:	08006fd5 	.word	0x08006fd5
 8006fb0:	08006fdd 	.word	0x08006fdd
 8006fb4:	08006ff3 	.word	0x08006ff3
 8006fb8:	08006fe3 	.word	0x08006fe3
 8006fbc:	08006ff3 	.word	0x08006ff3
 8006fc0:	08006ff3 	.word	0x08006ff3
 8006fc4:	08006ff3 	.word	0x08006ff3
 8006fc8:	08006feb 	.word	0x08006feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fcc:	f7fd fc80 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 8006fd0:	61b8      	str	r0, [r7, #24]
        break;
 8006fd2:	e013      	b.n	8006ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd4:	f7fd fc90 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 8006fd8:	61b8      	str	r0, [r7, #24]
        break;
 8006fda:	e00f      	b.n	8006ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fdc:	4b1d      	ldr	r3, [pc, #116]	; (8007054 <UART_SetConfig+0x4c4>)
 8006fde:	61bb      	str	r3, [r7, #24]
        break;
 8006fe0:	e00c      	b.n	8006ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe2:	f7fd fb63 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 8006fe6:	61b8      	str	r0, [r7, #24]
        break;
 8006fe8:	e008      	b.n	8006ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fee:	61bb      	str	r3, [r7, #24]
        break;
 8006ff0:	e004      	b.n	8006ffc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	77bb      	strb	r3, [r7, #30]
        break;
 8006ffa:	bf00      	nop
    }

    if (pclk != 0U)
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d018      	beq.n	8007034 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	085a      	lsrs	r2, r3, #1
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	441a      	add	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	fbb2 f3f3 	udiv	r3, r2, r3
 8007014:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b0f      	cmp	r3, #15
 800701a:	d909      	bls.n	8007030 <UART_SetConfig+0x4a0>
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007022:	d205      	bcs.n	8007030 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60da      	str	r2, [r3, #12]
 800702e:	e001      	b.n	8007034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007040:	7fbb      	ldrb	r3, [r7, #30]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40007c00 	.word	0x40007c00
 8007050:	40023800 	.word	0x40023800
 8007054:	00f42400 	.word	0x00f42400

08007058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01a      	beq.n	800716e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007156:	d10a      	bne.n	800716e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071ac:	f7fb fac4 	bl	8002738 <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d10e      	bne.n	80071de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f831 	bl	8007236 <UART_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e027      	b.n	800722e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d10e      	bne.n	800720a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f81b 	bl	8007236 <UART_WaitOnFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e011      	b.n	800722e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b09c      	sub	sp, #112	; 0x70
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007246:	e0a7      	b.n	8007398 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	f000 80a3 	beq.w	8007398 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007252:	f7fb fa71 	bl	8002738 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <UART_WaitOnFlagUntilTimeout+0x32>
 8007262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007264:	2b00      	cmp	r3, #0
 8007266:	d13f      	bne.n	80072e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800727c:	667b      	str	r3, [r7, #100]	; 0x64
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007288:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800728c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e6      	bne.n	8007268 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3308      	adds	r3, #8
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	663b      	str	r3, [r7, #96]	; 0x60
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80072bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e5      	bne.n	800729a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2220      	movs	r2, #32
 80072d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e068      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d050      	beq.n	8007398 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007304:	d148      	bne.n	8007398 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800730e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007324:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
 8007330:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e6      	bne.n	8007310 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	613b      	str	r3, [r7, #16]
   return(result);
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	66bb      	str	r3, [r7, #104]	; 0x68
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007362:	623a      	str	r2, [r7, #32]
 8007364:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	69f9      	ldr	r1, [r7, #28]
 8007368:	6a3a      	ldr	r2, [r7, #32]
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e5      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e010      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4013      	ands	r3, r2
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	bf0c      	ite	eq
 80073a8:	2301      	moveq	r3, #1
 80073aa:	2300      	movne	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	f43f af48 	beq.w	8007248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3770      	adds	r7, #112	; 0x70
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073c2:	b480      	push	{r7}
 80073c4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80073c6:	bf00      	nop
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073d6:	f3ef 8305 	mrs	r3, IPSR
 80073da:	60bb      	str	r3, [r7, #8]
  return(result);
 80073dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10f      	bne.n	8007402 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e2:	f3ef 8310 	mrs	r3, PRIMASK
 80073e6:	607b      	str	r3, [r7, #4]
  return(result);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d105      	bne.n	80073fa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073ee:	f3ef 8311 	mrs	r3, BASEPRI
 80073f2:	603b      	str	r3, [r7, #0]
  return(result);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <osKernelInitialize+0x3a>
 80073fa:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <osKernelInitialize+0x64>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d103      	bne.n	800740a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007402:	f06f 0305 	mvn.w	r3, #5
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e00c      	b.n	8007424 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <osKernelInitialize+0x64>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <osKernelInitialize+0x64>)
 8007414:	2201      	movs	r2, #1
 8007416:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e002      	b.n	8007424 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800741e:	f04f 33ff 	mov.w	r3, #4294967295
 8007422:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007424:	68fb      	ldr	r3, [r7, #12]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	200006cc 	.word	0x200006cc

08007438 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800743e:	f3ef 8305 	mrs	r3, IPSR
 8007442:	60bb      	str	r3, [r7, #8]
  return(result);
 8007444:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10f      	bne.n	800746a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800744a:	f3ef 8310 	mrs	r3, PRIMASK
 800744e:	607b      	str	r3, [r7, #4]
  return(result);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d105      	bne.n	8007462 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007456:	f3ef 8311 	mrs	r3, BASEPRI
 800745a:	603b      	str	r3, [r7, #0]
  return(result);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <osKernelStart+0x3a>
 8007462:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <osKernelStart+0x68>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d103      	bne.n	8007472 <osKernelStart+0x3a>
    stat = osErrorISR;
 800746a:	f06f 0305 	mvn.w	r3, #5
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	e010      	b.n	8007494 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007472:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <osKernelStart+0x68>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d109      	bne.n	800748e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800747a:	f7ff ffa2 	bl	80073c2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800747e:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <osKernelStart+0x68>)
 8007480:	2202      	movs	r2, #2
 8007482:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007484:	f001 fd70 	bl	8008f68 <vTaskStartScheduler>
      stat = osOK;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e002      	b.n	8007494 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800748e:	f04f 33ff 	mov.w	r3, #4294967295
 8007492:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007494:	68fb      	ldr	r3, [r7, #12]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200006cc 	.word	0x200006cc

080074a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b090      	sub	sp, #64	; 0x40
 80074a8:	af04      	add	r7, sp, #16
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b4:	f3ef 8305 	mrs	r3, IPSR
 80074b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80074ba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 808f 	bne.w	80075e0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c2:	f3ef 8310 	mrs	r3, PRIMASK
 80074c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d105      	bne.n	80074da <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074ce:	f3ef 8311 	mrs	r3, BASEPRI
 80074d2:	617b      	str	r3, [r7, #20]
  return(result);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <osThreadNew+0x3e>
 80074da:	4b44      	ldr	r3, [pc, #272]	; (80075ec <osThreadNew+0x148>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d07e      	beq.n	80075e0 <osThreadNew+0x13c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d07b      	beq.n	80075e0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80074ec:	2318      	movs	r3, #24
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d045      	beq.n	800758c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <osThreadNew+0x6a>
        name = attr->name;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	2b00      	cmp	r3, #0
 8007520:	d008      	beq.n	8007534 <osThreadNew+0x90>
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	2b38      	cmp	r3, #56	; 0x38
 8007526:	d805      	bhi.n	8007534 <osThreadNew+0x90>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <osThreadNew+0x94>
        return (NULL);
 8007534:	2300      	movs	r3, #0
 8007536:	e054      	b.n	80075e2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	089b      	lsrs	r3, r3, #2
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00e      	beq.n	800756e <osThreadNew+0xca>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2bbb      	cmp	r3, #187	; 0xbb
 8007556:	d90a      	bls.n	800756e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800755c:	2b00      	cmp	r3, #0
 800755e:	d006      	beq.n	800756e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <osThreadNew+0xca>
        mem = 1;
 8007568:	2301      	movs	r3, #1
 800756a:	623b      	str	r3, [r7, #32]
 800756c:	e010      	b.n	8007590 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10c      	bne.n	8007590 <osThreadNew+0xec>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d108      	bne.n	8007590 <osThreadNew+0xec>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <osThreadNew+0xec>
          mem = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	623b      	str	r3, [r7, #32]
 800758a:	e001      	b.n	8007590 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d110      	bne.n	80075b8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800759e:	9202      	str	r2, [sp, #8]
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 fae5 	bl	8008b7c <xTaskCreateStatic>
 80075b2:	4603      	mov	r3, r0
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	e013      	b.n	80075e0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d110      	bne.n	80075e0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	f107 0310 	add.w	r3, r7, #16
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f001 fb36 	bl	8008c42 <xTaskCreate>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d001      	beq.n	80075e0 <osThreadNew+0x13c>
          hTask = NULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075e0:	693b      	ldr	r3, [r7, #16]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3730      	adds	r7, #48	; 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	200006cc 	.word	0x200006cc

080075f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075f8:	f3ef 8305 	mrs	r3, IPSR
 80075fc:	613b      	str	r3, [r7, #16]
  return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10f      	bne.n	8007624 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007604:	f3ef 8310 	mrs	r3, PRIMASK
 8007608:	60fb      	str	r3, [r7, #12]
  return(result);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007610:	f3ef 8311 	mrs	r3, BASEPRI
 8007614:	60bb      	str	r3, [r7, #8]
  return(result);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <osDelay+0x3c>
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <osDelay+0x58>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d103      	bne.n	800762c <osDelay+0x3c>
    stat = osErrorISR;
 8007624:	f06f 0305 	mvn.w	r3, #5
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	e007      	b.n	800763c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d002      	beq.n	800763c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fc60 	bl	8008efc <vTaskDelay>
    }
  }

  return (stat);
 800763c:	697b      	ldr	r3, [r7, #20]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	200006cc 	.word	0x200006cc

0800764c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800764c:	b580      	push	{r7, lr}
 800764e:	b08c      	sub	sp, #48	; 0x30
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007658:	2300      	movs	r3, #0
 800765a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800765c:	f3ef 8305 	mrs	r3, IPSR
 8007660:	61bb      	str	r3, [r7, #24]
  return(result);
 8007662:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 8086 	bne.w	8007776 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800766a:	f3ef 8310 	mrs	r3, PRIMASK
 800766e:	617b      	str	r3, [r7, #20]
  return(result);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d105      	bne.n	8007682 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007676:	f3ef 8311 	mrs	r3, BASEPRI
 800767a:	613b      	str	r3, [r7, #16]
  return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <osSemaphoreNew+0x3e>
 8007682:	4b3f      	ldr	r3, [pc, #252]	; (8007780 <osSemaphoreNew+0x134>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b02      	cmp	r3, #2
 8007688:	d075      	beq.n	8007776 <osSemaphoreNew+0x12a>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d072      	beq.n	8007776 <osSemaphoreNew+0x12a>
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	429a      	cmp	r2, r3
 8007696:	d86e      	bhi.n	8007776 <osSemaphoreNew+0x12a>
    mem = -1;
 8007698:	f04f 33ff 	mov.w	r3, #4294967295
 800769c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d015      	beq.n	80076d0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <osSemaphoreNew+0x6e>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b4f      	cmp	r3, #79	; 0x4f
 80076b2:	d902      	bls.n	80076ba <osSemaphoreNew+0x6e>
        mem = 1;
 80076b4:	2301      	movs	r3, #1
 80076b6:	623b      	str	r3, [r7, #32]
 80076b8:	e00c      	b.n	80076d4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d108      	bne.n	80076d4 <osSemaphoreNew+0x88>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <osSemaphoreNew+0x88>
          mem = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	623b      	str	r3, [r7, #32]
 80076ce:	e001      	b.n	80076d4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d04c      	beq.n	8007776 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d128      	bne.n	8007734 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d10a      	bne.n	80076fe <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	2203      	movs	r2, #3
 80076ee:	9200      	str	r2, [sp, #0]
 80076f0:	2200      	movs	r2, #0
 80076f2:	2100      	movs	r1, #0
 80076f4:	2001      	movs	r0, #1
 80076f6:	f000 fa55 	bl	8007ba4 <xQueueGenericCreateStatic>
 80076fa:	6278      	str	r0, [r7, #36]	; 0x24
 80076fc:	e005      	b.n	800770a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80076fe:	2203      	movs	r2, #3
 8007700:	2100      	movs	r1, #0
 8007702:	2001      	movs	r0, #1
 8007704:	f000 fad0 	bl	8007ca8 <xQueueGenericCreate>
 8007708:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	d022      	beq.n	8007756 <osSemaphoreNew+0x10a>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d01f      	beq.n	8007756 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007716:	2300      	movs	r3, #0
 8007718:	2200      	movs	r2, #0
 800771a:	2100      	movs	r1, #0
 800771c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800771e:	f000 fb9b 	bl	8007e58 <xQueueGenericSend>
 8007722:	4603      	mov	r3, r0
 8007724:	2b01      	cmp	r3, #1
 8007726:	d016      	beq.n	8007756 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800772a:	f001 f851 	bl	80087d0 <vQueueDelete>
            hSemaphore = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
 8007732:	e010      	b.n	8007756 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d108      	bne.n	800774c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	461a      	mov	r2, r3
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fb15 	bl	8007d72 <xQueueCreateCountingSemaphoreStatic>
 8007748:	6278      	str	r0, [r7, #36]	; 0x24
 800774a:	e004      	b.n	8007756 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fb4a 	bl	8007de8 <xQueueCreateCountingSemaphore>
 8007754:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00c      	beq.n	8007776 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <osSemaphoreNew+0x11e>
          name = attr->name;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	e001      	b.n	800776e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800776e:	69f9      	ldr	r1, [r7, #28]
 8007770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007772:	f001 f97b 	bl	8008a6c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007778:	4618      	mov	r0, r3
 800777a:	3728      	adds	r7, #40	; 0x28
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	200006cc 	.word	0x200006cc

08007784 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007792:	2300      	movs	r3, #0
 8007794:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800779c:	f06f 0303 	mvn.w	r3, #3
 80077a0:	61fb      	str	r3, [r7, #28]
 80077a2:	e04b      	b.n	800783c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077a4:	f3ef 8305 	mrs	r3, IPSR
 80077a8:	617b      	str	r3, [r7, #20]
  return(result);
 80077aa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10f      	bne.n	80077d0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b0:	f3ef 8310 	mrs	r3, PRIMASK
 80077b4:	613b      	str	r3, [r7, #16]
  return(result);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d105      	bne.n	80077c8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077bc:	f3ef 8311 	mrs	r3, BASEPRI
 80077c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d026      	beq.n	8007816 <osSemaphoreAcquire+0x92>
 80077c8:	4b1f      	ldr	r3, [pc, #124]	; (8007848 <osSemaphoreAcquire+0xc4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d122      	bne.n	8007816 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80077d6:	f06f 0303 	mvn.w	r3, #3
 80077da:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80077dc:	e02d      	b.n	800783a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80077de:	2300      	movs	r3, #0
 80077e0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80077e2:	f107 0308 	add.w	r3, r7, #8
 80077e6:	461a      	mov	r2, r3
 80077e8:	2100      	movs	r1, #0
 80077ea:	69b8      	ldr	r0, [r7, #24]
 80077ec:	f000 ff6a 	bl	80086c4 <xQueueReceiveFromISR>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d003      	beq.n	80077fe <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80077f6:	f06f 0302 	mvn.w	r3, #2
 80077fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80077fc:	e01d      	b.n	800783a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01a      	beq.n	800783a <osSemaphoreAcquire+0xb6>
 8007804:	4b11      	ldr	r3, [pc, #68]	; (800784c <osSemaphoreAcquire+0xc8>)
 8007806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007814:	e011      	b.n	800783a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	69b8      	ldr	r0, [r7, #24]
 800781a:	f000 fe3f 	bl	800849c <xQueueSemaphoreTake>
 800781e:	4603      	mov	r3, r0
 8007820:	2b01      	cmp	r3, #1
 8007822:	d00b      	beq.n	800783c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800782a:	f06f 0301 	mvn.w	r3, #1
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	e004      	b.n	800783c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007832:	f06f 0302 	mvn.w	r3, #2
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	e000      	b.n	800783c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800783a:	bf00      	nop
      }
    }
  }

  return (stat);
 800783c:	69fb      	ldr	r3, [r7, #28]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3720      	adds	r7, #32
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	200006cc 	.word	0x200006cc
 800784c:	e000ed04 	.word	0xe000ed04

08007850 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d103      	bne.n	800786e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007866:	f06f 0303 	mvn.w	r3, #3
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	e03e      	b.n	80078ec <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800786e:	f3ef 8305 	mrs	r3, IPSR
 8007872:	617b      	str	r3, [r7, #20]
  return(result);
 8007874:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10f      	bne.n	800789a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800787a:	f3ef 8310 	mrs	r3, PRIMASK
 800787e:	613b      	str	r3, [r7, #16]
  return(result);
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007886:	f3ef 8311 	mrs	r3, BASEPRI
 800788a:	60fb      	str	r3, [r7, #12]
  return(result);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d01e      	beq.n	80078d0 <osSemaphoreRelease+0x80>
 8007892:	4b19      	ldr	r3, [pc, #100]	; (80078f8 <osSemaphoreRelease+0xa8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d11a      	bne.n	80078d0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800789e:	f107 0308 	add.w	r3, r7, #8
 80078a2:	4619      	mov	r1, r3
 80078a4:	69b8      	ldr	r0, [r7, #24]
 80078a6:	f000 fc7d 	bl	80081a4 <xQueueGiveFromISR>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d003      	beq.n	80078b8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80078b0:	f06f 0302 	mvn.w	r3, #2
 80078b4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80078b6:	e018      	b.n	80078ea <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d015      	beq.n	80078ea <osSemaphoreRelease+0x9a>
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <osSemaphoreRelease+0xac>)
 80078c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80078ce:	e00c      	b.n	80078ea <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078d0:	2300      	movs	r3, #0
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	69b8      	ldr	r0, [r7, #24]
 80078d8:	f000 fabe 	bl	8007e58 <xQueueGenericSend>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d004      	beq.n	80078ec <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80078e2:	f06f 0302 	mvn.w	r3, #2
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	e000      	b.n	80078ec <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80078ea:	bf00      	nop
    }
  }

  return (stat);
 80078ec:	69fb      	ldr	r3, [r7, #28]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3720      	adds	r7, #32
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	200006cc 	.word	0x200006cc
 80078fc:	e000ed04 	.word	0xe000ed04

08007900 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a07      	ldr	r2, [pc, #28]	; (800792c <vApplicationGetIdleTaskMemory+0x2c>)
 8007910:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4a06      	ldr	r2, [pc, #24]	; (8007930 <vApplicationGetIdleTaskMemory+0x30>)
 8007916:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2280      	movs	r2, #128	; 0x80
 800791c:	601a      	str	r2, [r3, #0]
}
 800791e:	bf00      	nop
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	200006d0 	.word	0x200006d0
 8007930:	2000078c 	.word	0x2000078c

08007934 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a07      	ldr	r2, [pc, #28]	; (8007960 <vApplicationGetTimerTaskMemory+0x2c>)
 8007944:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	4a06      	ldr	r2, [pc, #24]	; (8007964 <vApplicationGetTimerTaskMemory+0x30>)
 800794a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007952:	601a      	str	r2, [r3, #0]
}
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	2000098c 	.word	0x2000098c
 8007964:	20000a48 	.word	0x20000a48

08007968 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f103 0208 	add.w	r2, r3, #8
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f04f 32ff 	mov.w	r2, #4294967295
 8007980:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f103 0208 	add.w	r2, r3, #8
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f103 0208 	add.w	r2, r3, #8
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079c2:	b480      	push	{r7}
 80079c4:	b085      	sub	sp, #20
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
}
 80079fe:	bf00      	nop
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d103      	bne.n	8007a2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e00c      	b.n	8007a44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	e002      	b.n	8007a38 <vListInsert+0x2e>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d2f6      	bcs.n	8007a32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	601a      	str	r2, [r3, #0]
}
 8007a70:	bf00      	nop
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6892      	ldr	r2, [r2, #8]
 8007a92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6852      	ldr	r2, [r2, #4]
 8007a9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d103      	bne.n	8007ab0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	1e5a      	subs	r2, r3, #1
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10c      	bne.n	8007afe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	b672      	cpsid	i
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	b662      	cpsie	i
 8007af8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007afe:	f002 fcf5 	bl	800a4ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	68f9      	ldr	r1, [r7, #12]
 8007b0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b0e:	fb01 f303 	mul.w	r3, r1, r3
 8007b12:	441a      	add	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	68f9      	ldr	r1, [r7, #12]
 8007b32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b34:	fb01 f303 	mul.w	r3, r1, r3
 8007b38:	441a      	add	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	22ff      	movs	r2, #255	; 0xff
 8007b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	22ff      	movs	r2, #255	; 0xff
 8007b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d114      	bne.n	8007b7e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01a      	beq.n	8007b92 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3310      	adds	r3, #16
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 fca9 	bl	80094b8 <xTaskRemoveFromEventList>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d012      	beq.n	8007b92 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <xQueueGenericReset+0xd0>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	e009      	b.n	8007b92 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3310      	adds	r3, #16
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fef0 	bl	8007968 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3324      	adds	r3, #36	; 0x24
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff feeb 	bl	8007968 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b92:	f002 fcdf 	bl	800a554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b96:	2301      	movs	r3, #1
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08e      	sub	sp, #56	; 0x38
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10c      	bne.n	8007bd2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	b672      	cpsid	i
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	b662      	cpsie	i
 8007bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10c      	bne.n	8007bf2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	b672      	cpsid	i
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	b662      	cpsie	i
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <xQueueGenericCreateStatic+0x5a>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <xQueueGenericCreateStatic+0x5e>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <xQueueGenericCreateStatic+0x60>
 8007c02:	2300      	movs	r3, #0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10c      	bne.n	8007c22 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	b672      	cpsid	i
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	b662      	cpsie	i
 8007c1c:	623b      	str	r3, [r7, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <xQueueGenericCreateStatic+0x8a>
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <xQueueGenericCreateStatic+0x8e>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <xQueueGenericCreateStatic+0x90>
 8007c32:	2300      	movs	r3, #0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10c      	bne.n	8007c52 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	b672      	cpsid	i
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	b662      	cpsie	i
 8007c4c:	61fb      	str	r3, [r7, #28]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c52:	2350      	movs	r3, #80	; 0x50
 8007c54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b50      	cmp	r3, #80	; 0x50
 8007c5a:	d00c      	beq.n	8007c76 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	b672      	cpsid	i
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	b662      	cpsie	i
 8007c70:	61bb      	str	r3, [r7, #24]
}
 8007c72:	bf00      	nop
 8007c74:	e7fe      	b.n	8007c74 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00d      	beq.n	8007c9e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	4613      	mov	r3, r2
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f847 	bl	8007d2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3730      	adds	r7, #48	; 0x30
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10c      	bne.n	8007cd6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	b672      	cpsid	i
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	b662      	cpsie	i
 8007cd0:	613b      	str	r3, [r7, #16]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d102      	bne.n	8007ce2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	61fb      	str	r3, [r7, #28]
 8007ce0:	e004      	b.n	8007cec <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	fb02 f303 	mul.w	r3, r2, r3
 8007cea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	3350      	adds	r3, #80	; 0x50
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f002 fd27 	bl	800a744 <pvPortMalloc>
 8007cf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d011      	beq.n	8007d22 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	3350      	adds	r3, #80	; 0x50
 8007d06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d10:	79fa      	ldrb	r2, [r7, #7]
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	4613      	mov	r3, r2
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f805 	bl	8007d2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d22:	69bb      	ldr	r3, [r7, #24]
	}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3720      	adds	r7, #32
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d103      	bne.n	8007d48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	e002      	b.n	8007d4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	69b8      	ldr	r0, [r7, #24]
 8007d5e:	f7ff feb7 	bl	8007ad0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	78fa      	ldrb	r2, [r7, #3]
 8007d66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b08a      	sub	sp, #40	; 0x28
 8007d76:	af02      	add	r7, sp, #8
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10c      	bne.n	8007d9e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	b672      	cpsid	i
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	b662      	cpsie	i
 8007d98:	61bb      	str	r3, [r7, #24]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d90c      	bls.n	8007dc0 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	b672      	cpsid	i
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	b662      	cpsie	i
 8007dba:	617b      	str	r3, [r7, #20]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7ff feea 	bl	8007ba4 <xQueueGenericCreateStatic>
 8007dd0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007dde:	69fb      	ldr	r3, [r7, #28]
	}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3720      	adds	r7, #32
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10c      	bne.n	8007e12 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	b672      	cpsid	i
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	b662      	cpsie	i
 8007e0c:	613b      	str	r3, [r7, #16]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d90c      	bls.n	8007e34 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	b672      	cpsid	i
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	b662      	cpsie	i
 8007e2e:	60fb      	str	r3, [r7, #12]
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007e34:	2202      	movs	r2, #2
 8007e36:	2100      	movs	r1, #0
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff ff35 	bl	8007ca8 <xQueueGenericCreate>
 8007e3e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007e4c:	697b      	ldr	r3, [r7, #20]
	}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08e      	sub	sp, #56	; 0x38
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e66:	2300      	movs	r3, #0
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10c      	bne.n	8007e8e <xQueueGenericSend+0x36>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	b672      	cpsid	i
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	b662      	cpsie	i
 8007e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d103      	bne.n	8007e9c <xQueueGenericSend+0x44>
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <xQueueGenericSend+0x48>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <xQueueGenericSend+0x4a>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10c      	bne.n	8007ec0 <xQueueGenericSend+0x68>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	b672      	cpsid	i
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	b662      	cpsie	i
 8007eba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ebc:	bf00      	nop
 8007ebe:	e7fe      	b.n	8007ebe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d103      	bne.n	8007ece <xQueueGenericSend+0x76>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d101      	bne.n	8007ed2 <xQueueGenericSend+0x7a>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueGenericSend+0x7c>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10c      	bne.n	8007ef2 <xQueueGenericSend+0x9a>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	b672      	cpsid	i
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	b662      	cpsie	i
 8007eec:	623b      	str	r3, [r7, #32]
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ef2:	f001 fcab 	bl	800984c <xTaskGetSchedulerState>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d102      	bne.n	8007f02 <xQueueGenericSend+0xaa>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <xQueueGenericSend+0xae>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <xQueueGenericSend+0xb0>
 8007f06:	2300      	movs	r3, #0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10c      	bne.n	8007f26 <xQueueGenericSend+0xce>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	61fb      	str	r3, [r7, #28]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f26:	f002 fae1 	bl	800a4ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d302      	bcc.n	8007f3c <xQueueGenericSend+0xe4>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d129      	bne.n	8007f90 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f42:	f000 fc82 	bl	800884a <prvCopyDataToQueue>
 8007f46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d010      	beq.n	8007f72 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	3324      	adds	r3, #36	; 0x24
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 faaf 	bl	80094b8 <xTaskRemoveFromEventList>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d013      	beq.n	8007f88 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f60:	4b3f      	ldr	r3, [pc, #252]	; (8008060 <xQueueGenericSend+0x208>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	e00a      	b.n	8007f88 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d007      	beq.n	8007f88 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f78:	4b39      	ldr	r3, [pc, #228]	; (8008060 <xQueueGenericSend+0x208>)
 8007f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f88:	f002 fae4 	bl	800a554 <vPortExitCritical>
				return pdPASS;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e063      	b.n	8008058 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d103      	bne.n	8007f9e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f96:	f002 fadd 	bl	800a554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e05c      	b.n	8008058 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fa4:	f107 0314 	add.w	r3, r7, #20
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f001 faeb 	bl	8009584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fb2:	f002 facf 	bl	800a554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fb6:	f001 f84b 	bl	8009050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fba:	f002 fa97 	bl	800a4ec <vPortEnterCritical>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fc4:	b25b      	sxtb	r3, r3
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fca:	d103      	bne.n	8007fd4 <xQueueGenericSend+0x17c>
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fda:	b25b      	sxtb	r3, r3
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d103      	bne.n	8007fea <xQueueGenericSend+0x192>
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fea:	f002 fab3 	bl	800a554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fee:	1d3a      	adds	r2, r7, #4
 8007ff0:	f107 0314 	add.w	r3, r7, #20
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fada 	bl	80095b0 <xTaskCheckForTimeOut>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d124      	bne.n	800804c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008004:	f000 fd19 	bl	8008a3a <prvIsQueueFull>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d018      	beq.n	8008040 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	3310      	adds	r3, #16
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f001 f9fa 	bl	8009410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800801c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800801e:	f000 fca4 	bl	800896a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008022:	f001 f823 	bl	800906c <xTaskResumeAll>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	f47f af7c 	bne.w	8007f26 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800802e:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <xQueueGenericSend+0x208>)
 8008030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	e772      	b.n	8007f26 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008042:	f000 fc92 	bl	800896a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008046:	f001 f811 	bl	800906c <xTaskResumeAll>
 800804a:	e76c      	b.n	8007f26 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800804c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800804e:	f000 fc8c 	bl	800896a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008052:	f001 f80b 	bl	800906c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008056:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008058:	4618      	mov	r0, r3
 800805a:	3738      	adds	r7, #56	; 0x38
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08e      	sub	sp, #56	; 0x38
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10c      	bne.n	8008096 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	b672      	cpsid	i
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	b662      	cpsie	i
 8008090:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d103      	bne.n	80080a4 <xQueueGenericSendFromISR+0x40>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <xQueueGenericSendFromISR+0x44>
 80080a4:	2301      	movs	r3, #1
 80080a6:	e000      	b.n	80080aa <xQueueGenericSendFromISR+0x46>
 80080a8:	2300      	movs	r3, #0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10c      	bne.n	80080c8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	b672      	cpsid	i
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	b662      	cpsie	i
 80080c2:	623b      	str	r3, [r7, #32]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d103      	bne.n	80080d6 <xQueueGenericSendFromISR+0x72>
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <xQueueGenericSendFromISR+0x76>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <xQueueGenericSendFromISR+0x78>
 80080da:	2300      	movs	r3, #0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10c      	bne.n	80080fa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	b672      	cpsid	i
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	b662      	cpsie	i
 80080f4:	61fb      	str	r3, [r7, #28]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080fa:	f002 fadf 	bl	800a6bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080fe:	f3ef 8211 	mrs	r2, BASEPRI
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	b672      	cpsid	i
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	b662      	cpsie	i
 8008116:	61ba      	str	r2, [r7, #24]
 8008118:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800811a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800811e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	429a      	cmp	r2, r3
 8008128:	d302      	bcc.n	8008130 <xQueueGenericSendFromISR+0xcc>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d12c      	bne.n	800818a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008140:	f000 fb83 	bl	800884a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008144:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d112      	bne.n	8008174 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	2b00      	cmp	r3, #0
 8008154:	d016      	beq.n	8008184 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	3324      	adds	r3, #36	; 0x24
 800815a:	4618      	mov	r0, r3
 800815c:	f001 f9ac 	bl	80094b8 <xTaskRemoveFromEventList>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00e      	beq.n	8008184 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00b      	beq.n	8008184 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	e007      	b.n	8008184 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008178:	3301      	adds	r3, #1
 800817a:	b2db      	uxtb	r3, r3
 800817c:	b25a      	sxtb	r2, r3
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008184:	2301      	movs	r3, #1
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008188:	e001      	b.n	800818e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800818a:	2300      	movs	r3, #0
 800818c:	637b      	str	r3, [r7, #52]	; 0x34
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008198:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800819a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800819c:	4618      	mov	r0, r3
 800819e:	3738      	adds	r7, #56	; 0x38
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08e      	sub	sp, #56	; 0x38
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10c      	bne.n	80081d2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	b672      	cpsid	i
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	b662      	cpsie	i
 80081cc:	623b      	str	r3, [r7, #32]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00c      	beq.n	80081f4 <xQueueGiveFromISR+0x50>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	b672      	cpsid	i
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	b662      	cpsie	i
 80081ee:	61fb      	str	r3, [r7, #28]
}
 80081f0:	bf00      	nop
 80081f2:	e7fe      	b.n	80081f2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <xQueueGiveFromISR+0x60>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <xQueueGiveFromISR+0x64>
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <xQueueGiveFromISR+0x66>
 8008208:	2300      	movs	r3, #0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10c      	bne.n	8008228 <xQueueGiveFromISR+0x84>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	b672      	cpsid	i
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	b662      	cpsie	i
 8008222:	61bb      	str	r3, [r7, #24]
}
 8008224:	bf00      	nop
 8008226:	e7fe      	b.n	8008226 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008228:	f002 fa48 	bl	800a6bc <vPortValidateInterruptPriority>
	__asm volatile
 800822c:	f3ef 8211 	mrs	r2, BASEPRI
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	b672      	cpsid	i
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	b662      	cpsie	i
 8008244:	617a      	str	r2, [r7, #20]
 8008246:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008248:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800824a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008258:	429a      	cmp	r2, r3
 800825a:	d22b      	bcs.n	80082b4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800826e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d112      	bne.n	800829e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	d016      	beq.n	80082ae <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	3324      	adds	r3, #36	; 0x24
 8008284:	4618      	mov	r0, r3
 8008286:	f001 f917 	bl	80094b8 <xTaskRemoveFromEventList>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00e      	beq.n	80082ae <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2201      	movs	r2, #1
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	e007      	b.n	80082ae <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800829e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082a2:	3301      	adds	r3, #1
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	b25a      	sxtb	r2, r3
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082ae:	2301      	movs	r3, #1
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34
 80082b2:	e001      	b.n	80082b8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	637b      	str	r3, [r7, #52]	; 0x34
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f383 8811 	msr	BASEPRI, r3
}
 80082c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3738      	adds	r7, #56	; 0x38
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08c      	sub	sp, #48	; 0x30
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082dc:	2300      	movs	r3, #0
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10c      	bne.n	8008304 <xQueueReceive+0x34>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	b672      	cpsid	i
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	b662      	cpsie	i
 80082fe:	623b      	str	r3, [r7, #32]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <xQueueReceive+0x42>
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <xQueueReceive+0x46>
 8008312:	2301      	movs	r3, #1
 8008314:	e000      	b.n	8008318 <xQueueReceive+0x48>
 8008316:	2300      	movs	r3, #0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10c      	bne.n	8008336 <xQueueReceive+0x66>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	b672      	cpsid	i
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	b662      	cpsie	i
 8008330:	61fb      	str	r3, [r7, #28]
}
 8008332:	bf00      	nop
 8008334:	e7fe      	b.n	8008334 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008336:	f001 fa89 	bl	800984c <xTaskGetSchedulerState>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <xQueueReceive+0x76>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <xQueueReceive+0x7a>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <xQueueReceive+0x7c>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10c      	bne.n	800836a <xQueueReceive+0x9a>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	b672      	cpsid	i
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	b662      	cpsie	i
 8008364:	61bb      	str	r3, [r7, #24]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800836a:	f002 f8bf 	bl	800a4ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008372:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	2b00      	cmp	r3, #0
 8008378:	d01f      	beq.n	80083ba <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800837a:	68b9      	ldr	r1, [r7, #8]
 800837c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837e:	f000 face 	bl	800891e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	1e5a      	subs	r2, r3, #1
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800838a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00f      	beq.n	80083b2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	3310      	adds	r3, #16
 8008396:	4618      	mov	r0, r3
 8008398:	f001 f88e 	bl	80094b8 <xTaskRemoveFromEventList>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083a2:	4b3d      	ldr	r3, [pc, #244]	; (8008498 <xQueueReceive+0x1c8>)
 80083a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083b2:	f002 f8cf 	bl	800a554 <vPortExitCritical>
				return pdPASS;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e069      	b.n	800848e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d103      	bne.n	80083c8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083c0:	f002 f8c8 	bl	800a554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083c4:	2300      	movs	r3, #0
 80083c6:	e062      	b.n	800848e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d106      	bne.n	80083dc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083ce:	f107 0310 	add.w	r3, r7, #16
 80083d2:	4618      	mov	r0, r3
 80083d4:	f001 f8d6 	bl	8009584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083d8:	2301      	movs	r3, #1
 80083da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083dc:	f002 f8ba 	bl	800a554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083e0:	f000 fe36 	bl	8009050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083e4:	f002 f882 	bl	800a4ec <vPortEnterCritical>
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ee:	b25b      	sxtb	r3, r3
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f4:	d103      	bne.n	80083fe <xQueueReceive+0x12e>
 80083f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008404:	b25b      	sxtb	r3, r3
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840a:	d103      	bne.n	8008414 <xQueueReceive+0x144>
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008414:	f002 f89e 	bl	800a554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008418:	1d3a      	adds	r2, r7, #4
 800841a:	f107 0310 	add.w	r3, r7, #16
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f001 f8c5 	bl	80095b0 <xTaskCheckForTimeOut>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d123      	bne.n	8008474 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800842c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800842e:	f000 faee 	bl	8008a0e <prvIsQueueEmpty>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d017      	beq.n	8008468 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	3324      	adds	r3, #36	; 0x24
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f000 ffe5 	bl	8009410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008448:	f000 fa8f 	bl	800896a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800844c:	f000 fe0e 	bl	800906c <xTaskResumeAll>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d189      	bne.n	800836a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008456:	4b10      	ldr	r3, [pc, #64]	; (8008498 <xQueueReceive+0x1c8>)
 8008458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	e780      	b.n	800836a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800846a:	f000 fa7e 	bl	800896a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800846e:	f000 fdfd 	bl	800906c <xTaskResumeAll>
 8008472:	e77a      	b.n	800836a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008476:	f000 fa78 	bl	800896a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800847a:	f000 fdf7 	bl	800906c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800847e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008480:	f000 fac5 	bl	8008a0e <prvIsQueueEmpty>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	f43f af6f 	beq.w	800836a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800848c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800848e:	4618      	mov	r0, r3
 8008490:	3730      	adds	r7, #48	; 0x30
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	e000ed04 	.word	0xe000ed04

0800849c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08e      	sub	sp, #56	; 0x38
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80084a6:	2300      	movs	r3, #0
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10c      	bne.n	80084d2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	b672      	cpsid	i
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	b662      	cpsie	i
 80084cc:	623b      	str	r3, [r7, #32]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	b672      	cpsid	i
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	b662      	cpsie	i
 80084ee:	61fb      	str	r3, [r7, #28]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f4:	f001 f9aa 	bl	800984c <xTaskGetSchedulerState>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <xQueueSemaphoreTake+0x68>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <xQueueSemaphoreTake+0x6c>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <xQueueSemaphoreTake+0x6e>
 8008508:	2300      	movs	r3, #0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10c      	bne.n	8008528 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	b672      	cpsid	i
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	b662      	cpsie	i
 8008522:	61bb      	str	r3, [r7, #24]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008528:	f001 ffe0 	bl	800a4ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008534:	2b00      	cmp	r3, #0
 8008536:	d024      	beq.n	8008582 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	1e5a      	subs	r2, r3, #1
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d104      	bne.n	8008552 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008548:	f001 fafe 	bl	8009b48 <pvTaskIncrementMutexHeldCount>
 800854c:	4602      	mov	r2, r0
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00f      	beq.n	800857a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	3310      	adds	r3, #16
 800855e:	4618      	mov	r0, r3
 8008560:	f000 ffaa 	bl	80094b8 <xTaskRemoveFromEventList>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800856a:	4b55      	ldr	r3, [pc, #340]	; (80086c0 <xQueueSemaphoreTake+0x224>)
 800856c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800857a:	f001 ffeb 	bl	800a554 <vPortExitCritical>
				return pdPASS;
 800857e:	2301      	movs	r3, #1
 8008580:	e099      	b.n	80086b6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d113      	bne.n	80085b0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00c      	beq.n	80085a8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	b672      	cpsid	i
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	b662      	cpsie	i
 80085a2:	617b      	str	r3, [r7, #20]
}
 80085a4:	bf00      	nop
 80085a6:	e7fe      	b.n	80085a6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80085a8:	f001 ffd4 	bl	800a554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085ac:	2300      	movs	r3, #0
 80085ae:	e082      	b.n	80086b6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085b6:	f107 030c 	add.w	r3, r7, #12
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 ffe2 	bl	8009584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085c0:	2301      	movs	r3, #1
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085c4:	f001 ffc6 	bl	800a554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085c8:	f000 fd42 	bl	8009050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085cc:	f001 ff8e 	bl	800a4ec <vPortEnterCritical>
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085d6:	b25b      	sxtb	r3, r3
 80085d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085dc:	d103      	bne.n	80085e6 <xQueueSemaphoreTake+0x14a>
 80085de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ec:	b25b      	sxtb	r3, r3
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	d103      	bne.n	80085fc <xQueueSemaphoreTake+0x160>
 80085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085fc:	f001 ffaa 	bl	800a554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008600:	463a      	mov	r2, r7
 8008602:	f107 030c 	add.w	r3, r7, #12
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f000 ffd1 	bl	80095b0 <xTaskCheckForTimeOut>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d132      	bne.n	800867a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008616:	f000 f9fa 	bl	8008a0e <prvIsQueueEmpty>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d026      	beq.n	800866e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d109      	bne.n	800863c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008628:	f001 ff60 	bl	800a4ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	4618      	mov	r0, r3
 8008632:	f001 f929 	bl	8009888 <xTaskPriorityInherit>
 8008636:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008638:	f001 ff8c 	bl	800a554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800863c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863e:	3324      	adds	r3, #36	; 0x24
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fee3 	bl	8009410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800864a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800864c:	f000 f98d 	bl	800896a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008650:	f000 fd0c 	bl	800906c <xTaskResumeAll>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	f47f af66 	bne.w	8008528 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800865c:	4b18      	ldr	r3, [pc, #96]	; (80086c0 <xQueueSemaphoreTake+0x224>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	e75c      	b.n	8008528 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800866e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008670:	f000 f97b 	bl	800896a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008674:	f000 fcfa 	bl	800906c <xTaskResumeAll>
 8008678:	e756      	b.n	8008528 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800867a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800867c:	f000 f975 	bl	800896a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008680:	f000 fcf4 	bl	800906c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008686:	f000 f9c2 	bl	8008a0e <prvIsQueueEmpty>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	f43f af4b 	beq.w	8008528 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00d      	beq.n	80086b4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008698:	f001 ff28 	bl	800a4ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800869c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800869e:	f000 f8bc 	bl	800881a <prvGetDisinheritPriorityAfterTimeout>
 80086a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 f9c6 	bl	8009a3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80086b0:	f001 ff50 	bl	800a554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3738      	adds	r7, #56	; 0x38
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08e      	sub	sp, #56	; 0x38
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10c      	bne.n	80086f4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	b672      	cpsid	i
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	b662      	cpsie	i
 80086ee:	623b      	str	r3, [r7, #32]
}
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d103      	bne.n	8008702 <xQueueReceiveFromISR+0x3e>
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <xQueueReceiveFromISR+0x42>
 8008702:	2301      	movs	r3, #1
 8008704:	e000      	b.n	8008708 <xQueueReceiveFromISR+0x44>
 8008706:	2300      	movs	r3, #0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10c      	bne.n	8008726 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	b672      	cpsid	i
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	b662      	cpsie	i
 8008720:	61fb      	str	r3, [r7, #28]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008726:	f001 ffc9 	bl	800a6bc <vPortValidateInterruptPriority>
	__asm volatile
 800872a:	f3ef 8211 	mrs	r2, BASEPRI
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	b672      	cpsid	i
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	b662      	cpsie	i
 8008742:	61ba      	str	r2, [r7, #24]
 8008744:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008746:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008748:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	2b00      	cmp	r3, #0
 8008754:	d02f      	beq.n	80087b6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800875c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008764:	f000 f8db 	bl	800891e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	1e5a      	subs	r2, r3, #1
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d112      	bne.n	80087a0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d016      	beq.n	80087b0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	3310      	adds	r3, #16
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fe96 	bl	80094b8 <xTaskRemoveFromEventList>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00e      	beq.n	80087b0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00b      	beq.n	80087b0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e007      	b.n	80087b0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80087a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087a4:	3301      	adds	r3, #1
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	b25a      	sxtb	r2, r3
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80087b0:	2301      	movs	r3, #1
 80087b2:	637b      	str	r3, [r7, #52]	; 0x34
 80087b4:	e001      	b.n	80087ba <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	637b      	str	r3, [r7, #52]	; 0x34
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	f383 8811 	msr	BASEPRI, r3
}
 80087c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3738      	adds	r7, #56	; 0x38
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10c      	bne.n	80087fc <vQueueDelete+0x2c>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	b672      	cpsid	i
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	b662      	cpsie	i
 80087f6:	60bb      	str	r3, [r7, #8]
}
 80087f8:	bf00      	nop
 80087fa:	e7fe      	b.n	80087fa <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 f95f 	bl	8008ac0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f002 f863 	bl	800a8d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	2b00      	cmp	r3, #0
 8008828:	d006      	beq.n	8008838 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	e001      	b.n	800883c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008838:	2300      	movs	r3, #0
 800883a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800883c:	68fb      	ldr	r3, [r7, #12]
	}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b086      	sub	sp, #24
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10d      	bne.n	8008884 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d14d      	bne.n	800890c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	4618      	mov	r0, r3
 8008876:	f001 f86f 	bl	8009958 <xTaskPriorityDisinherit>
 800887a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	609a      	str	r2, [r3, #8]
 8008882:	e043      	b.n	800890c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d119      	bne.n	80088be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6858      	ldr	r0, [r3, #4]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	461a      	mov	r2, r3
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	f002 fcfe 	bl	800b296 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	441a      	add	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d32b      	bcc.n	800890c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	605a      	str	r2, [r3, #4]
 80088bc:	e026      	b.n	800890c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	68d8      	ldr	r0, [r3, #12]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	461a      	mov	r2, r3
 80088c8:	68b9      	ldr	r1, [r7, #8]
 80088ca:	f002 fce4 	bl	800b296 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	425b      	negs	r3, r3
 80088d8:	441a      	add	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d207      	bcs.n	80088fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f2:	425b      	negs	r3, r3
 80088f4:	441a      	add	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d105      	bne.n	800890c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3b01      	subs	r3, #1
 800890a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008914:	697b      	ldr	r3, [r7, #20]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892c:	2b00      	cmp	r3, #0
 800892e:	d018      	beq.n	8008962 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008938:	441a      	add	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	429a      	cmp	r2, r3
 8008948:	d303      	bcc.n	8008952 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68d9      	ldr	r1, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	461a      	mov	r2, r3
 800895c:	6838      	ldr	r0, [r7, #0]
 800895e:	f002 fc9a 	bl	800b296 <memcpy>
	}
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008972:	f001 fdbb 	bl	800a4ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800897c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800897e:	e011      	b.n	80089a4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	d012      	beq.n	80089ae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3324      	adds	r3, #36	; 0x24
 800898c:	4618      	mov	r0, r3
 800898e:	f000 fd93 	bl	80094b8 <xTaskRemoveFromEventList>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008998:	f000 fe70 	bl	800967c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	3b01      	subs	r3, #1
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	dce9      	bgt.n	8008980 <prvUnlockQueue+0x16>
 80089ac:	e000      	b.n	80089b0 <prvUnlockQueue+0x46>
					break;
 80089ae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	22ff      	movs	r2, #255	; 0xff
 80089b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80089b8:	f001 fdcc 	bl	800a554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089bc:	f001 fd96 	bl	800a4ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089c6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089c8:	e011      	b.n	80089ee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d012      	beq.n	80089f8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3310      	adds	r3, #16
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fd6e 	bl	80094b8 <xTaskRemoveFromEventList>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80089e2:	f000 fe4b 	bl	800967c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	dce9      	bgt.n	80089ca <prvUnlockQueue+0x60>
 80089f6:	e000      	b.n	80089fa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80089f8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	22ff      	movs	r2, #255	; 0xff
 80089fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a02:	f001 fda7 	bl	800a554 <vPortExitCritical>
}
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a16:	f001 fd69 	bl	800a4ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d102      	bne.n	8008a28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a22:	2301      	movs	r3, #1
 8008a24:	60fb      	str	r3, [r7, #12]
 8008a26:	e001      	b.n	8008a2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a2c:	f001 fd92 	bl	800a554 <vPortExitCritical>

	return xReturn;
 8008a30:	68fb      	ldr	r3, [r7, #12]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a42:	f001 fd53 	bl	800a4ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d102      	bne.n	8008a58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a52:	2301      	movs	r3, #1
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	e001      	b.n	8008a5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a5c:	f001 fd7a 	bl	800a554 <vPortExitCritical>

	return xReturn;
 8008a60:	68fb      	ldr	r3, [r7, #12]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
	...

08008a6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e014      	b.n	8008aa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a7c:	4a0f      	ldr	r2, [pc, #60]	; (8008abc <vQueueAddToRegistry+0x50>)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a88:	490c      	ldr	r1, [pc, #48]	; (8008abc <vQueueAddToRegistry+0x50>)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a92:	4a0a      	ldr	r2, [pc, #40]	; (8008abc <vQueueAddToRegistry+0x50>)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	4413      	add	r3, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a9e:	e006      	b.n	8008aae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b07      	cmp	r3, #7
 8008aaa:	d9e7      	bls.n	8008a7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008aac:	bf00      	nop
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	20000e48 	.word	0x20000e48

08008ac0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	e016      	b.n	8008afc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ace:	4a10      	ldr	r2, [pc, #64]	; (8008b10 <vQueueUnregisterQueue+0x50>)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d10b      	bne.n	8008af6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008ade:	4a0c      	ldr	r2, [pc, #48]	; (8008b10 <vQueueUnregisterQueue+0x50>)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008ae8:	4a09      	ldr	r2, [pc, #36]	; (8008b10 <vQueueUnregisterQueue+0x50>)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4413      	add	r3, r2
 8008af0:	2200      	movs	r2, #0
 8008af2:	605a      	str	r2, [r3, #4]
				break;
 8008af4:	e006      	b.n	8008b04 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b07      	cmp	r3, #7
 8008b00:	d9e5      	bls.n	8008ace <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008b02:	bf00      	nop
 8008b04:	bf00      	nop
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	20000e48 	.word	0x20000e48

08008b14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b24:	f001 fce2 	bl	800a4ec <vPortEnterCritical>
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b2e:	b25b      	sxtb	r3, r3
 8008b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b34:	d103      	bne.n	8008b3e <vQueueWaitForMessageRestricted+0x2a>
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b44:	b25b      	sxtb	r3, r3
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4a:	d103      	bne.n	8008b54 <vQueueWaitForMessageRestricted+0x40>
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b54:	f001 fcfe 	bl	800a554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d106      	bne.n	8008b6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	3324      	adds	r3, #36	; 0x24
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 fc77 	bl	800945c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b6e:	6978      	ldr	r0, [r7, #20]
 8008b70:	f7ff fefb 	bl	800896a <prvUnlockQueue>
	}
 8008b74:	bf00      	nop
 8008b76:	3718      	adds	r7, #24
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08e      	sub	sp, #56	; 0x38
 8008b80:	af04      	add	r7, sp, #16
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10c      	bne.n	8008baa <xTaskCreateStatic+0x2e>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	b672      	cpsid	i
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	b662      	cpsie	i
 8008ba4:	623b      	str	r3, [r7, #32]
}
 8008ba6:	bf00      	nop
 8008ba8:	e7fe      	b.n	8008ba8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10c      	bne.n	8008bca <xTaskCreateStatic+0x4e>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	b672      	cpsid	i
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	b662      	cpsie	i
 8008bc4:	61fb      	str	r3, [r7, #28]
}
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bca:	23bc      	movs	r3, #188	; 0xbc
 8008bcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2bbc      	cmp	r3, #188	; 0xbc
 8008bd2:	d00c      	beq.n	8008bee <xTaskCreateStatic+0x72>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	b672      	cpsid	i
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	b662      	cpsie	i
 8008be8:	61bb      	str	r3, [r7, #24]
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01e      	beq.n	8008c34 <xTaskCreateStatic+0xb8>
 8008bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01b      	beq.n	8008c34 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	2202      	movs	r2, #2
 8008c0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c0e:	2300      	movs	r3, #0
 8008c10:	9303      	str	r3, [sp, #12]
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	9302      	str	r3, [sp, #8]
 8008c16:	f107 0314 	add.w	r3, r7, #20
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 f850 	bl	8008ccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c2e:	f000 f8f5 	bl	8008e1c <prvAddNewTaskToReadyList>
 8008c32:	e001      	b.n	8008c38 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c38:	697b      	ldr	r3, [r7, #20]
	}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3728      	adds	r7, #40	; 0x28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b08c      	sub	sp, #48	; 0x30
 8008c46:	af04      	add	r7, sp, #16
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	603b      	str	r3, [r7, #0]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c52:	88fb      	ldrh	r3, [r7, #6]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	4618      	mov	r0, r3
 8008c58:	f001 fd74 	bl	800a744 <pvPortMalloc>
 8008c5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00e      	beq.n	8008c82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c64:	20bc      	movs	r0, #188	; 0xbc
 8008c66:	f001 fd6d 	bl	800a744 <pvPortMalloc>
 8008c6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	631a      	str	r2, [r3, #48]	; 0x30
 8008c78:	e005      	b.n	8008c86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c7a:	6978      	ldr	r0, [r7, #20]
 8008c7c:	f001 fe2c 	bl	800a8d8 <vPortFree>
 8008c80:	e001      	b.n	8008c86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d017      	beq.n	8008cbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c94:	88fa      	ldrh	r2, [r7, #6]
 8008c96:	2300      	movs	r3, #0
 8008c98:	9303      	str	r3, [sp, #12]
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	9302      	str	r3, [sp, #8]
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	68b9      	ldr	r1, [r7, #8]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 f80e 	bl	8008ccc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cb0:	69f8      	ldr	r0, [r7, #28]
 8008cb2:	f000 f8b3 	bl	8008e1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	e002      	b.n	8008cc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
	}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3720      	adds	r7, #32
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	21a5      	movs	r1, #165	; 0xa5
 8008ce6:	f002 fae4 	bl	800b2b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008cf4:	440b      	add	r3, r1
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	f023 0307 	bic.w	r3, r3, #7
 8008d02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00c      	beq.n	8008d28 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	b672      	cpsid	i
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	b662      	cpsie	i
 8008d22:	617b      	str	r3, [r7, #20]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01f      	beq.n	8008d6e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e012      	b.n	8008d5a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	4413      	add	r3, r2
 8008d3a:	7819      	ldrb	r1, [r3, #0]
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	3334      	adds	r3, #52	; 0x34
 8008d44:	460a      	mov	r2, r1
 8008d46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d006      	beq.n	8008d62 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	3301      	adds	r3, #1
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	2b0f      	cmp	r3, #15
 8008d5e:	d9e9      	bls.n	8008d34 <prvInitialiseNewTask+0x68>
 8008d60:	e000      	b.n	8008d64 <prvInitialiseNewTask+0x98>
			{
				break;
 8008d62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d6c:	e003      	b.n	8008d76 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	2b37      	cmp	r3, #55	; 0x37
 8008d7a:	d901      	bls.n	8008d80 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d7c:	2337      	movs	r3, #55	; 0x37
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	2200      	movs	r2, #0
 8008d90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	3304      	adds	r3, #4
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe fe06 	bl	80079a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9e:	3318      	adds	r3, #24
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fe fe01 	bl	80079a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008daa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	3354      	adds	r3, #84	; 0x54
 8008dd0:	2260      	movs	r2, #96	; 0x60
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f002 fa6c 	bl	800b2b2 <memset>
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	4a0c      	ldr	r2, [pc, #48]	; (8008e10 <prvInitialiseNewTask+0x144>)
 8008dde:	659a      	str	r2, [r3, #88]	; 0x58
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	4a0c      	ldr	r2, [pc, #48]	; (8008e14 <prvInitialiseNewTask+0x148>)
 8008de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	4a0b      	ldr	r2, [pc, #44]	; (8008e18 <prvInitialiseNewTask+0x14c>)
 8008dea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	68f9      	ldr	r1, [r7, #12]
 8008df0:	69b8      	ldr	r0, [r7, #24]
 8008df2:	f001 fa6d 	bl	800a2d0 <pxPortInitialiseStack>
 8008df6:	4602      	mov	r2, r0
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d002      	beq.n	8008e08 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e08:	bf00      	nop
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	0800c358 	.word	0x0800c358
 8008e14:	0800c378 	.word	0x0800c378
 8008e18:	0800c338 	.word	0x0800c338

08008e1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e24:	f001 fb62 	bl	800a4ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e28:	4b2d      	ldr	r3, [pc, #180]	; (8008ee0 <prvAddNewTaskToReadyList+0xc4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	4a2c      	ldr	r2, [pc, #176]	; (8008ee0 <prvAddNewTaskToReadyList+0xc4>)
 8008e30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e32:	4b2c      	ldr	r3, [pc, #176]	; (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e3a:	4a2a      	ldr	r2, [pc, #168]	; (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e40:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <prvAddNewTaskToReadyList+0xc4>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d110      	bne.n	8008e6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e48:	f000 fc3c 	bl	80096c4 <prvInitialiseTaskLists>
 8008e4c:	e00d      	b.n	8008e6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e4e:	4b26      	ldr	r3, [pc, #152]	; (8008ee8 <prvAddNewTaskToReadyList+0xcc>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d109      	bne.n	8008e6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e56:	4b23      	ldr	r3, [pc, #140]	; (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d802      	bhi.n	8008e6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e64:	4a1f      	ldr	r2, [pc, #124]	; (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e6a:	4b20      	ldr	r3, [pc, #128]	; (8008eec <prvAddNewTaskToReadyList+0xd0>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	4a1e      	ldr	r2, [pc, #120]	; (8008eec <prvAddNewTaskToReadyList+0xd0>)
 8008e72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e74:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <prvAddNewTaskToReadyList+0xd0>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e80:	4b1b      	ldr	r3, [pc, #108]	; (8008ef0 <prvAddNewTaskToReadyList+0xd4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d903      	bls.n	8008e90 <prvAddNewTaskToReadyList+0x74>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8c:	4a18      	ldr	r2, [pc, #96]	; (8008ef0 <prvAddNewTaskToReadyList+0xd4>)
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e94:	4613      	mov	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4a15      	ldr	r2, [pc, #84]	; (8008ef4 <prvAddNewTaskToReadyList+0xd8>)
 8008e9e:	441a      	add	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	f7fe fd8b 	bl	80079c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008eac:	f001 fb52 	bl	800a554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008eb0:	4b0d      	ldr	r3, [pc, #52]	; (8008ee8 <prvAddNewTaskToReadyList+0xcc>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00e      	beq.n	8008ed6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008eb8:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <prvAddNewTaskToReadyList+0xc8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d207      	bcs.n	8008ed6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <prvAddNewTaskToReadyList+0xdc>)
 8008ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	2000135c 	.word	0x2000135c
 8008ee4:	20000e88 	.word	0x20000e88
 8008ee8:	20001368 	.word	0x20001368
 8008eec:	20001378 	.word	0x20001378
 8008ef0:	20001364 	.word	0x20001364
 8008ef4:	20000e8c 	.word	0x20000e8c
 8008ef8:	e000ed04 	.word	0xe000ed04

08008efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d019      	beq.n	8008f42 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f0e:	4b14      	ldr	r3, [pc, #80]	; (8008f60 <vTaskDelay+0x64>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00c      	beq.n	8008f30 <vTaskDelay+0x34>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	b672      	cpsid	i
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	b662      	cpsie	i
 8008f2a:	60bb      	str	r3, [r7, #8]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008f30:	f000 f88e 	bl	8009050 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fe1a 	bl	8009b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f3c:	f000 f896 	bl	800906c <xTaskResumeAll>
 8008f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d107      	bne.n	8008f58 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <vTaskDelay+0x68>)
 8008f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20001384 	.word	0x20001384
 8008f64:	e000ed04 	.word	0xe000ed04

08008f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	; 0x28
 8008f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f76:	463a      	mov	r2, r7
 8008f78:	1d39      	adds	r1, r7, #4
 8008f7a:	f107 0308 	add.w	r3, r7, #8
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe fcbe 	bl	8007900 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	9202      	str	r2, [sp, #8]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	2300      	movs	r3, #0
 8008f94:	460a      	mov	r2, r1
 8008f96:	4926      	ldr	r1, [pc, #152]	; (8009030 <vTaskStartScheduler+0xc8>)
 8008f98:	4826      	ldr	r0, [pc, #152]	; (8009034 <vTaskStartScheduler+0xcc>)
 8008f9a:	f7ff fdef 	bl	8008b7c <xTaskCreateStatic>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	4a25      	ldr	r2, [pc, #148]	; (8009038 <vTaskStartScheduler+0xd0>)
 8008fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fa4:	4b24      	ldr	r3, [pc, #144]	; (8009038 <vTaskStartScheduler+0xd0>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008fac:	2301      	movs	r3, #1
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	e001      	b.n	8008fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d102      	bne.n	8008fc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fbc:	f000 fe2c 	bl	8009c18 <xTimerCreateTimerTask>
 8008fc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d11d      	bne.n	8009004 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	b672      	cpsid	i
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	b662      	cpsie	i
 8008fdc:	613b      	str	r3, [r7, #16]
}
 8008fde:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fe0:	4b16      	ldr	r3, [pc, #88]	; (800903c <vTaskStartScheduler+0xd4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3354      	adds	r3, #84	; 0x54
 8008fe6:	4a16      	ldr	r2, [pc, #88]	; (8009040 <vTaskStartScheduler+0xd8>)
 8008fe8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fea:	4b16      	ldr	r3, [pc, #88]	; (8009044 <vTaskStartScheduler+0xdc>)
 8008fec:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <vTaskStartScheduler+0xe0>)
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ff8:	4b14      	ldr	r3, [pc, #80]	; (800904c <vTaskStartScheduler+0xe4>)
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ffe:	f001 f9f7 	bl	800a3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009002:	e010      	b.n	8009026 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900a:	d10c      	bne.n	8009026 <vTaskStartScheduler+0xbe>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	b672      	cpsid	i
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	b662      	cpsie	i
 8009020:	60fb      	str	r3, [r7, #12]
}
 8009022:	bf00      	nop
 8009024:	e7fe      	b.n	8009024 <vTaskStartScheduler+0xbc>
}
 8009026:	bf00      	nop
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	0800c260 	.word	0x0800c260
 8009034:	08009695 	.word	0x08009695
 8009038:	20001380 	.word	0x20001380
 800903c:	20000e88 	.word	0x20000e88
 8009040:	2000001c 	.word	0x2000001c
 8009044:	2000137c 	.word	0x2000137c
 8009048:	20001368 	.word	0x20001368
 800904c:	20001360 	.word	0x20001360

08009050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009054:	4b04      	ldr	r3, [pc, #16]	; (8009068 <vTaskSuspendAll+0x18>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	4a03      	ldr	r2, [pc, #12]	; (8009068 <vTaskSuspendAll+0x18>)
 800905c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800905e:	bf00      	nop
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20001384 	.word	0x20001384

0800906c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800907a:	4b43      	ldr	r3, [pc, #268]	; (8009188 <xTaskResumeAll+0x11c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10c      	bne.n	800909c <xTaskResumeAll+0x30>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	b672      	cpsid	i
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	b662      	cpsie	i
 8009096:	603b      	str	r3, [r7, #0]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800909c:	f001 fa26 	bl	800a4ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090a0:	4b39      	ldr	r3, [pc, #228]	; (8009188 <xTaskResumeAll+0x11c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	4a38      	ldr	r2, [pc, #224]	; (8009188 <xTaskResumeAll+0x11c>)
 80090a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090aa:	4b37      	ldr	r3, [pc, #220]	; (8009188 <xTaskResumeAll+0x11c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d162      	bne.n	8009178 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80090b2:	4b36      	ldr	r3, [pc, #216]	; (800918c <xTaskResumeAll+0x120>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d05e      	beq.n	8009178 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ba:	e02f      	b.n	800911c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090bc:	4b34      	ldr	r3, [pc, #208]	; (8009190 <xTaskResumeAll+0x124>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3318      	adds	r3, #24
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fe fcd7 	bl	8007a7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3304      	adds	r3, #4
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fcd2 	bl	8007a7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4b2d      	ldr	r3, [pc, #180]	; (8009194 <xTaskResumeAll+0x128>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d903      	bls.n	80090ec <xTaskResumeAll+0x80>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	4a2a      	ldr	r2, [pc, #168]	; (8009194 <xTaskResumeAll+0x128>)
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4a27      	ldr	r2, [pc, #156]	; (8009198 <xTaskResumeAll+0x12c>)
 80090fa:	441a      	add	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3304      	adds	r3, #4
 8009100:	4619      	mov	r1, r3
 8009102:	4610      	mov	r0, r2
 8009104:	f7fe fc5d 	bl	80079c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	4b23      	ldr	r3, [pc, #140]	; (800919c <xTaskResumeAll+0x130>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	429a      	cmp	r2, r3
 8009114:	d302      	bcc.n	800911c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009116:	4b22      	ldr	r3, [pc, #136]	; (80091a0 <xTaskResumeAll+0x134>)
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800911c:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <xTaskResumeAll+0x124>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1cb      	bne.n	80090bc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800912a:	f000 fb6f 	bl	800980c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800912e:	4b1d      	ldr	r3, [pc, #116]	; (80091a4 <xTaskResumeAll+0x138>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d010      	beq.n	800915c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800913a:	f000 f847 	bl	80091cc <xTaskIncrementTick>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009144:	4b16      	ldr	r3, [pc, #88]	; (80091a0 <xTaskResumeAll+0x134>)
 8009146:	2201      	movs	r2, #1
 8009148:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3b01      	subs	r3, #1
 800914e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f1      	bne.n	800913a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009156:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <xTaskResumeAll+0x138>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800915c:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <xTaskResumeAll+0x134>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009164:	2301      	movs	r3, #1
 8009166:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009168:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <xTaskResumeAll+0x13c>)
 800916a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009178:	f001 f9ec 	bl	800a554 <vPortExitCritical>

	return xAlreadyYielded;
 800917c:	68bb      	ldr	r3, [r7, #8]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20001384 	.word	0x20001384
 800918c:	2000135c 	.word	0x2000135c
 8009190:	2000131c 	.word	0x2000131c
 8009194:	20001364 	.word	0x20001364
 8009198:	20000e8c 	.word	0x20000e8c
 800919c:	20000e88 	.word	0x20000e88
 80091a0:	20001370 	.word	0x20001370
 80091a4:	2000136c 	.word	0x2000136c
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80091b2:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <xTaskGetTickCount+0x1c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80091b8:	687b      	ldr	r3, [r7, #4]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	20001360 	.word	0x20001360

080091cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091d6:	4b50      	ldr	r3, [pc, #320]	; (8009318 <xTaskIncrementTick+0x14c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f040 808b 	bne.w	80092f6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091e0:	4b4e      	ldr	r3, [pc, #312]	; (800931c <xTaskIncrementTick+0x150>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3301      	adds	r3, #1
 80091e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091e8:	4a4c      	ldr	r2, [pc, #304]	; (800931c <xTaskIncrementTick+0x150>)
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d122      	bne.n	800923a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80091f4:	4b4a      	ldr	r3, [pc, #296]	; (8009320 <xTaskIncrementTick+0x154>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00c      	beq.n	8009218 <xTaskIncrementTick+0x4c>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	b672      	cpsid	i
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	b662      	cpsie	i
 8009212:	603b      	str	r3, [r7, #0]
}
 8009214:	bf00      	nop
 8009216:	e7fe      	b.n	8009216 <xTaskIncrementTick+0x4a>
 8009218:	4b41      	ldr	r3, [pc, #260]	; (8009320 <xTaskIncrementTick+0x154>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	4b41      	ldr	r3, [pc, #260]	; (8009324 <xTaskIncrementTick+0x158>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a3f      	ldr	r2, [pc, #252]	; (8009320 <xTaskIncrementTick+0x154>)
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	4a3f      	ldr	r2, [pc, #252]	; (8009324 <xTaskIncrementTick+0x158>)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	4b3e      	ldr	r3, [pc, #248]	; (8009328 <xTaskIncrementTick+0x15c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	4a3d      	ldr	r2, [pc, #244]	; (8009328 <xTaskIncrementTick+0x15c>)
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	f000 fae9 	bl	800980c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800923a:	4b3c      	ldr	r3, [pc, #240]	; (800932c <xTaskIncrementTick+0x160>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	429a      	cmp	r2, r3
 8009242:	d349      	bcc.n	80092d8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009244:	4b36      	ldr	r3, [pc, #216]	; (8009320 <xTaskIncrementTick+0x154>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d104      	bne.n	8009258 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800924e:	4b37      	ldr	r3, [pc, #220]	; (800932c <xTaskIncrementTick+0x160>)
 8009250:	f04f 32ff 	mov.w	r2, #4294967295
 8009254:	601a      	str	r2, [r3, #0]
					break;
 8009256:	e03f      	b.n	80092d8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009258:	4b31      	ldr	r3, [pc, #196]	; (8009320 <xTaskIncrementTick+0x154>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	429a      	cmp	r2, r3
 800926e:	d203      	bcs.n	8009278 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009270:	4a2e      	ldr	r2, [pc, #184]	; (800932c <xTaskIncrementTick+0x160>)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009276:	e02f      	b.n	80092d8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	3304      	adds	r3, #4
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe fbfd 	bl	8007a7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	d004      	beq.n	8009294 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	3318      	adds	r3, #24
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fbf4 	bl	8007a7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009298:	4b25      	ldr	r3, [pc, #148]	; (8009330 <xTaskIncrementTick+0x164>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d903      	bls.n	80092a8 <xTaskIncrementTick+0xdc>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	4a22      	ldr	r2, [pc, #136]	; (8009330 <xTaskIncrementTick+0x164>)
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4a1f      	ldr	r2, [pc, #124]	; (8009334 <xTaskIncrementTick+0x168>)
 80092b6:	441a      	add	r2, r3
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f7fe fb7f 	bl	80079c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c8:	4b1b      	ldr	r3, [pc, #108]	; (8009338 <xTaskIncrementTick+0x16c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d3b8      	bcc.n	8009244 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80092d2:	2301      	movs	r3, #1
 80092d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092d6:	e7b5      	b.n	8009244 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092d8:	4b17      	ldr	r3, [pc, #92]	; (8009338 <xTaskIncrementTick+0x16c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092de:	4915      	ldr	r1, [pc, #84]	; (8009334 <xTaskIncrementTick+0x168>)
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d907      	bls.n	8009300 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80092f0:	2301      	movs	r3, #1
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	e004      	b.n	8009300 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80092f6:	4b11      	ldr	r3, [pc, #68]	; (800933c <xTaskIncrementTick+0x170>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3301      	adds	r3, #1
 80092fc:	4a0f      	ldr	r2, [pc, #60]	; (800933c <xTaskIncrementTick+0x170>)
 80092fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009300:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <xTaskIncrementTick+0x174>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009308:	2301      	movs	r3, #1
 800930a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800930c:	697b      	ldr	r3, [r7, #20]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20001384 	.word	0x20001384
 800931c:	20001360 	.word	0x20001360
 8009320:	20001314 	.word	0x20001314
 8009324:	20001318 	.word	0x20001318
 8009328:	20001374 	.word	0x20001374
 800932c:	2000137c 	.word	0x2000137c
 8009330:	20001364 	.word	0x20001364
 8009334:	20000e8c 	.word	0x20000e8c
 8009338:	20000e88 	.word	0x20000e88
 800933c:	2000136c 	.word	0x2000136c
 8009340:	20001370 	.word	0x20001370

08009344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800934a:	4b2b      	ldr	r3, [pc, #172]	; (80093f8 <vTaskSwitchContext+0xb4>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009352:	4b2a      	ldr	r3, [pc, #168]	; (80093fc <vTaskSwitchContext+0xb8>)
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009358:	e048      	b.n	80093ec <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800935a:	4b28      	ldr	r3, [pc, #160]	; (80093fc <vTaskSwitchContext+0xb8>)
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009360:	4b27      	ldr	r3, [pc, #156]	; (8009400 <vTaskSwitchContext+0xbc>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]
 8009366:	e012      	b.n	800938e <vTaskSwitchContext+0x4a>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10c      	bne.n	8009388 <vTaskSwitchContext+0x44>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	b672      	cpsid	i
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	b662      	cpsie	i
 8009382:	607b      	str	r3, [r7, #4]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <vTaskSwitchContext+0x42>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3b01      	subs	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	491d      	ldr	r1, [pc, #116]	; (8009404 <vTaskSwitchContext+0xc0>)
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	4613      	mov	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0e2      	beq.n	8009368 <vTaskSwitchContext+0x24>
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4a15      	ldr	r2, [pc, #84]	; (8009404 <vTaskSwitchContext+0xc0>)
 80093ae:	4413      	add	r3, r2
 80093b0:	60bb      	str	r3, [r7, #8]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	605a      	str	r2, [r3, #4]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	685a      	ldr	r2, [r3, #4]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	3308      	adds	r3, #8
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d104      	bne.n	80093d2 <vTaskSwitchContext+0x8e>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	605a      	str	r2, [r3, #4]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	4a0b      	ldr	r2, [pc, #44]	; (8009408 <vTaskSwitchContext+0xc4>)
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	4a08      	ldr	r2, [pc, #32]	; (8009400 <vTaskSwitchContext+0xbc>)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <vTaskSwitchContext+0xc4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3354      	adds	r3, #84	; 0x54
 80093e8:	4a08      	ldr	r2, [pc, #32]	; (800940c <vTaskSwitchContext+0xc8>)
 80093ea:	6013      	str	r3, [r2, #0]
}
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20001384 	.word	0x20001384
 80093fc:	20001370 	.word	0x20001370
 8009400:	20001364 	.word	0x20001364
 8009404:	20000e8c 	.word	0x20000e8c
 8009408:	20000e88 	.word	0x20000e88
 800940c:	2000001c 	.word	0x2000001c

08009410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10c      	bne.n	800943a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	b672      	cpsid	i
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	b662      	cpsie	i
 8009434:	60fb      	str	r3, [r7, #12]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800943a:	4b07      	ldr	r3, [pc, #28]	; (8009458 <vTaskPlaceOnEventList+0x48>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3318      	adds	r3, #24
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f7fe fae1 	bl	8007a0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009448:	2101      	movs	r1, #1
 800944a:	6838      	ldr	r0, [r7, #0]
 800944c:	f000 fb90 	bl	8009b70 <prvAddCurrentTaskToDelayedList>
}
 8009450:	bf00      	nop
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000e88 	.word	0x20000e88

0800945c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10c      	bne.n	8009488 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	b672      	cpsid	i
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	b662      	cpsie	i
 8009482:	617b      	str	r3, [r7, #20]
}
 8009484:	bf00      	nop
 8009486:	e7fe      	b.n	8009486 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009488:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3318      	adds	r3, #24
 800948e:	4619      	mov	r1, r3
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7fe fa96 	bl	80079c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800949c:	f04f 33ff 	mov.w	r3, #4294967295
 80094a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	68b8      	ldr	r0, [r7, #8]
 80094a6:	f000 fb63 	bl	8009b70 <prvAddCurrentTaskToDelayedList>
	}
 80094aa:	bf00      	nop
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20000e88 	.word	0x20000e88

080094b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10c      	bne.n	80094e8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	b672      	cpsid	i
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	b662      	cpsie	i
 80094e2:	60fb      	str	r3, [r7, #12]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	3318      	adds	r3, #24
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fe fac5 	bl	8007a7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f2:	4b1e      	ldr	r3, [pc, #120]	; (800956c <xTaskRemoveFromEventList+0xb4>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d11d      	bne.n	8009536 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	3304      	adds	r3, #4
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe fabc 	bl	8007a7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009508:	4b19      	ldr	r3, [pc, #100]	; (8009570 <xTaskRemoveFromEventList+0xb8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	429a      	cmp	r2, r3
 800950e:	d903      	bls.n	8009518 <xTaskRemoveFromEventList+0x60>
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	4a16      	ldr	r2, [pc, #88]	; (8009570 <xTaskRemoveFromEventList+0xb8>)
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4a13      	ldr	r2, [pc, #76]	; (8009574 <xTaskRemoveFromEventList+0xbc>)
 8009526:	441a      	add	r2, r3
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	3304      	adds	r3, #4
 800952c:	4619      	mov	r1, r3
 800952e:	4610      	mov	r0, r2
 8009530:	f7fe fa47 	bl	80079c2 <vListInsertEnd>
 8009534:	e005      	b.n	8009542 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	3318      	adds	r3, #24
 800953a:	4619      	mov	r1, r3
 800953c:	480e      	ldr	r0, [pc, #56]	; (8009578 <xTaskRemoveFromEventList+0xc0>)
 800953e:	f7fe fa40 	bl	80079c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009546:	4b0d      	ldr	r3, [pc, #52]	; (800957c <xTaskRemoveFromEventList+0xc4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	429a      	cmp	r2, r3
 800954e:	d905      	bls.n	800955c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009550:	2301      	movs	r3, #1
 8009552:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <xTaskRemoveFromEventList+0xc8>)
 8009556:	2201      	movs	r2, #1
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	e001      	b.n	8009560 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800955c:	2300      	movs	r3, #0
 800955e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009560:	697b      	ldr	r3, [r7, #20]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20001384 	.word	0x20001384
 8009570:	20001364 	.word	0x20001364
 8009574:	20000e8c 	.word	0x20000e8c
 8009578:	2000131c 	.word	0x2000131c
 800957c:	20000e88 	.word	0x20000e88
 8009580:	20001370 	.word	0x20001370

08009584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800958c:	4b06      	ldr	r3, [pc, #24]	; (80095a8 <vTaskInternalSetTimeOutState+0x24>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <vTaskInternalSetTimeOutState+0x28>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	605a      	str	r2, [r3, #4]
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	20001374 	.word	0x20001374
 80095ac:	20001360 	.word	0x20001360

080095b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10c      	bne.n	80095da <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	b672      	cpsid	i
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	b662      	cpsie	i
 80095d4:	613b      	str	r3, [r7, #16]
}
 80095d6:	bf00      	nop
 80095d8:	e7fe      	b.n	80095d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10c      	bne.n	80095fa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	b672      	cpsid	i
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	b662      	cpsie	i
 80095f4:	60fb      	str	r3, [r7, #12]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80095fa:	f000 ff77 	bl	800a4ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095fe:	4b1d      	ldr	r3, [pc, #116]	; (8009674 <xTaskCheckForTimeOut+0xc4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	69ba      	ldr	r2, [r7, #24]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009616:	d102      	bne.n	800961e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009618:	2300      	movs	r3, #0
 800961a:	61fb      	str	r3, [r7, #28]
 800961c:	e023      	b.n	8009666 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	4b15      	ldr	r3, [pc, #84]	; (8009678 <xTaskCheckForTimeOut+0xc8>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d007      	beq.n	800963a <xTaskCheckForTimeOut+0x8a>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	429a      	cmp	r2, r3
 8009632:	d302      	bcc.n	800963a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009634:	2301      	movs	r3, #1
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	e015      	b.n	8009666 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	429a      	cmp	r2, r3
 8009642:	d20b      	bcs.n	800965c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	1ad2      	subs	r2, r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ff97 	bl	8009584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	e004      	b.n	8009666 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2200      	movs	r2, #0
 8009660:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009662:	2301      	movs	r3, #1
 8009664:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009666:	f000 ff75 	bl	800a554 <vPortExitCritical>

	return xReturn;
 800966a:	69fb      	ldr	r3, [r7, #28]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	20001360 	.word	0x20001360
 8009678:	20001374 	.word	0x20001374

0800967c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009680:	4b03      	ldr	r3, [pc, #12]	; (8009690 <vTaskMissedYield+0x14>)
 8009682:	2201      	movs	r2, #1
 8009684:	601a      	str	r2, [r3, #0]
}
 8009686:	bf00      	nop
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	20001370 	.word	0x20001370

08009694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800969c:	f000 f852 	bl	8009744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <prvIdleTask+0x28>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d9f9      	bls.n	800969c <prvIdleTask+0x8>
			{
				taskYIELD();
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <prvIdleTask+0x2c>)
 80096aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096b8:	e7f0      	b.n	800969c <prvIdleTask+0x8>
 80096ba:	bf00      	nop
 80096bc:	20000e8c 	.word	0x20000e8c
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096ca:	2300      	movs	r3, #0
 80096cc:	607b      	str	r3, [r7, #4]
 80096ce:	e00c      	b.n	80096ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4a12      	ldr	r2, [pc, #72]	; (8009724 <prvInitialiseTaskLists+0x60>)
 80096dc:	4413      	add	r3, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe f942 	bl	8007968 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3301      	adds	r3, #1
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b37      	cmp	r3, #55	; 0x37
 80096ee:	d9ef      	bls.n	80096d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096f0:	480d      	ldr	r0, [pc, #52]	; (8009728 <prvInitialiseTaskLists+0x64>)
 80096f2:	f7fe f939 	bl	8007968 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096f6:	480d      	ldr	r0, [pc, #52]	; (800972c <prvInitialiseTaskLists+0x68>)
 80096f8:	f7fe f936 	bl	8007968 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096fc:	480c      	ldr	r0, [pc, #48]	; (8009730 <prvInitialiseTaskLists+0x6c>)
 80096fe:	f7fe f933 	bl	8007968 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009702:	480c      	ldr	r0, [pc, #48]	; (8009734 <prvInitialiseTaskLists+0x70>)
 8009704:	f7fe f930 	bl	8007968 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009708:	480b      	ldr	r0, [pc, #44]	; (8009738 <prvInitialiseTaskLists+0x74>)
 800970a:	f7fe f92d 	bl	8007968 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800970e:	4b0b      	ldr	r3, [pc, #44]	; (800973c <prvInitialiseTaskLists+0x78>)
 8009710:	4a05      	ldr	r2, [pc, #20]	; (8009728 <prvInitialiseTaskLists+0x64>)
 8009712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009714:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <prvInitialiseTaskLists+0x7c>)
 8009716:	4a05      	ldr	r2, [pc, #20]	; (800972c <prvInitialiseTaskLists+0x68>)
 8009718:	601a      	str	r2, [r3, #0]
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	20000e8c 	.word	0x20000e8c
 8009728:	200012ec 	.word	0x200012ec
 800972c:	20001300 	.word	0x20001300
 8009730:	2000131c 	.word	0x2000131c
 8009734:	20001330 	.word	0x20001330
 8009738:	20001348 	.word	0x20001348
 800973c:	20001314 	.word	0x20001314
 8009740:	20001318 	.word	0x20001318

08009744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800974a:	e019      	b.n	8009780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800974c:	f000 fece 	bl	800a4ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009750:	4b10      	ldr	r3, [pc, #64]	; (8009794 <prvCheckTasksWaitingTermination+0x50>)
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3304      	adds	r3, #4
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe f98d 	bl	8007a7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009762:	4b0d      	ldr	r3, [pc, #52]	; (8009798 <prvCheckTasksWaitingTermination+0x54>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3b01      	subs	r3, #1
 8009768:	4a0b      	ldr	r2, [pc, #44]	; (8009798 <prvCheckTasksWaitingTermination+0x54>)
 800976a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800976c:	4b0b      	ldr	r3, [pc, #44]	; (800979c <prvCheckTasksWaitingTermination+0x58>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3b01      	subs	r3, #1
 8009772:	4a0a      	ldr	r2, [pc, #40]	; (800979c <prvCheckTasksWaitingTermination+0x58>)
 8009774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009776:	f000 feed 	bl	800a554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f810 	bl	80097a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009780:	4b06      	ldr	r3, [pc, #24]	; (800979c <prvCheckTasksWaitingTermination+0x58>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e1      	bne.n	800974c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009788:	bf00      	nop
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20001330 	.word	0x20001330
 8009798:	2000135c 	.word	0x2000135c
 800979c:	20001344 	.word	0x20001344

080097a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3354      	adds	r3, #84	; 0x54
 80097ac:	4618      	mov	r0, r3
 80097ae:	f001 feb9 	bl	800b524 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d108      	bne.n	80097ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 f889 	bl	800a8d8 <vPortFree>
				vPortFree( pxTCB );
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f001 f886 	bl	800a8d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097cc:	e01a      	b.n	8009804 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d103      	bne.n	80097e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 f87d 	bl	800a8d8 <vPortFree>
	}
 80097de:	e011      	b.n	8009804 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d00c      	beq.n	8009804 <prvDeleteTCB+0x64>
	__asm volatile
 80097ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ee:	b672      	cpsid	i
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	b662      	cpsie	i
 80097fe:	60fb      	str	r3, [r7, #12]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <prvDeleteTCB+0x62>
	}
 8009804:	bf00      	nop
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009812:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <prvResetNextTaskUnblockTime+0x38>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d104      	bne.n	8009826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800981c:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <prvResetNextTaskUnblockTime+0x3c>)
 800981e:	f04f 32ff 	mov.w	r2, #4294967295
 8009822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009824:	e008      	b.n	8009838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009826:	4b07      	ldr	r3, [pc, #28]	; (8009844 <prvResetNextTaskUnblockTime+0x38>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	4a04      	ldr	r2, [pc, #16]	; (8009848 <prvResetNextTaskUnblockTime+0x3c>)
 8009836:	6013      	str	r3, [r2, #0]
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	20001314 	.word	0x20001314
 8009848:	2000137c 	.word	0x2000137c

0800984c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009852:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <xTaskGetSchedulerState+0x34>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d102      	bne.n	8009860 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800985a:	2301      	movs	r3, #1
 800985c:	607b      	str	r3, [r7, #4]
 800985e:	e008      	b.n	8009872 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009860:	4b08      	ldr	r3, [pc, #32]	; (8009884 <xTaskGetSchedulerState+0x38>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d102      	bne.n	800986e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009868:	2302      	movs	r3, #2
 800986a:	607b      	str	r3, [r7, #4]
 800986c:	e001      	b.n	8009872 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800986e:	2300      	movs	r3, #0
 8009870:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009872:	687b      	ldr	r3, [r7, #4]
	}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	20001368 	.word	0x20001368
 8009884:	20001384 	.word	0x20001384

08009888 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009894:	2300      	movs	r3, #0
 8009896:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d051      	beq.n	8009942 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	4b2a      	ldr	r3, [pc, #168]	; (800994c <xTaskPriorityInherit+0xc4>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d241      	bcs.n	8009930 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	db06      	blt.n	80098c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b4:	4b25      	ldr	r3, [pc, #148]	; (800994c <xTaskPriorityInherit+0xc4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	6959      	ldr	r1, [r3, #20]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ca:	4613      	mov	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4a1f      	ldr	r2, [pc, #124]	; (8009950 <xTaskPriorityInherit+0xc8>)
 80098d4:	4413      	add	r3, r2
 80098d6:	4299      	cmp	r1, r3
 80098d8:	d122      	bne.n	8009920 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	3304      	adds	r3, #4
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe f8cc 	bl	8007a7c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80098e4:	4b19      	ldr	r3, [pc, #100]	; (800994c <xTaskPriorityInherit+0xc4>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f2:	4b18      	ldr	r3, [pc, #96]	; (8009954 <xTaskPriorityInherit+0xcc>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d903      	bls.n	8009902 <xTaskPriorityInherit+0x7a>
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	4a15      	ldr	r2, [pc, #84]	; (8009954 <xTaskPriorityInherit+0xcc>)
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4a10      	ldr	r2, [pc, #64]	; (8009950 <xTaskPriorityInherit+0xc8>)
 8009910:	441a      	add	r2, r3
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	3304      	adds	r3, #4
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f7fe f852 	bl	80079c2 <vListInsertEnd>
 800991e:	e004      	b.n	800992a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009920:	4b0a      	ldr	r3, [pc, #40]	; (800994c <xTaskPriorityInherit+0xc4>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800992a:	2301      	movs	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	e008      	b.n	8009942 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009934:	4b05      	ldr	r3, [pc, #20]	; (800994c <xTaskPriorityInherit+0xc4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	429a      	cmp	r2, r3
 800993c:	d201      	bcs.n	8009942 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800993e:	2301      	movs	r3, #1
 8009940:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009942:	68fb      	ldr	r3, [r7, #12]
	}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000e88 	.word	0x20000e88
 8009950:	20000e8c 	.word	0x20000e8c
 8009954:	20001364 	.word	0x20001364

08009958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009964:	2300      	movs	r3, #0
 8009966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d05a      	beq.n	8009a24 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800996e:	4b30      	ldr	r3, [pc, #192]	; (8009a30 <xTaskPriorityDisinherit+0xd8>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	429a      	cmp	r2, r3
 8009976:	d00c      	beq.n	8009992 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	b672      	cpsid	i
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	b662      	cpsie	i
 800998c:	60fb      	str	r3, [r7, #12]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10c      	bne.n	80099b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	b672      	cpsid	i
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	b662      	cpsie	i
 80099ae:	60bb      	str	r3, [r7, #8]
}
 80099b0:	bf00      	nop
 80099b2:	e7fe      	b.n	80099b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b8:	1e5a      	subs	r2, r3, #1
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d02c      	beq.n	8009a24 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d128      	bne.n	8009a24 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	3304      	adds	r3, #4
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe f850 	bl	8007a7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f4:	4b0f      	ldr	r3, [pc, #60]	; (8009a34 <xTaskPriorityDisinherit+0xdc>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d903      	bls.n	8009a04 <xTaskPriorityDisinherit+0xac>
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a00:	4a0c      	ldr	r2, [pc, #48]	; (8009a34 <xTaskPriorityDisinherit+0xdc>)
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a08:	4613      	mov	r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4a09      	ldr	r2, [pc, #36]	; (8009a38 <xTaskPriorityDisinherit+0xe0>)
 8009a12:	441a      	add	r2, r3
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	3304      	adds	r3, #4
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	f7fd ffd1 	bl	80079c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a24:	697b      	ldr	r3, [r7, #20]
	}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000e88 	.word	0x20000e88
 8009a34:	20001364 	.word	0x20001364
 8009a38:	20000e8c 	.word	0x20000e8c

08009a3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d06e      	beq.n	8009b32 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10c      	bne.n	8009a76 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	b672      	cpsid	i
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	b662      	cpsie	i
 8009a70:	60fb      	str	r3, [r7, #12]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d902      	bls.n	8009a86 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	61fb      	str	r3, [r7, #28]
 8009a84:	e002      	b.n	8009a8c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	69fa      	ldr	r2, [r7, #28]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d04d      	beq.n	8009b32 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d148      	bne.n	8009b32 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009aa0:	4b26      	ldr	r3, [pc, #152]	; (8009b3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d10c      	bne.n	8009ac4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aae:	b672      	cpsid	i
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	b662      	cpsie	i
 8009abe:	60bb      	str	r3, [r7, #8]
}
 8009ac0:	bf00      	nop
 8009ac2:	e7fe      	b.n	8009ac2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	69fa      	ldr	r2, [r7, #28]
 8009ace:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	db04      	blt.n	8009ae2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	6959      	ldr	r1, [r3, #20]
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4a13      	ldr	r2, [pc, #76]	; (8009b40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009af2:	4413      	add	r3, r2
 8009af4:	4299      	cmp	r1, r3
 8009af6:	d11c      	bne.n	8009b32 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fd ffbd 	bl	8007a7c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b06:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d903      	bls.n	8009b16 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	4a0c      	ldr	r2, [pc, #48]	; (8009b44 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4a07      	ldr	r2, [pc, #28]	; (8009b40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009b24:	441a      	add	r2, r3
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	3304      	adds	r3, #4
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	f7fd ff48 	bl	80079c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b32:	bf00      	nop
 8009b34:	3720      	adds	r7, #32
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20000e88 	.word	0x20000e88
 8009b40:	20000e8c 	.word	0x20000e8c
 8009b44:	20001364 	.word	0x20001364

08009b48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009b48:	b480      	push	{r7}
 8009b4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009b4c:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d004      	beq.n	8009b5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b54:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b5a:	3201      	adds	r2, #1
 8009b5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009b5e:	4b03      	ldr	r3, [pc, #12]	; (8009b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8009b60:	681b      	ldr	r3, [r3, #0]
	}
 8009b62:	4618      	mov	r0, r3
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	20000e88 	.word	0x20000e88

08009b70 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b7a:	4b21      	ldr	r3, [pc, #132]	; (8009c00 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b80:	4b20      	ldr	r3, [pc, #128]	; (8009c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	3304      	adds	r3, #4
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fd ff78 	bl	8007a7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b92:	d10a      	bne.n	8009baa <prvAddCurrentTaskToDelayedList+0x3a>
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d007      	beq.n	8009baa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b9a:	4b1a      	ldr	r3, [pc, #104]	; (8009c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4819      	ldr	r0, [pc, #100]	; (8009c08 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ba4:	f7fd ff0d 	bl	80079c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ba8:	e026      	b.n	8009bf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4413      	add	r3, r2
 8009bb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bb2:	4b14      	ldr	r3, [pc, #80]	; (8009c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d209      	bcs.n	8009bd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bc2:	4b12      	ldr	r3, [pc, #72]	; (8009c0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b0f      	ldr	r3, [pc, #60]	; (8009c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3304      	adds	r3, #4
 8009bcc:	4619      	mov	r1, r3
 8009bce:	4610      	mov	r0, r2
 8009bd0:	f7fd ff1b 	bl	8007a0a <vListInsert>
}
 8009bd4:	e010      	b.n	8009bf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bd6:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4619      	mov	r1, r3
 8009be2:	4610      	mov	r0, r2
 8009be4:	f7fd ff11 	bl	8007a0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009be8:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d202      	bcs.n	8009bf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bf2:	4a08      	ldr	r2, [pc, #32]	; (8009c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	6013      	str	r3, [r2, #0]
}
 8009bf8:	bf00      	nop
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20001360 	.word	0x20001360
 8009c04:	20000e88 	.word	0x20000e88
 8009c08:	20001348 	.word	0x20001348
 8009c0c:	20001318 	.word	0x20001318
 8009c10:	20001314 	.word	0x20001314
 8009c14:	2000137c 	.word	0x2000137c

08009c18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c22:	f000 fb15 	bl	800a250 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c26:	4b1d      	ldr	r3, [pc, #116]	; (8009c9c <xTimerCreateTimerTask+0x84>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d021      	beq.n	8009c72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c36:	1d3a      	adds	r2, r7, #4
 8009c38:	f107 0108 	add.w	r1, r7, #8
 8009c3c:	f107 030c 	add.w	r3, r7, #12
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fd fe77 	bl	8007934 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	9202      	str	r2, [sp, #8]
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	2302      	movs	r3, #2
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	2300      	movs	r3, #0
 8009c56:	460a      	mov	r2, r1
 8009c58:	4911      	ldr	r1, [pc, #68]	; (8009ca0 <xTimerCreateTimerTask+0x88>)
 8009c5a:	4812      	ldr	r0, [pc, #72]	; (8009ca4 <xTimerCreateTimerTask+0x8c>)
 8009c5c:	f7fe ff8e 	bl	8008b7c <xTaskCreateStatic>
 8009c60:	4603      	mov	r3, r0
 8009c62:	4a11      	ldr	r2, [pc, #68]	; (8009ca8 <xTimerCreateTimerTask+0x90>)
 8009c64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c66:	4b10      	ldr	r3, [pc, #64]	; (8009ca8 <xTimerCreateTimerTask+0x90>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10c      	bne.n	8009c92 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7c:	b672      	cpsid	i
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	b662      	cpsie	i
 8009c8c:	613b      	str	r3, [r7, #16]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009c92:	697b      	ldr	r3, [r7, #20]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3718      	adds	r7, #24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	200013b8 	.word	0x200013b8
 8009ca0:	0800c268 	.word	0x0800c268
 8009ca4:	08009de9 	.word	0x08009de9
 8009ca8:	200013bc 	.word	0x200013bc

08009cac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b08a      	sub	sp, #40	; 0x28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10c      	bne.n	8009cde <xTimerGenericCommand+0x32>
	__asm volatile
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	b672      	cpsid	i
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	b662      	cpsie	i
 8009cd8:	623b      	str	r3, [r7, #32]
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cde:	4b1a      	ldr	r3, [pc, #104]	; (8009d48 <xTimerGenericCommand+0x9c>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d02a      	beq.n	8009d3c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2b05      	cmp	r3, #5
 8009cf6:	dc18      	bgt.n	8009d2a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cf8:	f7ff fda8 	bl	800984c <xTaskGetSchedulerState>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d109      	bne.n	8009d16 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d02:	4b11      	ldr	r3, [pc, #68]	; (8009d48 <xTimerGenericCommand+0x9c>)
 8009d04:	6818      	ldr	r0, [r3, #0]
 8009d06:	f107 0110 	add.w	r1, r7, #16
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d0e:	f7fe f8a3 	bl	8007e58 <xQueueGenericSend>
 8009d12:	6278      	str	r0, [r7, #36]	; 0x24
 8009d14:	e012      	b.n	8009d3c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d16:	4b0c      	ldr	r3, [pc, #48]	; (8009d48 <xTimerGenericCommand+0x9c>)
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	f107 0110 	add.w	r1, r7, #16
 8009d1e:	2300      	movs	r3, #0
 8009d20:	2200      	movs	r2, #0
 8009d22:	f7fe f899 	bl	8007e58 <xQueueGenericSend>
 8009d26:	6278      	str	r0, [r7, #36]	; 0x24
 8009d28:	e008      	b.n	8009d3c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d2a:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <xTimerGenericCommand+0x9c>)
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f107 0110 	add.w	r1, r7, #16
 8009d32:	2300      	movs	r3, #0
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	f7fe f995 	bl	8008064 <xQueueGenericSendFromISR>
 8009d3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3728      	adds	r7, #40	; 0x28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	200013b8 	.word	0x200013b8

08009d4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af02      	add	r7, sp, #8
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d56:	4b23      	ldr	r3, [pc, #140]	; (8009de4 <prvProcessExpiredTimer+0x98>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fd fe89 	bl	8007a7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d70:	f003 0304 	and.w	r3, r3, #4
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d024      	beq.n	8009dc2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	699a      	ldr	r2, [r3, #24]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	18d1      	adds	r1, r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	6978      	ldr	r0, [r7, #20]
 8009d86:	f000 f8d3 	bl	8009f30 <prvInsertTimerInActiveList>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d021      	beq.n	8009dd4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d90:	2300      	movs	r3, #0
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	2300      	movs	r3, #0
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	2100      	movs	r1, #0
 8009d9a:	6978      	ldr	r0, [r7, #20]
 8009d9c:	f7ff ff86 	bl	8009cac <xTimerGenericCommand>
 8009da0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d115      	bne.n	8009dd4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dac:	b672      	cpsid	i
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	b662      	cpsie	i
 8009dbc:	60fb      	str	r3, [r7, #12]
}
 8009dbe:	bf00      	nop
 8009dc0:	e7fe      	b.n	8009dc0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	6978      	ldr	r0, [r7, #20]
 8009dda:	4798      	blx	r3
}
 8009ddc:	bf00      	nop
 8009dde:	3718      	adds	r7, #24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	200013b0 	.word	0x200013b0

08009de8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009df0:	f107 0308 	add.w	r3, r7, #8
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 f857 	bl	8009ea8 <prvGetNextExpireTime>
 8009dfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f000 f803 	bl	8009e0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e06:	f000 f8d5 	bl	8009fb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e0a:	e7f1      	b.n	8009df0 <prvTimerTask+0x8>

08009e0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e16:	f7ff f91b 	bl	8009050 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e1a:	f107 0308 	add.w	r3, r7, #8
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 f866 	bl	8009ef0 <prvSampleTimeNow>
 8009e24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d130      	bne.n	8009e8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <prvProcessTimerOrBlockTask+0x3c>
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d806      	bhi.n	8009e48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e3a:	f7ff f917 	bl	800906c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e3e:	68f9      	ldr	r1, [r7, #12]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff ff83 	bl	8009d4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e46:	e024      	b.n	8009e92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d008      	beq.n	8009e60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e4e:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <prvProcessTimerOrBlockTask+0x90>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <prvProcessTimerOrBlockTask+0x50>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e000      	b.n	8009e5e <prvProcessTimerOrBlockTask+0x52>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e60:	4b0f      	ldr	r3, [pc, #60]	; (8009ea0 <prvProcessTimerOrBlockTask+0x94>)
 8009e62:	6818      	ldr	r0, [r3, #0]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f7fe fe51 	bl	8008b14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e72:	f7ff f8fb 	bl	800906c <xTaskResumeAll>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10a      	bne.n	8009e92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <prvProcessTimerOrBlockTask+0x98>)
 8009e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	f3bf 8f6f 	isb	sy
}
 8009e8c:	e001      	b.n	8009e92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e8e:	f7ff f8ed 	bl	800906c <xTaskResumeAll>
}
 8009e92:	bf00      	nop
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200013b4 	.word	0x200013b4
 8009ea0:	200013b8 	.word	0x200013b8
 8009ea4:	e000ed04 	.word	0xe000ed04

08009ea8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009eb0:	4b0e      	ldr	r3, [pc, #56]	; (8009eec <prvGetNextExpireTime+0x44>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <prvGetNextExpireTime+0x16>
 8009eba:	2201      	movs	r2, #1
 8009ebc:	e000      	b.n	8009ec0 <prvGetNextExpireTime+0x18>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d105      	bne.n	8009ed8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ecc:	4b07      	ldr	r3, [pc, #28]	; (8009eec <prvGetNextExpireTime+0x44>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	e001      	b.n	8009edc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009edc:	68fb      	ldr	r3, [r7, #12]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	200013b0 	.word	0x200013b0

08009ef0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ef8:	f7ff f958 	bl	80091ac <xTaskGetTickCount>
 8009efc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009efe:	4b0b      	ldr	r3, [pc, #44]	; (8009f2c <prvSampleTimeNow+0x3c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d205      	bcs.n	8009f14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f08:	f000 f93c 	bl	800a184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	e002      	b.n	8009f1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f1a:	4a04      	ldr	r2, [pc, #16]	; (8009f2c <prvSampleTimeNow+0x3c>)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f20:	68fb      	ldr	r3, [r7, #12]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	200013c0 	.word	0x200013c0

08009f30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d812      	bhi.n	8009f7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	1ad2      	subs	r2, r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d302      	bcc.n	8009f6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f64:	2301      	movs	r3, #1
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	e01b      	b.n	8009fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f6a:	4b10      	ldr	r3, [pc, #64]	; (8009fac <prvInsertTimerInActiveList+0x7c>)
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3304      	adds	r3, #4
 8009f72:	4619      	mov	r1, r3
 8009f74:	4610      	mov	r0, r2
 8009f76:	f7fd fd48 	bl	8007a0a <vListInsert>
 8009f7a:	e012      	b.n	8009fa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d206      	bcs.n	8009f92 <prvInsertTimerInActiveList+0x62>
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d302      	bcc.n	8009f92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	e007      	b.n	8009fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f92:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <prvInsertTimerInActiveList+0x80>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	f7fd fd34 	bl	8007a0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fa2:	697b      	ldr	r3, [r7, #20]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	200013b4 	.word	0x200013b4
 8009fb0:	200013b0 	.word	0x200013b0

08009fb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08e      	sub	sp, #56	; 0x38
 8009fb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fba:	e0d0      	b.n	800a15e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	da1a      	bge.n	8009ff8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fc2:	1d3b      	adds	r3, r7, #4
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10c      	bne.n	8009fe8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	b672      	cpsid	i
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	b662      	cpsie	i
 8009fe2:	61fb      	str	r3, [r7, #28]
}
 8009fe4:	bf00      	nop
 8009fe6:	e7fe      	b.n	8009fe6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fee:	6850      	ldr	r0, [r2, #4]
 8009ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff2:	6892      	ldr	r2, [r2, #8]
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f2c0 80ae 	blt.w	800a15c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	695b      	ldr	r3, [r3, #20]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d004      	beq.n	800a016 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	3304      	adds	r3, #4
 800a010:	4618      	mov	r0, r3
 800a012:	f7fd fd33 	bl	8007a7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a016:	463b      	mov	r3, r7
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff ff69 	bl	8009ef0 <prvSampleTimeNow>
 800a01e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b09      	cmp	r3, #9
 800a024:	f200 809b 	bhi.w	800a15e <prvProcessReceivedCommands+0x1aa>
 800a028:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <prvProcessReceivedCommands+0x7c>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a059 	.word	0x0800a059
 800a034:	0800a059 	.word	0x0800a059
 800a038:	0800a059 	.word	0x0800a059
 800a03c:	0800a0d1 	.word	0x0800a0d1
 800a040:	0800a0e5 	.word	0x0800a0e5
 800a044:	0800a133 	.word	0x0800a133
 800a048:	0800a059 	.word	0x0800a059
 800a04c:	0800a059 	.word	0x0800a059
 800a050:	0800a0d1 	.word	0x0800a0d1
 800a054:	0800a0e5 	.word	0x0800a0e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a05e:	f043 0301 	orr.w	r3, r3, #1
 800a062:	b2da      	uxtb	r2, r3
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	699b      	ldr	r3, [r3, #24]
 800a070:	18d1      	adds	r1, r2, r3
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a078:	f7ff ff5a 	bl	8009f30 <prvInsertTimerInActiveList>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d06d      	beq.n	800a15e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a088:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d062      	beq.n	800a15e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	441a      	add	r2, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0aa:	f7ff fdff 	bl	8009cac <xTimerGenericCommand>
 800a0ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d153      	bne.n	800a15e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	b672      	cpsid	i
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	b662      	cpsie	i
 800a0ca:	61bb      	str	r3, [r7, #24]
}
 800a0cc:	bf00      	nop
 800a0ce:	e7fe      	b.n	800a0ce <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0d6:	f023 0301 	bic.w	r3, r3, #1
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a0e2:	e03c      	b.n	800a15e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ea:	f043 0301 	orr.w	r3, r3, #1
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10c      	bne.n	800a11e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	b672      	cpsid	i
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	b662      	cpsie	i
 800a118:	617b      	str	r3, [r7, #20]
}
 800a11a:	bf00      	nop
 800a11c:	e7fe      	b.n	800a11c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	699a      	ldr	r2, [r3, #24]
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	18d1      	adds	r1, r2, r3
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a12c:	f7ff ff00 	bl	8009f30 <prvInsertTimerInActiveList>
					break;
 800a130:	e015      	b.n	800a15e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d103      	bne.n	800a148 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a142:	f000 fbc9 	bl	800a8d8 <vPortFree>
 800a146:	e00a      	b.n	800a15e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a14e:	f023 0301 	bic.w	r3, r3, #1
 800a152:	b2da      	uxtb	r2, r3
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a15a:	e000      	b.n	800a15e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a15c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a15e:	4b08      	ldr	r3, [pc, #32]	; (800a180 <prvProcessReceivedCommands+0x1cc>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	1d39      	adds	r1, r7, #4
 800a164:	2200      	movs	r2, #0
 800a166:	4618      	mov	r0, r3
 800a168:	f7fe f8b2 	bl	80082d0 <xQueueReceive>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f47f af24 	bne.w	8009fbc <prvProcessReceivedCommands+0x8>
	}
}
 800a174:	bf00      	nop
 800a176:	bf00      	nop
 800a178:	3730      	adds	r7, #48	; 0x30
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	200013b8 	.word	0x200013b8

0800a184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a18a:	e04a      	b.n	800a222 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a18c:	4b2e      	ldr	r3, [pc, #184]	; (800a248 <prvSwitchTimerLists+0xc4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a196:	4b2c      	ldr	r3, [pc, #176]	; (800a248 <prvSwitchTimerLists+0xc4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fd fc69 	bl	8007a7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d030      	beq.n	800a222 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d90e      	bls.n	800a1f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1de:	4b1a      	ldr	r3, [pc, #104]	; (800a248 <prvSwitchTimerLists+0xc4>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	f7fd fc0e 	bl	8007a0a <vListInsert>
 800a1ee:	e018      	b.n	800a222 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff fd56 	bl	8009cac <xTimerGenericCommand>
 800a200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10c      	bne.n	800a222 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	b672      	cpsid	i
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	b662      	cpsie	i
 800a21c:	603b      	str	r3, [r7, #0]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a222:	4b09      	ldr	r3, [pc, #36]	; (800a248 <prvSwitchTimerLists+0xc4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1af      	bne.n	800a18c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a22c:	4b06      	ldr	r3, [pc, #24]	; (800a248 <prvSwitchTimerLists+0xc4>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a232:	4b06      	ldr	r3, [pc, #24]	; (800a24c <prvSwitchTimerLists+0xc8>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a04      	ldr	r2, [pc, #16]	; (800a248 <prvSwitchTimerLists+0xc4>)
 800a238:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a23a:	4a04      	ldr	r2, [pc, #16]	; (800a24c <prvSwitchTimerLists+0xc8>)
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	6013      	str	r3, [r2, #0]
}
 800a240:	bf00      	nop
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	200013b0 	.word	0x200013b0
 800a24c:	200013b4 	.word	0x200013b4

0800a250 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a256:	f000 f949 	bl	800a4ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a25a:	4b15      	ldr	r3, [pc, #84]	; (800a2b0 <prvCheckForValidListAndQueue+0x60>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d120      	bne.n	800a2a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a262:	4814      	ldr	r0, [pc, #80]	; (800a2b4 <prvCheckForValidListAndQueue+0x64>)
 800a264:	f7fd fb80 	bl	8007968 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a268:	4813      	ldr	r0, [pc, #76]	; (800a2b8 <prvCheckForValidListAndQueue+0x68>)
 800a26a:	f7fd fb7d 	bl	8007968 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a26e:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <prvCheckForValidListAndQueue+0x6c>)
 800a270:	4a10      	ldr	r2, [pc, #64]	; (800a2b4 <prvCheckForValidListAndQueue+0x64>)
 800a272:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a274:	4b12      	ldr	r3, [pc, #72]	; (800a2c0 <prvCheckForValidListAndQueue+0x70>)
 800a276:	4a10      	ldr	r2, [pc, #64]	; (800a2b8 <prvCheckForValidListAndQueue+0x68>)
 800a278:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a27a:	2300      	movs	r3, #0
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	4b11      	ldr	r3, [pc, #68]	; (800a2c4 <prvCheckForValidListAndQueue+0x74>)
 800a280:	4a11      	ldr	r2, [pc, #68]	; (800a2c8 <prvCheckForValidListAndQueue+0x78>)
 800a282:	2110      	movs	r1, #16
 800a284:	200a      	movs	r0, #10
 800a286:	f7fd fc8d 	bl	8007ba4 <xQueueGenericCreateStatic>
 800a28a:	4603      	mov	r3, r0
 800a28c:	4a08      	ldr	r2, [pc, #32]	; (800a2b0 <prvCheckForValidListAndQueue+0x60>)
 800a28e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a290:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <prvCheckForValidListAndQueue+0x60>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d005      	beq.n	800a2a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a298:	4b05      	ldr	r3, [pc, #20]	; (800a2b0 <prvCheckForValidListAndQueue+0x60>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	490b      	ldr	r1, [pc, #44]	; (800a2cc <prvCheckForValidListAndQueue+0x7c>)
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fe fbe4 	bl	8008a6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2a4:	f000 f956 	bl	800a554 <vPortExitCritical>
}
 800a2a8:	bf00      	nop
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	200013b8 	.word	0x200013b8
 800a2b4:	20001388 	.word	0x20001388
 800a2b8:	2000139c 	.word	0x2000139c
 800a2bc:	200013b0 	.word	0x200013b0
 800a2c0:	200013b4 	.word	0x200013b4
 800a2c4:	20001464 	.word	0x20001464
 800a2c8:	200013c4 	.word	0x200013c4
 800a2cc:	0800c270 	.word	0x0800c270

0800a2d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3b04      	subs	r3, #4
 800a2e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3b04      	subs	r3, #4
 800a2ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f023 0201 	bic.w	r2, r3, #1
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3b04      	subs	r3, #4
 800a2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a300:	4a0c      	ldr	r2, [pc, #48]	; (800a334 <pxPortInitialiseStack+0x64>)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b14      	subs	r3, #20
 800a30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3b04      	subs	r3, #4
 800a316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f06f 0202 	mvn.w	r2, #2
 800a31e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3b20      	subs	r3, #32
 800a324:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a326:	68fb      	ldr	r3, [r7, #12]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	0800a339 	.word	0x0800a339

0800a338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a342:	4b14      	ldr	r3, [pc, #80]	; (800a394 <prvTaskExitError+0x5c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34a:	d00c      	beq.n	800a366 <prvTaskExitError+0x2e>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	b672      	cpsid	i
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	b662      	cpsie	i
 800a360:	60fb      	str	r3, [r7, #12]
}
 800a362:	bf00      	nop
 800a364:	e7fe      	b.n	800a364 <prvTaskExitError+0x2c>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	b672      	cpsid	i
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	b662      	cpsie	i
 800a37a:	60bb      	str	r3, [r7, #8]
}
 800a37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a37e:	bf00      	nop
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0fc      	beq.n	800a380 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a386:	bf00      	nop
 800a388:	bf00      	nop
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	20000010 	.word	0x20000010
	...

0800a3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3a0:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <pxCurrentTCBConst2>)
 800a3a2:	6819      	ldr	r1, [r3, #0]
 800a3a4:	6808      	ldr	r0, [r1, #0]
 800a3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	f380 8809 	msr	PSP, r0
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f04f 0000 	mov.w	r0, #0
 800a3b6:	f380 8811 	msr	BASEPRI, r0
 800a3ba:	4770      	bx	lr
 800a3bc:	f3af 8000 	nop.w

0800a3c0 <pxCurrentTCBConst2>:
 800a3c0:	20000e88 	.word	0x20000e88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop

0800a3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3c8:	4808      	ldr	r0, [pc, #32]	; (800a3ec <prvPortStartFirstTask+0x24>)
 800a3ca:	6800      	ldr	r0, [r0, #0]
 800a3cc:	6800      	ldr	r0, [r0, #0]
 800a3ce:	f380 8808 	msr	MSP, r0
 800a3d2:	f04f 0000 	mov.w	r0, #0
 800a3d6:	f380 8814 	msr	CONTROL, r0
 800a3da:	b662      	cpsie	i
 800a3dc:	b661      	cpsie	f
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	df00      	svc	0
 800a3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3ea:	bf00      	nop
 800a3ec:	e000ed08 	.word	0xe000ed08

0800a3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3f6:	4b37      	ldr	r3, [pc, #220]	; (800a4d4 <xPortStartScheduler+0xe4>)
 800a3f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	22ff      	movs	r2, #255	; 0xff
 800a406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	b2db      	uxtb	r3, r3
 800a414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	4b2f      	ldr	r3, [pc, #188]	; (800a4d8 <xPortStartScheduler+0xe8>)
 800a41c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a41e:	4b2f      	ldr	r3, [pc, #188]	; (800a4dc <xPortStartScheduler+0xec>)
 800a420:	2207      	movs	r2, #7
 800a422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a424:	e009      	b.n	800a43a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a426:	4b2d      	ldr	r3, [pc, #180]	; (800a4dc <xPortStartScheduler+0xec>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	4a2b      	ldr	r2, [pc, #172]	; (800a4dc <xPortStartScheduler+0xec>)
 800a42e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	b2db      	uxtb	r3, r3
 800a438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a43a:	78fb      	ldrb	r3, [r7, #3]
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a442:	2b80      	cmp	r3, #128	; 0x80
 800a444:	d0ef      	beq.n	800a426 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a446:	4b25      	ldr	r3, [pc, #148]	; (800a4dc <xPortStartScheduler+0xec>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f1c3 0307 	rsb	r3, r3, #7
 800a44e:	2b04      	cmp	r3, #4
 800a450:	d00c      	beq.n	800a46c <xPortStartScheduler+0x7c>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	b672      	cpsid	i
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	b662      	cpsie	i
 800a466:	60bb      	str	r3, [r7, #8]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a46c:	4b1b      	ldr	r3, [pc, #108]	; (800a4dc <xPortStartScheduler+0xec>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	4a1a      	ldr	r2, [pc, #104]	; (800a4dc <xPortStartScheduler+0xec>)
 800a474:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a476:	4b19      	ldr	r3, [pc, #100]	; (800a4dc <xPortStartScheduler+0xec>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a47e:	4a17      	ldr	r2, [pc, #92]	; (800a4dc <xPortStartScheduler+0xec>)
 800a480:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	b2da      	uxtb	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a48a:	4b15      	ldr	r3, [pc, #84]	; (800a4e0 <xPortStartScheduler+0xf0>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a14      	ldr	r2, [pc, #80]	; (800a4e0 <xPortStartScheduler+0xf0>)
 800a490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a494:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a496:	4b12      	ldr	r3, [pc, #72]	; (800a4e0 <xPortStartScheduler+0xf0>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a11      	ldr	r2, [pc, #68]	; (800a4e0 <xPortStartScheduler+0xf0>)
 800a49c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a4a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4a2:	f000 f8dd 	bl	800a660 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4a6:	4b0f      	ldr	r3, [pc, #60]	; (800a4e4 <xPortStartScheduler+0xf4>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4ac:	f000 f8fc 	bl	800a6a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4b0:	4b0d      	ldr	r3, [pc, #52]	; (800a4e8 <xPortStartScheduler+0xf8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a0c      	ldr	r2, [pc, #48]	; (800a4e8 <xPortStartScheduler+0xf8>)
 800a4b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4bc:	f7ff ff84 	bl	800a3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4c0:	f7fe ff40 	bl	8009344 <vTaskSwitchContext>
	prvTaskExitError();
 800a4c4:	f7ff ff38 	bl	800a338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	e000e400 	.word	0xe000e400
 800a4d8:	200014b4 	.word	0x200014b4
 800a4dc:	200014b8 	.word	0x200014b8
 800a4e0:	e000ed20 	.word	0xe000ed20
 800a4e4:	20000010 	.word	0x20000010
 800a4e8:	e000ef34 	.word	0xe000ef34

0800a4ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	b672      	cpsid	i
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	b662      	cpsie	i
 800a506:	607b      	str	r3, [r7, #4]
}
 800a508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a50a:	4b10      	ldr	r3, [pc, #64]	; (800a54c <vPortEnterCritical+0x60>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3301      	adds	r3, #1
 800a510:	4a0e      	ldr	r2, [pc, #56]	; (800a54c <vPortEnterCritical+0x60>)
 800a512:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a514:	4b0d      	ldr	r3, [pc, #52]	; (800a54c <vPortEnterCritical+0x60>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d111      	bne.n	800a540 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a51c:	4b0c      	ldr	r3, [pc, #48]	; (800a550 <vPortEnterCritical+0x64>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00c      	beq.n	800a540 <vPortEnterCritical+0x54>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	b672      	cpsid	i
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	b662      	cpsie	i
 800a53a:	603b      	str	r3, [r7, #0]
}
 800a53c:	bf00      	nop
 800a53e:	e7fe      	b.n	800a53e <vPortEnterCritical+0x52>
	}
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	20000010 	.word	0x20000010
 800a550:	e000ed04 	.word	0xe000ed04

0800a554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a55a:	4b13      	ldr	r3, [pc, #76]	; (800a5a8 <vPortExitCritical+0x54>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10c      	bne.n	800a57c <vPortExitCritical+0x28>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	b672      	cpsid	i
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	b662      	cpsie	i
 800a576:	607b      	str	r3, [r7, #4]
}
 800a578:	bf00      	nop
 800a57a:	e7fe      	b.n	800a57a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a57c:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <vPortExitCritical+0x54>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3b01      	subs	r3, #1
 800a582:	4a09      	ldr	r2, [pc, #36]	; (800a5a8 <vPortExitCritical+0x54>)
 800a584:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a586:	4b08      	ldr	r3, [pc, #32]	; (800a5a8 <vPortExitCritical+0x54>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d105      	bne.n	800a59a <vPortExitCritical+0x46>
 800a58e:	2300      	movs	r3, #0
 800a590:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	f383 8811 	msr	BASEPRI, r3
}
 800a598:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	20000010 	.word	0x20000010
 800a5ac:	00000000 	.word	0x00000000

0800a5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5b0:	f3ef 8009 	mrs	r0, PSP
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	4b15      	ldr	r3, [pc, #84]	; (800a610 <pxCurrentTCBConst>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	f01e 0f10 	tst.w	lr, #16
 800a5c0:	bf08      	it	eq
 800a5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	6010      	str	r0, [r2, #0]
 800a5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a5d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5d4:	b672      	cpsid	i
 800a5d6:	f380 8811 	msr	BASEPRI, r0
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	b662      	cpsie	i
 800a5e4:	f7fe feae 	bl	8009344 <vTaskSwitchContext>
 800a5e8:	f04f 0000 	mov.w	r0, #0
 800a5ec:	f380 8811 	msr	BASEPRI, r0
 800a5f0:	bc09      	pop	{r0, r3}
 800a5f2:	6819      	ldr	r1, [r3, #0]
 800a5f4:	6808      	ldr	r0, [r1, #0]
 800a5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fa:	f01e 0f10 	tst.w	lr, #16
 800a5fe:	bf08      	it	eq
 800a600:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a604:	f380 8809 	msr	PSP, r0
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <pxCurrentTCBConst>:
 800a610:	20000e88 	.word	0x20000e88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop

0800a618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	b672      	cpsid	i
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	b662      	cpsie	i
 800a632:	607b      	str	r3, [r7, #4]
}
 800a634:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a636:	f7fe fdc9 	bl	80091cc <xTaskIncrementTick>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a640:	4b06      	ldr	r3, [pc, #24]	; (800a65c <SysTick_Handler+0x44>)
 800a642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	2300      	movs	r3, #0
 800a64a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	f383 8811 	msr	BASEPRI, r3
}
 800a652:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	e000ed04 	.word	0xe000ed04

0800a660 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a660:	b480      	push	{r7}
 800a662:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a664:	4b0b      	ldr	r3, [pc, #44]	; (800a694 <vPortSetupTimerInterrupt+0x34>)
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a66a:	4b0b      	ldr	r3, [pc, #44]	; (800a698 <vPortSetupTimerInterrupt+0x38>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a670:	4b0a      	ldr	r3, [pc, #40]	; (800a69c <vPortSetupTimerInterrupt+0x3c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a0a      	ldr	r2, [pc, #40]	; (800a6a0 <vPortSetupTimerInterrupt+0x40>)
 800a676:	fba2 2303 	umull	r2, r3, r2, r3
 800a67a:	099b      	lsrs	r3, r3, #6
 800a67c:	4a09      	ldr	r2, [pc, #36]	; (800a6a4 <vPortSetupTimerInterrupt+0x44>)
 800a67e:	3b01      	subs	r3, #1
 800a680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a682:	4b04      	ldr	r3, [pc, #16]	; (800a694 <vPortSetupTimerInterrupt+0x34>)
 800a684:	2207      	movs	r2, #7
 800a686:	601a      	str	r2, [r3, #0]
}
 800a688:	bf00      	nop
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	e000e010 	.word	0xe000e010
 800a698:	e000e018 	.word	0xe000e018
 800a69c:	20000004 	.word	0x20000004
 800a6a0:	10624dd3 	.word	0x10624dd3
 800a6a4:	e000e014 	.word	0xe000e014

0800a6a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6b8 <vPortEnableVFP+0x10>
 800a6ac:	6801      	ldr	r1, [r0, #0]
 800a6ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6b2:	6001      	str	r1, [r0, #0]
 800a6b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6b6:	bf00      	nop
 800a6b8:	e000ed88 	.word	0xe000ed88

0800a6bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6c2:	f3ef 8305 	mrs	r3, IPSR
 800a6c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2b0f      	cmp	r3, #15
 800a6cc:	d916      	bls.n	800a6fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a6ce:	4a19      	ldr	r2, [pc, #100]	; (800a734 <vPortValidateInterruptPriority+0x78>)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a6d8:	4b17      	ldr	r3, [pc, #92]	; (800a738 <vPortValidateInterruptPriority+0x7c>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	7afa      	ldrb	r2, [r7, #11]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d20c      	bcs.n	800a6fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	b672      	cpsid	i
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	b662      	cpsie	i
 800a6f6:	607b      	str	r3, [r7, #4]
}
 800a6f8:	bf00      	nop
 800a6fa:	e7fe      	b.n	800a6fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6fc:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <vPortValidateInterruptPriority+0x80>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a704:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <vPortValidateInterruptPriority+0x84>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d90c      	bls.n	800a726 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	b672      	cpsid	i
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	b662      	cpsie	i
 800a720:	603b      	str	r3, [r7, #0]
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <vPortValidateInterruptPriority+0x68>
	}
 800a726:	bf00      	nop
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	e000e3f0 	.word	0xe000e3f0
 800a738:	200014b4 	.word	0x200014b4
 800a73c:	e000ed0c 	.word	0xe000ed0c
 800a740:	200014b8 	.word	0x200014b8

0800a744 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08a      	sub	sp, #40	; 0x28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a74c:	2300      	movs	r3, #0
 800a74e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a750:	f7fe fc7e 	bl	8009050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a754:	4b5b      	ldr	r3, [pc, #364]	; (800a8c4 <pvPortMalloc+0x180>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a75c:	f000 f91a 	bl	800a994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a760:	4b59      	ldr	r3, [pc, #356]	; (800a8c8 <pvPortMalloc+0x184>)
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4013      	ands	r3, r2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f040 8092 	bne.w	800a892 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d01f      	beq.n	800a7b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a774:	2208      	movs	r2, #8
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4413      	add	r3, r2
 800a77a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f003 0307 	and.w	r3, r3, #7
 800a782:	2b00      	cmp	r3, #0
 800a784:	d016      	beq.n	800a7b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f023 0307 	bic.w	r3, r3, #7
 800a78c:	3308      	adds	r3, #8
 800a78e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f003 0307 	and.w	r3, r3, #7
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00c      	beq.n	800a7b4 <pvPortMalloc+0x70>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	b672      	cpsid	i
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	b662      	cpsie	i
 800a7ae:	617b      	str	r3, [r7, #20]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d06b      	beq.n	800a892 <pvPortMalloc+0x14e>
 800a7ba:	4b44      	ldr	r3, [pc, #272]	; (800a8cc <pvPortMalloc+0x188>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d866      	bhi.n	800a892 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7c4:	4b42      	ldr	r3, [pc, #264]	; (800a8d0 <pvPortMalloc+0x18c>)
 800a7c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7c8:	4b41      	ldr	r3, [pc, #260]	; (800a8d0 <pvPortMalloc+0x18c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7ce:	e004      	b.n	800a7da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d903      	bls.n	800a7ec <pvPortMalloc+0xa8>
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1f1      	bne.n	800a7d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a7ec:	4b35      	ldr	r3, [pc, #212]	; (800a8c4 <pvPortMalloc+0x180>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d04d      	beq.n	800a892 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2208      	movs	r2, #8
 800a7fc:	4413      	add	r3, r2
 800a7fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	2308      	movs	r3, #8
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	429a      	cmp	r2, r3
 800a816:	d921      	bls.n	800a85c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4413      	add	r3, r2
 800a81e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	f003 0307 	and.w	r3, r3, #7
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00c      	beq.n	800a844 <pvPortMalloc+0x100>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	b672      	cpsid	i
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	b662      	cpsie	i
 800a83e:	613b      	str	r3, [r7, #16]
}
 800a840:	bf00      	nop
 800a842:	e7fe      	b.n	800a842 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a856:	69b8      	ldr	r0, [r7, #24]
 800a858:	f000 f8fe 	bl	800aa58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a85c:	4b1b      	ldr	r3, [pc, #108]	; (800a8cc <pvPortMalloc+0x188>)
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	4a19      	ldr	r2, [pc, #100]	; (800a8cc <pvPortMalloc+0x188>)
 800a868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a86a:	4b18      	ldr	r3, [pc, #96]	; (800a8cc <pvPortMalloc+0x188>)
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	4b19      	ldr	r3, [pc, #100]	; (800a8d4 <pvPortMalloc+0x190>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	429a      	cmp	r2, r3
 800a874:	d203      	bcs.n	800a87e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a876:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <pvPortMalloc+0x188>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a16      	ldr	r2, [pc, #88]	; (800a8d4 <pvPortMalloc+0x190>)
 800a87c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	4b11      	ldr	r3, [pc, #68]	; (800a8c8 <pvPortMalloc+0x184>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	431a      	orrs	r2, r3
 800a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a892:	f7fe fbeb 	bl	800906c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	f003 0307 	and.w	r3, r3, #7
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00c      	beq.n	800a8ba <pvPortMalloc+0x176>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	b672      	cpsid	i
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	b662      	cpsie	i
 800a8b4:	60fb      	str	r3, [r7, #12]
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <pvPortMalloc+0x174>
	return pvReturn;
 800a8ba:	69fb      	ldr	r3, [r7, #28]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3728      	adds	r7, #40	; 0x28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	200050c4 	.word	0x200050c4
 800a8c8:	200050d0 	.word	0x200050d0
 800a8cc:	200050c8 	.word	0x200050c8
 800a8d0:	200050bc 	.word	0x200050bc
 800a8d4:	200050cc 	.word	0x200050cc

0800a8d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b086      	sub	sp, #24
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d04c      	beq.n	800a984 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a8ea:	2308      	movs	r3, #8
 800a8ec:	425b      	negs	r3, r3
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	4b23      	ldr	r3, [pc, #140]	; (800a98c <vPortFree+0xb4>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4013      	ands	r3, r2
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10c      	bne.n	800a920 <vPortFree+0x48>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	b672      	cpsid	i
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	b662      	cpsie	i
 800a91a:	60fb      	str	r3, [r7, #12]
}
 800a91c:	bf00      	nop
 800a91e:	e7fe      	b.n	800a91e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00c      	beq.n	800a942 <vPortFree+0x6a>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	b672      	cpsid	i
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	b662      	cpsie	i
 800a93c:	60bb      	str	r3, [r7, #8]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	4b11      	ldr	r3, [pc, #68]	; (800a98c <vPortFree+0xb4>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4013      	ands	r3, r2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d019      	beq.n	800a984 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d115      	bne.n	800a984 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	4b0b      	ldr	r3, [pc, #44]	; (800a98c <vPortFree+0xb4>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	43db      	mvns	r3, r3
 800a962:	401a      	ands	r2, r3
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a968:	f7fe fb72 	bl	8009050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	4b07      	ldr	r3, [pc, #28]	; (800a990 <vPortFree+0xb8>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4413      	add	r3, r2
 800a976:	4a06      	ldr	r2, [pc, #24]	; (800a990 <vPortFree+0xb8>)
 800a978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a97a:	6938      	ldr	r0, [r7, #16]
 800a97c:	f000 f86c 	bl	800aa58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a980:	f7fe fb74 	bl	800906c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a984:	bf00      	nop
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	200050d0 	.word	0x200050d0
 800a990:	200050c8 	.word	0x200050c8

0800a994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a99a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a99e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9a0:	4b27      	ldr	r3, [pc, #156]	; (800aa40 <prvHeapInit+0xac>)
 800a9a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f003 0307 	and.w	r3, r3, #7
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00c      	beq.n	800a9c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3307      	adds	r3, #7
 800a9b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f023 0307 	bic.w	r3, r3, #7
 800a9ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	4a1f      	ldr	r2, [pc, #124]	; (800aa40 <prvHeapInit+0xac>)
 800a9c4:	4413      	add	r3, r2
 800a9c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a9cc:	4a1d      	ldr	r2, [pc, #116]	; (800aa44 <prvHeapInit+0xb0>)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a9d2:	4b1c      	ldr	r3, [pc, #112]	; (800aa44 <prvHeapInit+0xb0>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	4413      	add	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	1a9b      	subs	r3, r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f023 0307 	bic.w	r3, r3, #7
 800a9ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4a15      	ldr	r2, [pc, #84]	; (800aa48 <prvHeapInit+0xb4>)
 800a9f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a9f6:	4b14      	ldr	r3, [pc, #80]	; (800aa48 <prvHeapInit+0xb4>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a9fe:	4b12      	ldr	r3, [pc, #72]	; (800aa48 <prvHeapInit+0xb4>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	1ad2      	subs	r2, r2, r3
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa14:	4b0c      	ldr	r3, [pc, #48]	; (800aa48 <prvHeapInit+0xb4>)
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	4a0a      	ldr	r2, [pc, #40]	; (800aa4c <prvHeapInit+0xb8>)
 800aa22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	4a09      	ldr	r2, [pc, #36]	; (800aa50 <prvHeapInit+0xbc>)
 800aa2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa2c:	4b09      	ldr	r3, [pc, #36]	; (800aa54 <prvHeapInit+0xc0>)
 800aa2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa32:	601a      	str	r2, [r3, #0]
}
 800aa34:	bf00      	nop
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	200014bc 	.word	0x200014bc
 800aa44:	200050bc 	.word	0x200050bc
 800aa48:	200050c4 	.word	0x200050c4
 800aa4c:	200050cc 	.word	0x200050cc
 800aa50:	200050c8 	.word	0x200050c8
 800aa54:	200050d0 	.word	0x200050d0

0800aa58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aa60:	4b28      	ldr	r3, [pc, #160]	; (800ab04 <prvInsertBlockIntoFreeList+0xac>)
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	e002      	b.n	800aa6c <prvInsertBlockIntoFreeList+0x14>
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d8f7      	bhi.n	800aa66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	4413      	add	r3, r2
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d108      	bne.n	800aa9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	441a      	add	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	441a      	add	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d118      	bne.n	800aae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	4b15      	ldr	r3, [pc, #84]	; (800ab08 <prvInsertBlockIntoFreeList+0xb0>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d00d      	beq.n	800aad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	441a      	add	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	e008      	b.n	800aae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aad6:	4b0c      	ldr	r3, [pc, #48]	; (800ab08 <prvInsertBlockIntoFreeList+0xb0>)
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	e003      	b.n	800aae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d002      	beq.n	800aaf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaf6:	bf00      	nop
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	200050bc 	.word	0x200050bc
 800ab08:	200050c4 	.word	0x200050c4

0800ab0c <findslot>:
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <findslot+0x2c>)
 800ab0e:	b510      	push	{r4, lr}
 800ab10:	4604      	mov	r4, r0
 800ab12:	6818      	ldr	r0, [r3, #0]
 800ab14:	b118      	cbz	r0, 800ab1e <findslot+0x12>
 800ab16:	6983      	ldr	r3, [r0, #24]
 800ab18:	b90b      	cbnz	r3, 800ab1e <findslot+0x12>
 800ab1a:	f000 faf7 	bl	800b10c <__sinit>
 800ab1e:	2c13      	cmp	r4, #19
 800ab20:	d807      	bhi.n	800ab32 <findslot+0x26>
 800ab22:	4806      	ldr	r0, [pc, #24]	; (800ab3c <findslot+0x30>)
 800ab24:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800ab28:	3201      	adds	r2, #1
 800ab2a:	d002      	beq.n	800ab32 <findslot+0x26>
 800ab2c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800ab30:	bd10      	pop	{r4, pc}
 800ab32:	2000      	movs	r0, #0
 800ab34:	e7fc      	b.n	800ab30 <findslot+0x24>
 800ab36:	bf00      	nop
 800ab38:	2000001c 	.word	0x2000001c
 800ab3c:	200050e0 	.word	0x200050e0

0800ab40 <error>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	4604      	mov	r4, r0
 800ab44:	f000 fa84 	bl	800b050 <__errno>
 800ab48:	2613      	movs	r6, #19
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	2700      	movs	r7, #0
 800ab4e:	4630      	mov	r0, r6
 800ab50:	4639      	mov	r1, r7
 800ab52:	beab      	bkpt	0x00ab
 800ab54:	4606      	mov	r6, r0
 800ab56:	602e      	str	r6, [r5, #0]
 800ab58:	4620      	mov	r0, r4
 800ab5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab5c <checkerror>:
 800ab5c:	1c43      	adds	r3, r0, #1
 800ab5e:	d101      	bne.n	800ab64 <checkerror+0x8>
 800ab60:	f7ff bfee 	b.w	800ab40 <error>
 800ab64:	4770      	bx	lr

0800ab66 <_swiread>:
 800ab66:	b530      	push	{r4, r5, lr}
 800ab68:	b085      	sub	sp, #20
 800ab6a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800ab6e:	9203      	str	r2, [sp, #12]
 800ab70:	2406      	movs	r4, #6
 800ab72:	ad01      	add	r5, sp, #4
 800ab74:	4620      	mov	r0, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	beab      	bkpt	0x00ab
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7ff ffed 	bl	800ab5c <checkerror>
 800ab82:	b005      	add	sp, #20
 800ab84:	bd30      	pop	{r4, r5, pc}

0800ab86 <_read>:
 800ab86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab88:	4615      	mov	r5, r2
 800ab8a:	9101      	str	r1, [sp, #4]
 800ab8c:	f7ff ffbe 	bl	800ab0c <findslot>
 800ab90:	9901      	ldr	r1, [sp, #4]
 800ab92:	4604      	mov	r4, r0
 800ab94:	b938      	cbnz	r0, 800aba6 <_read+0x20>
 800ab96:	f000 fa5b 	bl	800b050 <__errno>
 800ab9a:	2309      	movs	r3, #9
 800ab9c:	6003      	str	r3, [r0, #0]
 800ab9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aba2:	b003      	add	sp, #12
 800aba4:	bd30      	pop	{r4, r5, pc}
 800aba6:	6800      	ldr	r0, [r0, #0]
 800aba8:	462a      	mov	r2, r5
 800abaa:	f7ff ffdc 	bl	800ab66 <_swiread>
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	d0f7      	beq.n	800aba2 <_read+0x1c>
 800abb2:	6863      	ldr	r3, [r4, #4]
 800abb4:	1a2a      	subs	r2, r5, r0
 800abb6:	4413      	add	r3, r2
 800abb8:	6063      	str	r3, [r4, #4]
 800abba:	4610      	mov	r0, r2
 800abbc:	e7f1      	b.n	800aba2 <_read+0x1c>

0800abbe <_swilseek>:
 800abbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abc0:	460c      	mov	r4, r1
 800abc2:	4616      	mov	r6, r2
 800abc4:	f7ff ffa2 	bl	800ab0c <findslot>
 800abc8:	4605      	mov	r5, r0
 800abca:	b940      	cbnz	r0, 800abde <_swilseek+0x20>
 800abcc:	f000 fa40 	bl	800b050 <__errno>
 800abd0:	2309      	movs	r3, #9
 800abd2:	6003      	str	r3, [r0, #0]
 800abd4:	f04f 34ff 	mov.w	r4, #4294967295
 800abd8:	4620      	mov	r0, r4
 800abda:	b003      	add	sp, #12
 800abdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abde:	2e02      	cmp	r6, #2
 800abe0:	d903      	bls.n	800abea <_swilseek+0x2c>
 800abe2:	f000 fa35 	bl	800b050 <__errno>
 800abe6:	2316      	movs	r3, #22
 800abe8:	e7f3      	b.n	800abd2 <_swilseek+0x14>
 800abea:	2e01      	cmp	r6, #1
 800abec:	d112      	bne.n	800ac14 <_swilseek+0x56>
 800abee:	6843      	ldr	r3, [r0, #4]
 800abf0:	18e4      	adds	r4, r4, r3
 800abf2:	d4f6      	bmi.n	800abe2 <_swilseek+0x24>
 800abf4:	682b      	ldr	r3, [r5, #0]
 800abf6:	260a      	movs	r6, #10
 800abf8:	e9cd 3400 	strd	r3, r4, [sp]
 800abfc:	466f      	mov	r7, sp
 800abfe:	4630      	mov	r0, r6
 800ac00:	4639      	mov	r1, r7
 800ac02:	beab      	bkpt	0x00ab
 800ac04:	4606      	mov	r6, r0
 800ac06:	4630      	mov	r0, r6
 800ac08:	f7ff ffa8 	bl	800ab5c <checkerror>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	dbe1      	blt.n	800abd4 <_swilseek+0x16>
 800ac10:	606c      	str	r4, [r5, #4]
 800ac12:	e7e1      	b.n	800abd8 <_swilseek+0x1a>
 800ac14:	2e02      	cmp	r6, #2
 800ac16:	d1ed      	bne.n	800abf4 <_swilseek+0x36>
 800ac18:	6803      	ldr	r3, [r0, #0]
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	260c      	movs	r6, #12
 800ac1e:	466f      	mov	r7, sp
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	beab      	bkpt	0x00ab
 800ac26:	4606      	mov	r6, r0
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f7ff ff97 	bl	800ab5c <checkerror>
 800ac2e:	1c43      	adds	r3, r0, #1
 800ac30:	d0d0      	beq.n	800abd4 <_swilseek+0x16>
 800ac32:	4404      	add	r4, r0
 800ac34:	e7de      	b.n	800abf4 <_swilseek+0x36>

0800ac36 <_lseek>:
 800ac36:	f7ff bfc2 	b.w	800abbe <_swilseek>

0800ac3a <_swiwrite>:
 800ac3a:	b530      	push	{r4, r5, lr}
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800ac42:	9203      	str	r2, [sp, #12]
 800ac44:	2405      	movs	r4, #5
 800ac46:	ad01      	add	r5, sp, #4
 800ac48:	4620      	mov	r0, r4
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	beab      	bkpt	0x00ab
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4620      	mov	r0, r4
 800ac52:	f7ff ff83 	bl	800ab5c <checkerror>
 800ac56:	b005      	add	sp, #20
 800ac58:	bd30      	pop	{r4, r5, pc}

0800ac5a <_write>:
 800ac5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac5c:	4615      	mov	r5, r2
 800ac5e:	9101      	str	r1, [sp, #4]
 800ac60:	f7ff ff54 	bl	800ab0c <findslot>
 800ac64:	9901      	ldr	r1, [sp, #4]
 800ac66:	4604      	mov	r4, r0
 800ac68:	b930      	cbnz	r0, 800ac78 <_write+0x1e>
 800ac6a:	f000 f9f1 	bl	800b050 <__errno>
 800ac6e:	2309      	movs	r3, #9
 800ac70:	6003      	str	r3, [r0, #0]
 800ac72:	f04f 30ff 	mov.w	r0, #4294967295
 800ac76:	e012      	b.n	800ac9e <_write+0x44>
 800ac78:	6800      	ldr	r0, [r0, #0]
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	f7ff ffdd 	bl	800ac3a <_swiwrite>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	dbf6      	blt.n	800ac72 <_write+0x18>
 800ac84:	6862      	ldr	r2, [r4, #4]
 800ac86:	1a2b      	subs	r3, r5, r0
 800ac88:	441a      	add	r2, r3
 800ac8a:	42a8      	cmp	r0, r5
 800ac8c:	6062      	str	r2, [r4, #4]
 800ac8e:	d105      	bne.n	800ac9c <_write+0x42>
 800ac90:	2000      	movs	r0, #0
 800ac92:	b003      	add	sp, #12
 800ac94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac98:	f7ff bf52 	b.w	800ab40 <error>
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	b003      	add	sp, #12
 800aca0:	bd30      	pop	{r4, r5, pc}

0800aca2 <_swiclose>:
 800aca2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aca4:	2402      	movs	r4, #2
 800aca6:	9001      	str	r0, [sp, #4]
 800aca8:	ad01      	add	r5, sp, #4
 800acaa:	4620      	mov	r0, r4
 800acac:	4629      	mov	r1, r5
 800acae:	beab      	bkpt	0x00ab
 800acb0:	4604      	mov	r4, r0
 800acb2:	4620      	mov	r0, r4
 800acb4:	f7ff ff52 	bl	800ab5c <checkerror>
 800acb8:	b003      	add	sp, #12
 800acba:	bd30      	pop	{r4, r5, pc}

0800acbc <_close>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4605      	mov	r5, r0
 800acc0:	f7ff ff24 	bl	800ab0c <findslot>
 800acc4:	4604      	mov	r4, r0
 800acc6:	b930      	cbnz	r0, 800acd6 <_close+0x1a>
 800acc8:	f000 f9c2 	bl	800b050 <__errno>
 800accc:	2309      	movs	r3, #9
 800acce:	6003      	str	r3, [r0, #0]
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	bd38      	pop	{r3, r4, r5, pc}
 800acd6:	3d01      	subs	r5, #1
 800acd8:	2d01      	cmp	r5, #1
 800acda:	d809      	bhi.n	800acf0 <_close+0x34>
 800acdc:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <_close+0x48>)
 800acde:	689a      	ldr	r2, [r3, #8]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d104      	bne.n	800acf0 <_close+0x34>
 800ace6:	f04f 33ff 	mov.w	r3, #4294967295
 800acea:	6003      	str	r3, [r0, #0]
 800acec:	2000      	movs	r0, #0
 800acee:	e7f1      	b.n	800acd4 <_close+0x18>
 800acf0:	6820      	ldr	r0, [r4, #0]
 800acf2:	f7ff ffd6 	bl	800aca2 <_swiclose>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d1ec      	bne.n	800acd4 <_close+0x18>
 800acfa:	f04f 33ff 	mov.w	r3, #4294967295
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	e7e8      	b.n	800acd4 <_close+0x18>
 800ad02:	bf00      	nop
 800ad04:	200050e0 	.word	0x200050e0

0800ad08 <_swistat>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	f7ff fefe 	bl	800ab0c <findslot>
 800ad10:	4605      	mov	r5, r0
 800ad12:	b930      	cbnz	r0, 800ad22 <_swistat+0x1a>
 800ad14:	f000 f99c 	bl	800b050 <__errno>
 800ad18:	2309      	movs	r3, #9
 800ad1a:	6003      	str	r3, [r0, #0]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	bd70      	pop	{r4, r5, r6, pc}
 800ad22:	6863      	ldr	r3, [r4, #4]
 800ad24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ad28:	6063      	str	r3, [r4, #4]
 800ad2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad2e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad30:	260c      	movs	r6, #12
 800ad32:	4630      	mov	r0, r6
 800ad34:	4629      	mov	r1, r5
 800ad36:	beab      	bkpt	0x00ab
 800ad38:	4605      	mov	r5, r0
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f7ff ff0e 	bl	800ab5c <checkerror>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	bf1c      	itt	ne
 800ad44:	6120      	strne	r0, [r4, #16]
 800ad46:	2000      	movne	r0, #0
 800ad48:	e7ea      	b.n	800ad20 <_swistat+0x18>

0800ad4a <_fstat>:
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	b510      	push	{r4, lr}
 800ad4e:	2100      	movs	r1, #0
 800ad50:	4604      	mov	r4, r0
 800ad52:	2258      	movs	r2, #88	; 0x58
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 faac 	bl	800b2b2 <memset>
 800ad5a:	4601      	mov	r1, r0
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad62:	f7ff bfd1 	b.w	800ad08 <_swistat>

0800ad66 <_stat>:
 800ad66:	b538      	push	{r3, r4, r5, lr}
 800ad68:	460d      	mov	r5, r1
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	2258      	movs	r2, #88	; 0x58
 800ad6e:	2100      	movs	r1, #0
 800ad70:	4628      	mov	r0, r5
 800ad72:	f000 fa9e 	bl	800b2b2 <memset>
 800ad76:	4620      	mov	r0, r4
 800ad78:	2100      	movs	r1, #0
 800ad7a:	f000 f811 	bl	800ada0 <_swiopen>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	4604      	mov	r4, r0
 800ad82:	d00b      	beq.n	800ad9c <_stat+0x36>
 800ad84:	686b      	ldr	r3, [r5, #4]
 800ad86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ad8a:	606b      	str	r3, [r5, #4]
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	f7ff ffbb 	bl	800ad08 <_swistat>
 800ad92:	4605      	mov	r5, r0
 800ad94:	4620      	mov	r0, r4
 800ad96:	f7ff ff91 	bl	800acbc <_close>
 800ad9a:	462c      	mov	r4, r5
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}

0800ada0 <_swiopen>:
 800ada0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ada4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800ae50 <_swiopen+0xb0>
 800ada8:	b097      	sub	sp, #92	; 0x5c
 800adaa:	4607      	mov	r7, r0
 800adac:	460e      	mov	r6, r1
 800adae:	2500      	movs	r5, #0
 800adb0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800adb4:	1c61      	adds	r1, r4, #1
 800adb6:	d037      	beq.n	800ae28 <_swiopen+0x88>
 800adb8:	3501      	adds	r5, #1
 800adba:	2d14      	cmp	r5, #20
 800adbc:	d1f8      	bne.n	800adb0 <_swiopen+0x10>
 800adbe:	f000 f947 	bl	800b050 <__errno>
 800adc2:	2318      	movs	r3, #24
 800adc4:	6003      	str	r3, [r0, #0]
 800adc6:	f04f 34ff 	mov.w	r4, #4294967295
 800adca:	e03d      	b.n	800ae48 <_swiopen+0xa8>
 800adcc:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800add0:	f240 6301 	movw	r3, #1537	; 0x601
 800add4:	07b2      	lsls	r2, r6, #30
 800add6:	bf48      	it	mi
 800add8:	f044 0402 	orrmi.w	r4, r4, #2
 800addc:	421e      	tst	r6, r3
 800adde:	bf18      	it	ne
 800ade0:	f044 0404 	orrne.w	r4, r4, #4
 800ade4:	0733      	lsls	r3, r6, #28
 800ade6:	bf48      	it	mi
 800ade8:	f024 0404 	bicmi.w	r4, r4, #4
 800adec:	4638      	mov	r0, r7
 800adee:	bf48      	it	mi
 800adf0:	f044 0408 	orrmi.w	r4, r4, #8
 800adf4:	9700      	str	r7, [sp, #0]
 800adf6:	f7f5 fa23 	bl	8000240 <strlen>
 800adfa:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800adfe:	2401      	movs	r4, #1
 800ae00:	4620      	mov	r0, r4
 800ae02:	4649      	mov	r1, r9
 800ae04:	beab      	bkpt	0x00ab
 800ae06:	4604      	mov	r4, r0
 800ae08:	2c00      	cmp	r4, #0
 800ae0a:	db08      	blt.n	800ae1e <_swiopen+0x7e>
 800ae0c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800ae10:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800ae14:	2300      	movs	r3, #0
 800ae16:	f8c8 3004 	str.w	r3, [r8, #4]
 800ae1a:	462c      	mov	r4, r5
 800ae1c:	e014      	b.n	800ae48 <_swiopen+0xa8>
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f7ff fe8e 	bl	800ab40 <error>
 800ae24:	4604      	mov	r4, r0
 800ae26:	e00f      	b.n	800ae48 <_swiopen+0xa8>
 800ae28:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800ae2c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ae30:	46e9      	mov	r9, sp
 800ae32:	d1cb      	bne.n	800adcc <_swiopen+0x2c>
 800ae34:	4649      	mov	r1, r9
 800ae36:	4638      	mov	r0, r7
 800ae38:	f7ff ff95 	bl	800ad66 <_stat>
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d0c5      	beq.n	800adcc <_swiopen+0x2c>
 800ae40:	f000 f906 	bl	800b050 <__errno>
 800ae44:	2311      	movs	r3, #17
 800ae46:	6003      	str	r3, [r0, #0]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	b017      	add	sp, #92	; 0x5c
 800ae4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae50:	200050e0 	.word	0x200050e0

0800ae54 <_get_semihosting_exts>:
 800ae54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae58:	4606      	mov	r6, r0
 800ae5a:	460f      	mov	r7, r1
 800ae5c:	482a      	ldr	r0, [pc, #168]	; (800af08 <_get_semihosting_exts+0xb4>)
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4615      	mov	r5, r2
 800ae62:	f7ff ff9d 	bl	800ada0 <_swiopen>
 800ae66:	462a      	mov	r2, r5
 800ae68:	4604      	mov	r4, r0
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f000 fa20 	bl	800b2b2 <memset>
 800ae72:	1c63      	adds	r3, r4, #1
 800ae74:	d016      	beq.n	800aea4 <_get_semihosting_exts+0x50>
 800ae76:	4620      	mov	r0, r4
 800ae78:	f7ff fe48 	bl	800ab0c <findslot>
 800ae7c:	f04f 090c 	mov.w	r9, #12
 800ae80:	4680      	mov	r8, r0
 800ae82:	4648      	mov	r0, r9
 800ae84:	4641      	mov	r1, r8
 800ae86:	beab      	bkpt	0x00ab
 800ae88:	4680      	mov	r8, r0
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	f7ff fe66 	bl	800ab5c <checkerror>
 800ae90:	2803      	cmp	r0, #3
 800ae92:	dd02      	ble.n	800ae9a <_get_semihosting_exts+0x46>
 800ae94:	1ec3      	subs	r3, r0, #3
 800ae96:	42ab      	cmp	r3, r5
 800ae98:	dc08      	bgt.n	800aeac <_get_semihosting_exts+0x58>
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f7ff ff0e 	bl	800acbc <_close>
 800aea0:	f04f 34ff 	mov.w	r4, #4294967295
 800aea4:	4620      	mov	r0, r4
 800aea6:	b003      	add	sp, #12
 800aea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeac:	2204      	movs	r2, #4
 800aeae:	eb0d 0102 	add.w	r1, sp, r2
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7ff fe67 	bl	800ab86 <_read>
 800aeb8:	2803      	cmp	r0, #3
 800aeba:	ddee      	ble.n	800ae9a <_get_semihosting_exts+0x46>
 800aebc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aec0:	2b53      	cmp	r3, #83	; 0x53
 800aec2:	d1ea      	bne.n	800ae9a <_get_semihosting_exts+0x46>
 800aec4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800aec8:	2b48      	cmp	r3, #72	; 0x48
 800aeca:	d1e6      	bne.n	800ae9a <_get_semihosting_exts+0x46>
 800aecc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aed0:	2b46      	cmp	r3, #70	; 0x46
 800aed2:	d1e2      	bne.n	800ae9a <_get_semihosting_exts+0x46>
 800aed4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aed8:	2b42      	cmp	r3, #66	; 0x42
 800aeda:	d1de      	bne.n	800ae9a <_get_semihosting_exts+0x46>
 800aedc:	2201      	movs	r2, #1
 800aede:	4639      	mov	r1, r7
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7ff fe6c 	bl	800abbe <_swilseek>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	dbd7      	blt.n	800ae9a <_get_semihosting_exts+0x46>
 800aeea:	462a      	mov	r2, r5
 800aeec:	4631      	mov	r1, r6
 800aeee:	4620      	mov	r0, r4
 800aef0:	f7ff fe49 	bl	800ab86 <_read>
 800aef4:	4605      	mov	r5, r0
 800aef6:	4620      	mov	r0, r4
 800aef8:	f7ff fee0 	bl	800acbc <_close>
 800aefc:	4628      	mov	r0, r5
 800aefe:	f7ff fe2d 	bl	800ab5c <checkerror>
 800af02:	4604      	mov	r4, r0
 800af04:	e7ce      	b.n	800aea4 <_get_semihosting_exts+0x50>
 800af06:	bf00      	nop
 800af08:	0800c31c 	.word	0x0800c31c

0800af0c <initialise_semihosting_exts>:
 800af0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af0e:	4d0a      	ldr	r5, [pc, #40]	; (800af38 <initialise_semihosting_exts+0x2c>)
 800af10:	4c0a      	ldr	r4, [pc, #40]	; (800af3c <initialise_semihosting_exts+0x30>)
 800af12:	2100      	movs	r1, #0
 800af14:	2201      	movs	r2, #1
 800af16:	a801      	add	r0, sp, #4
 800af18:	6029      	str	r1, [r5, #0]
 800af1a:	6022      	str	r2, [r4, #0]
 800af1c:	f7ff ff9a 	bl	800ae54 <_get_semihosting_exts>
 800af20:	2800      	cmp	r0, #0
 800af22:	dd07      	ble.n	800af34 <initialise_semihosting_exts+0x28>
 800af24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800af28:	f003 0201 	and.w	r2, r3, #1
 800af2c:	f003 0302 	and.w	r3, r3, #2
 800af30:	602a      	str	r2, [r5, #0]
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	b003      	add	sp, #12
 800af36:	bd30      	pop	{r4, r5, pc}
 800af38:	20000014 	.word	0x20000014
 800af3c:	20000018 	.word	0x20000018

0800af40 <_has_ext_stdout_stderr>:
 800af40:	b510      	push	{r4, lr}
 800af42:	4c04      	ldr	r4, [pc, #16]	; (800af54 <_has_ext_stdout_stderr+0x14>)
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	da01      	bge.n	800af4e <_has_ext_stdout_stderr+0xe>
 800af4a:	f7ff ffdf 	bl	800af0c <initialise_semihosting_exts>
 800af4e:	6820      	ldr	r0, [r4, #0]
 800af50:	bd10      	pop	{r4, pc}
 800af52:	bf00      	nop
 800af54:	20000018 	.word	0x20000018

0800af58 <initialise_monitor_handles>:
 800af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	b085      	sub	sp, #20
 800af5e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800b010 <initialise_monitor_handles+0xb8>
 800af62:	f8cd 9004 	str.w	r9, [sp, #4]
 800af66:	2303      	movs	r3, #3
 800af68:	2400      	movs	r4, #0
 800af6a:	9303      	str	r3, [sp, #12]
 800af6c:	af01      	add	r7, sp, #4
 800af6e:	9402      	str	r4, [sp, #8]
 800af70:	2501      	movs	r5, #1
 800af72:	4628      	mov	r0, r5
 800af74:	4639      	mov	r1, r7
 800af76:	beab      	bkpt	0x00ab
 800af78:	4605      	mov	r5, r0
 800af7a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800b014 <initialise_monitor_handles+0xbc>
 800af7e:	4623      	mov	r3, r4
 800af80:	4c20      	ldr	r4, [pc, #128]	; (800b004 <initialise_monitor_handles+0xac>)
 800af82:	f8c8 5000 	str.w	r5, [r8]
 800af86:	f04f 32ff 	mov.w	r2, #4294967295
 800af8a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800af8e:	3301      	adds	r3, #1
 800af90:	2b14      	cmp	r3, #20
 800af92:	d1fa      	bne.n	800af8a <initialise_monitor_handles+0x32>
 800af94:	f7ff ffd4 	bl	800af40 <_has_ext_stdout_stderr>
 800af98:	4d1b      	ldr	r5, [pc, #108]	; (800b008 <initialise_monitor_handles+0xb0>)
 800af9a:	b1d0      	cbz	r0, 800afd2 <initialise_monitor_handles+0x7a>
 800af9c:	f04f 0a03 	mov.w	sl, #3
 800afa0:	2304      	movs	r3, #4
 800afa2:	f8cd 9004 	str.w	r9, [sp, #4]
 800afa6:	2601      	movs	r6, #1
 800afa8:	f8cd a00c 	str.w	sl, [sp, #12]
 800afac:	9302      	str	r3, [sp, #8]
 800afae:	4630      	mov	r0, r6
 800afb0:	4639      	mov	r1, r7
 800afb2:	beab      	bkpt	0x00ab
 800afb4:	4683      	mov	fp, r0
 800afb6:	4b15      	ldr	r3, [pc, #84]	; (800b00c <initialise_monitor_handles+0xb4>)
 800afb8:	f8cd 9004 	str.w	r9, [sp, #4]
 800afbc:	f8c3 b000 	str.w	fp, [r3]
 800afc0:	2308      	movs	r3, #8
 800afc2:	f8cd a00c 	str.w	sl, [sp, #12]
 800afc6:	9302      	str	r3, [sp, #8]
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	beab      	bkpt	0x00ab
 800afce:	4606      	mov	r6, r0
 800afd0:	602e      	str	r6, [r5, #0]
 800afd2:	682b      	ldr	r3, [r5, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	bf02      	ittt	eq
 800afd8:	4b0c      	ldreq	r3, [pc, #48]	; (800b00c <initialise_monitor_handles+0xb4>)
 800afda:	681b      	ldreq	r3, [r3, #0]
 800afdc:	602b      	streq	r3, [r5, #0]
 800afde:	2600      	movs	r6, #0
 800afe0:	f8d8 3000 	ldr.w	r3, [r8]
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	6066      	str	r6, [r4, #4]
 800afe8:	f7ff ffaa 	bl	800af40 <_has_ext_stdout_stderr>
 800afec:	b130      	cbz	r0, 800affc <initialise_monitor_handles+0xa4>
 800afee:	4b07      	ldr	r3, [pc, #28]	; (800b00c <initialise_monitor_handles+0xb4>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800affc:	b005      	add	sp, #20
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b002:	bf00      	nop
 800b004:	200050e0 	.word	0x200050e0
 800b008:	200050d4 	.word	0x200050d4
 800b00c:	200050dc 	.word	0x200050dc
 800b010:	0800c332 	.word	0x0800c332
 800b014:	200050d8 	.word	0x200050d8

0800b018 <_isatty>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	f7ff fd77 	bl	800ab0c <findslot>
 800b01e:	2509      	movs	r5, #9
 800b020:	4604      	mov	r4, r0
 800b022:	b920      	cbnz	r0, 800b02e <_isatty+0x16>
 800b024:	f000 f814 	bl	800b050 <__errno>
 800b028:	6005      	str	r5, [r0, #0]
 800b02a:	4620      	mov	r0, r4
 800b02c:	bd70      	pop	{r4, r5, r6, pc}
 800b02e:	4628      	mov	r0, r5
 800b030:	4621      	mov	r1, r4
 800b032:	beab      	bkpt	0x00ab
 800b034:	4604      	mov	r4, r0
 800b036:	2c01      	cmp	r4, #1
 800b038:	d0f7      	beq.n	800b02a <_isatty+0x12>
 800b03a:	f000 f809 	bl	800b050 <__errno>
 800b03e:	2400      	movs	r4, #0
 800b040:	4605      	mov	r5, r0
 800b042:	2613      	movs	r6, #19
 800b044:	4630      	mov	r0, r6
 800b046:	4621      	mov	r1, r4
 800b048:	beab      	bkpt	0x00ab
 800b04a:	4606      	mov	r6, r0
 800b04c:	602e      	str	r6, [r5, #0]
 800b04e:	e7ec      	b.n	800b02a <_isatty+0x12>

0800b050 <__errno>:
 800b050:	4b01      	ldr	r3, [pc, #4]	; (800b058 <__errno+0x8>)
 800b052:	6818      	ldr	r0, [r3, #0]
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	2000001c 	.word	0x2000001c

0800b05c <std>:
 800b05c:	2300      	movs	r3, #0
 800b05e:	b510      	push	{r4, lr}
 800b060:	4604      	mov	r4, r0
 800b062:	e9c0 3300 	strd	r3, r3, [r0]
 800b066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b06a:	6083      	str	r3, [r0, #8]
 800b06c:	8181      	strh	r1, [r0, #12]
 800b06e:	6643      	str	r3, [r0, #100]	; 0x64
 800b070:	81c2      	strh	r2, [r0, #14]
 800b072:	6183      	str	r3, [r0, #24]
 800b074:	4619      	mov	r1, r3
 800b076:	2208      	movs	r2, #8
 800b078:	305c      	adds	r0, #92	; 0x5c
 800b07a:	f000 f91a 	bl	800b2b2 <memset>
 800b07e:	4b05      	ldr	r3, [pc, #20]	; (800b094 <std+0x38>)
 800b080:	6263      	str	r3, [r4, #36]	; 0x24
 800b082:	4b05      	ldr	r3, [pc, #20]	; (800b098 <std+0x3c>)
 800b084:	62a3      	str	r3, [r4, #40]	; 0x28
 800b086:	4b05      	ldr	r3, [pc, #20]	; (800b09c <std+0x40>)
 800b088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b08a:	4b05      	ldr	r3, [pc, #20]	; (800b0a0 <std+0x44>)
 800b08c:	6224      	str	r4, [r4, #32]
 800b08e:	6323      	str	r3, [r4, #48]	; 0x30
 800b090:	bd10      	pop	{r4, pc}
 800b092:	bf00      	nop
 800b094:	0800b5fd 	.word	0x0800b5fd
 800b098:	0800b61f 	.word	0x0800b61f
 800b09c:	0800b657 	.word	0x0800b657
 800b0a0:	0800b67b 	.word	0x0800b67b

0800b0a4 <_cleanup_r>:
 800b0a4:	4901      	ldr	r1, [pc, #4]	; (800b0ac <_cleanup_r+0x8>)
 800b0a6:	f000 b8af 	b.w	800b208 <_fwalk_reent>
 800b0aa:	bf00      	nop
 800b0ac:	0800b955 	.word	0x0800b955

0800b0b0 <__sfmoreglue>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	2268      	movs	r2, #104	; 0x68
 800b0b4:	1e4d      	subs	r5, r1, #1
 800b0b6:	4355      	muls	r5, r2
 800b0b8:	460e      	mov	r6, r1
 800b0ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0be:	f000 f921 	bl	800b304 <_malloc_r>
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	b140      	cbz	r0, 800b0d8 <__sfmoreglue+0x28>
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	e9c0 1600 	strd	r1, r6, [r0]
 800b0cc:	300c      	adds	r0, #12
 800b0ce:	60a0      	str	r0, [r4, #8]
 800b0d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0d4:	f000 f8ed 	bl	800b2b2 <memset>
 800b0d8:	4620      	mov	r0, r4
 800b0da:	bd70      	pop	{r4, r5, r6, pc}

0800b0dc <__sfp_lock_acquire>:
 800b0dc:	4801      	ldr	r0, [pc, #4]	; (800b0e4 <__sfp_lock_acquire+0x8>)
 800b0de:	f000 b8d8 	b.w	800b292 <__retarget_lock_acquire_recursive>
 800b0e2:	bf00      	nop
 800b0e4:	20005181 	.word	0x20005181

0800b0e8 <__sfp_lock_release>:
 800b0e8:	4801      	ldr	r0, [pc, #4]	; (800b0f0 <__sfp_lock_release+0x8>)
 800b0ea:	f000 b8d3 	b.w	800b294 <__retarget_lock_release_recursive>
 800b0ee:	bf00      	nop
 800b0f0:	20005181 	.word	0x20005181

0800b0f4 <__sinit_lock_acquire>:
 800b0f4:	4801      	ldr	r0, [pc, #4]	; (800b0fc <__sinit_lock_acquire+0x8>)
 800b0f6:	f000 b8cc 	b.w	800b292 <__retarget_lock_acquire_recursive>
 800b0fa:	bf00      	nop
 800b0fc:	20005182 	.word	0x20005182

0800b100 <__sinit_lock_release>:
 800b100:	4801      	ldr	r0, [pc, #4]	; (800b108 <__sinit_lock_release+0x8>)
 800b102:	f000 b8c7 	b.w	800b294 <__retarget_lock_release_recursive>
 800b106:	bf00      	nop
 800b108:	20005182 	.word	0x20005182

0800b10c <__sinit>:
 800b10c:	b510      	push	{r4, lr}
 800b10e:	4604      	mov	r4, r0
 800b110:	f7ff fff0 	bl	800b0f4 <__sinit_lock_acquire>
 800b114:	69a3      	ldr	r3, [r4, #24]
 800b116:	b11b      	cbz	r3, 800b120 <__sinit+0x14>
 800b118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b11c:	f7ff bff0 	b.w	800b100 <__sinit_lock_release>
 800b120:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b124:	6523      	str	r3, [r4, #80]	; 0x50
 800b126:	4b13      	ldr	r3, [pc, #76]	; (800b174 <__sinit+0x68>)
 800b128:	4a13      	ldr	r2, [pc, #76]	; (800b178 <__sinit+0x6c>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b12e:	42a3      	cmp	r3, r4
 800b130:	bf04      	itt	eq
 800b132:	2301      	moveq	r3, #1
 800b134:	61a3      	streq	r3, [r4, #24]
 800b136:	4620      	mov	r0, r4
 800b138:	f000 f820 	bl	800b17c <__sfp>
 800b13c:	6060      	str	r0, [r4, #4]
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 f81c 	bl	800b17c <__sfp>
 800b144:	60a0      	str	r0, [r4, #8]
 800b146:	4620      	mov	r0, r4
 800b148:	f000 f818 	bl	800b17c <__sfp>
 800b14c:	2200      	movs	r2, #0
 800b14e:	60e0      	str	r0, [r4, #12]
 800b150:	2104      	movs	r1, #4
 800b152:	6860      	ldr	r0, [r4, #4]
 800b154:	f7ff ff82 	bl	800b05c <std>
 800b158:	68a0      	ldr	r0, [r4, #8]
 800b15a:	2201      	movs	r2, #1
 800b15c:	2109      	movs	r1, #9
 800b15e:	f7ff ff7d 	bl	800b05c <std>
 800b162:	68e0      	ldr	r0, [r4, #12]
 800b164:	2202      	movs	r2, #2
 800b166:	2112      	movs	r1, #18
 800b168:	f7ff ff78 	bl	800b05c <std>
 800b16c:	2301      	movs	r3, #1
 800b16e:	61a3      	str	r3, [r4, #24]
 800b170:	e7d2      	b.n	800b118 <__sinit+0xc>
 800b172:	bf00      	nop
 800b174:	0800c398 	.word	0x0800c398
 800b178:	0800b0a5 	.word	0x0800b0a5

0800b17c <__sfp>:
 800b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17e:	4607      	mov	r7, r0
 800b180:	f7ff ffac 	bl	800b0dc <__sfp_lock_acquire>
 800b184:	4b1e      	ldr	r3, [pc, #120]	; (800b200 <__sfp+0x84>)
 800b186:	681e      	ldr	r6, [r3, #0]
 800b188:	69b3      	ldr	r3, [r6, #24]
 800b18a:	b913      	cbnz	r3, 800b192 <__sfp+0x16>
 800b18c:	4630      	mov	r0, r6
 800b18e:	f7ff ffbd 	bl	800b10c <__sinit>
 800b192:	3648      	adds	r6, #72	; 0x48
 800b194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b198:	3b01      	subs	r3, #1
 800b19a:	d503      	bpl.n	800b1a4 <__sfp+0x28>
 800b19c:	6833      	ldr	r3, [r6, #0]
 800b19e:	b30b      	cbz	r3, 800b1e4 <__sfp+0x68>
 800b1a0:	6836      	ldr	r6, [r6, #0]
 800b1a2:	e7f7      	b.n	800b194 <__sfp+0x18>
 800b1a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1a8:	b9d5      	cbnz	r5, 800b1e0 <__sfp+0x64>
 800b1aa:	4b16      	ldr	r3, [pc, #88]	; (800b204 <__sfp+0x88>)
 800b1ac:	60e3      	str	r3, [r4, #12]
 800b1ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1b2:	6665      	str	r5, [r4, #100]	; 0x64
 800b1b4:	f000 f86c 	bl	800b290 <__retarget_lock_init_recursive>
 800b1b8:	f7ff ff96 	bl	800b0e8 <__sfp_lock_release>
 800b1bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1c4:	6025      	str	r5, [r4, #0]
 800b1c6:	61a5      	str	r5, [r4, #24]
 800b1c8:	2208      	movs	r2, #8
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1d0:	f000 f86f 	bl	800b2b2 <memset>
 800b1d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1dc:	4620      	mov	r0, r4
 800b1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1e0:	3468      	adds	r4, #104	; 0x68
 800b1e2:	e7d9      	b.n	800b198 <__sfp+0x1c>
 800b1e4:	2104      	movs	r1, #4
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	f7ff ff62 	bl	800b0b0 <__sfmoreglue>
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	6030      	str	r0, [r6, #0]
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d1d5      	bne.n	800b1a0 <__sfp+0x24>
 800b1f4:	f7ff ff78 	bl	800b0e8 <__sfp_lock_release>
 800b1f8:	230c      	movs	r3, #12
 800b1fa:	603b      	str	r3, [r7, #0]
 800b1fc:	e7ee      	b.n	800b1dc <__sfp+0x60>
 800b1fe:	bf00      	nop
 800b200:	0800c398 	.word	0x0800c398
 800b204:	ffff0001 	.word	0xffff0001

0800b208 <_fwalk_reent>:
 800b208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b20c:	4606      	mov	r6, r0
 800b20e:	4688      	mov	r8, r1
 800b210:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b214:	2700      	movs	r7, #0
 800b216:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b21a:	f1b9 0901 	subs.w	r9, r9, #1
 800b21e:	d505      	bpl.n	800b22c <_fwalk_reent+0x24>
 800b220:	6824      	ldr	r4, [r4, #0]
 800b222:	2c00      	cmp	r4, #0
 800b224:	d1f7      	bne.n	800b216 <_fwalk_reent+0xe>
 800b226:	4638      	mov	r0, r7
 800b228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22c:	89ab      	ldrh	r3, [r5, #12]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d907      	bls.n	800b242 <_fwalk_reent+0x3a>
 800b232:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b236:	3301      	adds	r3, #1
 800b238:	d003      	beq.n	800b242 <_fwalk_reent+0x3a>
 800b23a:	4629      	mov	r1, r5
 800b23c:	4630      	mov	r0, r6
 800b23e:	47c0      	blx	r8
 800b240:	4307      	orrs	r7, r0
 800b242:	3568      	adds	r5, #104	; 0x68
 800b244:	e7e9      	b.n	800b21a <_fwalk_reent+0x12>
	...

0800b248 <__libc_init_array>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	4d0d      	ldr	r5, [pc, #52]	; (800b280 <__libc_init_array+0x38>)
 800b24c:	4c0d      	ldr	r4, [pc, #52]	; (800b284 <__libc_init_array+0x3c>)
 800b24e:	1b64      	subs	r4, r4, r5
 800b250:	10a4      	asrs	r4, r4, #2
 800b252:	2600      	movs	r6, #0
 800b254:	42a6      	cmp	r6, r4
 800b256:	d109      	bne.n	800b26c <__libc_init_array+0x24>
 800b258:	4d0b      	ldr	r5, [pc, #44]	; (800b288 <__libc_init_array+0x40>)
 800b25a:	4c0c      	ldr	r4, [pc, #48]	; (800b28c <__libc_init_array+0x44>)
 800b25c:	f000 ffa8 	bl	800c1b0 <_init>
 800b260:	1b64      	subs	r4, r4, r5
 800b262:	10a4      	asrs	r4, r4, #2
 800b264:	2600      	movs	r6, #0
 800b266:	42a6      	cmp	r6, r4
 800b268:	d105      	bne.n	800b276 <__libc_init_array+0x2e>
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b270:	4798      	blx	r3
 800b272:	3601      	adds	r6, #1
 800b274:	e7ee      	b.n	800b254 <__libc_init_array+0xc>
 800b276:	f855 3b04 	ldr.w	r3, [r5], #4
 800b27a:	4798      	blx	r3
 800b27c:	3601      	adds	r6, #1
 800b27e:	e7f2      	b.n	800b266 <__libc_init_array+0x1e>
 800b280:	0800c3d8 	.word	0x0800c3d8
 800b284:	0800c3d8 	.word	0x0800c3d8
 800b288:	0800c3d8 	.word	0x0800c3d8
 800b28c:	0800c3dc 	.word	0x0800c3dc

0800b290 <__retarget_lock_init_recursive>:
 800b290:	4770      	bx	lr

0800b292 <__retarget_lock_acquire_recursive>:
 800b292:	4770      	bx	lr

0800b294 <__retarget_lock_release_recursive>:
 800b294:	4770      	bx	lr

0800b296 <memcpy>:
 800b296:	440a      	add	r2, r1
 800b298:	4291      	cmp	r1, r2
 800b29a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b29e:	d100      	bne.n	800b2a2 <memcpy+0xc>
 800b2a0:	4770      	bx	lr
 800b2a2:	b510      	push	{r4, lr}
 800b2a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ac:	4291      	cmp	r1, r2
 800b2ae:	d1f9      	bne.n	800b2a4 <memcpy+0xe>
 800b2b0:	bd10      	pop	{r4, pc}

0800b2b2 <memset>:
 800b2b2:	4402      	add	r2, r0
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d100      	bne.n	800b2bc <memset+0xa>
 800b2ba:	4770      	bx	lr
 800b2bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b2c0:	e7f9      	b.n	800b2b6 <memset+0x4>
	...

0800b2c4 <sbrk_aligned>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4e0e      	ldr	r6, [pc, #56]	; (800b300 <sbrk_aligned+0x3c>)
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	6831      	ldr	r1, [r6, #0]
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	b911      	cbnz	r1, 800b2d6 <sbrk_aligned+0x12>
 800b2d0:	f000 f984 	bl	800b5dc <_sbrk_r>
 800b2d4:	6030      	str	r0, [r6, #0]
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f000 f97f 	bl	800b5dc <_sbrk_r>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	d00a      	beq.n	800b2f8 <sbrk_aligned+0x34>
 800b2e2:	1cc4      	adds	r4, r0, #3
 800b2e4:	f024 0403 	bic.w	r4, r4, #3
 800b2e8:	42a0      	cmp	r0, r4
 800b2ea:	d007      	beq.n	800b2fc <sbrk_aligned+0x38>
 800b2ec:	1a21      	subs	r1, r4, r0
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f000 f974 	bl	800b5dc <_sbrk_r>
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d101      	bne.n	800b2fc <sbrk_aligned+0x38>
 800b2f8:	f04f 34ff 	mov.w	r4, #4294967295
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	20005188 	.word	0x20005188

0800b304 <_malloc_r>:
 800b304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b308:	1ccd      	adds	r5, r1, #3
 800b30a:	f025 0503 	bic.w	r5, r5, #3
 800b30e:	3508      	adds	r5, #8
 800b310:	2d0c      	cmp	r5, #12
 800b312:	bf38      	it	cc
 800b314:	250c      	movcc	r5, #12
 800b316:	2d00      	cmp	r5, #0
 800b318:	4607      	mov	r7, r0
 800b31a:	db01      	blt.n	800b320 <_malloc_r+0x1c>
 800b31c:	42a9      	cmp	r1, r5
 800b31e:	d905      	bls.n	800b32c <_malloc_r+0x28>
 800b320:	230c      	movs	r3, #12
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	2600      	movs	r6, #0
 800b326:	4630      	mov	r0, r6
 800b328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32c:	4e2e      	ldr	r6, [pc, #184]	; (800b3e8 <_malloc_r+0xe4>)
 800b32e:	f000 fbc5 	bl	800babc <__malloc_lock>
 800b332:	6833      	ldr	r3, [r6, #0]
 800b334:	461c      	mov	r4, r3
 800b336:	bb34      	cbnz	r4, 800b386 <_malloc_r+0x82>
 800b338:	4629      	mov	r1, r5
 800b33a:	4638      	mov	r0, r7
 800b33c:	f7ff ffc2 	bl	800b2c4 <sbrk_aligned>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	4604      	mov	r4, r0
 800b344:	d14d      	bne.n	800b3e2 <_malloc_r+0xde>
 800b346:	6834      	ldr	r4, [r6, #0]
 800b348:	4626      	mov	r6, r4
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	d140      	bne.n	800b3d0 <_malloc_r+0xcc>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	4631      	mov	r1, r6
 800b352:	4638      	mov	r0, r7
 800b354:	eb04 0803 	add.w	r8, r4, r3
 800b358:	f000 f940 	bl	800b5dc <_sbrk_r>
 800b35c:	4580      	cmp	r8, r0
 800b35e:	d13a      	bne.n	800b3d6 <_malloc_r+0xd2>
 800b360:	6821      	ldr	r1, [r4, #0]
 800b362:	3503      	adds	r5, #3
 800b364:	1a6d      	subs	r5, r5, r1
 800b366:	f025 0503 	bic.w	r5, r5, #3
 800b36a:	3508      	adds	r5, #8
 800b36c:	2d0c      	cmp	r5, #12
 800b36e:	bf38      	it	cc
 800b370:	250c      	movcc	r5, #12
 800b372:	4629      	mov	r1, r5
 800b374:	4638      	mov	r0, r7
 800b376:	f7ff ffa5 	bl	800b2c4 <sbrk_aligned>
 800b37a:	3001      	adds	r0, #1
 800b37c:	d02b      	beq.n	800b3d6 <_malloc_r+0xd2>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	442b      	add	r3, r5
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	e00e      	b.n	800b3a4 <_malloc_r+0xa0>
 800b386:	6822      	ldr	r2, [r4, #0]
 800b388:	1b52      	subs	r2, r2, r5
 800b38a:	d41e      	bmi.n	800b3ca <_malloc_r+0xc6>
 800b38c:	2a0b      	cmp	r2, #11
 800b38e:	d916      	bls.n	800b3be <_malloc_r+0xba>
 800b390:	1961      	adds	r1, r4, r5
 800b392:	42a3      	cmp	r3, r4
 800b394:	6025      	str	r5, [r4, #0]
 800b396:	bf18      	it	ne
 800b398:	6059      	strne	r1, [r3, #4]
 800b39a:	6863      	ldr	r3, [r4, #4]
 800b39c:	bf08      	it	eq
 800b39e:	6031      	streq	r1, [r6, #0]
 800b3a0:	5162      	str	r2, [r4, r5]
 800b3a2:	604b      	str	r3, [r1, #4]
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f104 060b 	add.w	r6, r4, #11
 800b3aa:	f000 fb8d 	bl	800bac8 <__malloc_unlock>
 800b3ae:	f026 0607 	bic.w	r6, r6, #7
 800b3b2:	1d23      	adds	r3, r4, #4
 800b3b4:	1af2      	subs	r2, r6, r3
 800b3b6:	d0b6      	beq.n	800b326 <_malloc_r+0x22>
 800b3b8:	1b9b      	subs	r3, r3, r6
 800b3ba:	50a3      	str	r3, [r4, r2]
 800b3bc:	e7b3      	b.n	800b326 <_malloc_r+0x22>
 800b3be:	6862      	ldr	r2, [r4, #4]
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	bf0c      	ite	eq
 800b3c4:	6032      	streq	r2, [r6, #0]
 800b3c6:	605a      	strne	r2, [r3, #4]
 800b3c8:	e7ec      	b.n	800b3a4 <_malloc_r+0xa0>
 800b3ca:	4623      	mov	r3, r4
 800b3cc:	6864      	ldr	r4, [r4, #4]
 800b3ce:	e7b2      	b.n	800b336 <_malloc_r+0x32>
 800b3d0:	4634      	mov	r4, r6
 800b3d2:	6876      	ldr	r6, [r6, #4]
 800b3d4:	e7b9      	b.n	800b34a <_malloc_r+0x46>
 800b3d6:	230c      	movs	r3, #12
 800b3d8:	603b      	str	r3, [r7, #0]
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f000 fb74 	bl	800bac8 <__malloc_unlock>
 800b3e0:	e7a1      	b.n	800b326 <_malloc_r+0x22>
 800b3e2:	6025      	str	r5, [r4, #0]
 800b3e4:	e7de      	b.n	800b3a4 <_malloc_r+0xa0>
 800b3e6:	bf00      	nop
 800b3e8:	20005184 	.word	0x20005184

0800b3ec <iprintf>:
 800b3ec:	b40f      	push	{r0, r1, r2, r3}
 800b3ee:	4b0a      	ldr	r3, [pc, #40]	; (800b418 <iprintf+0x2c>)
 800b3f0:	b513      	push	{r0, r1, r4, lr}
 800b3f2:	681c      	ldr	r4, [r3, #0]
 800b3f4:	b124      	cbz	r4, 800b400 <iprintf+0x14>
 800b3f6:	69a3      	ldr	r3, [r4, #24]
 800b3f8:	b913      	cbnz	r3, 800b400 <iprintf+0x14>
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff fe86 	bl	800b10c <__sinit>
 800b400:	ab05      	add	r3, sp, #20
 800b402:	9a04      	ldr	r2, [sp, #16]
 800b404:	68a1      	ldr	r1, [r4, #8]
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	4620      	mov	r0, r4
 800b40a:	f000 fbd9 	bl	800bbc0 <_vfiprintf_r>
 800b40e:	b002      	add	sp, #8
 800b410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b414:	b004      	add	sp, #16
 800b416:	4770      	bx	lr
 800b418:	2000001c 	.word	0x2000001c

0800b41c <_puts_r>:
 800b41c:	b570      	push	{r4, r5, r6, lr}
 800b41e:	460e      	mov	r6, r1
 800b420:	4605      	mov	r5, r0
 800b422:	b118      	cbz	r0, 800b42c <_puts_r+0x10>
 800b424:	6983      	ldr	r3, [r0, #24]
 800b426:	b90b      	cbnz	r3, 800b42c <_puts_r+0x10>
 800b428:	f7ff fe70 	bl	800b10c <__sinit>
 800b42c:	69ab      	ldr	r3, [r5, #24]
 800b42e:	68ac      	ldr	r4, [r5, #8]
 800b430:	b913      	cbnz	r3, 800b438 <_puts_r+0x1c>
 800b432:	4628      	mov	r0, r5
 800b434:	f7ff fe6a 	bl	800b10c <__sinit>
 800b438:	4b2c      	ldr	r3, [pc, #176]	; (800b4ec <_puts_r+0xd0>)
 800b43a:	429c      	cmp	r4, r3
 800b43c:	d120      	bne.n	800b480 <_puts_r+0x64>
 800b43e:	686c      	ldr	r4, [r5, #4]
 800b440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b442:	07db      	lsls	r3, r3, #31
 800b444:	d405      	bmi.n	800b452 <_puts_r+0x36>
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	0598      	lsls	r0, r3, #22
 800b44a:	d402      	bmi.n	800b452 <_puts_r+0x36>
 800b44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b44e:	f7ff ff20 	bl	800b292 <__retarget_lock_acquire_recursive>
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	0719      	lsls	r1, r3, #28
 800b456:	d51d      	bpl.n	800b494 <_puts_r+0x78>
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	b1db      	cbz	r3, 800b494 <_puts_r+0x78>
 800b45c:	3e01      	subs	r6, #1
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b464:	3b01      	subs	r3, #1
 800b466:	60a3      	str	r3, [r4, #8]
 800b468:	bb39      	cbnz	r1, 800b4ba <_puts_r+0x9e>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	da38      	bge.n	800b4e0 <_puts_r+0xc4>
 800b46e:	4622      	mov	r2, r4
 800b470:	210a      	movs	r1, #10
 800b472:	4628      	mov	r0, r5
 800b474:	f000 f906 	bl	800b684 <__swbuf_r>
 800b478:	3001      	adds	r0, #1
 800b47a:	d011      	beq.n	800b4a0 <_puts_r+0x84>
 800b47c:	250a      	movs	r5, #10
 800b47e:	e011      	b.n	800b4a4 <_puts_r+0x88>
 800b480:	4b1b      	ldr	r3, [pc, #108]	; (800b4f0 <_puts_r+0xd4>)
 800b482:	429c      	cmp	r4, r3
 800b484:	d101      	bne.n	800b48a <_puts_r+0x6e>
 800b486:	68ac      	ldr	r4, [r5, #8]
 800b488:	e7da      	b.n	800b440 <_puts_r+0x24>
 800b48a:	4b1a      	ldr	r3, [pc, #104]	; (800b4f4 <_puts_r+0xd8>)
 800b48c:	429c      	cmp	r4, r3
 800b48e:	bf08      	it	eq
 800b490:	68ec      	ldreq	r4, [r5, #12]
 800b492:	e7d5      	b.n	800b440 <_puts_r+0x24>
 800b494:	4621      	mov	r1, r4
 800b496:	4628      	mov	r0, r5
 800b498:	f000 f958 	bl	800b74c <__swsetup_r>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d0dd      	beq.n	800b45c <_puts_r+0x40>
 800b4a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b4a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4a6:	07da      	lsls	r2, r3, #31
 800b4a8:	d405      	bmi.n	800b4b6 <_puts_r+0x9a>
 800b4aa:	89a3      	ldrh	r3, [r4, #12]
 800b4ac:	059b      	lsls	r3, r3, #22
 800b4ae:	d402      	bmi.n	800b4b6 <_puts_r+0x9a>
 800b4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4b2:	f7ff feef 	bl	800b294 <__retarget_lock_release_recursive>
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	da04      	bge.n	800b4c8 <_puts_r+0xac>
 800b4be:	69a2      	ldr	r2, [r4, #24]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	dc06      	bgt.n	800b4d2 <_puts_r+0xb6>
 800b4c4:	290a      	cmp	r1, #10
 800b4c6:	d004      	beq.n	800b4d2 <_puts_r+0xb6>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	6022      	str	r2, [r4, #0]
 800b4ce:	7019      	strb	r1, [r3, #0]
 800b4d0:	e7c5      	b.n	800b45e <_puts_r+0x42>
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f000 f8d5 	bl	800b684 <__swbuf_r>
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d1bf      	bne.n	800b45e <_puts_r+0x42>
 800b4de:	e7df      	b.n	800b4a0 <_puts_r+0x84>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	250a      	movs	r5, #10
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	6022      	str	r2, [r4, #0]
 800b4e8:	701d      	strb	r5, [r3, #0]
 800b4ea:	e7db      	b.n	800b4a4 <_puts_r+0x88>
 800b4ec:	0800c358 	.word	0x0800c358
 800b4f0:	0800c378 	.word	0x0800c378
 800b4f4:	0800c338 	.word	0x0800c338

0800b4f8 <puts>:
 800b4f8:	4b02      	ldr	r3, [pc, #8]	; (800b504 <puts+0xc>)
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	f7ff bf8d 	b.w	800b41c <_puts_r>
 800b502:	bf00      	nop
 800b504:	2000001c 	.word	0x2000001c

0800b508 <cleanup_glue>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	460c      	mov	r4, r1
 800b50c:	6809      	ldr	r1, [r1, #0]
 800b50e:	4605      	mov	r5, r0
 800b510:	b109      	cbz	r1, 800b516 <cleanup_glue+0xe>
 800b512:	f7ff fff9 	bl	800b508 <cleanup_glue>
 800b516:	4621      	mov	r1, r4
 800b518:	4628      	mov	r0, r5
 800b51a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b51e:	f000 bad9 	b.w	800bad4 <_free_r>
	...

0800b524 <_reclaim_reent>:
 800b524:	4b2c      	ldr	r3, [pc, #176]	; (800b5d8 <_reclaim_reent+0xb4>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4283      	cmp	r3, r0
 800b52a:	b570      	push	{r4, r5, r6, lr}
 800b52c:	4604      	mov	r4, r0
 800b52e:	d051      	beq.n	800b5d4 <_reclaim_reent+0xb0>
 800b530:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b532:	b143      	cbz	r3, 800b546 <_reclaim_reent+0x22>
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d14a      	bne.n	800b5d0 <_reclaim_reent+0xac>
 800b53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b53c:	6819      	ldr	r1, [r3, #0]
 800b53e:	b111      	cbz	r1, 800b546 <_reclaim_reent+0x22>
 800b540:	4620      	mov	r0, r4
 800b542:	f000 fac7 	bl	800bad4 <_free_r>
 800b546:	6961      	ldr	r1, [r4, #20]
 800b548:	b111      	cbz	r1, 800b550 <_reclaim_reent+0x2c>
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 fac2 	bl	800bad4 <_free_r>
 800b550:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b552:	b111      	cbz	r1, 800b55a <_reclaim_reent+0x36>
 800b554:	4620      	mov	r0, r4
 800b556:	f000 fabd 	bl	800bad4 <_free_r>
 800b55a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b55c:	b111      	cbz	r1, 800b564 <_reclaim_reent+0x40>
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 fab8 	bl	800bad4 <_free_r>
 800b564:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b566:	b111      	cbz	r1, 800b56e <_reclaim_reent+0x4a>
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 fab3 	bl	800bad4 <_free_r>
 800b56e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b570:	b111      	cbz	r1, 800b578 <_reclaim_reent+0x54>
 800b572:	4620      	mov	r0, r4
 800b574:	f000 faae 	bl	800bad4 <_free_r>
 800b578:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b57a:	b111      	cbz	r1, 800b582 <_reclaim_reent+0x5e>
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 faa9 	bl	800bad4 <_free_r>
 800b582:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b584:	b111      	cbz	r1, 800b58c <_reclaim_reent+0x68>
 800b586:	4620      	mov	r0, r4
 800b588:	f000 faa4 	bl	800bad4 <_free_r>
 800b58c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b58e:	b111      	cbz	r1, 800b596 <_reclaim_reent+0x72>
 800b590:	4620      	mov	r0, r4
 800b592:	f000 fa9f 	bl	800bad4 <_free_r>
 800b596:	69a3      	ldr	r3, [r4, #24]
 800b598:	b1e3      	cbz	r3, 800b5d4 <_reclaim_reent+0xb0>
 800b59a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b59c:	4620      	mov	r0, r4
 800b59e:	4798      	blx	r3
 800b5a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b5a2:	b1b9      	cbz	r1, 800b5d4 <_reclaim_reent+0xb0>
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5aa:	f7ff bfad 	b.w	800b508 <cleanup_glue>
 800b5ae:	5949      	ldr	r1, [r1, r5]
 800b5b0:	b941      	cbnz	r1, 800b5c4 <_reclaim_reent+0xa0>
 800b5b2:	3504      	adds	r5, #4
 800b5b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b6:	2d80      	cmp	r5, #128	; 0x80
 800b5b8:	68d9      	ldr	r1, [r3, #12]
 800b5ba:	d1f8      	bne.n	800b5ae <_reclaim_reent+0x8a>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 fa89 	bl	800bad4 <_free_r>
 800b5c2:	e7ba      	b.n	800b53a <_reclaim_reent+0x16>
 800b5c4:	680e      	ldr	r6, [r1, #0]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 fa84 	bl	800bad4 <_free_r>
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	e7ef      	b.n	800b5b0 <_reclaim_reent+0x8c>
 800b5d0:	2500      	movs	r5, #0
 800b5d2:	e7ef      	b.n	800b5b4 <_reclaim_reent+0x90>
 800b5d4:	bd70      	pop	{r4, r5, r6, pc}
 800b5d6:	bf00      	nop
 800b5d8:	2000001c 	.word	0x2000001c

0800b5dc <_sbrk_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4d06      	ldr	r5, [pc, #24]	; (800b5f8 <_sbrk_r+0x1c>)
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	602b      	str	r3, [r5, #0]
 800b5e8:	f7f7 f810 	bl	800260c <_sbrk>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d102      	bne.n	800b5f6 <_sbrk_r+0x1a>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b103      	cbz	r3, 800b5f6 <_sbrk_r+0x1a>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	2000518c 	.word	0x2000518c

0800b5fc <__sread>:
 800b5fc:	b510      	push	{r4, lr}
 800b5fe:	460c      	mov	r4, r1
 800b600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b604:	f000 fda0 	bl	800c148 <_read_r>
 800b608:	2800      	cmp	r0, #0
 800b60a:	bfab      	itete	ge
 800b60c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b60e:	89a3      	ldrhlt	r3, [r4, #12]
 800b610:	181b      	addge	r3, r3, r0
 800b612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b616:	bfac      	ite	ge
 800b618:	6563      	strge	r3, [r4, #84]	; 0x54
 800b61a:	81a3      	strhlt	r3, [r4, #12]
 800b61c:	bd10      	pop	{r4, pc}

0800b61e <__swrite>:
 800b61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b622:	461f      	mov	r7, r3
 800b624:	898b      	ldrh	r3, [r1, #12]
 800b626:	05db      	lsls	r3, r3, #23
 800b628:	4605      	mov	r5, r0
 800b62a:	460c      	mov	r4, r1
 800b62c:	4616      	mov	r6, r2
 800b62e:	d505      	bpl.n	800b63c <__swrite+0x1e>
 800b630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b634:	2302      	movs	r3, #2
 800b636:	2200      	movs	r2, #0
 800b638:	f000 f9c8 	bl	800b9cc <_lseek_r>
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b646:	81a3      	strh	r3, [r4, #12]
 800b648:	4632      	mov	r2, r6
 800b64a:	463b      	mov	r3, r7
 800b64c:	4628      	mov	r0, r5
 800b64e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b652:	f000 b869 	b.w	800b728 <_write_r>

0800b656 <__sseek>:
 800b656:	b510      	push	{r4, lr}
 800b658:	460c      	mov	r4, r1
 800b65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b65e:	f000 f9b5 	bl	800b9cc <_lseek_r>
 800b662:	1c43      	adds	r3, r0, #1
 800b664:	89a3      	ldrh	r3, [r4, #12]
 800b666:	bf15      	itete	ne
 800b668:	6560      	strne	r0, [r4, #84]	; 0x54
 800b66a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b66e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b672:	81a3      	strheq	r3, [r4, #12]
 800b674:	bf18      	it	ne
 800b676:	81a3      	strhne	r3, [r4, #12]
 800b678:	bd10      	pop	{r4, pc}

0800b67a <__sclose>:
 800b67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b67e:	f000 b8d3 	b.w	800b828 <_close_r>
	...

0800b684 <__swbuf_r>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	460e      	mov	r6, r1
 800b688:	4614      	mov	r4, r2
 800b68a:	4605      	mov	r5, r0
 800b68c:	b118      	cbz	r0, 800b696 <__swbuf_r+0x12>
 800b68e:	6983      	ldr	r3, [r0, #24]
 800b690:	b90b      	cbnz	r3, 800b696 <__swbuf_r+0x12>
 800b692:	f7ff fd3b 	bl	800b10c <__sinit>
 800b696:	4b21      	ldr	r3, [pc, #132]	; (800b71c <__swbuf_r+0x98>)
 800b698:	429c      	cmp	r4, r3
 800b69a:	d12b      	bne.n	800b6f4 <__swbuf_r+0x70>
 800b69c:	686c      	ldr	r4, [r5, #4]
 800b69e:	69a3      	ldr	r3, [r4, #24]
 800b6a0:	60a3      	str	r3, [r4, #8]
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	071a      	lsls	r2, r3, #28
 800b6a6:	d52f      	bpl.n	800b708 <__swbuf_r+0x84>
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	b36b      	cbz	r3, 800b708 <__swbuf_r+0x84>
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	6820      	ldr	r0, [r4, #0]
 800b6b0:	1ac0      	subs	r0, r0, r3
 800b6b2:	6963      	ldr	r3, [r4, #20]
 800b6b4:	b2f6      	uxtb	r6, r6
 800b6b6:	4283      	cmp	r3, r0
 800b6b8:	4637      	mov	r7, r6
 800b6ba:	dc04      	bgt.n	800b6c6 <__swbuf_r+0x42>
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f000 f948 	bl	800b954 <_fflush_r>
 800b6c4:	bb30      	cbnz	r0, 800b714 <__swbuf_r+0x90>
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	60a3      	str	r3, [r4, #8]
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	6022      	str	r2, [r4, #0]
 800b6d2:	701e      	strb	r6, [r3, #0]
 800b6d4:	6963      	ldr	r3, [r4, #20]
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	4283      	cmp	r3, r0
 800b6da:	d004      	beq.n	800b6e6 <__swbuf_r+0x62>
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	07db      	lsls	r3, r3, #31
 800b6e0:	d506      	bpl.n	800b6f0 <__swbuf_r+0x6c>
 800b6e2:	2e0a      	cmp	r6, #10
 800b6e4:	d104      	bne.n	800b6f0 <__swbuf_r+0x6c>
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	f000 f933 	bl	800b954 <_fflush_r>
 800b6ee:	b988      	cbnz	r0, 800b714 <__swbuf_r+0x90>
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f4:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <__swbuf_r+0x9c>)
 800b6f6:	429c      	cmp	r4, r3
 800b6f8:	d101      	bne.n	800b6fe <__swbuf_r+0x7a>
 800b6fa:	68ac      	ldr	r4, [r5, #8]
 800b6fc:	e7cf      	b.n	800b69e <__swbuf_r+0x1a>
 800b6fe:	4b09      	ldr	r3, [pc, #36]	; (800b724 <__swbuf_r+0xa0>)
 800b700:	429c      	cmp	r4, r3
 800b702:	bf08      	it	eq
 800b704:	68ec      	ldreq	r4, [r5, #12]
 800b706:	e7ca      	b.n	800b69e <__swbuf_r+0x1a>
 800b708:	4621      	mov	r1, r4
 800b70a:	4628      	mov	r0, r5
 800b70c:	f000 f81e 	bl	800b74c <__swsetup_r>
 800b710:	2800      	cmp	r0, #0
 800b712:	d0cb      	beq.n	800b6ac <__swbuf_r+0x28>
 800b714:	f04f 37ff 	mov.w	r7, #4294967295
 800b718:	e7ea      	b.n	800b6f0 <__swbuf_r+0x6c>
 800b71a:	bf00      	nop
 800b71c:	0800c358 	.word	0x0800c358
 800b720:	0800c378 	.word	0x0800c378
 800b724:	0800c338 	.word	0x0800c338

0800b728 <_write_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	4d07      	ldr	r5, [pc, #28]	; (800b748 <_write_r+0x20>)
 800b72c:	4604      	mov	r4, r0
 800b72e:	4608      	mov	r0, r1
 800b730:	4611      	mov	r1, r2
 800b732:	2200      	movs	r2, #0
 800b734:	602a      	str	r2, [r5, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	f7ff fa8f 	bl	800ac5a <_write>
 800b73c:	1c43      	adds	r3, r0, #1
 800b73e:	d102      	bne.n	800b746 <_write_r+0x1e>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	b103      	cbz	r3, 800b746 <_write_r+0x1e>
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	2000518c 	.word	0x2000518c

0800b74c <__swsetup_r>:
 800b74c:	4b32      	ldr	r3, [pc, #200]	; (800b818 <__swsetup_r+0xcc>)
 800b74e:	b570      	push	{r4, r5, r6, lr}
 800b750:	681d      	ldr	r5, [r3, #0]
 800b752:	4606      	mov	r6, r0
 800b754:	460c      	mov	r4, r1
 800b756:	b125      	cbz	r5, 800b762 <__swsetup_r+0x16>
 800b758:	69ab      	ldr	r3, [r5, #24]
 800b75a:	b913      	cbnz	r3, 800b762 <__swsetup_r+0x16>
 800b75c:	4628      	mov	r0, r5
 800b75e:	f7ff fcd5 	bl	800b10c <__sinit>
 800b762:	4b2e      	ldr	r3, [pc, #184]	; (800b81c <__swsetup_r+0xd0>)
 800b764:	429c      	cmp	r4, r3
 800b766:	d10f      	bne.n	800b788 <__swsetup_r+0x3c>
 800b768:	686c      	ldr	r4, [r5, #4]
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b770:	0719      	lsls	r1, r3, #28
 800b772:	d42c      	bmi.n	800b7ce <__swsetup_r+0x82>
 800b774:	06dd      	lsls	r5, r3, #27
 800b776:	d411      	bmi.n	800b79c <__swsetup_r+0x50>
 800b778:	2309      	movs	r3, #9
 800b77a:	6033      	str	r3, [r6, #0]
 800b77c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	f04f 30ff 	mov.w	r0, #4294967295
 800b786:	e03e      	b.n	800b806 <__swsetup_r+0xba>
 800b788:	4b25      	ldr	r3, [pc, #148]	; (800b820 <__swsetup_r+0xd4>)
 800b78a:	429c      	cmp	r4, r3
 800b78c:	d101      	bne.n	800b792 <__swsetup_r+0x46>
 800b78e:	68ac      	ldr	r4, [r5, #8]
 800b790:	e7eb      	b.n	800b76a <__swsetup_r+0x1e>
 800b792:	4b24      	ldr	r3, [pc, #144]	; (800b824 <__swsetup_r+0xd8>)
 800b794:	429c      	cmp	r4, r3
 800b796:	bf08      	it	eq
 800b798:	68ec      	ldreq	r4, [r5, #12]
 800b79a:	e7e6      	b.n	800b76a <__swsetup_r+0x1e>
 800b79c:	0758      	lsls	r0, r3, #29
 800b79e:	d512      	bpl.n	800b7c6 <__swsetup_r+0x7a>
 800b7a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7a2:	b141      	cbz	r1, 800b7b6 <__swsetup_r+0x6a>
 800b7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a8:	4299      	cmp	r1, r3
 800b7aa:	d002      	beq.n	800b7b2 <__swsetup_r+0x66>
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f000 f991 	bl	800bad4 <_free_r>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	6363      	str	r3, [r4, #52]	; 0x34
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7bc:	81a3      	strh	r3, [r4, #12]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	6063      	str	r3, [r4, #4]
 800b7c2:	6923      	ldr	r3, [r4, #16]
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	f043 0308 	orr.w	r3, r3, #8
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	6923      	ldr	r3, [r4, #16]
 800b7d0:	b94b      	cbnz	r3, 800b7e6 <__swsetup_r+0x9a>
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7dc:	d003      	beq.n	800b7e6 <__swsetup_r+0x9a>
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 f92b 	bl	800ba3c <__smakebuf_r>
 800b7e6:	89a0      	ldrh	r0, [r4, #12]
 800b7e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ec:	f010 0301 	ands.w	r3, r0, #1
 800b7f0:	d00a      	beq.n	800b808 <__swsetup_r+0xbc>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60a3      	str	r3, [r4, #8]
 800b7f6:	6963      	ldr	r3, [r4, #20]
 800b7f8:	425b      	negs	r3, r3
 800b7fa:	61a3      	str	r3, [r4, #24]
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	b943      	cbnz	r3, 800b812 <__swsetup_r+0xc6>
 800b800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b804:	d1ba      	bne.n	800b77c <__swsetup_r+0x30>
 800b806:	bd70      	pop	{r4, r5, r6, pc}
 800b808:	0781      	lsls	r1, r0, #30
 800b80a:	bf58      	it	pl
 800b80c:	6963      	ldrpl	r3, [r4, #20]
 800b80e:	60a3      	str	r3, [r4, #8]
 800b810:	e7f4      	b.n	800b7fc <__swsetup_r+0xb0>
 800b812:	2000      	movs	r0, #0
 800b814:	e7f7      	b.n	800b806 <__swsetup_r+0xba>
 800b816:	bf00      	nop
 800b818:	2000001c 	.word	0x2000001c
 800b81c:	0800c358 	.word	0x0800c358
 800b820:	0800c378 	.word	0x0800c378
 800b824:	0800c338 	.word	0x0800c338

0800b828 <_close_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4d06      	ldr	r5, [pc, #24]	; (800b844 <_close_r+0x1c>)
 800b82c:	2300      	movs	r3, #0
 800b82e:	4604      	mov	r4, r0
 800b830:	4608      	mov	r0, r1
 800b832:	602b      	str	r3, [r5, #0]
 800b834:	f7ff fa42 	bl	800acbc <_close>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d102      	bne.n	800b842 <_close_r+0x1a>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b103      	cbz	r3, 800b842 <_close_r+0x1a>
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	bd38      	pop	{r3, r4, r5, pc}
 800b844:	2000518c 	.word	0x2000518c

0800b848 <__sflush_r>:
 800b848:	898a      	ldrh	r2, [r1, #12]
 800b84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84e:	4605      	mov	r5, r0
 800b850:	0710      	lsls	r0, r2, #28
 800b852:	460c      	mov	r4, r1
 800b854:	d458      	bmi.n	800b908 <__sflush_r+0xc0>
 800b856:	684b      	ldr	r3, [r1, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	dc05      	bgt.n	800b868 <__sflush_r+0x20>
 800b85c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b85e:	2b00      	cmp	r3, #0
 800b860:	dc02      	bgt.n	800b868 <__sflush_r+0x20>
 800b862:	2000      	movs	r0, #0
 800b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b86a:	2e00      	cmp	r6, #0
 800b86c:	d0f9      	beq.n	800b862 <__sflush_r+0x1a>
 800b86e:	2300      	movs	r3, #0
 800b870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b874:	682f      	ldr	r7, [r5, #0]
 800b876:	602b      	str	r3, [r5, #0]
 800b878:	d032      	beq.n	800b8e0 <__sflush_r+0x98>
 800b87a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	075a      	lsls	r2, r3, #29
 800b880:	d505      	bpl.n	800b88e <__sflush_r+0x46>
 800b882:	6863      	ldr	r3, [r4, #4]
 800b884:	1ac0      	subs	r0, r0, r3
 800b886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b888:	b10b      	cbz	r3, 800b88e <__sflush_r+0x46>
 800b88a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b88c:	1ac0      	subs	r0, r0, r3
 800b88e:	2300      	movs	r3, #0
 800b890:	4602      	mov	r2, r0
 800b892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b894:	6a21      	ldr	r1, [r4, #32]
 800b896:	4628      	mov	r0, r5
 800b898:	47b0      	blx	r6
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	d106      	bne.n	800b8ae <__sflush_r+0x66>
 800b8a0:	6829      	ldr	r1, [r5, #0]
 800b8a2:	291d      	cmp	r1, #29
 800b8a4:	d82c      	bhi.n	800b900 <__sflush_r+0xb8>
 800b8a6:	4a2a      	ldr	r2, [pc, #168]	; (800b950 <__sflush_r+0x108>)
 800b8a8:	40ca      	lsrs	r2, r1
 800b8aa:	07d6      	lsls	r6, r2, #31
 800b8ac:	d528      	bpl.n	800b900 <__sflush_r+0xb8>
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	6062      	str	r2, [r4, #4]
 800b8b2:	04d9      	lsls	r1, r3, #19
 800b8b4:	6922      	ldr	r2, [r4, #16]
 800b8b6:	6022      	str	r2, [r4, #0]
 800b8b8:	d504      	bpl.n	800b8c4 <__sflush_r+0x7c>
 800b8ba:	1c42      	adds	r2, r0, #1
 800b8bc:	d101      	bne.n	800b8c2 <__sflush_r+0x7a>
 800b8be:	682b      	ldr	r3, [r5, #0]
 800b8c0:	b903      	cbnz	r3, 800b8c4 <__sflush_r+0x7c>
 800b8c2:	6560      	str	r0, [r4, #84]	; 0x54
 800b8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8c6:	602f      	str	r7, [r5, #0]
 800b8c8:	2900      	cmp	r1, #0
 800b8ca:	d0ca      	beq.n	800b862 <__sflush_r+0x1a>
 800b8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8d0:	4299      	cmp	r1, r3
 800b8d2:	d002      	beq.n	800b8da <__sflush_r+0x92>
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 f8fd 	bl	800bad4 <_free_r>
 800b8da:	2000      	movs	r0, #0
 800b8dc:	6360      	str	r0, [r4, #52]	; 0x34
 800b8de:	e7c1      	b.n	800b864 <__sflush_r+0x1c>
 800b8e0:	6a21      	ldr	r1, [r4, #32]
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	47b0      	blx	r6
 800b8e8:	1c41      	adds	r1, r0, #1
 800b8ea:	d1c7      	bne.n	800b87c <__sflush_r+0x34>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d0c4      	beq.n	800b87c <__sflush_r+0x34>
 800b8f2:	2b1d      	cmp	r3, #29
 800b8f4:	d001      	beq.n	800b8fa <__sflush_r+0xb2>
 800b8f6:	2b16      	cmp	r3, #22
 800b8f8:	d101      	bne.n	800b8fe <__sflush_r+0xb6>
 800b8fa:	602f      	str	r7, [r5, #0]
 800b8fc:	e7b1      	b.n	800b862 <__sflush_r+0x1a>
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	e7ad      	b.n	800b864 <__sflush_r+0x1c>
 800b908:	690f      	ldr	r7, [r1, #16]
 800b90a:	2f00      	cmp	r7, #0
 800b90c:	d0a9      	beq.n	800b862 <__sflush_r+0x1a>
 800b90e:	0793      	lsls	r3, r2, #30
 800b910:	680e      	ldr	r6, [r1, #0]
 800b912:	bf08      	it	eq
 800b914:	694b      	ldreq	r3, [r1, #20]
 800b916:	600f      	str	r7, [r1, #0]
 800b918:	bf18      	it	ne
 800b91a:	2300      	movne	r3, #0
 800b91c:	eba6 0807 	sub.w	r8, r6, r7
 800b920:	608b      	str	r3, [r1, #8]
 800b922:	f1b8 0f00 	cmp.w	r8, #0
 800b926:	dd9c      	ble.n	800b862 <__sflush_r+0x1a>
 800b928:	6a21      	ldr	r1, [r4, #32]
 800b92a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b92c:	4643      	mov	r3, r8
 800b92e:	463a      	mov	r2, r7
 800b930:	4628      	mov	r0, r5
 800b932:	47b0      	blx	r6
 800b934:	2800      	cmp	r0, #0
 800b936:	dc06      	bgt.n	800b946 <__sflush_r+0xfe>
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b93e:	81a3      	strh	r3, [r4, #12]
 800b940:	f04f 30ff 	mov.w	r0, #4294967295
 800b944:	e78e      	b.n	800b864 <__sflush_r+0x1c>
 800b946:	4407      	add	r7, r0
 800b948:	eba8 0800 	sub.w	r8, r8, r0
 800b94c:	e7e9      	b.n	800b922 <__sflush_r+0xda>
 800b94e:	bf00      	nop
 800b950:	20400001 	.word	0x20400001

0800b954 <_fflush_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	690b      	ldr	r3, [r1, #16]
 800b958:	4605      	mov	r5, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	b913      	cbnz	r3, 800b964 <_fflush_r+0x10>
 800b95e:	2500      	movs	r5, #0
 800b960:	4628      	mov	r0, r5
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	b118      	cbz	r0, 800b96e <_fflush_r+0x1a>
 800b966:	6983      	ldr	r3, [r0, #24]
 800b968:	b90b      	cbnz	r3, 800b96e <_fflush_r+0x1a>
 800b96a:	f7ff fbcf 	bl	800b10c <__sinit>
 800b96e:	4b14      	ldr	r3, [pc, #80]	; (800b9c0 <_fflush_r+0x6c>)
 800b970:	429c      	cmp	r4, r3
 800b972:	d11b      	bne.n	800b9ac <_fflush_r+0x58>
 800b974:	686c      	ldr	r4, [r5, #4]
 800b976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0ef      	beq.n	800b95e <_fflush_r+0xa>
 800b97e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b980:	07d0      	lsls	r0, r2, #31
 800b982:	d404      	bmi.n	800b98e <_fflush_r+0x3a>
 800b984:	0599      	lsls	r1, r3, #22
 800b986:	d402      	bmi.n	800b98e <_fflush_r+0x3a>
 800b988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b98a:	f7ff fc82 	bl	800b292 <__retarget_lock_acquire_recursive>
 800b98e:	4628      	mov	r0, r5
 800b990:	4621      	mov	r1, r4
 800b992:	f7ff ff59 	bl	800b848 <__sflush_r>
 800b996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b998:	07da      	lsls	r2, r3, #31
 800b99a:	4605      	mov	r5, r0
 800b99c:	d4e0      	bmi.n	800b960 <_fflush_r+0xc>
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	059b      	lsls	r3, r3, #22
 800b9a2:	d4dd      	bmi.n	800b960 <_fflush_r+0xc>
 800b9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9a6:	f7ff fc75 	bl	800b294 <__retarget_lock_release_recursive>
 800b9aa:	e7d9      	b.n	800b960 <_fflush_r+0xc>
 800b9ac:	4b05      	ldr	r3, [pc, #20]	; (800b9c4 <_fflush_r+0x70>)
 800b9ae:	429c      	cmp	r4, r3
 800b9b0:	d101      	bne.n	800b9b6 <_fflush_r+0x62>
 800b9b2:	68ac      	ldr	r4, [r5, #8]
 800b9b4:	e7df      	b.n	800b976 <_fflush_r+0x22>
 800b9b6:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <_fflush_r+0x74>)
 800b9b8:	429c      	cmp	r4, r3
 800b9ba:	bf08      	it	eq
 800b9bc:	68ec      	ldreq	r4, [r5, #12]
 800b9be:	e7da      	b.n	800b976 <_fflush_r+0x22>
 800b9c0:	0800c358 	.word	0x0800c358
 800b9c4:	0800c378 	.word	0x0800c378
 800b9c8:	0800c338 	.word	0x0800c338

0800b9cc <_lseek_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4d07      	ldr	r5, [pc, #28]	; (800b9ec <_lseek_r+0x20>)
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	4608      	mov	r0, r1
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	602a      	str	r2, [r5, #0]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	f7ff f92b 	bl	800ac36 <_lseek>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d102      	bne.n	800b9ea <_lseek_r+0x1e>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	b103      	cbz	r3, 800b9ea <_lseek_r+0x1e>
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
 800b9ec:	2000518c 	.word	0x2000518c

0800b9f0 <__swhatbuf_r>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	460e      	mov	r6, r1
 800b9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f8:	2900      	cmp	r1, #0
 800b9fa:	b096      	sub	sp, #88	; 0x58
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	461d      	mov	r5, r3
 800ba00:	da08      	bge.n	800ba14 <__swhatbuf_r+0x24>
 800ba02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	602a      	str	r2, [r5, #0]
 800ba0a:	061a      	lsls	r2, r3, #24
 800ba0c:	d410      	bmi.n	800ba30 <__swhatbuf_r+0x40>
 800ba0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba12:	e00e      	b.n	800ba32 <__swhatbuf_r+0x42>
 800ba14:	466a      	mov	r2, sp
 800ba16:	f000 fba9 	bl	800c16c <_fstat_r>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	dbf1      	blt.n	800ba02 <__swhatbuf_r+0x12>
 800ba1e:	9a01      	ldr	r2, [sp, #4]
 800ba20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba28:	425a      	negs	r2, r3
 800ba2a:	415a      	adcs	r2, r3
 800ba2c:	602a      	str	r2, [r5, #0]
 800ba2e:	e7ee      	b.n	800ba0e <__swhatbuf_r+0x1e>
 800ba30:	2340      	movs	r3, #64	; 0x40
 800ba32:	2000      	movs	r0, #0
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	b016      	add	sp, #88	; 0x58
 800ba38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba3c <__smakebuf_r>:
 800ba3c:	898b      	ldrh	r3, [r1, #12]
 800ba3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba40:	079d      	lsls	r5, r3, #30
 800ba42:	4606      	mov	r6, r0
 800ba44:	460c      	mov	r4, r1
 800ba46:	d507      	bpl.n	800ba58 <__smakebuf_r+0x1c>
 800ba48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	6123      	str	r3, [r4, #16]
 800ba50:	2301      	movs	r3, #1
 800ba52:	6163      	str	r3, [r4, #20]
 800ba54:	b002      	add	sp, #8
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	ab01      	add	r3, sp, #4
 800ba5a:	466a      	mov	r2, sp
 800ba5c:	f7ff ffc8 	bl	800b9f0 <__swhatbuf_r>
 800ba60:	9900      	ldr	r1, [sp, #0]
 800ba62:	4605      	mov	r5, r0
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7ff fc4d 	bl	800b304 <_malloc_r>
 800ba6a:	b948      	cbnz	r0, 800ba80 <__smakebuf_r+0x44>
 800ba6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba70:	059a      	lsls	r2, r3, #22
 800ba72:	d4ef      	bmi.n	800ba54 <__smakebuf_r+0x18>
 800ba74:	f023 0303 	bic.w	r3, r3, #3
 800ba78:	f043 0302 	orr.w	r3, r3, #2
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	e7e3      	b.n	800ba48 <__smakebuf_r+0xc>
 800ba80:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <__smakebuf_r+0x7c>)
 800ba82:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	6020      	str	r0, [r4, #0]
 800ba88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba8c:	81a3      	strh	r3, [r4, #12]
 800ba8e:	9b00      	ldr	r3, [sp, #0]
 800ba90:	6163      	str	r3, [r4, #20]
 800ba92:	9b01      	ldr	r3, [sp, #4]
 800ba94:	6120      	str	r0, [r4, #16]
 800ba96:	b15b      	cbz	r3, 800bab0 <__smakebuf_r+0x74>
 800ba98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f000 fb77 	bl	800c190 <_isatty_r>
 800baa2:	b128      	cbz	r0, 800bab0 <__smakebuf_r+0x74>
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	f023 0303 	bic.w	r3, r3, #3
 800baaa:	f043 0301 	orr.w	r3, r3, #1
 800baae:	81a3      	strh	r3, [r4, #12]
 800bab0:	89a0      	ldrh	r0, [r4, #12]
 800bab2:	4305      	orrs	r5, r0
 800bab4:	81a5      	strh	r5, [r4, #12]
 800bab6:	e7cd      	b.n	800ba54 <__smakebuf_r+0x18>
 800bab8:	0800b0a5 	.word	0x0800b0a5

0800babc <__malloc_lock>:
 800babc:	4801      	ldr	r0, [pc, #4]	; (800bac4 <__malloc_lock+0x8>)
 800babe:	f7ff bbe8 	b.w	800b292 <__retarget_lock_acquire_recursive>
 800bac2:	bf00      	nop
 800bac4:	20005180 	.word	0x20005180

0800bac8 <__malloc_unlock>:
 800bac8:	4801      	ldr	r0, [pc, #4]	; (800bad0 <__malloc_unlock+0x8>)
 800baca:	f7ff bbe3 	b.w	800b294 <__retarget_lock_release_recursive>
 800bace:	bf00      	nop
 800bad0:	20005180 	.word	0x20005180

0800bad4 <_free_r>:
 800bad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bad6:	2900      	cmp	r1, #0
 800bad8:	d044      	beq.n	800bb64 <_free_r+0x90>
 800bada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bade:	9001      	str	r0, [sp, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f1a1 0404 	sub.w	r4, r1, #4
 800bae6:	bfb8      	it	lt
 800bae8:	18e4      	addlt	r4, r4, r3
 800baea:	f7ff ffe7 	bl	800babc <__malloc_lock>
 800baee:	4a1e      	ldr	r2, [pc, #120]	; (800bb68 <_free_r+0x94>)
 800baf0:	9801      	ldr	r0, [sp, #4]
 800baf2:	6813      	ldr	r3, [r2, #0]
 800baf4:	b933      	cbnz	r3, 800bb04 <_free_r+0x30>
 800baf6:	6063      	str	r3, [r4, #4]
 800baf8:	6014      	str	r4, [r2, #0]
 800bafa:	b003      	add	sp, #12
 800bafc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb00:	f7ff bfe2 	b.w	800bac8 <__malloc_unlock>
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	d908      	bls.n	800bb1a <_free_r+0x46>
 800bb08:	6825      	ldr	r5, [r4, #0]
 800bb0a:	1961      	adds	r1, r4, r5
 800bb0c:	428b      	cmp	r3, r1
 800bb0e:	bf01      	itttt	eq
 800bb10:	6819      	ldreq	r1, [r3, #0]
 800bb12:	685b      	ldreq	r3, [r3, #4]
 800bb14:	1949      	addeq	r1, r1, r5
 800bb16:	6021      	streq	r1, [r4, #0]
 800bb18:	e7ed      	b.n	800baf6 <_free_r+0x22>
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	b10b      	cbz	r3, 800bb24 <_free_r+0x50>
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	d9fa      	bls.n	800bb1a <_free_r+0x46>
 800bb24:	6811      	ldr	r1, [r2, #0]
 800bb26:	1855      	adds	r5, r2, r1
 800bb28:	42a5      	cmp	r5, r4
 800bb2a:	d10b      	bne.n	800bb44 <_free_r+0x70>
 800bb2c:	6824      	ldr	r4, [r4, #0]
 800bb2e:	4421      	add	r1, r4
 800bb30:	1854      	adds	r4, r2, r1
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	6011      	str	r1, [r2, #0]
 800bb36:	d1e0      	bne.n	800bafa <_free_r+0x26>
 800bb38:	681c      	ldr	r4, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	6053      	str	r3, [r2, #4]
 800bb3e:	4421      	add	r1, r4
 800bb40:	6011      	str	r1, [r2, #0]
 800bb42:	e7da      	b.n	800bafa <_free_r+0x26>
 800bb44:	d902      	bls.n	800bb4c <_free_r+0x78>
 800bb46:	230c      	movs	r3, #12
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	e7d6      	b.n	800bafa <_free_r+0x26>
 800bb4c:	6825      	ldr	r5, [r4, #0]
 800bb4e:	1961      	adds	r1, r4, r5
 800bb50:	428b      	cmp	r3, r1
 800bb52:	bf04      	itt	eq
 800bb54:	6819      	ldreq	r1, [r3, #0]
 800bb56:	685b      	ldreq	r3, [r3, #4]
 800bb58:	6063      	str	r3, [r4, #4]
 800bb5a:	bf04      	itt	eq
 800bb5c:	1949      	addeq	r1, r1, r5
 800bb5e:	6021      	streq	r1, [r4, #0]
 800bb60:	6054      	str	r4, [r2, #4]
 800bb62:	e7ca      	b.n	800bafa <_free_r+0x26>
 800bb64:	b003      	add	sp, #12
 800bb66:	bd30      	pop	{r4, r5, pc}
 800bb68:	20005184 	.word	0x20005184

0800bb6c <__sfputc_r>:
 800bb6c:	6893      	ldr	r3, [r2, #8]
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	b410      	push	{r4}
 800bb74:	6093      	str	r3, [r2, #8]
 800bb76:	da08      	bge.n	800bb8a <__sfputc_r+0x1e>
 800bb78:	6994      	ldr	r4, [r2, #24]
 800bb7a:	42a3      	cmp	r3, r4
 800bb7c:	db01      	blt.n	800bb82 <__sfputc_r+0x16>
 800bb7e:	290a      	cmp	r1, #10
 800bb80:	d103      	bne.n	800bb8a <__sfputc_r+0x1e>
 800bb82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb86:	f7ff bd7d 	b.w	800b684 <__swbuf_r>
 800bb8a:	6813      	ldr	r3, [r2, #0]
 800bb8c:	1c58      	adds	r0, r3, #1
 800bb8e:	6010      	str	r0, [r2, #0]
 800bb90:	7019      	strb	r1, [r3, #0]
 800bb92:	4608      	mov	r0, r1
 800bb94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <__sfputs_r>:
 800bb9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9c:	4606      	mov	r6, r0
 800bb9e:	460f      	mov	r7, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	18d5      	adds	r5, r2, r3
 800bba4:	42ac      	cmp	r4, r5
 800bba6:	d101      	bne.n	800bbac <__sfputs_r+0x12>
 800bba8:	2000      	movs	r0, #0
 800bbaa:	e007      	b.n	800bbbc <__sfputs_r+0x22>
 800bbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb0:	463a      	mov	r2, r7
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f7ff ffda 	bl	800bb6c <__sfputc_r>
 800bbb8:	1c43      	adds	r3, r0, #1
 800bbba:	d1f3      	bne.n	800bba4 <__sfputs_r+0xa>
 800bbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbc0 <_vfiprintf_r>:
 800bbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc4:	460d      	mov	r5, r1
 800bbc6:	b09d      	sub	sp, #116	; 0x74
 800bbc8:	4614      	mov	r4, r2
 800bbca:	4698      	mov	r8, r3
 800bbcc:	4606      	mov	r6, r0
 800bbce:	b118      	cbz	r0, 800bbd8 <_vfiprintf_r+0x18>
 800bbd0:	6983      	ldr	r3, [r0, #24]
 800bbd2:	b90b      	cbnz	r3, 800bbd8 <_vfiprintf_r+0x18>
 800bbd4:	f7ff fa9a 	bl	800b10c <__sinit>
 800bbd8:	4b89      	ldr	r3, [pc, #548]	; (800be00 <_vfiprintf_r+0x240>)
 800bbda:	429d      	cmp	r5, r3
 800bbdc:	d11b      	bne.n	800bc16 <_vfiprintf_r+0x56>
 800bbde:	6875      	ldr	r5, [r6, #4]
 800bbe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbe2:	07d9      	lsls	r1, r3, #31
 800bbe4:	d405      	bmi.n	800bbf2 <_vfiprintf_r+0x32>
 800bbe6:	89ab      	ldrh	r3, [r5, #12]
 800bbe8:	059a      	lsls	r2, r3, #22
 800bbea:	d402      	bmi.n	800bbf2 <_vfiprintf_r+0x32>
 800bbec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbee:	f7ff fb50 	bl	800b292 <__retarget_lock_acquire_recursive>
 800bbf2:	89ab      	ldrh	r3, [r5, #12]
 800bbf4:	071b      	lsls	r3, r3, #28
 800bbf6:	d501      	bpl.n	800bbfc <_vfiprintf_r+0x3c>
 800bbf8:	692b      	ldr	r3, [r5, #16]
 800bbfa:	b9eb      	cbnz	r3, 800bc38 <_vfiprintf_r+0x78>
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f7ff fda4 	bl	800b74c <__swsetup_r>
 800bc04:	b1c0      	cbz	r0, 800bc38 <_vfiprintf_r+0x78>
 800bc06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc08:	07dc      	lsls	r4, r3, #31
 800bc0a:	d50e      	bpl.n	800bc2a <_vfiprintf_r+0x6a>
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc10:	b01d      	add	sp, #116	; 0x74
 800bc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc16:	4b7b      	ldr	r3, [pc, #492]	; (800be04 <_vfiprintf_r+0x244>)
 800bc18:	429d      	cmp	r5, r3
 800bc1a:	d101      	bne.n	800bc20 <_vfiprintf_r+0x60>
 800bc1c:	68b5      	ldr	r5, [r6, #8]
 800bc1e:	e7df      	b.n	800bbe0 <_vfiprintf_r+0x20>
 800bc20:	4b79      	ldr	r3, [pc, #484]	; (800be08 <_vfiprintf_r+0x248>)
 800bc22:	429d      	cmp	r5, r3
 800bc24:	bf08      	it	eq
 800bc26:	68f5      	ldreq	r5, [r6, #12]
 800bc28:	e7da      	b.n	800bbe0 <_vfiprintf_r+0x20>
 800bc2a:	89ab      	ldrh	r3, [r5, #12]
 800bc2c:	0598      	lsls	r0, r3, #22
 800bc2e:	d4ed      	bmi.n	800bc0c <_vfiprintf_r+0x4c>
 800bc30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc32:	f7ff fb2f 	bl	800b294 <__retarget_lock_release_recursive>
 800bc36:	e7e9      	b.n	800bc0c <_vfiprintf_r+0x4c>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc3c:	2320      	movs	r3, #32
 800bc3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc42:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc46:	2330      	movs	r3, #48	; 0x30
 800bc48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be0c <_vfiprintf_r+0x24c>
 800bc4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc50:	f04f 0901 	mov.w	r9, #1
 800bc54:	4623      	mov	r3, r4
 800bc56:	469a      	mov	sl, r3
 800bc58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc5c:	b10a      	cbz	r2, 800bc62 <_vfiprintf_r+0xa2>
 800bc5e:	2a25      	cmp	r2, #37	; 0x25
 800bc60:	d1f9      	bne.n	800bc56 <_vfiprintf_r+0x96>
 800bc62:	ebba 0b04 	subs.w	fp, sl, r4
 800bc66:	d00b      	beq.n	800bc80 <_vfiprintf_r+0xc0>
 800bc68:	465b      	mov	r3, fp
 800bc6a:	4622      	mov	r2, r4
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7ff ff93 	bl	800bb9a <__sfputs_r>
 800bc74:	3001      	adds	r0, #1
 800bc76:	f000 80aa 	beq.w	800bdce <_vfiprintf_r+0x20e>
 800bc7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc7c:	445a      	add	r2, fp
 800bc7e:	9209      	str	r2, [sp, #36]	; 0x24
 800bc80:	f89a 3000 	ldrb.w	r3, [sl]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 80a2 	beq.w	800bdce <_vfiprintf_r+0x20e>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc94:	f10a 0a01 	add.w	sl, sl, #1
 800bc98:	9304      	str	r3, [sp, #16]
 800bc9a:	9307      	str	r3, [sp, #28]
 800bc9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bca0:	931a      	str	r3, [sp, #104]	; 0x68
 800bca2:	4654      	mov	r4, sl
 800bca4:	2205      	movs	r2, #5
 800bca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcaa:	4858      	ldr	r0, [pc, #352]	; (800be0c <_vfiprintf_r+0x24c>)
 800bcac:	f7f4 fad0 	bl	8000250 <memchr>
 800bcb0:	9a04      	ldr	r2, [sp, #16]
 800bcb2:	b9d8      	cbnz	r0, 800bcec <_vfiprintf_r+0x12c>
 800bcb4:	06d1      	lsls	r1, r2, #27
 800bcb6:	bf44      	itt	mi
 800bcb8:	2320      	movmi	r3, #32
 800bcba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcbe:	0713      	lsls	r3, r2, #28
 800bcc0:	bf44      	itt	mi
 800bcc2:	232b      	movmi	r3, #43	; 0x2b
 800bcc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcc8:	f89a 3000 	ldrb.w	r3, [sl]
 800bccc:	2b2a      	cmp	r3, #42	; 0x2a
 800bcce:	d015      	beq.n	800bcfc <_vfiprintf_r+0x13c>
 800bcd0:	9a07      	ldr	r2, [sp, #28]
 800bcd2:	4654      	mov	r4, sl
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	f04f 0c0a 	mov.w	ip, #10
 800bcda:	4621      	mov	r1, r4
 800bcdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bce0:	3b30      	subs	r3, #48	; 0x30
 800bce2:	2b09      	cmp	r3, #9
 800bce4:	d94e      	bls.n	800bd84 <_vfiprintf_r+0x1c4>
 800bce6:	b1b0      	cbz	r0, 800bd16 <_vfiprintf_r+0x156>
 800bce8:	9207      	str	r2, [sp, #28]
 800bcea:	e014      	b.n	800bd16 <_vfiprintf_r+0x156>
 800bcec:	eba0 0308 	sub.w	r3, r0, r8
 800bcf0:	fa09 f303 	lsl.w	r3, r9, r3
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	9304      	str	r3, [sp, #16]
 800bcf8:	46a2      	mov	sl, r4
 800bcfa:	e7d2      	b.n	800bca2 <_vfiprintf_r+0xe2>
 800bcfc:	9b03      	ldr	r3, [sp, #12]
 800bcfe:	1d19      	adds	r1, r3, #4
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	9103      	str	r1, [sp, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bfbb      	ittet	lt
 800bd08:	425b      	neglt	r3, r3
 800bd0a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd0e:	9307      	strge	r3, [sp, #28]
 800bd10:	9307      	strlt	r3, [sp, #28]
 800bd12:	bfb8      	it	lt
 800bd14:	9204      	strlt	r2, [sp, #16]
 800bd16:	7823      	ldrb	r3, [r4, #0]
 800bd18:	2b2e      	cmp	r3, #46	; 0x2e
 800bd1a:	d10c      	bne.n	800bd36 <_vfiprintf_r+0x176>
 800bd1c:	7863      	ldrb	r3, [r4, #1]
 800bd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd20:	d135      	bne.n	800bd8e <_vfiprintf_r+0x1ce>
 800bd22:	9b03      	ldr	r3, [sp, #12]
 800bd24:	1d1a      	adds	r2, r3, #4
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	9203      	str	r2, [sp, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	bfb8      	it	lt
 800bd2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd32:	3402      	adds	r4, #2
 800bd34:	9305      	str	r3, [sp, #20]
 800bd36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be1c <_vfiprintf_r+0x25c>
 800bd3a:	7821      	ldrb	r1, [r4, #0]
 800bd3c:	2203      	movs	r2, #3
 800bd3e:	4650      	mov	r0, sl
 800bd40:	f7f4 fa86 	bl	8000250 <memchr>
 800bd44:	b140      	cbz	r0, 800bd58 <_vfiprintf_r+0x198>
 800bd46:	2340      	movs	r3, #64	; 0x40
 800bd48:	eba0 000a 	sub.w	r0, r0, sl
 800bd4c:	fa03 f000 	lsl.w	r0, r3, r0
 800bd50:	9b04      	ldr	r3, [sp, #16]
 800bd52:	4303      	orrs	r3, r0
 800bd54:	3401      	adds	r4, #1
 800bd56:	9304      	str	r3, [sp, #16]
 800bd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd5c:	482c      	ldr	r0, [pc, #176]	; (800be10 <_vfiprintf_r+0x250>)
 800bd5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd62:	2206      	movs	r2, #6
 800bd64:	f7f4 fa74 	bl	8000250 <memchr>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d03f      	beq.n	800bdec <_vfiprintf_r+0x22c>
 800bd6c:	4b29      	ldr	r3, [pc, #164]	; (800be14 <_vfiprintf_r+0x254>)
 800bd6e:	bb1b      	cbnz	r3, 800bdb8 <_vfiprintf_r+0x1f8>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	3307      	adds	r3, #7
 800bd74:	f023 0307 	bic.w	r3, r3, #7
 800bd78:	3308      	adds	r3, #8
 800bd7a:	9303      	str	r3, [sp, #12]
 800bd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd7e:	443b      	add	r3, r7
 800bd80:	9309      	str	r3, [sp, #36]	; 0x24
 800bd82:	e767      	b.n	800bc54 <_vfiprintf_r+0x94>
 800bd84:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd88:	460c      	mov	r4, r1
 800bd8a:	2001      	movs	r0, #1
 800bd8c:	e7a5      	b.n	800bcda <_vfiprintf_r+0x11a>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	3401      	adds	r4, #1
 800bd92:	9305      	str	r3, [sp, #20]
 800bd94:	4619      	mov	r1, r3
 800bd96:	f04f 0c0a 	mov.w	ip, #10
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bda0:	3a30      	subs	r2, #48	; 0x30
 800bda2:	2a09      	cmp	r2, #9
 800bda4:	d903      	bls.n	800bdae <_vfiprintf_r+0x1ee>
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0c5      	beq.n	800bd36 <_vfiprintf_r+0x176>
 800bdaa:	9105      	str	r1, [sp, #20]
 800bdac:	e7c3      	b.n	800bd36 <_vfiprintf_r+0x176>
 800bdae:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e7f0      	b.n	800bd9a <_vfiprintf_r+0x1da>
 800bdb8:	ab03      	add	r3, sp, #12
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	462a      	mov	r2, r5
 800bdbe:	4b16      	ldr	r3, [pc, #88]	; (800be18 <_vfiprintf_r+0x258>)
 800bdc0:	a904      	add	r1, sp, #16
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f3af 8000 	nop.w
 800bdc8:	4607      	mov	r7, r0
 800bdca:	1c78      	adds	r0, r7, #1
 800bdcc:	d1d6      	bne.n	800bd7c <_vfiprintf_r+0x1bc>
 800bdce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdd0:	07d9      	lsls	r1, r3, #31
 800bdd2:	d405      	bmi.n	800bde0 <_vfiprintf_r+0x220>
 800bdd4:	89ab      	ldrh	r3, [r5, #12]
 800bdd6:	059a      	lsls	r2, r3, #22
 800bdd8:	d402      	bmi.n	800bde0 <_vfiprintf_r+0x220>
 800bdda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bddc:	f7ff fa5a 	bl	800b294 <__retarget_lock_release_recursive>
 800bde0:	89ab      	ldrh	r3, [r5, #12]
 800bde2:	065b      	lsls	r3, r3, #25
 800bde4:	f53f af12 	bmi.w	800bc0c <_vfiprintf_r+0x4c>
 800bde8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdea:	e711      	b.n	800bc10 <_vfiprintf_r+0x50>
 800bdec:	ab03      	add	r3, sp, #12
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	462a      	mov	r2, r5
 800bdf2:	4b09      	ldr	r3, [pc, #36]	; (800be18 <_vfiprintf_r+0x258>)
 800bdf4:	a904      	add	r1, sp, #16
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f000 f880 	bl	800befc <_printf_i>
 800bdfc:	e7e4      	b.n	800bdc8 <_vfiprintf_r+0x208>
 800bdfe:	bf00      	nop
 800be00:	0800c358 	.word	0x0800c358
 800be04:	0800c378 	.word	0x0800c378
 800be08:	0800c338 	.word	0x0800c338
 800be0c:	0800c39c 	.word	0x0800c39c
 800be10:	0800c3a6 	.word	0x0800c3a6
 800be14:	00000000 	.word	0x00000000
 800be18:	0800bb9b 	.word	0x0800bb9b
 800be1c:	0800c3a2 	.word	0x0800c3a2

0800be20 <_printf_common>:
 800be20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be24:	4616      	mov	r6, r2
 800be26:	4699      	mov	r9, r3
 800be28:	688a      	ldr	r2, [r1, #8]
 800be2a:	690b      	ldr	r3, [r1, #16]
 800be2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be30:	4293      	cmp	r3, r2
 800be32:	bfb8      	it	lt
 800be34:	4613      	movlt	r3, r2
 800be36:	6033      	str	r3, [r6, #0]
 800be38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be3c:	4607      	mov	r7, r0
 800be3e:	460c      	mov	r4, r1
 800be40:	b10a      	cbz	r2, 800be46 <_printf_common+0x26>
 800be42:	3301      	adds	r3, #1
 800be44:	6033      	str	r3, [r6, #0]
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	0699      	lsls	r1, r3, #26
 800be4a:	bf42      	ittt	mi
 800be4c:	6833      	ldrmi	r3, [r6, #0]
 800be4e:	3302      	addmi	r3, #2
 800be50:	6033      	strmi	r3, [r6, #0]
 800be52:	6825      	ldr	r5, [r4, #0]
 800be54:	f015 0506 	ands.w	r5, r5, #6
 800be58:	d106      	bne.n	800be68 <_printf_common+0x48>
 800be5a:	f104 0a19 	add.w	sl, r4, #25
 800be5e:	68e3      	ldr	r3, [r4, #12]
 800be60:	6832      	ldr	r2, [r6, #0]
 800be62:	1a9b      	subs	r3, r3, r2
 800be64:	42ab      	cmp	r3, r5
 800be66:	dc26      	bgt.n	800beb6 <_printf_common+0x96>
 800be68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be6c:	1e13      	subs	r3, r2, #0
 800be6e:	6822      	ldr	r2, [r4, #0]
 800be70:	bf18      	it	ne
 800be72:	2301      	movne	r3, #1
 800be74:	0692      	lsls	r2, r2, #26
 800be76:	d42b      	bmi.n	800bed0 <_printf_common+0xb0>
 800be78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be7c:	4649      	mov	r1, r9
 800be7e:	4638      	mov	r0, r7
 800be80:	47c0      	blx	r8
 800be82:	3001      	adds	r0, #1
 800be84:	d01e      	beq.n	800bec4 <_printf_common+0xa4>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	68e5      	ldr	r5, [r4, #12]
 800be8a:	6832      	ldr	r2, [r6, #0]
 800be8c:	f003 0306 	and.w	r3, r3, #6
 800be90:	2b04      	cmp	r3, #4
 800be92:	bf08      	it	eq
 800be94:	1aad      	subeq	r5, r5, r2
 800be96:	68a3      	ldr	r3, [r4, #8]
 800be98:	6922      	ldr	r2, [r4, #16]
 800be9a:	bf0c      	ite	eq
 800be9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bea0:	2500      	movne	r5, #0
 800bea2:	4293      	cmp	r3, r2
 800bea4:	bfc4      	itt	gt
 800bea6:	1a9b      	subgt	r3, r3, r2
 800bea8:	18ed      	addgt	r5, r5, r3
 800beaa:	2600      	movs	r6, #0
 800beac:	341a      	adds	r4, #26
 800beae:	42b5      	cmp	r5, r6
 800beb0:	d11a      	bne.n	800bee8 <_printf_common+0xc8>
 800beb2:	2000      	movs	r0, #0
 800beb4:	e008      	b.n	800bec8 <_printf_common+0xa8>
 800beb6:	2301      	movs	r3, #1
 800beb8:	4652      	mov	r2, sl
 800beba:	4649      	mov	r1, r9
 800bebc:	4638      	mov	r0, r7
 800bebe:	47c0      	blx	r8
 800bec0:	3001      	adds	r0, #1
 800bec2:	d103      	bne.n	800becc <_printf_common+0xac>
 800bec4:	f04f 30ff 	mov.w	r0, #4294967295
 800bec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800becc:	3501      	adds	r5, #1
 800bece:	e7c6      	b.n	800be5e <_printf_common+0x3e>
 800bed0:	18e1      	adds	r1, r4, r3
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	2030      	movs	r0, #48	; 0x30
 800bed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800beda:	4422      	add	r2, r4
 800bedc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bee4:	3302      	adds	r3, #2
 800bee6:	e7c7      	b.n	800be78 <_printf_common+0x58>
 800bee8:	2301      	movs	r3, #1
 800beea:	4622      	mov	r2, r4
 800beec:	4649      	mov	r1, r9
 800beee:	4638      	mov	r0, r7
 800bef0:	47c0      	blx	r8
 800bef2:	3001      	adds	r0, #1
 800bef4:	d0e6      	beq.n	800bec4 <_printf_common+0xa4>
 800bef6:	3601      	adds	r6, #1
 800bef8:	e7d9      	b.n	800beae <_printf_common+0x8e>
	...

0800befc <_printf_i>:
 800befc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf00:	7e0f      	ldrb	r7, [r1, #24]
 800bf02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf04:	2f78      	cmp	r7, #120	; 0x78
 800bf06:	4691      	mov	r9, r2
 800bf08:	4680      	mov	r8, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	469a      	mov	sl, r3
 800bf0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf12:	d807      	bhi.n	800bf24 <_printf_i+0x28>
 800bf14:	2f62      	cmp	r7, #98	; 0x62
 800bf16:	d80a      	bhi.n	800bf2e <_printf_i+0x32>
 800bf18:	2f00      	cmp	r7, #0
 800bf1a:	f000 80d8 	beq.w	800c0ce <_printf_i+0x1d2>
 800bf1e:	2f58      	cmp	r7, #88	; 0x58
 800bf20:	f000 80a3 	beq.w	800c06a <_printf_i+0x16e>
 800bf24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf2c:	e03a      	b.n	800bfa4 <_printf_i+0xa8>
 800bf2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf32:	2b15      	cmp	r3, #21
 800bf34:	d8f6      	bhi.n	800bf24 <_printf_i+0x28>
 800bf36:	a101      	add	r1, pc, #4	; (adr r1, 800bf3c <_printf_i+0x40>)
 800bf38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf3c:	0800bf95 	.word	0x0800bf95
 800bf40:	0800bfa9 	.word	0x0800bfa9
 800bf44:	0800bf25 	.word	0x0800bf25
 800bf48:	0800bf25 	.word	0x0800bf25
 800bf4c:	0800bf25 	.word	0x0800bf25
 800bf50:	0800bf25 	.word	0x0800bf25
 800bf54:	0800bfa9 	.word	0x0800bfa9
 800bf58:	0800bf25 	.word	0x0800bf25
 800bf5c:	0800bf25 	.word	0x0800bf25
 800bf60:	0800bf25 	.word	0x0800bf25
 800bf64:	0800bf25 	.word	0x0800bf25
 800bf68:	0800c0b5 	.word	0x0800c0b5
 800bf6c:	0800bfd9 	.word	0x0800bfd9
 800bf70:	0800c097 	.word	0x0800c097
 800bf74:	0800bf25 	.word	0x0800bf25
 800bf78:	0800bf25 	.word	0x0800bf25
 800bf7c:	0800c0d7 	.word	0x0800c0d7
 800bf80:	0800bf25 	.word	0x0800bf25
 800bf84:	0800bfd9 	.word	0x0800bfd9
 800bf88:	0800bf25 	.word	0x0800bf25
 800bf8c:	0800bf25 	.word	0x0800bf25
 800bf90:	0800c09f 	.word	0x0800c09f
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	1d1a      	adds	r2, r3, #4
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	602a      	str	r2, [r5, #0]
 800bf9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e0a3      	b.n	800c0f0 <_printf_i+0x1f4>
 800bfa8:	6820      	ldr	r0, [r4, #0]
 800bfaa:	6829      	ldr	r1, [r5, #0]
 800bfac:	0606      	lsls	r6, r0, #24
 800bfae:	f101 0304 	add.w	r3, r1, #4
 800bfb2:	d50a      	bpl.n	800bfca <_printf_i+0xce>
 800bfb4:	680e      	ldr	r6, [r1, #0]
 800bfb6:	602b      	str	r3, [r5, #0]
 800bfb8:	2e00      	cmp	r6, #0
 800bfba:	da03      	bge.n	800bfc4 <_printf_i+0xc8>
 800bfbc:	232d      	movs	r3, #45	; 0x2d
 800bfbe:	4276      	negs	r6, r6
 800bfc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfc4:	485e      	ldr	r0, [pc, #376]	; (800c140 <_printf_i+0x244>)
 800bfc6:	230a      	movs	r3, #10
 800bfc8:	e019      	b.n	800bffe <_printf_i+0x102>
 800bfca:	680e      	ldr	r6, [r1, #0]
 800bfcc:	602b      	str	r3, [r5, #0]
 800bfce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bfd2:	bf18      	it	ne
 800bfd4:	b236      	sxthne	r6, r6
 800bfd6:	e7ef      	b.n	800bfb8 <_printf_i+0xbc>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	6820      	ldr	r0, [r4, #0]
 800bfdc:	1d19      	adds	r1, r3, #4
 800bfde:	6029      	str	r1, [r5, #0]
 800bfe0:	0601      	lsls	r1, r0, #24
 800bfe2:	d501      	bpl.n	800bfe8 <_printf_i+0xec>
 800bfe4:	681e      	ldr	r6, [r3, #0]
 800bfe6:	e002      	b.n	800bfee <_printf_i+0xf2>
 800bfe8:	0646      	lsls	r6, r0, #25
 800bfea:	d5fb      	bpl.n	800bfe4 <_printf_i+0xe8>
 800bfec:	881e      	ldrh	r6, [r3, #0]
 800bfee:	4854      	ldr	r0, [pc, #336]	; (800c140 <_printf_i+0x244>)
 800bff0:	2f6f      	cmp	r7, #111	; 0x6f
 800bff2:	bf0c      	ite	eq
 800bff4:	2308      	moveq	r3, #8
 800bff6:	230a      	movne	r3, #10
 800bff8:	2100      	movs	r1, #0
 800bffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bffe:	6865      	ldr	r5, [r4, #4]
 800c000:	60a5      	str	r5, [r4, #8]
 800c002:	2d00      	cmp	r5, #0
 800c004:	bfa2      	ittt	ge
 800c006:	6821      	ldrge	r1, [r4, #0]
 800c008:	f021 0104 	bicge.w	r1, r1, #4
 800c00c:	6021      	strge	r1, [r4, #0]
 800c00e:	b90e      	cbnz	r6, 800c014 <_printf_i+0x118>
 800c010:	2d00      	cmp	r5, #0
 800c012:	d04d      	beq.n	800c0b0 <_printf_i+0x1b4>
 800c014:	4615      	mov	r5, r2
 800c016:	fbb6 f1f3 	udiv	r1, r6, r3
 800c01a:	fb03 6711 	mls	r7, r3, r1, r6
 800c01e:	5dc7      	ldrb	r7, [r0, r7]
 800c020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c024:	4637      	mov	r7, r6
 800c026:	42bb      	cmp	r3, r7
 800c028:	460e      	mov	r6, r1
 800c02a:	d9f4      	bls.n	800c016 <_printf_i+0x11a>
 800c02c:	2b08      	cmp	r3, #8
 800c02e:	d10b      	bne.n	800c048 <_printf_i+0x14c>
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	07de      	lsls	r6, r3, #31
 800c034:	d508      	bpl.n	800c048 <_printf_i+0x14c>
 800c036:	6923      	ldr	r3, [r4, #16]
 800c038:	6861      	ldr	r1, [r4, #4]
 800c03a:	4299      	cmp	r1, r3
 800c03c:	bfde      	ittt	le
 800c03e:	2330      	movle	r3, #48	; 0x30
 800c040:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c044:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c048:	1b52      	subs	r2, r2, r5
 800c04a:	6122      	str	r2, [r4, #16]
 800c04c:	f8cd a000 	str.w	sl, [sp]
 800c050:	464b      	mov	r3, r9
 800c052:	aa03      	add	r2, sp, #12
 800c054:	4621      	mov	r1, r4
 800c056:	4640      	mov	r0, r8
 800c058:	f7ff fee2 	bl	800be20 <_printf_common>
 800c05c:	3001      	adds	r0, #1
 800c05e:	d14c      	bne.n	800c0fa <_printf_i+0x1fe>
 800c060:	f04f 30ff 	mov.w	r0, #4294967295
 800c064:	b004      	add	sp, #16
 800c066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c06a:	4835      	ldr	r0, [pc, #212]	; (800c140 <_printf_i+0x244>)
 800c06c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c070:	6829      	ldr	r1, [r5, #0]
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	f851 6b04 	ldr.w	r6, [r1], #4
 800c078:	6029      	str	r1, [r5, #0]
 800c07a:	061d      	lsls	r5, r3, #24
 800c07c:	d514      	bpl.n	800c0a8 <_printf_i+0x1ac>
 800c07e:	07df      	lsls	r7, r3, #31
 800c080:	bf44      	itt	mi
 800c082:	f043 0320 	orrmi.w	r3, r3, #32
 800c086:	6023      	strmi	r3, [r4, #0]
 800c088:	b91e      	cbnz	r6, 800c092 <_printf_i+0x196>
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	f023 0320 	bic.w	r3, r3, #32
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	2310      	movs	r3, #16
 800c094:	e7b0      	b.n	800bff8 <_printf_i+0xfc>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	f043 0320 	orr.w	r3, r3, #32
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	2378      	movs	r3, #120	; 0x78
 800c0a0:	4828      	ldr	r0, [pc, #160]	; (800c144 <_printf_i+0x248>)
 800c0a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0a6:	e7e3      	b.n	800c070 <_printf_i+0x174>
 800c0a8:	0659      	lsls	r1, r3, #25
 800c0aa:	bf48      	it	mi
 800c0ac:	b2b6      	uxthmi	r6, r6
 800c0ae:	e7e6      	b.n	800c07e <_printf_i+0x182>
 800c0b0:	4615      	mov	r5, r2
 800c0b2:	e7bb      	b.n	800c02c <_printf_i+0x130>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	6826      	ldr	r6, [r4, #0]
 800c0b8:	6961      	ldr	r1, [r4, #20]
 800c0ba:	1d18      	adds	r0, r3, #4
 800c0bc:	6028      	str	r0, [r5, #0]
 800c0be:	0635      	lsls	r5, r6, #24
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	d501      	bpl.n	800c0c8 <_printf_i+0x1cc>
 800c0c4:	6019      	str	r1, [r3, #0]
 800c0c6:	e002      	b.n	800c0ce <_printf_i+0x1d2>
 800c0c8:	0670      	lsls	r0, r6, #25
 800c0ca:	d5fb      	bpl.n	800c0c4 <_printf_i+0x1c8>
 800c0cc:	8019      	strh	r1, [r3, #0]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	6123      	str	r3, [r4, #16]
 800c0d2:	4615      	mov	r5, r2
 800c0d4:	e7ba      	b.n	800c04c <_printf_i+0x150>
 800c0d6:	682b      	ldr	r3, [r5, #0]
 800c0d8:	1d1a      	adds	r2, r3, #4
 800c0da:	602a      	str	r2, [r5, #0]
 800c0dc:	681d      	ldr	r5, [r3, #0]
 800c0de:	6862      	ldr	r2, [r4, #4]
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f7f4 f8b4 	bl	8000250 <memchr>
 800c0e8:	b108      	cbz	r0, 800c0ee <_printf_i+0x1f2>
 800c0ea:	1b40      	subs	r0, r0, r5
 800c0ec:	6060      	str	r0, [r4, #4]
 800c0ee:	6863      	ldr	r3, [r4, #4]
 800c0f0:	6123      	str	r3, [r4, #16]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0f8:	e7a8      	b.n	800c04c <_printf_i+0x150>
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	462a      	mov	r2, r5
 800c0fe:	4649      	mov	r1, r9
 800c100:	4640      	mov	r0, r8
 800c102:	47d0      	blx	sl
 800c104:	3001      	adds	r0, #1
 800c106:	d0ab      	beq.n	800c060 <_printf_i+0x164>
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	079b      	lsls	r3, r3, #30
 800c10c:	d413      	bmi.n	800c136 <_printf_i+0x23a>
 800c10e:	68e0      	ldr	r0, [r4, #12]
 800c110:	9b03      	ldr	r3, [sp, #12]
 800c112:	4298      	cmp	r0, r3
 800c114:	bfb8      	it	lt
 800c116:	4618      	movlt	r0, r3
 800c118:	e7a4      	b.n	800c064 <_printf_i+0x168>
 800c11a:	2301      	movs	r3, #1
 800c11c:	4632      	mov	r2, r6
 800c11e:	4649      	mov	r1, r9
 800c120:	4640      	mov	r0, r8
 800c122:	47d0      	blx	sl
 800c124:	3001      	adds	r0, #1
 800c126:	d09b      	beq.n	800c060 <_printf_i+0x164>
 800c128:	3501      	adds	r5, #1
 800c12a:	68e3      	ldr	r3, [r4, #12]
 800c12c:	9903      	ldr	r1, [sp, #12]
 800c12e:	1a5b      	subs	r3, r3, r1
 800c130:	42ab      	cmp	r3, r5
 800c132:	dcf2      	bgt.n	800c11a <_printf_i+0x21e>
 800c134:	e7eb      	b.n	800c10e <_printf_i+0x212>
 800c136:	2500      	movs	r5, #0
 800c138:	f104 0619 	add.w	r6, r4, #25
 800c13c:	e7f5      	b.n	800c12a <_printf_i+0x22e>
 800c13e:	bf00      	nop
 800c140:	0800c3ad 	.word	0x0800c3ad
 800c144:	0800c3be 	.word	0x0800c3be

0800c148 <_read_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4d07      	ldr	r5, [pc, #28]	; (800c168 <_read_r+0x20>)
 800c14c:	4604      	mov	r4, r0
 800c14e:	4608      	mov	r0, r1
 800c150:	4611      	mov	r1, r2
 800c152:	2200      	movs	r2, #0
 800c154:	602a      	str	r2, [r5, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	f7fe fd15 	bl	800ab86 <_read>
 800c15c:	1c43      	adds	r3, r0, #1
 800c15e:	d102      	bne.n	800c166 <_read_r+0x1e>
 800c160:	682b      	ldr	r3, [r5, #0]
 800c162:	b103      	cbz	r3, 800c166 <_read_r+0x1e>
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	bd38      	pop	{r3, r4, r5, pc}
 800c168:	2000518c 	.word	0x2000518c

0800c16c <_fstat_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4d07      	ldr	r5, [pc, #28]	; (800c18c <_fstat_r+0x20>)
 800c170:	2300      	movs	r3, #0
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	4611      	mov	r1, r2
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	f7fe fde6 	bl	800ad4a <_fstat>
 800c17e:	1c43      	adds	r3, r0, #1
 800c180:	d102      	bne.n	800c188 <_fstat_r+0x1c>
 800c182:	682b      	ldr	r3, [r5, #0]
 800c184:	b103      	cbz	r3, 800c188 <_fstat_r+0x1c>
 800c186:	6023      	str	r3, [r4, #0]
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	bf00      	nop
 800c18c:	2000518c 	.word	0x2000518c

0800c190 <_isatty_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d06      	ldr	r5, [pc, #24]	; (800c1ac <_isatty_r+0x1c>)
 800c194:	2300      	movs	r3, #0
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	f7fe ff3c 	bl	800b018 <_isatty>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_isatty_r+0x1a>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_isatty_r+0x1a>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	2000518c 	.word	0x2000518c

0800c1b0 <_init>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	bf00      	nop
 800c1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b6:	bc08      	pop	{r3}
 800c1b8:	469e      	mov	lr, r3
 800c1ba:	4770      	bx	lr

0800c1bc <_fini>:
 800c1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1be:	bf00      	nop
 800c1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1c2:	bc08      	pop	{r3}
 800c1c4:	469e      	mov	lr, r3
 800c1c6:	4770      	bx	lr
