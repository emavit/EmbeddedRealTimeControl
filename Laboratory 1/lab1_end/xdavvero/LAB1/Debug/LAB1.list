
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000831c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008658  08008658  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008658  08008658  00018658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008660  08008660  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  2000007c  080086e4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  080086e4  00020774  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bb8  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002722  00000000  00000000  00036c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b93  00000000  00000000  0003ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b3b  00000000  00000000  000655c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105931  00000000  00000000  0007f0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184a2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000607c  00000000  00000000  00184a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08008504 	.word	0x08008504

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08008504 	.word	0x08008504

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <countBit>:
int actual_wait = INITIAL_WAIT_TIME;
int actual_keyboard_value = 0;
int frequency = 0;


uint8_t countBit(uint8_t n){
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
	while(n){
 8000602:	e009      	b.n	8000618 <countBit+0x24>
		count += n & 1;
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4413      	add	r3, r2
 8000610:	73fb      	strb	r3, [r7, #15]
		n>>=1;
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	085b      	lsrs	r3, r3, #1
 8000616:	71fb      	strb	r3, [r7, #7]
	while(n){
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f2      	bne.n	8000604 <countBit+0x10>
	}
	return count;
 800061e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af04      	add	r7, sp, #16
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]


  printf("Interrupt on pin (%d).\n", GPIO_Pin);
 8000636:	88fb      	ldrh	r3, [r7, #6]
 8000638:	4619      	mov	r1, r3
 800063a:	4844      	ldr	r0, [pc, #272]	; (800074c <HAL_GPIO_EXTI_Callback+0x120>)
 800063c:	f007 f8ea 	bl	8007814 <iprintf>

  /* your code here */
  uint8_t buf[2], data;


  HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &buf[0], 1, HAL_TIMEOUT);
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	2301      	movs	r3, #1
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	2227      	movs	r2, #39	; 0x27
 8000652:	217e      	movs	r1, #126	; 0x7e
 8000654:	483e      	ldr	r0, [pc, #248]	; (8000750 <HAL_GPIO_EXTI_Callback+0x124>)
 8000656:	f002 ffc3 	bl	80035e0 <HAL_I2C_Mem_Read>
 800065a:	4603      	mov	r3, r0
 800065c:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK)
 800065e:	7dfb      	ldrb	r3, [r7, #23]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d004      	beq.n	800066e <HAL_GPIO_EXTI_Callback+0x42>
    printf("I2C communication error (%X).\n", status);
 8000664:	7dfb      	ldrb	r3, [r7, #23]
 8000666:	4619      	mov	r1, r3
 8000668:	483a      	ldr	r0, [pc, #232]	; (8000754 <HAL_GPIO_EXTI_Callback+0x128>)
 800066a:	f007 f8d3 	bl	8007814 <iprintf>
  status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &buf[1], 1, HAL_TIMEOUT);
 800066e:	2364      	movs	r3, #100	; 0x64
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2301      	movs	r3, #1
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	3301      	adds	r3, #1
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2301      	movs	r3, #1
 8000680:	2228      	movs	r2, #40	; 0x28
 8000682:	217e      	movs	r1, #126	; 0x7e
 8000684:	4832      	ldr	r0, [pc, #200]	; (8000750 <HAL_GPIO_EXTI_Callback+0x124>)
 8000686:	f002 ffab 	bl	80035e0 <HAL_I2C_Mem_Read>
 800068a:	4603      	mov	r3, r0
 800068c:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK)
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d004      	beq.n	800069e <HAL_GPIO_EXTI_Callback+0x72>
      printf("I2C communication error (%X).\n", status);
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	4619      	mov	r1, r3
 8000698:	482e      	ldr	r0, [pc, #184]	; (8000754 <HAL_GPIO_EXTI_Callback+0x128>)
 800069a:	f007 f8bb 	bl	8007814 <iprintf>
  int row = countBit(~buf[0]-1);
 800069e:	7a3a      	ldrb	r2, [r7, #8]
 80006a0:	f06f 0301 	mvn.w	r3, #1
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ffa3 	bl	80005f4 <countBit>
 80006ae:	4603      	mov	r3, r0
 80006b0:	613b      	str	r3, [r7, #16]
  int column = countBit(~buf[1]-1);
 80006b2:	7a7a      	ldrb	r2, [r7, #9]
 80006b4:	f06f 0301 	mvn.w	r3, #1
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff99 	bl	80005f4 <countBit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	60fb      	str	r3, [r7, #12]
  printf("Keypad button: (%c).\n",keypadLayout[column][row]);
 80006c6:	4a24      	ldr	r2, [pc, #144]	; (8000758 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	441a      	add	r2, r3
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	4413      	add	r3, r2
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4821      	ldr	r0, [pc, #132]	; (800075c <HAL_GPIO_EXTI_Callback+0x130>)
 80006d8:	f007 f89c 	bl	8007814 <iprintf>

  // EASY WAY
  //int frequency = (int) keypadLayout[column][row]-48;

  // HARD WAY
  if(keypadLayout[column][row] == '#')
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <HAL_GPIO_EXTI_Callback+0x12c>)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	441a      	add	r2, r3
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b23      	cmp	r3, #35	; 0x23
 80006ec:	d107      	bne.n	80006fe <HAL_GPIO_EXTI_Callback+0xd2>
  {
	  frequency = actual_keyboard_value;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <HAL_GPIO_EXTI_Callback+0x134>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <HAL_GPIO_EXTI_Callback+0x138>)
 80006f4:	6013      	str	r3, [r2, #0]
	  actual_keyboard_value = 0;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <HAL_GPIO_EXTI_Callback+0x134>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	e011      	b.n	8000722 <HAL_GPIO_EXTI_Callback+0xf6>
  }
  else
  {
	  actual_keyboard_value = actual_keyboard_value*10 + ((int) keypadLayout[column][row]-48);
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_GPIO_EXTI_Callback+0x134>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4619      	mov	r1, r3
 800070c:	4a12      	ldr	r2, [pc, #72]	; (8000758 <HAL_GPIO_EXTI_Callback+0x12c>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	441a      	add	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	3b30      	subs	r3, #48	; 0x30
 800071c:	440b      	add	r3, r1
 800071e:	4a10      	ldr	r2, [pc, #64]	; (8000760 <HAL_GPIO_EXTI_Callback+0x134>)
 8000720:	6013      	str	r3, [r2, #0]
  }


  if (frequency == 0)
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_GPIO_EXTI_Callback+0x138>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d103      	bne.n	8000732 <HAL_GPIO_EXTI_Callback+0x106>
	  actual_wait = 0;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_GPIO_EXTI_Callback+0x13c>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
  else
	  actual_wait = 1000 / frequency;



}
 8000730:	e007      	b.n	8000742 <HAL_GPIO_EXTI_Callback+0x116>
	  actual_wait = 1000 / frequency;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_GPIO_EXTI_Callback+0x138>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800073a:	fb92 f3f3 	sdiv	r3, r2, r3
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000740:	6013      	str	r3, [r2, #0]
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	0800851c 	.word	0x0800851c
 8000750:	200000e0 	.word	0x200000e0
 8000754:	08008534 	.word	0x08008534
 8000758:	0800857c 	.word	0x0800857c
 800075c:	08008554 	.word	0x08008554
 8000760:	200006a8 	.word	0x200006a8
 8000764:	200006ac 	.word	0x200006ac
 8000768:	20000000 	.word	0x20000000

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f001 ff5a 	bl	800262a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 fa21 	bl	8000bbc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  initialise_monitor_handles();
 800077a:	f006 fe0f 	bl	800739c <initialise_monitor_handles>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f001 f83f 	bl	8001800 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000782:	f001 f80d 	bl	80017a0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000786:	f000 fa8b 	bl	8000ca0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800078a:	f000 fadb 	bl	8000d44 <MX_I2C1_Init>
  MX_I2C2_Init();
 800078e:	f000 fb19 	bl	8000dc4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000792:	f000 fb57 	bl	8000e44 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000796:	f000 fb93 	bl	8000ec0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800079a:	f000 fc61 	bl	8001060 <MX_TIM2_Init>
  MX_TIM3_Init();
 800079e:	f000 fcf9 	bl	8001194 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007a2:	f000 fd4d 	bl	8001240 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007a6:	f000 fda1 	bl	80012ec <MX_TIM5_Init>
  MX_TIM8_Init();
 80007aa:	f000 fe17 	bl	80013dc <MX_TIM8_Init>
  MX_UART4_Init();
 80007ae:	f000 ff37 	bl	8001620 <MX_UART4_Init>
  MX_UART5_Init();
 80007b2:	f000 ff65 	bl	8001680 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80007b6:	f000 ff93 	bl	80016e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007ba:	f000 ffc1 	bl	8001740 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 80007be:	f000 fedf 	bl	8001580 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2110      	movs	r1, #16
 80007c6:	48bc      	ldr	r0, [pc, #752]	; (8000ab8 <main+0x34c>)
 80007c8:	f002 fd34 	bl	8003234 <HAL_GPIO_WritePin>

  /* Disable EXTI4_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80007cc:	200a      	movs	r0, #10
 80007ce:	f002 fb6a 	bl	8002ea6 <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80007d2:	2312      	movs	r3, #18
 80007d4:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80007d6:	23c8      	movs	r3, #200	; 0xc8
 80007d8:	9302      	str	r3, [sp, #8]
 80007da:	2301      	movs	r3, #1
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	1d7b      	adds	r3, r7, #5
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2301      	movs	r3, #1
 80007e4:	227d      	movs	r2, #125	; 0x7d
 80007e6:	217e      	movs	r1, #126	; 0x7e
 80007e8:	48b4      	ldr	r0, [pc, #720]	; (8000abc <main+0x350>)
 80007ea:	f002 fde5 	bl	80033b8 <HAL_I2C_Mem_Write>
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d004      	beq.n	8000802 <main+0x96>
    printf("I2C communication error (%X).\n", status);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4619      	mov	r1, r3
 80007fc:	48b0      	ldr	r0, [pc, #704]	; (8000ac0 <main+0x354>)
 80007fe:	f007 f809 	bl	8007814 <iprintf>

  data = 0x34;
 8000802:	2334      	movs	r3, #52	; 0x34
 8000804:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000806:	23c8      	movs	r3, #200	; 0xc8
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	2301      	movs	r3, #1
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	1d7b      	adds	r3, r7, #5
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2301      	movs	r3, #1
 8000814:	227d      	movs	r2, #125	; 0x7d
 8000816:	217e      	movs	r1, #126	; 0x7e
 8000818:	48a8      	ldr	r0, [pc, #672]	; (8000abc <main+0x350>)
 800081a:	f002 fdcd 	bl	80033b8 <HAL_I2C_Mem_Write>
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d004      	beq.n	8000832 <main+0xc6>
    printf("I2C communication error (%X).\n", status);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4619      	mov	r1, r3
 800082c:	48a4      	ldr	r0, [pc, #656]	; (8000ac0 <main+0x354>)
 800082e:	f006 fff1 	bl	8007814 <iprintf>

  HAL_Delay(100);
 8000832:	2064      	movs	r0, #100	; 0x64
 8000834:	f001 ff56 	bl	80026e4 <HAL_Delay>

  /* Set KeyPad scanning engine */

  /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
  data = 0x40;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 800083c:	23c8      	movs	r3, #200	; 0xc8
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2301      	movs	r3, #1
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	1d7b      	adds	r3, r7, #5
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2301      	movs	r3, #1
 800084a:	221e      	movs	r2, #30
 800084c:	217e      	movs	r1, #126	; 0x7e
 800084e:	489b      	ldr	r0, [pc, #620]	; (8000abc <main+0x350>)
 8000850:	f002 fdb2 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d004      	beq.n	8000868 <main+0xfc>
    printf("I2C communication error (%X).\n", status);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4619      	mov	r1, r3
 8000862:	4897      	ldr	r0, [pc, #604]	; (8000ac0 <main+0x354>)
 8000864:	f006 ffd6 	bl	8007814 <iprintf>

  /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
  data = 0xF0;
 8000868:	23f0      	movs	r3, #240	; 0xf0
 800086a:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 800086c:	23c8      	movs	r3, #200	; 0xc8
 800086e:	9302      	str	r3, [sp, #8]
 8000870:	2301      	movs	r3, #1
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	1d7b      	adds	r3, r7, #5
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2301      	movs	r3, #1
 800087a:	220f      	movs	r2, #15
 800087c:	217e      	movs	r1, #126	; 0x7e
 800087e:	488f      	ldr	r0, [pc, #572]	; (8000abc <main+0x350>)
 8000880:	f002 fd9a 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000884:	4603      	mov	r3, r0
 8000886:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d004      	beq.n	8000898 <main+0x12c>
    printf("I2C communication error (%X).\n", status);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4619      	mov	r1, r3
 8000892:	488b      	ldr	r0, [pc, #556]	; (8000ac0 <main+0x354>)
 8000894:	f006 ffbe 	bl	8007814 <iprintf>

  /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
  data = 0x0F;
 8000898:	230f      	movs	r3, #15
 800089a:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 800089c:	23c8      	movs	r3, #200	; 0xc8
 800089e:	9302      	str	r3, [sp, #8]
 80008a0:	2301      	movs	r3, #1
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	1d7b      	adds	r3, r7, #5
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2301      	movs	r3, #1
 80008aa:	220e      	movs	r2, #14
 80008ac:	217e      	movs	r1, #126	; 0x7e
 80008ae:	4883      	ldr	r0, [pc, #524]	; (8000abc <main+0x350>)
 80008b0:	f002 fd82 	bl	80033b8 <HAL_I2C_Mem_Write>
 80008b4:	4603      	mov	r3, r0
 80008b6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d004      	beq.n	80008c8 <main+0x15c>
    printf("I2C communication error (%X).\n", status);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4619      	mov	r1, r3
 80008c2:	487f      	ldr	r0, [pc, #508]	; (8000ac0 <main+0x354>)
 80008c4:	f006 ffa6 	bl	8007814 <iprintf>

  /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
  data = 0x0F;
 80008c8:	230f      	movs	r3, #15
 80008ca:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 80008cc:	23c8      	movs	r3, #200	; 0xc8
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	2301      	movs	r3, #1
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	1d7b      	adds	r3, r7, #5
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2301      	movs	r3, #1
 80008da:	220b      	movs	r2, #11
 80008dc:	217e      	movs	r1, #126	; 0x7e
 80008de:	4877      	ldr	r0, [pc, #476]	; (8000abc <main+0x350>)
 80008e0:	f002 fd6a 	bl	80033b8 <HAL_I2C_Mem_Write>
 80008e4:	4603      	mov	r3, r0
 80008e6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d004      	beq.n	80008f8 <main+0x18c>
    printf("I2C communication error (%X).\n", status);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4873      	ldr	r0, [pc, #460]	; (8000ac0 <main+0x354>)
 80008f4:	f006 ff8e 	bl	8007814 <iprintf>

  /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
  data = 0x0F;
 80008f8:	230f      	movs	r3, #15
 80008fa:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 80008fc:	23c8      	movs	r3, #200	; 0xc8
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	2301      	movs	r3, #1
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	1d7b      	adds	r3, r7, #5
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	2206      	movs	r2, #6
 800090c:	217e      	movs	r1, #126	; 0x7e
 800090e:	486b      	ldr	r0, [pc, #428]	; (8000abc <main+0x350>)
 8000910:	f002 fd52 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000914:	4603      	mov	r3, r0
 8000916:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d004      	beq.n	8000928 <main+0x1bc>
    printf("I2C communication error (%X).\n", status);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4619      	mov	r1, r3
 8000922:	4867      	ldr	r0, [pc, #412]	; (8000ac0 <main+0x354>)
 8000924:	f006 ff76 	bl	8007814 <iprintf>

  /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
  data = 0x0F;
 8000928:	230f      	movs	r3, #15
 800092a:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 800092c:	23c8      	movs	r3, #200	; 0xc8
 800092e:	9302      	str	r3, [sp, #8]
 8000930:	2301      	movs	r3, #1
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	1d7b      	adds	r3, r7, #5
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2301      	movs	r3, #1
 800093a:	2223      	movs	r2, #35	; 0x23
 800093c:	217e      	movs	r1, #126	; 0x7e
 800093e:	485f      	ldr	r0, [pc, #380]	; (8000abc <main+0x350>)
 8000940:	f002 fd3a 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d004      	beq.n	8000958 <main+0x1ec>
    printf("I2C communication error (%X).\n", status);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4619      	mov	r1, r3
 8000952:	485b      	ldr	r0, [pc, #364]	; (8000ac0 <main+0x354>)
 8000954:	f006 ff5e 	bl	8007814 <iprintf>

  /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
  data = 0x05;
 8000958:	2305      	movs	r3, #5
 800095a:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 800095c:	23c8      	movs	r3, #200	; 0xc8
 800095e:	9302      	str	r3, [sp, #8]
 8000960:	2301      	movs	r3, #1
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	1d7b      	adds	r3, r7, #5
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	2222      	movs	r2, #34	; 0x22
 800096c:	217e      	movs	r1, #126	; 0x7e
 800096e:	4853      	ldr	r0, [pc, #332]	; (8000abc <main+0x350>)
 8000970:	f002 fd22 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d004      	beq.n	8000988 <main+0x21c>
    printf("I2C communication error (%X).\n", status);
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	4619      	mov	r1, r3
 8000982:	484f      	ldr	r0, [pc, #316]	; (8000ac0 <main+0x354>)
 8000984:	f006 ff46 	bl	8007814 <iprintf>

  /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
  data = 0x7D;
 8000988:	237d      	movs	r3, #125	; 0x7d
 800098a:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 800098c:	23c8      	movs	r3, #200	; 0xc8
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	2301      	movs	r3, #1
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	1d7b      	adds	r3, r7, #5
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2301      	movs	r3, #1
 800099a:	2225      	movs	r2, #37	; 0x25
 800099c:	217e      	movs	r1, #126	; 0x7e
 800099e:	4847      	ldr	r0, [pc, #284]	; (8000abc <main+0x350>)
 80009a0:	f002 fd0a 	bl	80033b8 <HAL_I2C_Mem_Write>
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d004      	beq.n	80009b8 <main+0x24c>
    printf("I2C communication error (%X).\n", status);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4843      	ldr	r0, [pc, #268]	; (8000ac0 <main+0x354>)
 80009b4:	f006 ff2e 	bl	8007814 <iprintf>

  /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
  data = 0x1B;
 80009b8:	231b      	movs	r3, #27
 80009ba:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 80009bc:	23c8      	movs	r3, #200	; 0xc8
 80009be:	9302      	str	r3, [sp, #8]
 80009c0:	2301      	movs	r3, #1
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	1d7b      	adds	r3, r7, #5
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2301      	movs	r3, #1
 80009ca:	2226      	movs	r2, #38	; 0x26
 80009cc:	217e      	movs	r1, #126	; 0x7e
 80009ce:	483b      	ldr	r0, [pc, #236]	; (8000abc <main+0x350>)
 80009d0:	f002 fcf2 	bl	80033b8 <HAL_I2C_Mem_Write>
 80009d4:	4603      	mov	r3, r0
 80009d6:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d004      	beq.n	80009e8 <main+0x27c>
    printf("I2C communication error (%X).\n", status);
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4837      	ldr	r0, [pc, #220]	; (8000ac0 <main+0x354>)
 80009e4:	f006 ff16 	bl	8007814 <iprintf>

  /* Enable EXTI4_IRQ after SX1509 initialization */
  HAL_Delay(100);
 80009e8:	2064      	movs	r0, #100	; 0x64
 80009ea:	f001 fe7b 	bl	80026e4 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009ee:	200a      	movs	r0, #10
 80009f0:	f002 fa4b 	bl	8002e8a <HAL_NVIC_EnableIRQ>

  /* Disable EXTI2_IRQ during SX1509 initialization */
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80009f4:	2008      	movs	r0, #8
 80009f6:	f002 fa56 	bl	8002ea6 <HAL_NVIC_DisableIRQ>

  /* Software reset */
  data = 0x12;
 80009fa:	2312      	movs	r3, #18
 80009fc:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80009fe:	23c8      	movs	r3, #200	; 0xc8
 8000a00:	9302      	str	r3, [sp, #8]
 8000a02:	2301      	movs	r3, #1
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	1d7b      	adds	r3, r7, #5
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	227d      	movs	r2, #125	; 0x7d
 8000a0e:	217c      	movs	r1, #124	; 0x7c
 8000a10:	482a      	ldr	r0, [pc, #168]	; (8000abc <main+0x350>)
 8000a12:	f002 fcd1 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d004      	beq.n	8000a2a <main+0x2be>
    printf("I2C communication error (%X).\n", status);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <main+0x354>)
 8000a26:	f006 fef5 	bl	8007814 <iprintf>

  data = 0x34;
 8000a2a:	2334      	movs	r3, #52	; 0x34
 8000a2c:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000a2e:	23c8      	movs	r3, #200	; 0xc8
 8000a30:	9302      	str	r3, [sp, #8]
 8000a32:	2301      	movs	r3, #1
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	1d7b      	adds	r3, r7, #5
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	227d      	movs	r2, #125	; 0x7d
 8000a3e:	217c      	movs	r1, #124	; 0x7c
 8000a40:	481e      	ldr	r0, [pc, #120]	; (8000abc <main+0x350>)
 8000a42:	f002 fcb9 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <main+0x2ee>
    printf("I2C communication error (%X).\n", status);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4619      	mov	r1, r3
 8000a54:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <main+0x354>)
 8000a56:	f006 fedd 	bl	8007814 <iprintf>

  HAL_Delay(100);
 8000a5a:	2064      	movs	r0, #100	; 0x64
 8000a5c:	f001 fe42 	bl	80026e4 <HAL_Delay>

  /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000a64:	23c8      	movs	r3, #200	; 0xc8
 8000a66:	9302      	str	r3, [sp, #8]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	1d7b      	adds	r3, r7, #5
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2301      	movs	r3, #1
 8000a72:	220f      	movs	r2, #15
 8000a74:	217c      	movs	r1, #124	; 0x7c
 8000a76:	4811      	ldr	r0, [pc, #68]	; (8000abc <main+0x350>)
 8000a78:	f002 fc9e 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d004      	beq.n	8000a90 <main+0x324>
    printf("I2C communication error (%X).\n", status);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <main+0x354>)
 8000a8c:	f006 fec2 	bl	8007814 <iprintf>

  /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 8000a90:	23ff      	movs	r3, #255	; 0xff
 8000a92:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000a94:	23c8      	movs	r3, #200	; 0xc8
 8000a96:	9302      	str	r3, [sp, #8]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	1d7b      	adds	r3, r7, #5
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	220e      	movs	r2, #14
 8000aa4:	217c      	movs	r1, #124	; 0x7c
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <main+0x350>)
 8000aa8:	f002 fc86 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	e006      	b.n	8000ac4 <main+0x358>
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	200000e0 	.word	0x200000e0
 8000ac0:	08008534 	.word	0x08008534
 8000ac4:	d004      	beq.n	8000ad0 <main+0x364>
    printf("I2C communication error (%X).\n", status);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4838      	ldr	r0, [pc, #224]	; (8000bac <main+0x440>)
 8000acc:	f006 fea2 	bl	8007814 <iprintf>

  /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
  data = 0x00;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000ad4:	23c8      	movs	r3, #200	; 0xc8
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	1d7b      	adds	r3, r7, #5
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	2213      	movs	r2, #19
 8000ae4:	217c      	movs	r1, #124	; 0x7c
 8000ae6:	4832      	ldr	r0, [pc, #200]	; (8000bb0 <main+0x444>)
 8000ae8:	f002 fc66 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d004      	beq.n	8000b00 <main+0x394>
    printf("I2C communication error (%X).\n", status);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4619      	mov	r1, r3
 8000afa:	482c      	ldr	r0, [pc, #176]	; (8000bac <main+0x440>)
 8000afc:	f006 fe8a 	bl	8007814 <iprintf>

  /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000b00:	23aa      	movs	r3, #170	; 0xaa
 8000b02:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000b04:	23c8      	movs	r3, #200	; 0xc8
 8000b06:	9302      	str	r3, [sp, #8]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	1d7b      	adds	r3, r7, #5
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2301      	movs	r3, #1
 8000b12:	2216      	movs	r2, #22
 8000b14:	217c      	movs	r1, #124	; 0x7c
 8000b16:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <main+0x444>)
 8000b18:	f002 fc4e 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d004      	beq.n	8000b30 <main+0x3c4>
    printf("I2C communication error (%X).\n", status);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4820      	ldr	r0, [pc, #128]	; (8000bac <main+0x440>)
 8000b2c:	f006 fe72 	bl	8007814 <iprintf>

  /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
  data = 0xAA;
 8000b30:	23aa      	movs	r3, #170	; 0xaa
 8000b32:	717b      	strb	r3, [r7, #5]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000b34:	23c8      	movs	r3, #200	; 0xc8
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	2301      	movs	r3, #1
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	1d7b      	adds	r3, r7, #5
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2301      	movs	r3, #1
 8000b42:	2217      	movs	r2, #23
 8000b44:	217c      	movs	r1, #124	; 0x7c
 8000b46:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <main+0x444>)
 8000b48:	f002 fc36 	bl	80033b8 <HAL_I2C_Mem_Write>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d004      	beq.n	8000b60 <main+0x3f4>
    printf("I2C communication error (%X).\n", status);
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4814      	ldr	r0, [pc, #80]	; (8000bac <main+0x440>)
 8000b5c:	f006 fe5a 	bl	8007814 <iprintf>

  /* Enable EXTI2_IRQ after SX1509 initialization */
  HAL_Delay(100);
 8000b60:	2064      	movs	r0, #100	; 0x64
 8000b62:	f001 fdbf 	bl	80026e4 <HAL_Delay>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b66:	2008      	movs	r0, #8
 8000b68:	f002 f98f 	bl	8002e8a <HAL_NVIC_EnableIRQ>


  printf("Ready\n");
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <main+0x448>)
 8000b6e:	f006 fed7 	bl	8007920 <puts>
	  HAL_Delay(actual_wait);
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
	  HAL_Delay(actual_wait);
	  */
	 uint8_t buff;
	 HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &buff, 1, HAL_TIMEOUT);
 8000b72:	2364      	movs	r3, #100	; 0x64
 8000b74:	9302      	str	r3, [sp, #8]
 8000b76:	2301      	movs	r3, #1
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2301      	movs	r3, #1
 8000b80:	2210      	movs	r2, #16
 8000b82:	217c      	movs	r1, #124	; 0x7c
 8000b84:	480a      	ldr	r0, [pc, #40]	; (8000bb0 <main+0x444>)
 8000b86:	f002 fd2b 	bl	80035e0 <HAL_I2C_Mem_Read>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71bb      	strb	r3, [r7, #6]
	    if (status != HAL_OK)
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d004      	beq.n	8000b9e <main+0x432>
	      printf("I2C communication error (%X).\n", status);
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <main+0x440>)
 8000b9a:	f006 fe3b 	bl	8007814 <iprintf>
	 printf("(%d).\n", buff);
 8000b9e:	793b      	ldrb	r3, [r7, #4]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <main+0x44c>)
 8000ba4:	f006 fe36 	bl	8007814 <iprintf>
  {
 8000ba8:	e7e3      	b.n	8000b72 <main+0x406>
 8000baa:	bf00      	nop
 8000bac:	08008534 	.word	0x08008534
 8000bb0:	200000e0 	.word	0x200000e0
 8000bb4:	0800856c 	.word	0x0800856c
 8000bb8:	08008574 	.word	0x08008574

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	2234      	movs	r2, #52	; 0x34
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 fd85 	bl	80076da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000be0:	f003 f94a 	bl	8003e78 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <SystemClock_Config+0xdc>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a2b      	ldr	r2, [pc, #172]	; (8000c98 <SystemClock_Config+0xdc>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <SystemClock_Config+0xdc>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <SystemClock_Config+0xe0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c04:	4a25      	ldr	r2, [pc, #148]	; (8000c9c <SystemClock_Config+0xe0>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <SystemClock_Config+0xe0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c20:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 f977 	bl	8003f38 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c50:	f000 ff1e 	bl	8001a90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c54:	f003 f920 	bl	8003e98 <HAL_PWREx_EnableOverDrive>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c5e:	f000 ff17 	bl	8001a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c62:	230f      	movs	r3, #15
 8000c64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c66:	2302      	movs	r3, #2
 8000c68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 fc08 	bl	8004494 <HAL_RCC_ClockConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c8a:	f000 ff01 	bl	8001a90 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3750      	adds	r7, #80	; 0x50
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <MX_ADC1_Init+0x9c>)
 8000cb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_ADC1_Init+0xa0>)
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000d02:	f001 fd13 	bl	800272c <HAL_ADC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d0c:	f000 fec0 	bl	8001a90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d10:	2303      	movs	r3, #3
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_ADC1_Init+0x98>)
 8000d22:	f001 fd47 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d2c:	f000 feb0 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000098 	.word	0x20000098
 8000d3c:	40012000 	.word	0x40012000
 8000d40:	0f000001 	.word	0x0f000001

08000d44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <MX_I2C1_Init+0x78>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d50:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <MX_I2C1_Init+0x7c>)
 8000d52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d7e:	480e      	ldr	r0, [pc, #56]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d80:	f002 fa8a 	bl	8003298 <HAL_I2C_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d8a:	f000 fe81 	bl	8001a90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000d92:	f002 ffd9 	bl	8003d48 <HAL_I2CEx_ConfigAnalogFilter>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d9c:	f000 fe78 	bl	8001a90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_I2C1_Init+0x74>)
 8000da4:	f003 f81b 	bl	8003dde <HAL_I2CEx_ConfigDigitalFilter>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dae:	f000 fe6f 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000e0 	.word	0x200000e0
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	20303e5d 	.word	0x20303e5d

08000dc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000dca:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <MX_I2C2_Init+0x78>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <MX_I2C2_Init+0x7c>)
 8000dd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dfe:	480e      	ldr	r0, [pc, #56]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000e00:	f002 fa4a 	bl	8003298 <HAL_I2C_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e0a:	f000 fe41 	bl	8001a90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000e12:	f002 ff99 	bl	8003d48 <HAL_I2CEx_ConfigAnalogFilter>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e1c:	f000 fe38 	bl	8001a90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_I2C2_Init+0x74>)
 8000e24:	f002 ffdb 	bl	8003dde <HAL_I2CEx_ConfigDigitalFilter>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e2e:	f000 fe2f 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000134 	.word	0x20000134
 8000e3c:	40005800 	.word	0x40005800
 8000e40:	20303e5d 	.word	0x20303e5d

08000e44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <MX_SPI1_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e92:	2207      	movs	r2, #7
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_SPI1_Init+0x74>)
 8000ea4:	f004 f944 	bl	8005130 <HAL_SPI_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eae:	f000 fdef 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000188 	.word	0x20000188
 8000ebc:	40013000 	.word	0x40013000

08000ec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09a      	sub	sp, #104	; 0x68
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	222c      	movs	r2, #44	; 0x2c
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f006 fbed 	bl	80076da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f00:	4b55      	ldr	r3, [pc, #340]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f02:	4a56      	ldr	r2, [pc, #344]	; (800105c <MX_TIM1_Init+0x19c>)
 8000f04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PSC_VALUE;
 8000f06:	4b54      	ldr	r3, [pc, #336]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f08:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000f0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b52      	ldr	r3, [pc, #328]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_ARR_VALUE;
 8000f14:	4b50      	ldr	r3, [pc, #320]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f16:	22c8      	movs	r2, #200	; 0xc8
 8000f18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b4f      	ldr	r3, [pc, #316]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f20:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b4c      	ldr	r3, [pc, #304]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f2c:	484a      	ldr	r0, [pc, #296]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f2e:	f004 f9aa 	bl	8005286 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f38:	f000 fdaa 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f40:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f46:	4619      	mov	r1, r3
 8000f48:	4843      	ldr	r0, [pc, #268]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f4a:	f004 fd01 	bl	8005950 <HAL_TIM_ConfigClockSource>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f54:	f000 fd9c 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f58:	483f      	ldr	r0, [pc, #252]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f5a:	f004 f9eb 	bl	8005334 <HAL_TIM_PWM_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f64:	f000 fd94 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4837      	ldr	r0, [pc, #220]	; (8001058 <MX_TIM1_Init+0x198>)
 8000f7c:	f005 fa74 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f86:	f000 fd83 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8a:	2360      	movs	r3, #96	; 0x60
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000faa:	2200      	movs	r2, #0
 8000fac:	4619      	mov	r1, r3
 8000fae:	482a      	ldr	r0, [pc, #168]	; (8001058 <MX_TIM1_Init+0x198>)
 8000fb0:	f004 fbba 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fba:	f000 fd69 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4824      	ldr	r0, [pc, #144]	; (8001058 <MX_TIM1_Init+0x198>)
 8000fc8:	f004 fbae 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000fd2:	f000 fd5d 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fda:	2208      	movs	r2, #8
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481e      	ldr	r0, [pc, #120]	; (8001058 <MX_TIM1_Init+0x198>)
 8000fe0:	f004 fba2 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000fea:	f000 fd51 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <MX_TIM1_Init+0x198>)
 8000ff8:	f004 fb96 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001002:	f000 fd45 	bl	8001a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <MX_TIM1_Init+0x198>)
 800103c:	f005 faa2 	bl	8006584 <HAL_TIMEx_ConfigBreakDeadTime>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001046:	f000 fd23 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <MX_TIM1_Init+0x198>)
 800104c:	f000 ffc6 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001050:	bf00      	nop
 8001052:	3768      	adds	r7, #104	; 0x68
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200001ec 	.word	0x200001ec
 800105c:	40010000 	.word	0x40010000

08001060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b092      	sub	sp, #72	; 0x48
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	615a      	str	r2, [r3, #20]
 8001092:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a0:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <MX_TIM2_Init+0x130>)
 80010a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a8:	4b39      	ldr	r3, [pc, #228]	; (8001190 <MX_TIM2_Init+0x130>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b38      	ldr	r3, [pc, #224]	; (8001190 <MX_TIM2_Init+0x130>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010b4:	4b36      	ldr	r3, [pc, #216]	; (8001190 <MX_TIM2_Init+0x130>)
 80010b6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b34      	ldr	r3, [pc, #208]	; (8001190 <MX_TIM2_Init+0x130>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <MX_TIM2_Init+0x130>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c8:	4831      	ldr	r0, [pc, #196]	; (8001190 <MX_TIM2_Init+0x130>)
 80010ca:	f004 f8dc 	bl	8005286 <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010d4:	f000 fcdc 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010e2:	4619      	mov	r1, r3
 80010e4:	482a      	ldr	r0, [pc, #168]	; (8001190 <MX_TIM2_Init+0x130>)
 80010e6:	f004 fc33 	bl	8005950 <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010f0:	f000 fcce 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f4:	4826      	ldr	r0, [pc, #152]	; (8001190 <MX_TIM2_Init+0x130>)
 80010f6:	f004 f91d 	bl	8005334 <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001100:	f000 fcc6 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001104:	4822      	ldr	r0, [pc, #136]	; (8001190 <MX_TIM2_Init+0x130>)
 8001106:	f004 f96c 	bl	80053e2 <HAL_TIM_IC_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001110:	f000 fcbe 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	4619      	mov	r1, r3
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <MX_TIM2_Init+0x130>)
 8001124:	f005 f9a0 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800112e:	f000 fcaf 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001132:	2360      	movs	r3, #96	; 0x60
 8001134:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	4811      	ldr	r0, [pc, #68]	; (8001190 <MX_TIM2_Init+0x130>)
 800114c:	f004 faec 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001156:	f000 fc9b 	bl	8001a90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115e:	2301      	movs	r3, #1
 8001160:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	2208      	movs	r2, #8
 800116e:	4619      	mov	r1, r3
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <MX_TIM2_Init+0x130>)
 8001172:	f004 fa3d 	bl	80055f0 <HAL_TIM_IC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800117c:	f000 fc88 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <MX_TIM2_Init+0x130>)
 8001182:	f000 ff2b 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001186:	bf00      	nop
 8001188:	3748      	adds	r7, #72	; 0x48
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000238 	.word	0x20000238

08001194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2224      	movs	r2, #36	; 0x24
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 fa99 	bl	80076da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_TIM3_Init+0xa4>)
 80011b4:	4a21      	ldr	r2, [pc, #132]	; (800123c <MX_TIM3_Init+0xa8>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_TIM3_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <MX_TIM3_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_TIM3_Init+0xa4>)
 80011c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_TIM3_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_TIM3_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011d8:	2301      	movs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011f0:	2301      	movs	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_TIM3_Init+0xa4>)
 8001204:	f004 f94e 	bl	80054a4 <HAL_TIM_Encoder_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800120e:	f000 fc3f 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_TIM3_Init+0xa4>)
 8001220:	f005 f922 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800122a:	f000 fc31 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000284 	.word	0x20000284
 800123c:	40000400 	.word	0x40000400

08001240 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f006 fa43 	bl	80076da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_TIM4_Init+0xa4>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <MX_TIM4_Init+0xa8>)
 8001262:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_TIM4_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_TIM4_Init+0xa4>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_TIM4_Init+0xa4>)
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_TIM4_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_TIM4_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001284:	2301      	movs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800129c:	2301      	movs	r3, #1
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_TIM4_Init+0xa4>)
 80012b0:	f004 f8f8 	bl	80054a4 <HAL_TIM_Encoder_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012ba:	f000 fbe9 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_TIM4_Init+0xa4>)
 80012cc:	f005 f8cc 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012d6:	f000 fbdb 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200002d0 	.word	0x200002d0
 80012e8:	40000800 	.word	0x40000800

080012ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001320:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <MX_TIM5_Init+0xec>)
 8001322:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <MX_TIM5_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001332:	f04f 32ff 	mov.w	r2, #4294967295
 8001336:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_TIM5_Init+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001344:	4823      	ldr	r0, [pc, #140]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001346:	f003 ff9e 	bl	8005286 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001350:	f000 fb9e 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	4619      	mov	r1, r3
 8001360:	481c      	ldr	r0, [pc, #112]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001362:	f004 faf5 	bl	8005950 <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800136c:	f000 fb90 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001372:	f003 ffdf 	bl	8005334 <HAL_TIM_PWM_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800137c:	f000 fb88 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001390:	f005 f86a 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800139a:	f000 fb79 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139e:	2360      	movs	r3, #96	; 0x60
 80013a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM5_Init+0xe8>)
 80013b6:	f004 f9b7 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013c0:	f000 fb66 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM5_Init+0xe8>)
 80013c6:	f000 fe09 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 80013ca:	bf00      	nop
 80013cc:	3738      	adds	r7, #56	; 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000031c 	.word	0x2000031c
 80013d8:	40000c00 	.word	0x40000c00

080013dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b09a      	sub	sp, #104	; 0x68
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	222c      	movs	r2, #44	; 0x2c
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f006 f95f 	bl	80076da <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800141c:	4b56      	ldr	r3, [pc, #344]	; (8001578 <MX_TIM8_Init+0x19c>)
 800141e:	4a57      	ldr	r2, [pc, #348]	; (800157c <MX_TIM8_Init+0x1a0>)
 8001420:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001422:	4b55      	ldr	r3, [pc, #340]	; (8001578 <MX_TIM8_Init+0x19c>)
 8001424:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001428:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b53      	ldr	r3, [pc, #332]	; (8001578 <MX_TIM8_Init+0x19c>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001430:	4b51      	ldr	r3, [pc, #324]	; (8001578 <MX_TIM8_Init+0x19c>)
 8001432:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001436:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b4f      	ldr	r3, [pc, #316]	; (8001578 <MX_TIM8_Init+0x19c>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800143e:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <MX_TIM8_Init+0x19c>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <MX_TIM8_Init+0x19c>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800144a:	484b      	ldr	r0, [pc, #300]	; (8001578 <MX_TIM8_Init+0x19c>)
 800144c:	f003 ff1b 	bl	8005286 <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001456:	f000 fb1b 	bl	8001a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001460:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001464:	4619      	mov	r1, r3
 8001466:	4844      	ldr	r0, [pc, #272]	; (8001578 <MX_TIM8_Init+0x19c>)
 8001468:	f004 fa72 	bl	8005950 <HAL_TIM_ConfigClockSource>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001472:	f000 fb0d 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001476:	4840      	ldr	r0, [pc, #256]	; (8001578 <MX_TIM8_Init+0x19c>)
 8001478:	f003 ff5c 	bl	8005334 <HAL_TIM_PWM_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001482:	f000 fb05 	bl	8001a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001492:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001496:	4619      	mov	r1, r3
 8001498:	4837      	ldr	r0, [pc, #220]	; (8001578 <MX_TIM8_Init+0x19c>)
 800149a:	f004 ffe5 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80014a4:	f000 faf4 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a8:	2360      	movs	r3, #96	; 0x60
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c8:	2200      	movs	r2, #0
 80014ca:	4619      	mov	r1, r3
 80014cc:	482a      	ldr	r0, [pc, #168]	; (8001578 <MX_TIM8_Init+0x19c>)
 80014ce:	f004 f92b 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80014d8:	f000 fada 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e0:	2204      	movs	r2, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4824      	ldr	r0, [pc, #144]	; (8001578 <MX_TIM8_Init+0x19c>)
 80014e6:	f004 f91f 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80014f0:	f000 face 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014f8:	2208      	movs	r2, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	481e      	ldr	r0, [pc, #120]	; (8001578 <MX_TIM8_Init+0x19c>)
 80014fe:	f004 f913 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001508:	f000 fac2 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800150c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001510:	220c      	movs	r2, #12
 8001512:	4619      	mov	r1, r3
 8001514:	4818      	ldr	r0, [pc, #96]	; (8001578 <MX_TIM8_Init+0x19c>)
 8001516:	f004 f907 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001520:	f000 fab6 	bl	8001a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_TIM8_Init+0x19c>)
 800155a:	f005 f813 	bl	8006584 <HAL_TIMEx_ConfigBreakDeadTime>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001564:	f000 fa94 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001568:	4803      	ldr	r0, [pc, #12]	; (8001578 <MX_TIM8_Init+0x19c>)
 800156a:	f000 fd37 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 800156e:	bf00      	nop
 8001570:	3768      	adds	r7, #104	; 0x68
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000368 	.word	0x20000368
 800157c:	40010400 	.word	0x40010400

08001580 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_TIM9_Init+0x98>)
 800159a:	4a20      	ldr	r2, [pc, #128]	; (800161c <MX_TIM9_Init+0x9c>)
 800159c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_TIM9_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_TIM9_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_TIM9_Init+0x98>)
 80015ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_TIM9_Init+0x98>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_TIM9_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80015be:	4816      	ldr	r0, [pc, #88]	; (8001618 <MX_TIM9_Init+0x98>)
 80015c0:	f003 feb8 	bl	8005334 <HAL_TIM_PWM_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80015ca:	f000 fa61 	bl	8001a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ce:	2360      	movs	r3, #96	; 0x60
 80015d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_TIM9_Init+0x98>)
 80015e6:	f004 f89f 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80015f0:	f000 fa4e 	bl	8001a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2204      	movs	r2, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <MX_TIM9_Init+0x98>)
 80015fc:	f004 f894 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001606:	f000 fa43 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM9_Init+0x98>)
 800160c:	f000 fce6 	bl	8001fdc <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3720      	adds	r7, #32
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200003b4 	.word	0x200003b4
 800161c:	40014000 	.word	0x40014000

08001620 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_UART4_Init+0x58>)
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <MX_UART4_Init+0x5c>)
 8001628:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <MX_UART4_Init+0x58>)
 800162c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001630:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_UART4_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_UART4_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_UART4_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_UART4_Init+0x58>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_UART4_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_UART4_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_UART4_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_UART4_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_UART4_Init+0x58>)
 8001664:	f005 f80c 	bl	8006680 <HAL_UART_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800166e:	f000 fa0f 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000400 	.word	0x20000400
 800167c:	40004c00 	.word	0x40004c00

08001680 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_UART5_Init+0x58>)
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <MX_UART5_Init+0x5c>)
 8001688:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_UART5_Init+0x58>)
 800168c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001690:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_UART5_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_UART5_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_UART5_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_UART5_Init+0x58>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_UART5_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_UART5_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_UART5_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_UART5_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_UART5_Init+0x58>)
 80016c4:	f004 ffdc 	bl	8006680 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80016ce:	f000 f9df 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000488 	.word	0x20000488
 80016dc:	40005000 	.word	0x40005000

080016e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_USART1_UART_Init+0x58>)
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <MX_USART1_UART_Init+0x5c>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_USART1_UART_Init+0x58>)
 80016ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_USART1_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_USART1_UART_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_USART1_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_USART1_UART_Init+0x58>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_USART1_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_USART1_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_USART1_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_USART1_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_USART1_UART_Init+0x58>)
 8001724:	f004 ffac 	bl	8006680 <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800172e:	f000 f9af 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000510 	.word	0x20000510
 800173c:	40011000 	.word	0x40011000

08001740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_USART2_UART_Init+0x58>)
 8001746:	4a15      	ldr	r2, [pc, #84]	; (800179c <MX_USART2_UART_Init+0x5c>)
 8001748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_USART2_UART_Init+0x58>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_USART2_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_USART2_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_USART2_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_USART2_UART_Init+0x58>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_USART2_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_USART2_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_USART2_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_USART2_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_USART2_UART_Init+0x58>)
 8001784:	f004 ff7c 	bl	8006680 <HAL_UART_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800178e:	f000 f97f 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000598 	.word	0x20000598
 800179c:	40004400 	.word	0x40004400

080017a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017a6:	4a15      	ldr	r2, [pc, #84]	; (80017fc <MX_USART3_UART_Init+0x5c>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017e4:	f004 ff4c 	bl	8006680 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017ee:	f000 f94f 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000620 	.word	0x20000620
 80017fc:	40004800 	.word	0x40004800

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08e      	sub	sp, #56	; 0x38
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4b97      	ldr	r3, [pc, #604]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a96      	ldr	r2, [pc, #600]	; (8001a74 <MX_GPIO_Init+0x274>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b94      	ldr	r3, [pc, #592]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	4b91      	ldr	r3, [pc, #580]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a90      	ldr	r2, [pc, #576]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <MX_GPIO_Init+0x274>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001846:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a8a      	ldr	r2, [pc, #552]	; (8001a74 <MX_GPIO_Init+0x274>)
 800184c:	f043 0320 	orr.w	r3, r3, #32
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185e:	4b85      	ldr	r3, [pc, #532]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a84      	ldr	r2, [pc, #528]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b82      	ldr	r3, [pc, #520]	; (8001a74 <MX_GPIO_Init+0x274>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b7f      	ldr	r3, [pc, #508]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a7e      	ldr	r2, [pc, #504]	; (8001a74 <MX_GPIO_Init+0x274>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b79      	ldr	r3, [pc, #484]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a78      	ldr	r2, [pc, #480]	; (8001a74 <MX_GPIO_Init+0x274>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b76      	ldr	r3, [pc, #472]	; (8001a74 <MX_GPIO_Init+0x274>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a6:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <MX_GPIO_Init+0x274>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a72      	ldr	r2, [pc, #456]	; (8001a74 <MX_GPIO_Init+0x274>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b70      	ldr	r3, [pc, #448]	; (8001a74 <MX_GPIO_Init+0x274>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018be:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <MX_GPIO_Init+0x274>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a6c      	ldr	r2, [pc, #432]	; (8001a74 <MX_GPIO_Init+0x274>)
 80018c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <MX_GPIO_Init+0x274>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2118      	movs	r1, #24
 80018da:	4867      	ldr	r0, [pc, #412]	; (8001a78 <MX_GPIO_Init+0x278>)
 80018dc:	f001 fcaa 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f244 0181 	movw	r1, #16513	; 0x4081
 80018e6:	4865      	ldr	r0, [pc, #404]	; (8001a7c <MX_GPIO_Init+0x27c>)
 80018e8:	f001 fca4 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	4863      	ldr	r0, [pc, #396]	; (8001a80 <MX_GPIO_Init+0x280>)
 80018f2:	f001 fc9f 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 80018f6:	2318      	movs	r3, #24
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	485a      	ldr	r0, [pc, #360]	; (8001a78 <MX_GPIO_Init+0x278>)
 800190e:	f001 fae5 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 8001912:	f643 7308 	movw	r3, #16136	; 0x3f08
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001918:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	4856      	ldr	r0, [pc, #344]	; (8001a84 <MX_GPIO_Init+0x284>)
 800192a:	f001 fad7 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_EXTI4_KPAD_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI4_KPAD_IRQ_Pin;
 800192e:	2310      	movs	r3, #16
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001932:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI4_KPAD_IRQ_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	4850      	ldr	r0, [pc, #320]	; (8001a84 <MX_GPIO_Init+0x284>)
 8001944:	f001 faca 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001948:	2332      	movs	r3, #50	; 0x32
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001958:	230b      	movs	r3, #11
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001960:	4619      	mov	r1, r3
 8001962:	4849      	ldr	r0, [pc, #292]	; (8001a88 <MX_GPIO_Init+0x288>)
 8001964:	f001 faba 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001968:	2386      	movs	r3, #134	; 0x86
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001978:	230b      	movs	r3, #11
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001980:	4619      	mov	r1, r3
 8001982:	4842      	ldr	r0, [pc, #264]	; (8001a8c <MX_GPIO_Init+0x28c>)
 8001984:	f001 faaa 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001988:	f244 0381 	movw	r3, #16513	; 0x4081
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199e:	4619      	mov	r1, r3
 80019a0:	4836      	ldr	r0, [pc, #216]	; (8001a7c <MX_GPIO_Init+0x27c>)
 80019a2:	f001 fa9b 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019b8:	230b      	movs	r3, #11
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	482e      	ldr	r0, [pc, #184]	; (8001a7c <MX_GPIO_Init+0x27c>)
 80019c4:	f001 fa8a 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019c8:	2340      	movs	r3, #64	; 0x40
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	4828      	ldr	r0, [pc, #160]	; (8001a80 <MX_GPIO_Init+0x280>)
 80019e0:	f001 fa7c 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f4:	4619      	mov	r1, r3
 80019f6:	4822      	ldr	r0, [pc, #136]	; (8001a80 <MX_GPIO_Init+0x280>)
 80019f8:	f001 fa70 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019fc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a0e:	230a      	movs	r3, #10
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	4619      	mov	r1, r3
 8001a18:	481c      	ldr	r0, [pc, #112]	; (8001a8c <MX_GPIO_Init+0x28c>)
 8001a1a:	f001 fa5f 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a30:	4619      	mov	r1, r3
 8001a32:	4816      	ldr	r0, [pc, #88]	; (8001a8c <MX_GPIO_Init+0x28c>)
 8001a34:	f001 fa52 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a4a:	230b      	movs	r3, #11
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	4619      	mov	r1, r3
 8001a54:	480a      	ldr	r0, [pc, #40]	; (8001a80 <MX_GPIO_Init+0x280>)
 8001a56:	f001 fa41 	bl	8002edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f001 f9f7 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a64:	200a      	movs	r0, #10
 8001a66:	f001 fa10 	bl	8002e8a <HAL_NVIC_EnableIRQ>

}
 8001a6a:	bf00      	nop
 8001a6c:	3738      	adds	r7, #56	; 0x38
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40021400 	.word	0x40021400
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i
}
 8001a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <Error_Handler+0x8>
	...

08001a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_MspInit+0x44>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_MspInit+0x44>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	; 0x40
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_MspInit+0x44>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_MspInit+0x44>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <HAL_MspInit+0x44>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_MspInit+0x44>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <HAL_ADC_MspInit+0x74>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d123      	bne.n	8001b4e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_ADC_MspInit+0x78>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <HAL_ADC_MspInit+0x78>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_ADC_MspInit+0x78>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_ADC_MspInit+0x78>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <HAL_ADC_MspInit+0x78>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_ADC_MspInit+0x78>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001b36:	2308      	movs	r3, #8
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_ADC_MspInit+0x7c>)
 8001b4a:	f001 f9c7 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	; 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40012000 	.word	0x40012000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000

08001b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0b0      	sub	sp, #192	; 0xc0
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2290      	movs	r2, #144	; 0x90
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 fda8 	bl	80076da <memset>
  if(hi2c->Instance==I2C1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a44      	ldr	r2, [pc, #272]	; (8001ca0 <HAL_I2C_MspInit+0x13c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d13e      	bne.n	8001c12 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b98:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fe9b 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001bb0:	f7ff ff6e 	bl	8001a90 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	4a3a      	ldr	r2, [pc, #232]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc0:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be6:	2304      	movs	r3, #4
 8001be8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	482d      	ldr	r0, [pc, #180]	; (8001ca8 <HAL_I2C_MspInit+0x144>)
 8001bf4:	f001 f972 	bl	8002edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c10:	e041      	b.n	8001c96 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a25      	ldr	r2, [pc, #148]	; (8001cac <HAL_I2C_MspInit+0x148>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d13c      	bne.n	8001c96 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c20:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fe57 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001c38:	f7ff ff2a 	bl	8001a90 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c54:	2303      	movs	r3, #3
 8001c56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5a:	2312      	movs	r3, #18
 8001c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c76:	4619      	mov	r1, r3
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <HAL_I2C_MspInit+0x14c>)
 8001c7a:	f001 f92f 	bl	8002edc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_I2C_MspInit+0x140>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
}
 8001c96:	bf00      	nop
 8001c98:	37c0      	adds	r7, #192	; 0xc0
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40005800 	.word	0x40005800
 8001cb0:	40021400 	.word	0x40021400

08001cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a33      	ldr	r2, [pc, #204]	; (8001da0 <HAL_SPI_MspInit+0xec>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d160      	bne.n	8001d98 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a20      	ldr	r2, [pc, #128]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <HAL_SPI_MspInit+0xf0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d36:	2320      	movs	r3, #32
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d46:	2305      	movs	r3, #5
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4815      	ldr	r0, [pc, #84]	; (8001da8 <HAL_SPI_MspInit+0xf4>)
 8001d52:	f001 f8c3 	bl	8002edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d66:	2305      	movs	r3, #5
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480e      	ldr	r0, [pc, #56]	; (8001dac <HAL_SPI_MspInit+0xf8>)
 8001d72:	f001 f8b3 	bl	8002edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d88:	2305      	movs	r3, #5
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	4807      	ldr	r0, [pc, #28]	; (8001db0 <HAL_SPI_MspInit+0xfc>)
 8001d94:	f001 f8a2 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d98:	bf00      	nop
 8001d9a:	3730      	adds	r7, #48	; 0x30
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40013000 	.word	0x40013000
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021800 	.word	0x40021800

08001db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a32      	ldr	r2, [pc, #200]	; (8001e9c <HAL_TIM_Base_MspInit+0xe8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10c      	bne.n	8001df0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a31      	ldr	r2, [pc, #196]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001dee:	e051      	b.n	8001e94 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d129      	bne.n	8001e4e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfa:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a28      	ldr	r2, [pc, #160]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a22      	ldr	r2, [pc, #136]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4817      	ldr	r0, [pc, #92]	; (8001ea4 <HAL_TIM_Base_MspInit+0xf0>)
 8001e48:	f001 f848 	bl	8002edc <HAL_GPIO_Init>
}
 8001e4c:	e022      	b.n	8001e94 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <HAL_TIM_Base_MspInit+0xf4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d10c      	bne.n	8001e72 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e5e:	f043 0308 	orr.w	r3, r3, #8
 8001e62:	6413      	str	r3, [r2, #64]	; 0x40
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	e010      	b.n	8001e94 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <HAL_TIM_Base_MspInit+0xf8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10b      	bne.n	8001e94 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	6453      	str	r3, [r2, #68]	; 0x44
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_TIM_Base_MspInit+0xec>)
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	; 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	40000c00 	.word	0x40000c00
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2e      	ldr	r2, [pc, #184]	; (8001f88 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d128      	bne.n	8001f24 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ed2:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001f02:	2330      	movs	r3, #48	; 0x30
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481c      	ldr	r0, [pc, #112]	; (8001f90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f1e:	f000 ffdd 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f22:	e02d      	b.n	8001f80 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d128      	bne.n	8001f80 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001f5e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f70:	2302      	movs	r3, #2
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4807      	ldr	r0, [pc, #28]	; (8001f98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001f7c:	f000 ffae 	bl	8002edc <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3730      	adds	r7, #48	; 0x30
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40000800 	.word	0x40000800
 8001f98:	40020c00 	.word	0x40020c00

08001f9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_TIM_PWM_MspInit+0x38>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d10b      	bne.n	8001fc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a56      	ldr	r2, [pc, #344]	; (8002154 <HAL_TIM_MspPostInit+0x178>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d11d      	bne.n	800203a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a55      	ldr	r2, [pc, #340]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8002016:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800201a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002028:	2301      	movs	r3, #1
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	4619      	mov	r1, r3
 8002032:	484a      	ldr	r0, [pc, #296]	; (800215c <HAL_TIM_MspPostInit+0x180>)
 8002034:	f000 ff52 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002038:	e088      	b.n	800214c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002042:	d11d      	bne.n	8002080 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	4a43      	ldr	r2, [pc, #268]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6313      	str	r3, [r2, #48]	; 0x30
 8002050:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 800205c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800206e:	2301      	movs	r3, #1
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002072:	f107 031c 	add.w	r3, r7, #28
 8002076:	4619      	mov	r1, r3
 8002078:	4839      	ldr	r0, [pc, #228]	; (8002160 <HAL_TIM_MspPostInit+0x184>)
 800207a:	f000 ff2f 	bl	8002edc <HAL_GPIO_Init>
}
 800207e:	e065      	b.n	800214c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a37      	ldr	r2, [pc, #220]	; (8002164 <HAL_TIM_MspPostInit+0x188>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d11c      	bne.n	80020c4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a32      	ldr	r2, [pc, #200]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	2302      	movs	r3, #2
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020b2:	2302      	movs	r3, #2
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4828      	ldr	r0, [pc, #160]	; (8002160 <HAL_TIM_MspPostInit+0x184>)
 80020be:	f000 ff0d 	bl	8002edc <HAL_GPIO_Init>
}
 80020c2:	e043      	b.n	800214c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a27      	ldr	r2, [pc, #156]	; (8002168 <HAL_TIM_MspPostInit+0x18c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d11d      	bne.n	800210a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a21      	ldr	r2, [pc, #132]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 80020e6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80020f8:	2303      	movs	r3, #3
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4619      	mov	r1, r3
 8002102:	481a      	ldr	r0, [pc, #104]	; (800216c <HAL_TIM_MspPostInit+0x190>)
 8002104:	f000 feea 	bl	8002edc <HAL_GPIO_Init>
}
 8002108:	e020      	b.n	800214c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a18      	ldr	r2, [pc, #96]	; (8002170 <HAL_TIM_MspPostInit+0x194>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d11b      	bne.n	800214c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 800211a:	f043 0310 	orr.w	r3, r3, #16
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_TIM_MspPostInit+0x17c>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 800212c:	2360      	movs	r3, #96	; 0x60
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800213c:	2303      	movs	r3, #3
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_TIM_MspPostInit+0x180>)
 8002148:	f000 fec8 	bl	8002edc <HAL_GPIO_Init>
}
 800214c:	bf00      	nop
 800214e:	3730      	adds	r7, #48	; 0x30
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40010000 	.word	0x40010000
 8002158:	40023800 	.word	0x40023800
 800215c:	40021000 	.word	0x40021000
 8002160:	40020000 	.word	0x40020000
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40010400 	.word	0x40010400
 800216c:	40020800 	.word	0x40020800
 8002170:	40014000 	.word	0x40014000

08002174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b0b6      	sub	sp, #216	; 0xd8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800218c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002190:	2290      	movs	r2, #144	; 0x90
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f005 faa0 	bl	80076da <memset>
  if(huart->Instance==UART4)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4aa0      	ldr	r2, [pc, #640]	; (8002420 <HAL_UART_MspInit+0x2ac>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d13e      	bne.n	8002222 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80021a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 fb93 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80021c0:	f7ff fc66 	bl	8001a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021c4:	4b97      	ldr	r3, [pc, #604]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	4a96      	ldr	r2, [pc, #600]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80021ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021ce:	6413      	str	r3, [r2, #64]	; 0x40
 80021d0:	4b94      	ldr	r3, [pc, #592]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021dc:	4b91      	ldr	r3, [pc, #580]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a90      	ldr	r2, [pc, #576]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b8e      	ldr	r3, [pc, #568]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80021f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800220e:	2308      	movs	r3, #8
 8002210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002214:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002218:	4619      	mov	r1, r3
 800221a:	4883      	ldr	r0, [pc, #524]	; (8002428 <HAL_UART_MspInit+0x2b4>)
 800221c:	f000 fe5e 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002220:	e151      	b.n	80024c6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a81      	ldr	r2, [pc, #516]	; (800242c <HAL_UART_MspInit+0x2b8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d160      	bne.n	80022ee <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800222c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002238:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fb4f 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002248:	f7ff fc22 	bl	8001a90 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800224c:	4b75      	ldr	r3, [pc, #468]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	4a74      	ldr	r2, [pc, #464]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002256:	6413      	str	r3, [r2, #64]	; 0x40
 8002258:	4b72      	ldr	r3, [pc, #456]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	6313      	str	r3, [r2, #48]	; 0x30
 8002270:	4b6c      	ldr	r3, [pc, #432]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227c:	4b69      	ldr	r3, [pc, #420]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	4a68      	ldr	r2, [pc, #416]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6313      	str	r3, [r2, #48]	; 0x30
 8002288:	4b66      	ldr	r3, [pc, #408]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002298:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80022ae:	2308      	movs	r3, #8
 80022b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022b8:	4619      	mov	r1, r3
 80022ba:	485d      	ldr	r0, [pc, #372]	; (8002430 <HAL_UART_MspInit+0x2bc>)
 80022bc:	f000 fe0e 	bl	8002edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80022da:	2308      	movs	r3, #8
 80022dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4850      	ldr	r0, [pc, #320]	; (8002428 <HAL_UART_MspInit+0x2b4>)
 80022e8:	f000 fdf8 	bl	8002edc <HAL_GPIO_Init>
}
 80022ec:	e0eb      	b.n	80024c6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a50      	ldr	r2, [pc, #320]	; (8002434 <HAL_UART_MspInit+0x2c0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d151      	bne.n	800239c <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022f8:	2340      	movs	r3, #64	; 0x40
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022fc:	2300      	movs	r3, #0
 80022fe:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002300:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002304:	4618      	mov	r0, r3
 8002306:	f002 faeb 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002310:	f7ff fbbe 	bl	8001a90 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	4a42      	ldr	r2, [pc, #264]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 800231a:	f043 0310 	orr.w	r3, r3, #16
 800231e:	6453      	str	r3, [r2, #68]	; 0x44
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232c:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a3c      	ldr	r2, [pc, #240]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800235e:	2304      	movs	r3, #4
 8002360:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002368:	4619      	mov	r1, r3
 800236a:	4831      	ldr	r0, [pc, #196]	; (8002430 <HAL_UART_MspInit+0x2bc>)
 800236c:	f000 fdb6 	bl	8002edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002370:	2340      	movs	r3, #64	; 0x40
 8002372:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002388:	2307      	movs	r3, #7
 800238a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002392:	4619      	mov	r1, r3
 8002394:	4826      	ldr	r0, [pc, #152]	; (8002430 <HAL_UART_MspInit+0x2bc>)
 8002396:	f000 fda1 	bl	8002edc <HAL_GPIO_Init>
}
 800239a:	e094      	b.n	80024c6 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a25      	ldr	r2, [pc, #148]	; (8002438 <HAL_UART_MspInit+0x2c4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d14c      	bne.n	8002440 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 fa94 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 80023be:	f7ff fb67 	bl	8001a90 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a17      	ldr	r2, [pc, #92]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a11      	ldr	r2, [pc, #68]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_UART_MspInit+0x2b0>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023f2:	2360      	movs	r3, #96	; 0x60
 80023f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800240a:	2307      	movs	r3, #7
 800240c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002410:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002414:	4619      	mov	r1, r3
 8002416:	4809      	ldr	r0, [pc, #36]	; (800243c <HAL_UART_MspInit+0x2c8>)
 8002418:	f000 fd60 	bl	8002edc <HAL_GPIO_Init>
}
 800241c:	e053      	b.n	80024c6 <HAL_UART_MspInit+0x352>
 800241e:	bf00      	nop
 8002420:	40004c00 	.word	0x40004c00
 8002424:	40023800 	.word	0x40023800
 8002428:	40020800 	.word	0x40020800
 800242c:	40005000 	.word	0x40005000
 8002430:	40020400 	.word	0x40020400
 8002434:	40011000 	.word	0x40011000
 8002438:	40004400 	.word	0x40004400
 800243c:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_UART_MspInit+0x35c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d13d      	bne.n	80024c6 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800244a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002456:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245a:	4618      	mov	r0, r3
 800245c:	f002 fa40 	bl	80048e0 <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002466:	f7ff fb13 	bl	8001a90 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <HAL_UART_MspInit+0x360>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_UART_MspInit+0x360>)
 8002470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_UART_MspInit+0x360>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_UART_MspInit+0x360>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <HAL_UART_MspInit+0x360>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_UART_MspInit+0x360>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800249a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800249e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024b4:	2307      	movs	r3, #7
 80024b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024be:	4619      	mov	r1, r3
 80024c0:	4805      	ldr	r0, [pc, #20]	; (80024d8 <HAL_UART_MspInit+0x364>)
 80024c2:	f000 fd0b 	bl	8002edc <HAL_GPIO_Init>
}
 80024c6:	bf00      	nop
 80024c8:	37d8      	adds	r7, #216	; 0xd8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40004800 	.word	0x40004800
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020c00 	.word	0x40020c00

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler+0x4>

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <MemManage_Handler+0x4>

080024ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002528:	f000 f8bc 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI4_KPAD_IRQ_Pin);
 8002534:	2010      	movs	r0, #16
 8002536:	f000 fe97 	bl	8003268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f004 ff90 	bl	8007494 <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20080000 	.word	0x20080000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	200006b0 	.word	0x200006b0
 80025a8:	20000778 	.word	0x20000778

080025ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <SystemInit+0x28>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <SystemInit+0x28>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <SystemInit+0x28>)
 80025c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025c6:	609a      	str	r2, [r3, #8]
#endif
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025de:	e003      	b.n	80025e8 <LoopCopyDataInit>

080025e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025e6:	3104      	adds	r1, #4

080025e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025e8:	480b      	ldr	r0, [pc, #44]	; (8002618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025f0:	d3f6      	bcc.n	80025e0 <CopyDataInit>
  ldr  r2, =_sbss
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025f4:	e002      	b.n	80025fc <LoopFillZerobss>

080025f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025f8:	f842 3b04 	str.w	r3, [r2], #4

080025fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002600:	d3f9      	bcc.n	80025f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002602:	f7ff ffd3 	bl	80025ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002606:	f005 f841 	bl	800768c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260a:	f7fe f8af 	bl	800076c <main>
  bx  lr    
 800260e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002610:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002614:	08008668 	.word	0x08008668
  ldr  r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800261c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002620:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002624:	20000774 	.word	0x20000774

08002628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC_IRQHandler>

0800262a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262e:	2003      	movs	r0, #3
 8002630:	f000 fc04 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002634:	2000      	movs	r0, #0
 8002636:	f000 f805 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800263a:	f7ff fa2f 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fc2d 	bl	8002ec2 <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 fbe7 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000004 	.word	0x20000004
 800269c:	2000000c 	.word	0x2000000c
 80026a0:	20000008 	.word	0x20000008

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	200006b4 	.word	0x200006b4

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200006b4 	.word	0x200006b4

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000000c 	.word	0x2000000c

0800272c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e031      	b.n	80027a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff f9ca 	bl	8001ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_ADC_Init+0x84>)
 8002770:	4013      	ands	r3, r2
 8002772:	f043 0202 	orr.w	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f970 	bl	8002a60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	e001      	b.n	800279c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	ffffeefd 	.word	0xffffeefd

080027b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e136      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x28a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d93a      	bls.n	8002856 <HAL_ADC_ConfigChannel+0xa2>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027e8:	d035      	beq.n	8002856 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68d9      	ldr	r1, [r3, #12]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	3b1e      	subs	r3, #30
 8002800:	2207      	movs	r2, #7
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	400a      	ands	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a8d      	ldr	r2, [pc, #564]	; (8002a4c <HAL_ADC_ConfigChannel+0x298>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10a      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68d9      	ldr	r1, [r3, #12]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	061a      	lsls	r2, r3, #24
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282e:	e035      	b.n	800289c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	4603      	mov	r3, r0
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4403      	add	r3, r0
 8002848:	3b1e      	subs	r3, #30
 800284a:	409a      	lsls	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002854:	e022      	b.n	800289c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	2207      	movs	r2, #7
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43da      	mvns	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	400a      	ands	r2, r1
 8002878:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6919      	ldr	r1, [r3, #16]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	4603      	mov	r3, r0
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4403      	add	r3, r0
 8002892:	409a      	lsls	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d824      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b05      	subs	r3, #5
 80028b6:	221f      	movs	r2, #31
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43da      	mvns	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	400a      	ands	r2, r1
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b05      	subs	r3, #5
 80028e0:	fa00 f203 	lsl.w	r2, r0, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34
 80028ec:	e04c      	b.n	8002988 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d824      	bhi.n	8002940 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	3b23      	subs	r3, #35	; 0x23
 8002908:	221f      	movs	r2, #31
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	400a      	ands	r2, r1
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	4618      	mov	r0, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b23      	subs	r3, #35	; 0x23
 8002932:	fa00 f203 	lsl.w	r2, r0, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
 800293e:	e023      	b.n	8002988 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b41      	subs	r3, #65	; 0x41
 8002952:	221f      	movs	r2, #31
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43da      	mvns	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	400a      	ands	r2, r1
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	3b41      	subs	r3, #65	; 0x41
 800297c:	fa00 f203 	lsl.w	r2, r0, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_ADC_ConfigChannel+0x29c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10a      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1f4>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800299c:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <HAL_ADC_ConfigChannel+0x29c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10f      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d10b      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1e      	ldr	r2, [pc, #120]	; (8002a50 <HAL_ADC_ConfigChannel+0x29c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d12b      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x280>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_ADC_ConfigChannel+0x298>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d003      	beq.n	80029ee <HAL_ADC_ConfigChannel+0x23a>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b11      	cmp	r3, #17
 80029ec:	d122      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a04:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <HAL_ADC_ConfigChannel+0x298>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d111      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9a      	lsrs	r2, r3, #18
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a26:	e002      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f9      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	10000012 	.word	0x10000012
 8002a50:	40012000 	.word	0x40012000
 8002a54:	40012300 	.word	0x40012300
 8002a58:	20000004 	.word	0x20000004
 8002a5c:	431bde83 	.word	0x431bde83

08002a60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a68:	4b78      	ldr	r3, [pc, #480]	; (8002c4c <ADC_Init+0x1ec>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a77      	ldr	r2, [pc, #476]	; (8002c4c <ADC_Init+0x1ec>)
 8002a6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a72:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a74:	4b75      	ldr	r3, [pc, #468]	; (8002c4c <ADC_Init+0x1ec>)
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4973      	ldr	r1, [pc, #460]	; (8002c4c <ADC_Init+0x1ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	021a      	lsls	r2, r3, #8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <ADC_Init+0x1f0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d022      	beq.n	8002b3a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	e00f      	b.n	8002b5a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0202 	bic.w	r2, r2, #2
 8002b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	005a      	lsls	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ba6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	035a      	lsls	r2, r3, #13
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	e007      	b.n	8002bd0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	051a      	lsls	r2, r3, #20
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c12:	025a      	lsls	r2, r3, #9
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	029a      	lsls	r2, r3, #10
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40012300 	.word	0x40012300
 8002c50:	0f000001 	.word	0x0f000001

08002c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <__NVIC_SetPriorityGrouping+0x40>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <__NVIC_SetPriorityGrouping+0x40>)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60d3      	str	r3, [r2, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00
 8002c98:	05fa0000 	.word	0x05fa0000

08002c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 0307 	and.w	r3, r3, #7
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db0b      	blt.n	8002ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <__NVIC_EnableIRQ+0x38>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2001      	movs	r0, #1
 8002cda:	fa00 f202 	lsl.w	r2, r0, r2
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db12      	blt.n	8002d2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	490a      	ldr	r1, [pc, #40]	; (8002d38 <__NVIC_DisableIRQ+0x44>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	3320      	adds	r3, #32
 8002d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d20:	f3bf 8f4f 	dsb	sy
}
 8002d24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d26:	f3bf 8f6f 	isb	sy
}
 8002d2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff05 	bl	8002c54 <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff1a 	bl	8002c9c <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff8e 	bl	8002d90 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5d 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff0d 	bl	8002cb8 <__NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff1d 	bl	8002cf4 <__NVIC_DisableIRQ>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ff94 	bl	8002df8 <SysTick_Config>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e175      	b.n	80031e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002efc:	2201      	movs	r2, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	f040 8164 	bne.w	80031e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d005      	beq.n	8002f32 <HAL_GPIO_Init+0x56>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d130      	bne.n	8002f94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 0201 	and.w	r2, r3, #1
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d017      	beq.n	8002fd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d123      	bne.n	8003024 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	08da      	lsrs	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3208      	adds	r2, #8
 8002fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	08da      	lsrs	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3208      	adds	r2, #8
 800301e:	69b9      	ldr	r1, [r7, #24]
 8003020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0203 	and.w	r2, r3, #3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80be 	beq.w	80031e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	4b66      	ldr	r3, [pc, #408]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a65      	ldr	r2, [pc, #404]	; (8003200 <HAL_GPIO_Init+0x324>)
 800306c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b63      	ldr	r3, [pc, #396]	; (8003200 <HAL_GPIO_Init+0x324>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800307e:	4a61      	ldr	r2, [pc, #388]	; (8003204 <HAL_GPIO_Init+0x328>)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_GPIO_Init+0x32c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d037      	beq.n	800311a <HAL_GPIO_Init+0x23e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a57      	ldr	r2, [pc, #348]	; (800320c <HAL_GPIO_Init+0x330>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d031      	beq.n	8003116 <HAL_GPIO_Init+0x23a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a56      	ldr	r2, [pc, #344]	; (8003210 <HAL_GPIO_Init+0x334>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02b      	beq.n	8003112 <HAL_GPIO_Init+0x236>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a55      	ldr	r2, [pc, #340]	; (8003214 <HAL_GPIO_Init+0x338>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d025      	beq.n	800310e <HAL_GPIO_Init+0x232>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a54      	ldr	r2, [pc, #336]	; (8003218 <HAL_GPIO_Init+0x33c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01f      	beq.n	800310a <HAL_GPIO_Init+0x22e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a53      	ldr	r2, [pc, #332]	; (800321c <HAL_GPIO_Init+0x340>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d019      	beq.n	8003106 <HAL_GPIO_Init+0x22a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a52      	ldr	r2, [pc, #328]	; (8003220 <HAL_GPIO_Init+0x344>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d013      	beq.n	8003102 <HAL_GPIO_Init+0x226>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a51      	ldr	r2, [pc, #324]	; (8003224 <HAL_GPIO_Init+0x348>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00d      	beq.n	80030fe <HAL_GPIO_Init+0x222>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a50      	ldr	r2, [pc, #320]	; (8003228 <HAL_GPIO_Init+0x34c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <HAL_GPIO_Init+0x21e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	; (800322c <HAL_GPIO_Init+0x350>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d101      	bne.n	80030f6 <HAL_GPIO_Init+0x21a>
 80030f2:	2309      	movs	r3, #9
 80030f4:	e012      	b.n	800311c <HAL_GPIO_Init+0x240>
 80030f6:	230a      	movs	r3, #10
 80030f8:	e010      	b.n	800311c <HAL_GPIO_Init+0x240>
 80030fa:	2308      	movs	r3, #8
 80030fc:	e00e      	b.n	800311c <HAL_GPIO_Init+0x240>
 80030fe:	2307      	movs	r3, #7
 8003100:	e00c      	b.n	800311c <HAL_GPIO_Init+0x240>
 8003102:	2306      	movs	r3, #6
 8003104:	e00a      	b.n	800311c <HAL_GPIO_Init+0x240>
 8003106:	2305      	movs	r3, #5
 8003108:	e008      	b.n	800311c <HAL_GPIO_Init+0x240>
 800310a:	2304      	movs	r3, #4
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x240>
 800310e:	2303      	movs	r3, #3
 8003110:	e004      	b.n	800311c <HAL_GPIO_Init+0x240>
 8003112:	2302      	movs	r3, #2
 8003114:	e002      	b.n	800311c <HAL_GPIO_Init+0x240>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x240>
 800311a:	2300      	movs	r3, #0
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f002 0203 	and.w	r2, r2, #3
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	4093      	lsls	r3, r2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800312c:	4935      	ldr	r1, [pc, #212]	; (8003204 <HAL_GPIO_Init+0x328>)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_GPIO_Init+0x354>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315e:	4a34      	ldr	r2, [pc, #208]	; (8003230 <HAL_GPIO_Init+0x354>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003164:	4b32      	ldr	r3, [pc, #200]	; (8003230 <HAL_GPIO_Init+0x354>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003188:	4a29      	ldr	r2, [pc, #164]	; (8003230 <HAL_GPIO_Init+0x354>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_GPIO_Init+0x354>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b2:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <HAL_GPIO_Init+0x354>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_GPIO_Init+0x354>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031dc:	4a14      	ldr	r2, [pc, #80]	; (8003230 <HAL_GPIO_Init+0x354>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3301      	adds	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	f67f ae86 	bls.w	8002efc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40013800 	.word	0x40013800
 8003208:	40020000 	.word	0x40020000
 800320c:	40020400 	.word	0x40020400
 8003210:	40020800 	.word	0x40020800
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40021000 	.word	0x40021000
 800321c:	40021400 	.word	0x40021400
 8003220:	40021800 	.word	0x40021800
 8003224:	40021c00 	.word	0x40021c00
 8003228:	40022000 	.word	0x40022000
 800322c:	40022400 	.word	0x40022400
 8003230:	40013c00 	.word	0x40013c00

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003250:	e003      	b.n	800325a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d006      	beq.n	800328c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800327e:	4a05      	ldr	r2, [pc, #20]	; (8003294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f9d0 	bl	800062c <HAL_GPIO_EXTI_Callback>
  }
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40013c00 	.word	0x40013c00

08003298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e07f      	b.n	80033aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fe fc50 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	; 0x24
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e006      	b.n	8003320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800331e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d104      	bne.n	8003332 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003330:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_I2C_Init+0x11c>)
 800333e:	430b      	orrs	r3, r1
 8003340:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003350:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	02008000 	.word	0x02008000

080033b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b20      	cmp	r3, #32
 80033dc:	f040 80f9 	bne.w	80035d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_I2C_Mem_Write+0x34>
 80033e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0ed      	b.n	80035d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_I2C_Mem_Write+0x4e>
 8003402:	2302      	movs	r3, #2
 8003404:	e0e6      	b.n	80035d4 <HAL_I2C_Mem_Write+0x21c>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800340e:	f7ff f95d 	bl	80026cc <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2319      	movs	r3, #25
 800341a:	2201      	movs	r2, #1
 800341c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fac3 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0d1      	b.n	80035d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2221      	movs	r2, #33	; 0x21
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2240      	movs	r2, #64	; 0x40
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003450:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003458:	88f8      	ldrh	r0, [r7, #6]
 800345a:	893a      	ldrh	r2, [r7, #8]
 800345c:	8979      	ldrh	r1, [r7, #10]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	9301      	str	r3, [sp, #4]
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	4603      	mov	r3, r0
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f9d3 	bl	8003814 <I2C_RequestMemoryWrite>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0a9      	b.n	80035d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	2bff      	cmp	r3, #255	; 0xff
 8003488:	d90e      	bls.n	80034a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	22ff      	movs	r2, #255	; 0xff
 800348e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	b2da      	uxtb	r2, r3
 8003496:	8979      	ldrh	r1, [r7, #10]
 8003498:	2300      	movs	r3, #0
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fc1f 	bl	8003ce4 <I2C_TransferConfig>
 80034a6:	e00f      	b.n	80034c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	8979      	ldrh	r1, [r7, #10]
 80034ba:	2300      	movs	r3, #0
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fc0e 	bl	8003ce4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 faad 	bl	8003a2c <I2C_WaitOnTXISFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e07b      	b.n	80035d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d034      	beq.n	8003580 <HAL_I2C_Mem_Write+0x1c8>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d130      	bne.n	8003580 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	2200      	movs	r2, #0
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fa3f 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e04d      	b.n	80035d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2bff      	cmp	r3, #255	; 0xff
 8003540:	d90e      	bls.n	8003560 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	22ff      	movs	r2, #255	; 0xff
 8003546:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	b2da      	uxtb	r2, r3
 800354e:	8979      	ldrh	r1, [r7, #10]
 8003550:	2300      	movs	r3, #0
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fbc3 	bl	8003ce4 <I2C_TransferConfig>
 800355e:	e00f      	b.n	8003580 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356e:	b2da      	uxtb	r2, r3
 8003570:	8979      	ldrh	r1, [r7, #10]
 8003572:	2300      	movs	r3, #0
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fbb2 	bl	8003ce4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d19e      	bne.n	80034c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fa8c 	bl	8003aac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e01a      	b.n	80035d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2220      	movs	r2, #32
 80035a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_I2C_Mem_Write+0x224>)
 80035b2:	400b      	ands	r3, r1
 80035b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	fe00e800 	.word	0xfe00e800

080035e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]
 80035f2:	460b      	mov	r3, r1
 80035f4:	813b      	strh	r3, [r7, #8]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	f040 80fd 	bne.w	8003802 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_I2C_Mem_Read+0x34>
 800360e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0f1      	b.n	8003804 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_I2C_Mem_Read+0x4e>
 800362a:	2302      	movs	r3, #2
 800362c:	e0ea      	b.n	8003804 <HAL_I2C_Mem_Read+0x224>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003636:	f7ff f849 	bl	80026cc <HAL_GetTick>
 800363a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2319      	movs	r3, #25
 8003642:	2201      	movs	r2, #1
 8003644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f9af 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0d5      	b.n	8003804 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2222      	movs	r2, #34	; 0x22
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a3a      	ldr	r2, [r7, #32]
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003680:	88f8      	ldrh	r0, [r7, #6]
 8003682:	893a      	ldrh	r2, [r7, #8]
 8003684:	8979      	ldrh	r1, [r7, #10]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4603      	mov	r3, r0
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f913 	bl	80038bc <I2C_RequestMemoryRead>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0ad      	b.n	8003804 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2bff      	cmp	r3, #255	; 0xff
 80036b0:	d90e      	bls.n	80036d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	8979      	ldrh	r1, [r7, #10]
 80036c0:	4b52      	ldr	r3, [pc, #328]	; (800380c <HAL_I2C_Mem_Read+0x22c>)
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fb0b 	bl	8003ce4 <I2C_TransferConfig>
 80036ce:	e00f      	b.n	80036f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	8979      	ldrh	r1, [r7, #10]
 80036e2:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_I2C_Mem_Read+0x22c>)
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fafa 	bl	8003ce4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	2200      	movs	r2, #0
 80036f8:	2104      	movs	r1, #4
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f956 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e07c      	b.n	8003804 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d034      	beq.n	80037b0 <HAL_I2C_Mem_Read+0x1d0>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374a:	2b00      	cmp	r3, #0
 800374c:	d130      	bne.n	80037b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	2200      	movs	r2, #0
 8003756:	2180      	movs	r1, #128	; 0x80
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f927 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e04d      	b.n	8003804 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2bff      	cmp	r3, #255	; 0xff
 8003770:	d90e      	bls.n	8003790 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	b2da      	uxtb	r2, r3
 800377e:	8979      	ldrh	r1, [r7, #10]
 8003780:	2300      	movs	r3, #0
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 faab 	bl	8003ce4 <I2C_TransferConfig>
 800378e:	e00f      	b.n	80037b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	8979      	ldrh	r1, [r7, #10]
 80037a2:	2300      	movs	r3, #0
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa9a 	bl	8003ce4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d19a      	bne.n	80036f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f974 	bl	8003aac <I2C_WaitOnSTOPFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e01a      	b.n	8003804 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2220      	movs	r2, #32
 80037d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_I2C_Mem_Read+0x230>)
 80037e2:	400b      	ands	r3, r1
 80037e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e000      	b.n	8003804 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003802:	2302      	movs	r3, #2
  }
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	80002400 	.word	0x80002400
 8003810:	fe00e800 	.word	0xfe00e800

08003814 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	4608      	mov	r0, r1
 800381e:	4611      	mov	r1, r2
 8003820:	461a      	mov	r2, r3
 8003822:	4603      	mov	r3, r0
 8003824:	817b      	strh	r3, [r7, #10]
 8003826:	460b      	mov	r3, r1
 8003828:	813b      	strh	r3, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	8979      	ldrh	r1, [r7, #10]
 8003834:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <I2C_RequestMemoryWrite+0xa4>)
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fa51 	bl	8003ce4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f8f0 	bl	8003a2c <I2C_WaitOnTXISFlagUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e02c      	b.n	80038b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800385c:	893b      	ldrh	r3, [r7, #8]
 800385e:	b2da      	uxtb	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	629a      	str	r2, [r3, #40]	; 0x28
 8003866:	e015      	b.n	8003894 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003868:	893b      	ldrh	r3, [r7, #8]
 800386a:	0a1b      	lsrs	r3, r3, #8
 800386c:	b29b      	uxth	r3, r3
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f8d6 	bl	8003a2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e012      	b.n	80038b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800388a:	893b      	ldrh	r3, [r7, #8]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2200      	movs	r2, #0
 800389c:	2180      	movs	r1, #128	; 0x80
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f884 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	80002000 	.word	0x80002000

080038bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	8979      	ldrh	r1, [r7, #10]
 80038dc:	4b20      	ldr	r3, [pc, #128]	; (8003960 <I2C_RequestMemoryRead+0xa4>)
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f9fe 	bl	8003ce4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	69b9      	ldr	r1, [r7, #24]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f89d 	bl	8003a2c <I2C_WaitOnTXISFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e02c      	b.n	8003956 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003902:	893b      	ldrh	r3, [r7, #8]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
 800390c:	e015      	b.n	800393a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800390e:	893b      	ldrh	r3, [r7, #8]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	b29b      	uxth	r3, r3
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	69b9      	ldr	r1, [r7, #24]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f883 	bl	8003a2c <I2C_WaitOnTXISFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e012      	b.n	8003956 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003930:	893b      	ldrh	r3, [r7, #8]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2200      	movs	r2, #0
 8003942:	2140      	movs	r1, #64	; 0x40
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f831 	bl	80039ac <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	80002000 	.word	0x80002000

08003964 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b02      	cmp	r3, #2
 8003978:	d103      	bne.n	8003982 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d007      	beq.n	80039a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	619a      	str	r2, [r3, #24]
  }
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039bc:	e022      	b.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d01e      	beq.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fe fe81 	bl	80026cc <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d113      	bne.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e00f      	b.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d0cd      	beq.n	80039be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a38:	e02c      	b.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f870 	bl	8003b24 <I2C_IsErrorOccurred>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e02a      	b.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d01e      	beq.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a56:	f7fe fe39 	bl	80026cc <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d302      	bcc.n	8003a6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d113      	bne.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e007      	b.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d1cb      	bne.n	8003a3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab8:	e028      	b.n	8003b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f830 	bl	8003b24 <I2C_IsErrorOccurred>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e026      	b.n	8003b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fe fdfd 	bl	80026cc <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d113      	bne.n	8003b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e007      	b.n	8003b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d1cf      	bne.n	8003aba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d068      	beq.n	8003c22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2210      	movs	r2, #16
 8003b56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b58:	e049      	b.n	8003bee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d045      	beq.n	8003bee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fe fdb3 	bl	80026cc <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <I2C_IsErrorOccurred+0x54>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d13a      	bne.n	8003bee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9a:	d121      	bne.n	8003be0 <I2C_IsErrorOccurred+0xbc>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba2:	d01d      	beq.n	8003be0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ba4:	7cfb      	ldrb	r3, [r7, #19]
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d01a      	beq.n	8003be0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bba:	f7fe fd87 	bl	80026cc <HAL_GetTick>
 8003bbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc0:	e00e      	b.n	8003be0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bc2:	f7fe fd83 	bl	80026cc <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b19      	cmp	r3, #25
 8003bce:	d907      	bls.n	8003be0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f043 0320 	orr.w	r3, r3, #32
 8003bd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003bde:	e006      	b.n	8003bee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d1e9      	bne.n	8003bc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d003      	beq.n	8003c04 <I2C_IsErrorOccurred+0xe0>
 8003bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0aa      	beq.n	8003b5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2220      	movs	r2, #32
 8003c12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f043 0308 	orr.w	r3, r3, #8
 8003c5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	f043 0302 	orr.w	r3, r3, #2
 8003c7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01c      	beq.n	8003cd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff fe63 	bl	8003964 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <I2C_IsErrorOccurred+0x1bc>)
 8003caa:	400b      	ands	r3, r1
 8003cac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3728      	adds	r7, #40	; 0x28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	fe00e800 	.word	0xfe00e800

08003ce4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	817b      	strh	r3, [r7, #10]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cf6:	897b      	ldrh	r3, [r7, #10]
 8003cf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cfc:	7a7b      	ldrb	r3, [r7, #9]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	0d5b      	lsrs	r3, r3, #21
 8003d1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <I2C_TransferConfig+0x60>)
 8003d24:	430b      	orrs	r3, r1
 8003d26:	43db      	mvns	r3, r3
 8003d28:	ea02 0103 	and.w	r1, r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	03ff63ff 	.word	0x03ff63ff

08003d48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d138      	bne.n	8003dd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e032      	b.n	8003dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d139      	bne.n	8003e68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e033      	b.n	8003e6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2224      	movs	r2, #36	; 0x24
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e000      	b.n	8003e6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e68:	2302      	movs	r3, #2
  }
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40007000 	.word	0x40007000

08003e98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6413      	str	r3, [r2, #64]	; 0x40
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eba:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec6:	f7fe fc01 	bl	80026cc <HAL_GetTick>
 8003eca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ecc:	e009      	b.n	8003ee2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ece:	f7fe fbfd 	bl	80026cc <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003edc:	d901      	bls.n	8003ee2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e022      	b.n	8003f28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ee2:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eee:	d1ee      	bne.n	8003ece <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003efc:	f7fe fbe6 	bl	80026cc <HAL_GetTick>
 8003f00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f02:	e009      	b.n	8003f18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f04:	f7fe fbe2 	bl	80026cc <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f12:	d901      	bls.n	8003f18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e007      	b.n	8003f28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f24:	d1ee      	bne.n	8003f04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40007000 	.word	0x40007000

08003f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f40:	2300      	movs	r3, #0
 8003f42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e29b      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8087 	beq.w	800406a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f5c:	4b96      	ldr	r3, [pc, #600]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d00c      	beq.n	8003f82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f68:	4b93      	ldr	r3, [pc, #588]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d112      	bne.n	8003f9a <HAL_RCC_OscConfig+0x62>
 8003f74:	4b90      	ldr	r3, [pc, #576]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f80:	d10b      	bne.n	8003f9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f82:	4b8d      	ldr	r3, [pc, #564]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d06c      	beq.n	8004068 <HAL_RCC_OscConfig+0x130>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d168      	bne.n	8004068 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e275      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x7a>
 8003fa4:	4b84      	ldr	r3, [pc, #528]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a83      	ldr	r2, [pc, #524]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	e02e      	b.n	8004010 <HAL_RCC_OscConfig+0xd8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x9c>
 8003fba:	4b7f      	ldr	r3, [pc, #508]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7e      	ldr	r2, [pc, #504]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4b7c      	ldr	r3, [pc, #496]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7b      	ldr	r2, [pc, #492]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e01d      	b.n	8004010 <HAL_RCC_OscConfig+0xd8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0xc0>
 8003fde:	4b76      	ldr	r3, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a72      	ldr	r2, [pc, #456]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0xd8>
 8003ff8:	4b6f      	ldr	r3, [pc, #444]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a6e      	ldr	r2, [pc, #440]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6b      	ldr	r2, [pc, #428]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 800400a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fe fb58 	bl	80026cc <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004020:	f7fe fb54 	bl	80026cc <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e229      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0xe8>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe fb44 	bl	80026cc <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004048:	f7fe fb40 	bl	80026cc <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e215      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	4b57      	ldr	r3, [pc, #348]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x110>
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d069      	beq.n	800414a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004076:	4b50      	ldr	r3, [pc, #320]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b4d      	ldr	r3, [pc, #308]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b08      	cmp	r3, #8
 800408c:	d11c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x190>
 800408e:	4b4a      	ldr	r3, [pc, #296]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x17a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e1e9      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	493d      	ldr	r1, [pc, #244]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	e040      	b.n	800414a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d023      	beq.n	8004118 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a38      	ldr	r2, [pc, #224]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040dc:	f7fe faf6 	bl	80026cc <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e4:	f7fe faf2 	bl	80026cc <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e1c7      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004102:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4929      	ldr	r1, [pc, #164]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
 8004116:	e018      	b.n	800414a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004118:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fe fad2 	bl	80026cc <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800412c:	f7fe face 	bl	80026cc <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e1a3      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d038      	beq.n	80041c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d019      	beq.n	8004192 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415e:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416a:	f7fe faaf 	bl	80026cc <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004172:	f7fe faab 	bl	80026cc <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e180      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x23a>
 8004190:	e01a      	b.n	80041c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004196:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <HAL_RCC_OscConfig+0x280>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419e:	f7fe fa95 	bl	80026cc <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a4:	e00a      	b.n	80041bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a6:	f7fe fa91 	bl	80026cc <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d903      	bls.n	80041bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e166      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
 80041b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041bc:	4b92      	ldr	r3, [pc, #584]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80041be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ee      	bne.n	80041a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80a4 	beq.w	800431e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d6:	4b8c      	ldr	r3, [pc, #560]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a88      	ldr	r2, [pc, #544]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b86      	ldr	r3, [pc, #536]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fe:	4b83      	ldr	r3, [pc, #524]	; (800440c <HAL_RCC_OscConfig+0x4d4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d118      	bne.n	800423c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800420a:	4b80      	ldr	r3, [pc, #512]	; (800440c <HAL_RCC_OscConfig+0x4d4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7f      	ldr	r2, [pc, #508]	; (800440c <HAL_RCC_OscConfig+0x4d4>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004216:	f7fe fa59 	bl	80026cc <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fe fa55 	bl	80026cc <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	; 0x64
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e12a      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004230:	4b76      	ldr	r3, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x4d4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x31a>
 8004244:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a6f      	ldr	r2, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	e02d      	b.n	80042ae <HAL_RCC_OscConfig+0x376>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x33c>
 800425a:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a6a      	ldr	r2, [pc, #424]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
 8004266:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a67      	ldr	r2, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800426c:	f023 0304 	bic.w	r3, r3, #4
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	e01c      	b.n	80042ae <HAL_RCC_OscConfig+0x376>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b05      	cmp	r3, #5
 800427a:	d10c      	bne.n	8004296 <HAL_RCC_OscConfig+0x35e>
 800427c:	4b62      	ldr	r3, [pc, #392]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a61      	ldr	r2, [pc, #388]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
 8004288:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a5e      	ldr	r2, [pc, #376]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	e00b      	b.n	80042ae <HAL_RCC_OscConfig+0x376>
 8004296:	4b5c      	ldr	r3, [pc, #368]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a5b      	ldr	r2, [pc, #364]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
 80042a2:	4b59      	ldr	r3, [pc, #356]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a58      	ldr	r2, [pc, #352]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d015      	beq.n	80042e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fe fa09 	bl	80026cc <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe fa05 	bl	80026cc <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0d8      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d4:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0ee      	beq.n	80042be <HAL_RCC_OscConfig+0x386>
 80042e0:	e014      	b.n	800430c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fe f9f3 	bl	80026cc <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fe f9ef 	bl	80026cc <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e0c2      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004300:	4b41      	ldr	r3, [pc, #260]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ee      	bne.n	80042ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4a3c      	ldr	r2, [pc, #240]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80ae 	beq.w	8004484 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004328:	4b37      	ldr	r3, [pc, #220]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d06d      	beq.n	8004410 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b02      	cmp	r3, #2
 800433a:	d14b      	bne.n	80043d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433c:	4b32      	ldr	r3, [pc, #200]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a31      	ldr	r2, [pc, #196]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fe f9c0 	bl	80026cc <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe f9bc 	bl	80026cc <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e091      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004362:	4b29      	ldr	r3, [pc, #164]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69da      	ldr	r2, [r3, #28]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	3b01      	subs	r3, #1
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	071b      	lsls	r3, r3, #28
 800439a:	491b      	ldr	r1, [pc, #108]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a0:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80043a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fe f98e 	bl	80026cc <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe f98a 	bl	80026cc <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e05f      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c6:	4b10      	ldr	r3, [pc, #64]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x47c>
 80043d2:	e057      	b.n	8004484 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80043da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fe f974 	bl	80026cc <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fe f970 	bl	80026cc <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e045      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_RCC_OscConfig+0x4d0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4b0>
 8004406:	e03d      	b.n	8004484 <HAL_RCC_OscConfig+0x54c>
 8004408:	40023800 	.word	0x40023800
 800440c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004410:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <HAL_RCC_OscConfig+0x558>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d030      	beq.n	8004480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d129      	bne.n	8004480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d122      	bne.n	8004480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004446:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004448:	4293      	cmp	r3, r2
 800444a:	d119      	bne.n	8004480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	3b01      	subs	r3, #1
 800445a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d10f      	bne.n	8004480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d107      	bne.n	8004480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800

08004494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0d0      	b.n	800464e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044ac:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 030f 	and.w	r3, r3, #15
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d910      	bls.n	80044dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ba:	4b67      	ldr	r3, [pc, #412]	; (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 020f 	bic.w	r2, r3, #15
 80044c2:	4965      	ldr	r1, [pc, #404]	; (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b63      	ldr	r3, [pc, #396]	; (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0b8      	b.n	800464e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f4:	4b59      	ldr	r3, [pc, #356]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4a58      	ldr	r2, [pc, #352]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 80044fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800450c:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a52      	ldr	r2, [pc, #328]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004516:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004518:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	494d      	ldr	r1, [pc, #308]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d040      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d115      	bne.n	8004576 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e07f      	b.n	800464e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004556:	4b41      	ldr	r3, [pc, #260]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e073      	b.n	800464e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004566:	4b3d      	ldr	r3, [pc, #244]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e06b      	b.n	800464e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004576:	4b39      	ldr	r3, [pc, #228]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 0203 	bic.w	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4936      	ldr	r1, [pc, #216]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	4313      	orrs	r3, r2
 8004586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004588:	f7fe f8a0 	bl	80026cc <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	e00a      	b.n	80045a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004590:	f7fe f89c 	bl	80026cc <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e053      	b.n	800464e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	4b2d      	ldr	r3, [pc, #180]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 020c 	and.w	r2, r3, #12
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1eb      	bne.n	8004590 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b8:	4b27      	ldr	r3, [pc, #156]	; (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d210      	bcs.n	80045e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c6:	4b24      	ldr	r3, [pc, #144]	; (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 020f 	bic.w	r2, r3, #15
 80045ce:	4922      	ldr	r1, [pc, #136]	; (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d6:	4b20      	ldr	r3, [pc, #128]	; (8004658 <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e032      	b.n	800464e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f4:	4b19      	ldr	r3, [pc, #100]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4916      	ldr	r1, [pc, #88]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	490e      	ldr	r1, [pc, #56]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004626:	f000 f821 	bl	800466c <HAL_RCC_GetSysClockFreq>
 800462a:	4602      	mov	r2, r0
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_ClockConfig+0x1c8>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	490a      	ldr	r1, [pc, #40]	; (8004660 <HAL_RCC_ClockConfig+0x1cc>)
 8004638:	5ccb      	ldrb	r3, [r1, r3]
 800463a:	fa22 f303 	lsr.w	r3, r2, r3
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <HAL_RCC_ClockConfig+0x1d0>)
 8004640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_RCC_ClockConfig+0x1d4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fd fffc 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023c00 	.word	0x40023c00
 800465c:	40023800 	.word	0x40023800
 8004660:	0800858c 	.word	0x0800858c
 8004664:	20000004 	.word	0x20000004
 8004668:	20000008 	.word	0x20000008

0800466c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800466c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004670:	b094      	sub	sp, #80	; 0x50
 8004672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	647b      	str	r3, [r7, #68]	; 0x44
 8004678:	2300      	movs	r3, #0
 800467a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800467c:	2300      	movs	r3, #0
 800467e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004684:	4b79      	ldr	r3, [pc, #484]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 030c 	and.w	r3, r3, #12
 800468c:	2b08      	cmp	r3, #8
 800468e:	d00d      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x40>
 8004690:	2b08      	cmp	r3, #8
 8004692:	f200 80e1 	bhi.w	8004858 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x34>
 800469a:	2b04      	cmp	r3, #4
 800469c:	d003      	beq.n	80046a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800469e:	e0db      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a0:	4b73      	ldr	r3, [pc, #460]	; (8004870 <HAL_RCC_GetSysClockFreq+0x204>)
 80046a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046a4:	e0db      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a6:	4b73      	ldr	r3, [pc, #460]	; (8004874 <HAL_RCC_GetSysClockFreq+0x208>)
 80046a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046aa:	e0d8      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ac:	4b6f      	ldr	r3, [pc, #444]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046b6:	4b6d      	ldr	r3, [pc, #436]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d063      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c2:	4b6a      	ldr	r3, [pc, #424]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	2200      	movs	r2, #0
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80046cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d4:	633b      	str	r3, [r7, #48]	; 0x30
 80046d6:	2300      	movs	r3, #0
 80046d8:	637b      	str	r3, [r7, #52]	; 0x34
 80046da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046de:	4622      	mov	r2, r4
 80046e0:	462b      	mov	r3, r5
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f04f 0100 	mov.w	r1, #0
 80046ea:	0159      	lsls	r1, r3, #5
 80046ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f0:	0150      	lsls	r0, r2, #5
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4621      	mov	r1, r4
 80046f8:	1a51      	subs	r1, r2, r1
 80046fa:	6139      	str	r1, [r7, #16]
 80046fc:	4629      	mov	r1, r5
 80046fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004710:	4659      	mov	r1, fp
 8004712:	018b      	lsls	r3, r1, #6
 8004714:	4651      	mov	r1, sl
 8004716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800471a:	4651      	mov	r1, sl
 800471c:	018a      	lsls	r2, r1, #6
 800471e:	4651      	mov	r1, sl
 8004720:	ebb2 0801 	subs.w	r8, r2, r1
 8004724:	4659      	mov	r1, fp
 8004726:	eb63 0901 	sbc.w	r9, r3, r1
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800473a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473e:	4690      	mov	r8, r2
 8004740:	4699      	mov	r9, r3
 8004742:	4623      	mov	r3, r4
 8004744:	eb18 0303 	adds.w	r3, r8, r3
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	462b      	mov	r3, r5
 800474c:	eb49 0303 	adc.w	r3, r9, r3
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800475e:	4629      	mov	r1, r5
 8004760:	024b      	lsls	r3, r1, #9
 8004762:	4621      	mov	r1, r4
 8004764:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004768:	4621      	mov	r1, r4
 800476a:	024a      	lsls	r2, r1, #9
 800476c:	4610      	mov	r0, r2
 800476e:	4619      	mov	r1, r3
 8004770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004772:	2200      	movs	r2, #0
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
 8004776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004778:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800477c:	f7fb fdb8 	bl	80002f0 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4613      	mov	r3, r2
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004788:	e058      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478a:	4b38      	ldr	r3, [pc, #224]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	099b      	lsrs	r3, r3, #6
 8004790:	2200      	movs	r2, #0
 8004792:	4618      	mov	r0, r3
 8004794:	4611      	mov	r1, r2
 8004796:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	2300      	movs	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
 80047a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	f04f 0000 	mov.w	r0, #0
 80047ac:	f04f 0100 	mov.w	r1, #0
 80047b0:	0159      	lsls	r1, r3, #5
 80047b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b6:	0150      	lsls	r0, r2, #5
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4641      	mov	r1, r8
 80047be:	ebb2 0a01 	subs.w	sl, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047dc:	ebb2 040a 	subs.w	r4, r2, sl
 80047e0:	eb63 050b 	sbc.w	r5, r3, fp
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	00eb      	lsls	r3, r5, #3
 80047ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f2:	00e2      	lsls	r2, r4, #3
 80047f4:	4614      	mov	r4, r2
 80047f6:	461d      	mov	r5, r3
 80047f8:	4643      	mov	r3, r8
 80047fa:	18e3      	adds	r3, r4, r3
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	464b      	mov	r3, r9
 8004800:	eb45 0303 	adc.w	r3, r5, r3
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004812:	4629      	mov	r1, r5
 8004814:	028b      	lsls	r3, r1, #10
 8004816:	4621      	mov	r1, r4
 8004818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800481c:	4621      	mov	r1, r4
 800481e:	028a      	lsls	r2, r1, #10
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004826:	2200      	movs	r2, #0
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	61fa      	str	r2, [r7, #28]
 800482c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004830:	f7fb fd5e 	bl	80002f0 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4613      	mov	r3, r2
 800483a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_GetSysClockFreq+0x200>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	3301      	adds	r3, #1
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800484c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800484e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004856:	e002      	b.n	800485e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_RCC_GetSysClockFreq+0x204>)
 800485a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800485c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800485e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004860:	4618      	mov	r0, r3
 8004862:	3750      	adds	r7, #80	; 0x50
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	00f42400 	.word	0x00f42400
 8004874:	007a1200 	.word	0x007a1200

08004878 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <HAL_RCC_GetHCLKFreq+0x14>)
 800487e:	681b      	ldr	r3, [r3, #0]
}
 8004880:	4618      	mov	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000004 	.word	0x20000004

08004890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004894:	f7ff fff0 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 8004898:	4602      	mov	r2, r0
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	4903      	ldr	r1, [pc, #12]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40023800 	.word	0x40023800
 80048b4:	0800859c 	.word	0x0800859c

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048bc:	f7ff ffdc 	bl	8004878 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0b5b      	lsrs	r3, r3, #13
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4903      	ldr	r1, [pc, #12]	; (80048dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800
 80048dc:	0800859c 	.word	0x0800859c

080048e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d012      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004908:	4b69      	ldr	r3, [pc, #420]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4a68      	ldr	r2, [pc, #416]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004912:	6093      	str	r3, [r2, #8]
 8004914:	4b66      	ldr	r3, [pc, #408]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	4964      	ldr	r1, [pc, #400]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800492a:	2301      	movs	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d017      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800493a:	4b5d      	ldr	r3, [pc, #372]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	4959      	ldr	r1, [pc, #356]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004958:	d101      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800495a:	2301      	movs	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004966:	2301      	movs	r3, #1
 8004968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d017      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004976:	4b4e      	ldr	r3, [pc, #312]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800497c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	494a      	ldr	r1, [pc, #296]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004994:	d101      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004996:	2301      	movs	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 808b 	beq.w	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049c4:	4b3a      	ldr	r3, [pc, #232]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	4a39      	ldr	r2, [pc, #228]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	6413      	str	r3, [r2, #64]	; 0x40
 80049d0:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049dc:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a34      	ldr	r2, [pc, #208]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd fe70 	bl	80026cc <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f0:	f7fd fe6c 	bl	80026cc <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e38f      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a02:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a0e:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d035      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d02e      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a2c:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a36:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	4a1d      	ldr	r2, [pc, #116]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a4e:	4a18      	ldr	r2, [pc, #96]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a54:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d114      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fd fe34 	bl	80026cc <HAL_GetTick>
 8004a64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fd fe30 	bl	80026cc <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e351      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0ee      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a96:	d111      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004aa6:	400b      	ands	r3, r1
 8004aa8:	4901      	ldr	r1, [pc, #4]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	608b      	str	r3, [r1, #8]
 8004aae:	e00b      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40007000 	.word	0x40007000
 8004ab8:	0ffffcff 	.word	0x0ffffcff
 8004abc:	4bac      	ldr	r3, [pc, #688]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4aab      	ldr	r2, [pc, #684]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ac6:	6093      	str	r3, [r2, #8]
 8004ac8:	4ba9      	ldr	r3, [pc, #676]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	49a6      	ldr	r1, [pc, #664]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d010      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ae6:	4ba2      	ldr	r3, [pc, #648]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aec:	4aa0      	ldr	r2, [pc, #640]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004af2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004af6:	4b9e      	ldr	r3, [pc, #632]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004af8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	499b      	ldr	r1, [pc, #620]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b14:	4b96      	ldr	r3, [pc, #600]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b22:	4993      	ldr	r1, [pc, #588]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b36:	4b8e      	ldr	r3, [pc, #568]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b44:	498a      	ldr	r1, [pc, #552]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b58:	4b85      	ldr	r3, [pc, #532]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b66:	4982      	ldr	r1, [pc, #520]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b7a:	4b7d      	ldr	r3, [pc, #500]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	4979      	ldr	r1, [pc, #484]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b9c:	4b74      	ldr	r3, [pc, #464]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f023 0203 	bic.w	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	4971      	ldr	r1, [pc, #452]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bbe:	4b6c      	ldr	r3, [pc, #432]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	f023 020c 	bic.w	r2, r3, #12
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bcc:	4968      	ldr	r1, [pc, #416]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004be0:	4b63      	ldr	r3, [pc, #396]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	4960      	ldr	r1, [pc, #384]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c02:	4b5b      	ldr	r3, [pc, #364]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	4957      	ldr	r1, [pc, #348]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c24:	4b52      	ldr	r3, [pc, #328]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	494f      	ldr	r1, [pc, #316]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c46:	4b4a      	ldr	r3, [pc, #296]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	4946      	ldr	r1, [pc, #280]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c68:	4b41      	ldr	r3, [pc, #260]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c76:	493e      	ldr	r1, [pc, #248]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c8a:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	4935      	ldr	r1, [pc, #212]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cac:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cba:	492d      	ldr	r1, [pc, #180]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d011      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cce:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cdc:	4924      	ldr	r1, [pc, #144]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d0e:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1c:	4914      	ldr	r1, [pc, #80]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00b      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d40:	490b      	ldr	r1, [pc, #44]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00f      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d64:	4902      	ldr	r1, [pc, #8]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d6c:	e002      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d80:	4b8a      	ldr	r3, [pc, #552]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	4986      	ldr	r1, [pc, #536]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004da4:	4b81      	ldr	r3, [pc, #516]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004daa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db4:	497d      	ldr	r1, [pc, #500]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d006      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 80d6 	beq.w	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004dd0:	4b76      	ldr	r3, [pc, #472]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a75      	ldr	r2, [pc, #468]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ddc:	f7fd fc76 	bl	80026cc <HAL_GetTick>
 8004de0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004de4:	f7fd fc72 	bl	80026cc <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b64      	cmp	r3, #100	; 0x64
 8004df0:	d901      	bls.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e195      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004df6:	4b6d      	ldr	r3, [pc, #436]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d021      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d11d      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e16:	4b65      	ldr	r3, [pc, #404]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e24:	4b61      	ldr	r3, [pc, #388]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2a:	0e1b      	lsrs	r3, r3, #24
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	019a      	lsls	r2, r3, #6
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	061b      	lsls	r3, r3, #24
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	071b      	lsls	r3, r3, #28
 8004e4a:	4958      	ldr	r1, [pc, #352]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d02e      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7c:	d129      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e7e:	4b4b      	ldr	r3, [pc, #300]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e8c:	4b47      	ldr	r3, [pc, #284]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e92:	0f1b      	lsrs	r3, r3, #28
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	019a      	lsls	r2, r3, #6
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	061b      	lsls	r3, r3, #24
 8004eac:	431a      	orrs	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	071b      	lsls	r3, r3, #28
 8004eb2:	493e      	ldr	r1, [pc, #248]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004eba:	4b3c      	ldr	r3, [pc, #240]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec0:	f023 021f 	bic.w	r2, r3, #31
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	4938      	ldr	r1, [pc, #224]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01d      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ede:	4b33      	ldr	r3, [pc, #204]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee4:	0e1b      	lsrs	r3, r3, #24
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eec:	4b2f      	ldr	r3, [pc, #188]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef2:	0f1b      	lsrs	r3, r3, #28
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	019a      	lsls	r2, r3, #6
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	431a      	orrs	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	071b      	lsls	r3, r3, #28
 8004f12:	4926      	ldr	r1, [pc, #152]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d011      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	019a      	lsls	r2, r3, #6
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	061b      	lsls	r3, r3, #24
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	491a      	ldr	r1, [pc, #104]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f4a:	4b18      	ldr	r3, [pc, #96]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a17      	ldr	r2, [pc, #92]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f56:	f7fd fbb9 	bl	80026cc <HAL_GetTick>
 8004f5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f5e:	f7fd fbb5 	bl	80026cc <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b64      	cmp	r3, #100	; 0x64
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e0d8      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f70:	4b0e      	ldr	r3, [pc, #56]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	f040 80ce 	bne.w	8005120 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f84:	4b09      	ldr	r3, [pc, #36]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a08      	ldr	r2, [pc, #32]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f90:	f7fd fb9c 	bl	80026cc <HAL_GetTick>
 8004f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f98:	f7fd fb98 	bl	80026cc <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b64      	cmp	r3, #100	; 0x64
 8004fa4:	d904      	bls.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e0bb      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fb0:	4b5e      	ldr	r3, [pc, #376]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fbc:	d0ec      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d02e      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d12a      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fe6:	4b51      	ldr	r3, [pc, #324]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	0c1b      	lsrs	r3, r3, #16
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ff4:	4b4d      	ldr	r3, [pc, #308]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	0f1b      	lsrs	r3, r3, #28
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	019a      	lsls	r2, r3, #6
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	431a      	orrs	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	071b      	lsls	r3, r3, #28
 800501a:	4944      	ldr	r1, [pc, #272]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005022:	4b42      	ldr	r3, [pc, #264]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005028:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	3b01      	subs	r3, #1
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	493d      	ldr	r1, [pc, #244]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d022      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005050:	d11d      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005052:	4b36      	ldr	r3, [pc, #216]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	0e1b      	lsrs	r3, r3, #24
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005060:	4b32      	ldr	r3, [pc, #200]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	0f1b      	lsrs	r3, r3, #28
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	019a      	lsls	r2, r3, #6
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	431a      	orrs	r2, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	061b      	lsls	r3, r3, #24
 8005080:	431a      	orrs	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	071b      	lsls	r3, r3, #28
 8005086:	4929      	ldr	r1, [pc, #164]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d028      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800509a:	4b24      	ldr	r3, [pc, #144]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a0:	0e1b      	lsrs	r3, r3, #24
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050a8:	4b20      	ldr	r3, [pc, #128]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	0c1b      	lsrs	r3, r3, #16
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	019a      	lsls	r2, r3, #6
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	431a      	orrs	r2, r3
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	061b      	lsls	r3, r3, #24
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	071b      	lsls	r3, r3, #28
 80050ce:	4917      	ldr	r1, [pc, #92]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	4911      	ldr	r1, [pc, #68]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0e      	ldr	r2, [pc, #56]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f8:	f7fd fae8 	bl	80026cc <HAL_GetTick>
 80050fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005100:	f7fd fae4 	bl	80026cc <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b64      	cmp	r3, #100	; 0x64
 800510c:	d901      	bls.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e007      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800511a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511e:	d1ef      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40023800 	.word	0x40023800

08005130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e09d      	b.n	800527e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	d108      	bne.n	800515c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005152:	d009      	beq.n	8005168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	61da      	str	r2, [r3, #28]
 800515a:	e005      	b.n	8005168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc fd96 	bl	8001cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051a8:	d902      	bls.n	80051b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	e002      	b.n	80051b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051be:	d007      	beq.n	80051d0 <HAL_SPI_Init+0xa0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051c8:	d002      	beq.n	80051d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005212:	ea42 0103 	orr.w	r1, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	f003 0204 	and.w	r2, r3, #4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800524c:	ea42 0103 	orr.w	r1, r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800526c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b082      	sub	sp, #8
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e049      	b.n	800532c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7fc fd81 	bl	8001db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 fc0d 	bl	8005ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e049      	b.n	80053da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fc fe1e 	bl	8001f9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 fbb6 	bl	8005ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e049      	b.n	8005488 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f841 	bl	8005490 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f000 fb5f 	bl	8005ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e08f      	b.n	80055d8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fc fcef 	bl	8001eb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6899      	ldr	r1, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b3e      	ldr	r3, [pc, #248]	; (80055e0 <HAL_TIM_Encoder_Init+0x13c>)
 80054e6:	400b      	ands	r3, r1
 80054e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f000 faf5 	bl	8005ae4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4b31      	ldr	r3, [pc, #196]	; (80055e4 <HAL_TIM_Encoder_Init+0x140>)
 8005520:	4013      	ands	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	4313      	orrs	r3, r2
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <HAL_TIM_Encoder_Init+0x144>)
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4b2a      	ldr	r3, [pc, #168]	; (80055ec <HAL_TIM_Encoder_Init+0x148>)
 8005542:	4013      	ands	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	4313      	orrs	r3, r2
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	031b      	lsls	r3, r3, #12
 8005564:	4313      	orrs	r3, r2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	4313      	orrs	r3, r2
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	fffebff8 	.word	0xfffebff8
 80055e4:	fffffcfc 	.word	0xfffffcfc
 80055e8:	fffff3f3 	.word	0xfffff3f3
 80055ec:	ffff0f0f 	.word	0xffff0f0f

080055f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_TIM_IC_ConfigChannel+0x1e>
 800560a:	2302      	movs	r3, #2
 800560c:	e088      	b.n	8005720 <HAL_TIM_IC_ConfigChannel+0x130>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	6819      	ldr	r1, [r3, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f000 fd58 	bl	80060e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 020c 	bic.w	r2, r2, #12
 800563e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6999      	ldr	r1, [r3, #24]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	619a      	str	r2, [r3, #24]
 8005652:	e060      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b04      	cmp	r3, #4
 8005658:	d11c      	bne.n	8005694 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f000 fddc 	bl	8006226 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800567c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6999      	ldr	r1, [r3, #24]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	021a      	lsls	r2, r3, #8
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	619a      	str	r2, [r3, #24]
 8005692:	e040      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b08      	cmp	r3, #8
 8005698:	d11b      	bne.n	80056d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f000 fe29 	bl	8006300 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 020c 	bic.w	r2, r2, #12
 80056bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69d9      	ldr	r1, [r3, #28]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	61da      	str	r2, [r3, #28]
 80056d0:	e021      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	d11c      	bne.n	8005712 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f000 fe46 	bl	8006378 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69d9      	ldr	r1, [r3, #28]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	021a      	lsls	r2, r3, #8
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	61da      	str	r2, [r3, #28]
 8005710:	e001      	b.n	8005716 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800571e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005742:	2302      	movs	r3, #2
 8005744:	e0ff      	b.n	8005946 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b14      	cmp	r3, #20
 8005752:	f200 80f0 	bhi.w	8005936 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	080057b1 	.word	0x080057b1
 8005760:	08005937 	.word	0x08005937
 8005764:	08005937 	.word	0x08005937
 8005768:	08005937 	.word	0x08005937
 800576c:	080057f1 	.word	0x080057f1
 8005770:	08005937 	.word	0x08005937
 8005774:	08005937 	.word	0x08005937
 8005778:	08005937 	.word	0x08005937
 800577c:	08005833 	.word	0x08005833
 8005780:	08005937 	.word	0x08005937
 8005784:	08005937 	.word	0x08005937
 8005788:	08005937 	.word	0x08005937
 800578c:	08005873 	.word	0x08005873
 8005790:	08005937 	.word	0x08005937
 8005794:	08005937 	.word	0x08005937
 8005798:	08005937 	.word	0x08005937
 800579c:	080058b5 	.word	0x080058b5
 80057a0:	08005937 	.word	0x08005937
 80057a4:	08005937 	.word	0x08005937
 80057a8:	08005937 	.word	0x08005937
 80057ac:	080058f5 	.word	0x080058f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fa34 	bl	8005c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0208 	orr.w	r2, r2, #8
 80057ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0204 	bic.w	r2, r2, #4
 80057da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6999      	ldr	r1, [r3, #24]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	619a      	str	r2, [r3, #24]
      break;
 80057ee:	e0a5      	b.n	800593c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fa86 	bl	8005d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800580a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6999      	ldr	r1, [r3, #24]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	021a      	lsls	r2, r3, #8
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	619a      	str	r2, [r3, #24]
      break;
 8005830:	e084      	b.n	800593c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fadd 	bl	8005df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0208 	orr.w	r2, r2, #8
 800584c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0204 	bic.w	r2, r2, #4
 800585c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69d9      	ldr	r1, [r3, #28]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	61da      	str	r2, [r3, #28]
      break;
 8005870:	e064      	b.n	800593c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fb33 	bl	8005ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800588c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69d9      	ldr	r1, [r3, #28]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	021a      	lsls	r2, r3, #8
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	61da      	str	r2, [r3, #28]
      break;
 80058b2:	e043      	b.n	800593c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fb6a 	bl	8005f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0208 	orr.w	r2, r2, #8
 80058ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0204 	bic.w	r2, r2, #4
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	691a      	ldr	r2, [r3, #16]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058f2:	e023      	b.n	800593c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fb9c 	bl	8006038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800590e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	021a      	lsls	r2, r3, #8
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005934:	e002      	b.n	800593c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
      break;
 800593a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005944:	7dfb      	ldrb	r3, [r7, #23]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop

08005950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIM_ConfigClockSource+0x1c>
 8005968:	2302      	movs	r3, #2
 800596a:	e0b4      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x186>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	4b56      	ldr	r3, [pc, #344]	; (8005ae0 <HAL_TIM_ConfigClockSource+0x190>)
 8005988:	4013      	ands	r3, r2
 800598a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a4:	d03e      	beq.n	8005a24 <HAL_TIM_ConfigClockSource+0xd4>
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059aa:	f200 8087 	bhi.w	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b2:	f000 8086 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x172>
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ba:	d87f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b70      	cmp	r3, #112	; 0x70
 80059be:	d01a      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0xa6>
 80059c0:	2b70      	cmp	r3, #112	; 0x70
 80059c2:	d87b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059c4:	2b60      	cmp	r3, #96	; 0x60
 80059c6:	d050      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x11a>
 80059c8:	2b60      	cmp	r3, #96	; 0x60
 80059ca:	d877      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059cc:	2b50      	cmp	r3, #80	; 0x50
 80059ce:	d03c      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0xfa>
 80059d0:	2b50      	cmp	r3, #80	; 0x50
 80059d2:	d873      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d058      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x13a>
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d86f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b30      	cmp	r3, #48	; 0x30
 80059de:	d064      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e0:	2b30      	cmp	r3, #48	; 0x30
 80059e2:	d86b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d060      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d867      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d05c      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d05a      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f4:	e062      	b.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6899      	ldr	r1, [r3, #8]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f000 fd0f 	bl	8006428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	609a      	str	r2, [r3, #8]
      break;
 8005a22:	e04f      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6899      	ldr	r1, [r3, #8]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f000 fcf8 	bl	8006428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a46:	609a      	str	r2, [r3, #8]
      break;
 8005a48:	e03c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 fbb6 	bl	80061c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2150      	movs	r1, #80	; 0x50
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fcc5 	bl	80063f2 <TIM_ITRx_SetConfig>
      break;
 8005a68:	e02c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 fc12 	bl	80062a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2160      	movs	r1, #96	; 0x60
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fcb5 	bl	80063f2 <TIM_ITRx_SetConfig>
      break;
 8005a88:	e01c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 fb96 	bl	80061c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2140      	movs	r1, #64	; 0x40
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fca5 	bl	80063f2 <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e00c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f000 fc9c 	bl	80063f2 <TIM_ITRx_SetConfig>
      break;
 8005aba:	e003      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	e000      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	fffeff88 	.word	0xfffeff88

08005ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a40      	ldr	r2, [pc, #256]	; (8005bf8 <TIM_Base_SetConfig+0x114>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d013      	beq.n	8005b24 <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b02:	d00f      	beq.n	8005b24 <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a3d      	ldr	r2, [pc, #244]	; (8005bfc <TIM_Base_SetConfig+0x118>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00b      	beq.n	8005b24 <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a3c      	ldr	r2, [pc, #240]	; (8005c00 <TIM_Base_SetConfig+0x11c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d007      	beq.n	8005b24 <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3b      	ldr	r2, [pc, #236]	; (8005c04 <TIM_Base_SetConfig+0x120>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a3a      	ldr	r2, [pc, #232]	; (8005c08 <TIM_Base_SetConfig+0x124>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d108      	bne.n	8005b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a2f      	ldr	r2, [pc, #188]	; (8005bf8 <TIM_Base_SetConfig+0x114>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d02b      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b44:	d027      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <TIM_Base_SetConfig+0x118>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d023      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2b      	ldr	r2, [pc, #172]	; (8005c00 <TIM_Base_SetConfig+0x11c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01f      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a2a      	ldr	r2, [pc, #168]	; (8005c04 <TIM_Base_SetConfig+0x120>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01b      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a29      	ldr	r2, [pc, #164]	; (8005c08 <TIM_Base_SetConfig+0x124>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d017      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a28      	ldr	r2, [pc, #160]	; (8005c0c <TIM_Base_SetConfig+0x128>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a27      	ldr	r2, [pc, #156]	; (8005c10 <TIM_Base_SetConfig+0x12c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00f      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a26      	ldr	r2, [pc, #152]	; (8005c14 <TIM_Base_SetConfig+0x130>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00b      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a25      	ldr	r2, [pc, #148]	; (8005c18 <TIM_Base_SetConfig+0x134>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d007      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a24      	ldr	r2, [pc, #144]	; (8005c1c <TIM_Base_SetConfig+0x138>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a23      	ldr	r2, [pc, #140]	; (8005c20 <TIM_Base_SetConfig+0x13c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d108      	bne.n	8005ba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <TIM_Base_SetConfig+0x114>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_Base_SetConfig+0xf8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a0c      	ldr	r2, [pc, #48]	; (8005c08 <TIM_Base_SetConfig+0x124>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d103      	bne.n	8005be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	615a      	str	r2, [r3, #20]
}
 8005bea:	bf00      	nop
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40010000 	.word	0x40010000
 8005bfc:	40000400 	.word	0x40000400
 8005c00:	40000800 	.word	0x40000800
 8005c04:	40000c00 	.word	0x40000c00
 8005c08:	40010400 	.word	0x40010400
 8005c0c:	40014000 	.word	0x40014000
 8005c10:	40014400 	.word	0x40014400
 8005c14:	40014800 	.word	0x40014800
 8005c18:	40001800 	.word	0x40001800
 8005c1c:	40001c00 	.word	0x40001c00
 8005c20:	40002000 	.word	0x40002000

08005c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f023 0201 	bic.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <TIM_OC1_SetConfig+0xd8>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 0302 	bic.w	r3, r3, #2
 8005c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a21      	ldr	r2, [pc, #132]	; (8005d00 <TIM_OC1_SetConfig+0xdc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_OC1_SetConfig+0x64>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <TIM_OC1_SetConfig+0xe0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d10c      	bne.n	8005ca2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 0308 	bic.w	r3, r3, #8
 8005c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <TIM_OC1_SetConfig+0xdc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC1_SetConfig+0x8e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <TIM_OC1_SetConfig+0xe0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d111      	bne.n	8005cd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	621a      	str	r2, [r3, #32]
}
 8005cf0:	bf00      	nop
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	fffeff8f 	.word	0xfffeff8f
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400

08005d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 0210 	bic.w	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4b2e      	ldr	r3, [pc, #184]	; (8005dec <TIM_OC2_SetConfig+0xe4>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0320 	bic.w	r3, r3, #32
 8005d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a23      	ldr	r2, [pc, #140]	; (8005df0 <TIM_OC2_SetConfig+0xe8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC2_SetConfig+0x68>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <TIM_OC2_SetConfig+0xec>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10d      	bne.n	8005d8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a18      	ldr	r2, [pc, #96]	; (8005df0 <TIM_OC2_SetConfig+0xe8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC2_SetConfig+0x94>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a17      	ldr	r2, [pc, #92]	; (8005df4 <TIM_OC2_SetConfig+0xec>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d113      	bne.n	8005dc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	feff8fff 	.word	0xfeff8fff
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010400 	.word	0x40010400

08005df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4b2d      	ldr	r3, [pc, #180]	; (8005ed8 <TIM_OC3_SetConfig+0xe0>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0303 	bic.w	r3, r3, #3
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a22      	ldr	r2, [pc, #136]	; (8005edc <TIM_OC3_SetConfig+0xe4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_OC3_SetConfig+0x66>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <TIM_OC3_SetConfig+0xe8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d10d      	bne.n	8005e7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a17      	ldr	r2, [pc, #92]	; (8005edc <TIM_OC3_SetConfig+0xe4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_OC3_SetConfig+0x92>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <TIM_OC3_SetConfig+0xe8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d113      	bne.n	8005eb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	621a      	str	r2, [r3, #32]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	fffeff8f 	.word	0xfffeff8f
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400

08005ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <TIM_OC4_SetConfig+0xa4>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	031b      	lsls	r3, r3, #12
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a13      	ldr	r2, [pc, #76]	; (8005f8c <TIM_OC4_SetConfig+0xa8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC4_SetConfig+0x68>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a12      	ldr	r2, [pc, #72]	; (8005f90 <TIM_OC4_SetConfig+0xac>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d109      	bne.n	8005f60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	019b      	lsls	r3, r3, #6
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	feff8fff 	.word	0xfeff8fff
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40010400 	.word	0x40010400

08005f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4b1b      	ldr	r3, [pc, #108]	; (800602c <TIM_OC5_SetConfig+0x98>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	041b      	lsls	r3, r3, #16
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a12      	ldr	r2, [pc, #72]	; (8006030 <TIM_OC5_SetConfig+0x9c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC5_SetConfig+0x5e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a11      	ldr	r2, [pc, #68]	; (8006034 <TIM_OC5_SetConfig+0xa0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d109      	bne.n	8006006 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	621a      	str	r2, [r3, #32]
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	fffeff8f 	.word	0xfffeff8f
 8006030:	40010000 	.word	0x40010000
 8006034:	40010400 	.word	0x40010400

08006038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <TIM_OC6_SetConfig+0x9c>)
 8006064:	4013      	ands	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800607a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <TIM_OC6_SetConfig+0xa0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_OC6_SetConfig+0x60>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a12      	ldr	r2, [pc, #72]	; (80060dc <TIM_OC6_SetConfig+0xa4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d109      	bne.n	80060ac <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	029b      	lsls	r3, r3, #10
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	feff8fff 	.word	0xfeff8fff
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40010400 	.word	0x40010400

080060e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a28      	ldr	r2, [pc, #160]	; (80061ac <TIM_TI1_SetConfig+0xcc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d01b      	beq.n	8006146 <TIM_TI1_SetConfig+0x66>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006114:	d017      	beq.n	8006146 <TIM_TI1_SetConfig+0x66>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <TIM_TI1_SetConfig+0xd0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <TIM_TI1_SetConfig+0x66>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4a24      	ldr	r2, [pc, #144]	; (80061b4 <TIM_TI1_SetConfig+0xd4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00f      	beq.n	8006146 <TIM_TI1_SetConfig+0x66>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a23      	ldr	r2, [pc, #140]	; (80061b8 <TIM_TI1_SetConfig+0xd8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00b      	beq.n	8006146 <TIM_TI1_SetConfig+0x66>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a22      	ldr	r2, [pc, #136]	; (80061bc <TIM_TI1_SetConfig+0xdc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d007      	beq.n	8006146 <TIM_TI1_SetConfig+0x66>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a21      	ldr	r2, [pc, #132]	; (80061c0 <TIM_TI1_SetConfig+0xe0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d003      	beq.n	8006146 <TIM_TI1_SetConfig+0x66>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a20      	ldr	r2, [pc, #128]	; (80061c4 <TIM_TI1_SetConfig+0xe4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d101      	bne.n	800614a <TIM_TI1_SetConfig+0x6a>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <TIM_TI1_SetConfig+0x6c>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f023 0303 	bic.w	r3, r3, #3
 8006156:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e003      	b.n	800616a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	b2db      	uxtb	r3, r3
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f023 030a 	bic.w	r3, r3, #10
 8006184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 030a 	and.w	r3, r3, #10
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40010000 	.word	0x40010000
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40000800 	.word	0x40000800
 80061b8:	40000c00 	.word	0x40000c00
 80061bc:	40010400 	.word	0x40010400
 80061c0:	40014000 	.word	0x40014000
 80061c4:	40001800 	.word	0x40001800

080061c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	f023 0201 	bic.w	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f023 030a 	bic.w	r3, r3, #10
 8006204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4313      	orrs	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f023 0210 	bic.w	r2, r3, #16
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006252:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	b29b      	uxth	r3, r3
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006278:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	621a      	str	r2, [r3, #32]
}
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	f023 0210 	bic.w	r2, r3, #16
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	031b      	lsls	r3, r3, #12
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	621a      	str	r2, [r3, #32]
}
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f023 0303 	bic.w	r3, r3, #3
 800632c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800633c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	b2db      	uxtb	r3, r3
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006350:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	621a      	str	r2, [r3, #32]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	031b      	lsls	r3, r3, #12
 80063bc:	b29b      	uxth	r3, r3
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80063ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	031b      	lsls	r3, r3, #12
 80063d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	f043 0307 	orr.w	r3, r3, #7
 8006414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	609a      	str	r2, [r3, #8]
}
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	021a      	lsls	r2, r3, #8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	431a      	orrs	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4313      	orrs	r3, r2
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	bf00      	nop
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800647c:	2302      	movs	r3, #2
 800647e:	e06d      	b.n	800655c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a30      	ldr	r2, [pc, #192]	; (8006568 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2f      	ldr	r2, [pc, #188]	; (800656c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d108      	bne.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a20      	ldr	r2, [pc, #128]	; (8006568 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d022      	beq.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f2:	d01d      	beq.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1d      	ldr	r2, [pc, #116]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d018      	beq.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1c      	ldr	r2, [pc, #112]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d013      	beq.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1a      	ldr	r2, [pc, #104]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00e      	beq.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a15      	ldr	r2, [pc, #84]	; (800656c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d009      	beq.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a16      	ldr	r2, [pc, #88]	; (800657c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d004      	beq.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a15      	ldr	r2, [pc, #84]	; (8006580 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d10c      	bne.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006536:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	4313      	orrs	r3, r2
 8006540:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	40010000 	.word	0x40010000
 800656c:	40010400 	.word	0x40010400
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40014000 	.word	0x40014000
 8006580:	40001800 	.word	0x40001800

08006584 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800659c:	2302      	movs	r3, #2
 800659e:	e065      	b.n	800666c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a16      	ldr	r2, [pc, #88]	; (8006678 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a14      	ldr	r2, [pc, #80]	; (800667c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d115      	bne.n	800665a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	051b      	lsls	r3, r3, #20
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	40010000 	.word	0x40010000
 800667c:	40010400 	.word	0x40010400

08006680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e040      	b.n	8006714 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7fb fd66 	bl	8002174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2224      	movs	r2, #36	; 0x24
 80066ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f82c 	bl	800671c <UART_SetConfig>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e022      	b.n	8006714 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa84 	bl	8006be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fb0b 	bl	8006d28 <UART_CheckIdleState>
 8006712:	4603      	mov	r3, r0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4ba6      	ldr	r3, [pc, #664]	; (80069e0 <UART_SetConfig+0x2c4>)
 8006748:	4013      	ands	r3, r2
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	6979      	ldr	r1, [r7, #20]
 8006750:	430b      	orrs	r3, r1
 8006752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	430a      	orrs	r2, r1
 800678c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a94      	ldr	r2, [pc, #592]	; (80069e4 <UART_SetConfig+0x2c8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d120      	bne.n	80067da <UART_SetConfig+0xbe>
 8006798:	4b93      	ldr	r3, [pc, #588]	; (80069e8 <UART_SetConfig+0x2cc>)
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d816      	bhi.n	80067d4 <UART_SetConfig+0xb8>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0x90>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067c9 	.word	0x080067c9
 80067b4:	080067c3 	.word	0x080067c3
 80067b8:	080067cf 	.word	0x080067cf
 80067bc:	2301      	movs	r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e150      	b.n	8006a64 <UART_SetConfig+0x348>
 80067c2:	2302      	movs	r3, #2
 80067c4:	77fb      	strb	r3, [r7, #31]
 80067c6:	e14d      	b.n	8006a64 <UART_SetConfig+0x348>
 80067c8:	2304      	movs	r3, #4
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e14a      	b.n	8006a64 <UART_SetConfig+0x348>
 80067ce:	2308      	movs	r3, #8
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e147      	b.n	8006a64 <UART_SetConfig+0x348>
 80067d4:	2310      	movs	r3, #16
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e144      	b.n	8006a64 <UART_SetConfig+0x348>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a83      	ldr	r2, [pc, #524]	; (80069ec <UART_SetConfig+0x2d0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d132      	bne.n	800684a <UART_SetConfig+0x12e>
 80067e4:	4b80      	ldr	r3, [pc, #512]	; (80069e8 <UART_SetConfig+0x2cc>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f003 030c 	and.w	r3, r3, #12
 80067ee:	2b0c      	cmp	r3, #12
 80067f0:	d828      	bhi.n	8006844 <UART_SetConfig+0x128>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <UART_SetConfig+0xdc>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	0800682d 	.word	0x0800682d
 80067fc:	08006845 	.word	0x08006845
 8006800:	08006845 	.word	0x08006845
 8006804:	08006845 	.word	0x08006845
 8006808:	08006839 	.word	0x08006839
 800680c:	08006845 	.word	0x08006845
 8006810:	08006845 	.word	0x08006845
 8006814:	08006845 	.word	0x08006845
 8006818:	08006833 	.word	0x08006833
 800681c:	08006845 	.word	0x08006845
 8006820:	08006845 	.word	0x08006845
 8006824:	08006845 	.word	0x08006845
 8006828:	0800683f 	.word	0x0800683f
 800682c:	2300      	movs	r3, #0
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e118      	b.n	8006a64 <UART_SetConfig+0x348>
 8006832:	2302      	movs	r3, #2
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e115      	b.n	8006a64 <UART_SetConfig+0x348>
 8006838:	2304      	movs	r3, #4
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e112      	b.n	8006a64 <UART_SetConfig+0x348>
 800683e:	2308      	movs	r3, #8
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e10f      	b.n	8006a64 <UART_SetConfig+0x348>
 8006844:	2310      	movs	r3, #16
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e10c      	b.n	8006a64 <UART_SetConfig+0x348>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a68      	ldr	r2, [pc, #416]	; (80069f0 <UART_SetConfig+0x2d4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d120      	bne.n	8006896 <UART_SetConfig+0x17a>
 8006854:	4b64      	ldr	r3, [pc, #400]	; (80069e8 <UART_SetConfig+0x2cc>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800685e:	2b30      	cmp	r3, #48	; 0x30
 8006860:	d013      	beq.n	800688a <UART_SetConfig+0x16e>
 8006862:	2b30      	cmp	r3, #48	; 0x30
 8006864:	d814      	bhi.n	8006890 <UART_SetConfig+0x174>
 8006866:	2b20      	cmp	r3, #32
 8006868:	d009      	beq.n	800687e <UART_SetConfig+0x162>
 800686a:	2b20      	cmp	r3, #32
 800686c:	d810      	bhi.n	8006890 <UART_SetConfig+0x174>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <UART_SetConfig+0x15c>
 8006872:	2b10      	cmp	r3, #16
 8006874:	d006      	beq.n	8006884 <UART_SetConfig+0x168>
 8006876:	e00b      	b.n	8006890 <UART_SetConfig+0x174>
 8006878:	2300      	movs	r3, #0
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e0f2      	b.n	8006a64 <UART_SetConfig+0x348>
 800687e:	2302      	movs	r3, #2
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e0ef      	b.n	8006a64 <UART_SetConfig+0x348>
 8006884:	2304      	movs	r3, #4
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e0ec      	b.n	8006a64 <UART_SetConfig+0x348>
 800688a:	2308      	movs	r3, #8
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e0e9      	b.n	8006a64 <UART_SetConfig+0x348>
 8006890:	2310      	movs	r3, #16
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e0e6      	b.n	8006a64 <UART_SetConfig+0x348>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a56      	ldr	r2, [pc, #344]	; (80069f4 <UART_SetConfig+0x2d8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d120      	bne.n	80068e2 <UART_SetConfig+0x1c6>
 80068a0:	4b51      	ldr	r3, [pc, #324]	; (80069e8 <UART_SetConfig+0x2cc>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068aa:	2bc0      	cmp	r3, #192	; 0xc0
 80068ac:	d013      	beq.n	80068d6 <UART_SetConfig+0x1ba>
 80068ae:	2bc0      	cmp	r3, #192	; 0xc0
 80068b0:	d814      	bhi.n	80068dc <UART_SetConfig+0x1c0>
 80068b2:	2b80      	cmp	r3, #128	; 0x80
 80068b4:	d009      	beq.n	80068ca <UART_SetConfig+0x1ae>
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d810      	bhi.n	80068dc <UART_SetConfig+0x1c0>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <UART_SetConfig+0x1a8>
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d006      	beq.n	80068d0 <UART_SetConfig+0x1b4>
 80068c2:	e00b      	b.n	80068dc <UART_SetConfig+0x1c0>
 80068c4:	2300      	movs	r3, #0
 80068c6:	77fb      	strb	r3, [r7, #31]
 80068c8:	e0cc      	b.n	8006a64 <UART_SetConfig+0x348>
 80068ca:	2302      	movs	r3, #2
 80068cc:	77fb      	strb	r3, [r7, #31]
 80068ce:	e0c9      	b.n	8006a64 <UART_SetConfig+0x348>
 80068d0:	2304      	movs	r3, #4
 80068d2:	77fb      	strb	r3, [r7, #31]
 80068d4:	e0c6      	b.n	8006a64 <UART_SetConfig+0x348>
 80068d6:	2308      	movs	r3, #8
 80068d8:	77fb      	strb	r3, [r7, #31]
 80068da:	e0c3      	b.n	8006a64 <UART_SetConfig+0x348>
 80068dc:	2310      	movs	r3, #16
 80068de:	77fb      	strb	r3, [r7, #31]
 80068e0:	e0c0      	b.n	8006a64 <UART_SetConfig+0x348>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a44      	ldr	r2, [pc, #272]	; (80069f8 <UART_SetConfig+0x2dc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d125      	bne.n	8006938 <UART_SetConfig+0x21c>
 80068ec:	4b3e      	ldr	r3, [pc, #248]	; (80069e8 <UART_SetConfig+0x2cc>)
 80068ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068fa:	d017      	beq.n	800692c <UART_SetConfig+0x210>
 80068fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006900:	d817      	bhi.n	8006932 <UART_SetConfig+0x216>
 8006902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006906:	d00b      	beq.n	8006920 <UART_SetConfig+0x204>
 8006908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800690c:	d811      	bhi.n	8006932 <UART_SetConfig+0x216>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <UART_SetConfig+0x1fe>
 8006912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006916:	d006      	beq.n	8006926 <UART_SetConfig+0x20a>
 8006918:	e00b      	b.n	8006932 <UART_SetConfig+0x216>
 800691a:	2300      	movs	r3, #0
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e0a1      	b.n	8006a64 <UART_SetConfig+0x348>
 8006920:	2302      	movs	r3, #2
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e09e      	b.n	8006a64 <UART_SetConfig+0x348>
 8006926:	2304      	movs	r3, #4
 8006928:	77fb      	strb	r3, [r7, #31]
 800692a:	e09b      	b.n	8006a64 <UART_SetConfig+0x348>
 800692c:	2308      	movs	r3, #8
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e098      	b.n	8006a64 <UART_SetConfig+0x348>
 8006932:	2310      	movs	r3, #16
 8006934:	77fb      	strb	r3, [r7, #31]
 8006936:	e095      	b.n	8006a64 <UART_SetConfig+0x348>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a2f      	ldr	r2, [pc, #188]	; (80069fc <UART_SetConfig+0x2e0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d125      	bne.n	800698e <UART_SetConfig+0x272>
 8006942:	4b29      	ldr	r3, [pc, #164]	; (80069e8 <UART_SetConfig+0x2cc>)
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800694c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006950:	d017      	beq.n	8006982 <UART_SetConfig+0x266>
 8006952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006956:	d817      	bhi.n	8006988 <UART_SetConfig+0x26c>
 8006958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800695c:	d00b      	beq.n	8006976 <UART_SetConfig+0x25a>
 800695e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006962:	d811      	bhi.n	8006988 <UART_SetConfig+0x26c>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <UART_SetConfig+0x254>
 8006968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696c:	d006      	beq.n	800697c <UART_SetConfig+0x260>
 800696e:	e00b      	b.n	8006988 <UART_SetConfig+0x26c>
 8006970:	2301      	movs	r3, #1
 8006972:	77fb      	strb	r3, [r7, #31]
 8006974:	e076      	b.n	8006a64 <UART_SetConfig+0x348>
 8006976:	2302      	movs	r3, #2
 8006978:	77fb      	strb	r3, [r7, #31]
 800697a:	e073      	b.n	8006a64 <UART_SetConfig+0x348>
 800697c:	2304      	movs	r3, #4
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e070      	b.n	8006a64 <UART_SetConfig+0x348>
 8006982:	2308      	movs	r3, #8
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e06d      	b.n	8006a64 <UART_SetConfig+0x348>
 8006988:	2310      	movs	r3, #16
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e06a      	b.n	8006a64 <UART_SetConfig+0x348>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1b      	ldr	r2, [pc, #108]	; (8006a00 <UART_SetConfig+0x2e4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d138      	bne.n	8006a0a <UART_SetConfig+0x2ee>
 8006998:	4b13      	ldr	r3, [pc, #76]	; (80069e8 <UART_SetConfig+0x2cc>)
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069a6:	d017      	beq.n	80069d8 <UART_SetConfig+0x2bc>
 80069a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069ac:	d82a      	bhi.n	8006a04 <UART_SetConfig+0x2e8>
 80069ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b2:	d00b      	beq.n	80069cc <UART_SetConfig+0x2b0>
 80069b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b8:	d824      	bhi.n	8006a04 <UART_SetConfig+0x2e8>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <UART_SetConfig+0x2aa>
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d006      	beq.n	80069d2 <UART_SetConfig+0x2b6>
 80069c4:	e01e      	b.n	8006a04 <UART_SetConfig+0x2e8>
 80069c6:	2300      	movs	r3, #0
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e04b      	b.n	8006a64 <UART_SetConfig+0x348>
 80069cc:	2302      	movs	r3, #2
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e048      	b.n	8006a64 <UART_SetConfig+0x348>
 80069d2:	2304      	movs	r3, #4
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e045      	b.n	8006a64 <UART_SetConfig+0x348>
 80069d8:	2308      	movs	r3, #8
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e042      	b.n	8006a64 <UART_SetConfig+0x348>
 80069de:	bf00      	nop
 80069e0:	efff69f3 	.word	0xefff69f3
 80069e4:	40011000 	.word	0x40011000
 80069e8:	40023800 	.word	0x40023800
 80069ec:	40004400 	.word	0x40004400
 80069f0:	40004800 	.word	0x40004800
 80069f4:	40004c00 	.word	0x40004c00
 80069f8:	40005000 	.word	0x40005000
 80069fc:	40011400 	.word	0x40011400
 8006a00:	40007800 	.word	0x40007800
 8006a04:	2310      	movs	r3, #16
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e02c      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a72      	ldr	r2, [pc, #456]	; (8006bd8 <UART_SetConfig+0x4bc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d125      	bne.n	8006a60 <UART_SetConfig+0x344>
 8006a14:	4b71      	ldr	r3, [pc, #452]	; (8006bdc <UART_SetConfig+0x4c0>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a22:	d017      	beq.n	8006a54 <UART_SetConfig+0x338>
 8006a24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a28:	d817      	bhi.n	8006a5a <UART_SetConfig+0x33e>
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d00b      	beq.n	8006a48 <UART_SetConfig+0x32c>
 8006a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a34:	d811      	bhi.n	8006a5a <UART_SetConfig+0x33e>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <UART_SetConfig+0x326>
 8006a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a3e:	d006      	beq.n	8006a4e <UART_SetConfig+0x332>
 8006a40:	e00b      	b.n	8006a5a <UART_SetConfig+0x33e>
 8006a42:	2300      	movs	r3, #0
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e00d      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e00a      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a4e:	2304      	movs	r3, #4
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e007      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a54:	2308      	movs	r3, #8
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e004      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a5a:	2310      	movs	r3, #16
 8006a5c:	77fb      	strb	r3, [r7, #31]
 8006a5e:	e001      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a60:	2310      	movs	r3, #16
 8006a62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6c:	d15b      	bne.n	8006b26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a6e:	7ffb      	ldrb	r3, [r7, #31]
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d828      	bhi.n	8006ac6 <UART_SetConfig+0x3aa>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <UART_SetConfig+0x360>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006ab7 	.word	0x08006ab7
 8006a90:	08006ac7 	.word	0x08006ac7
 8006a94:	08006ac7 	.word	0x08006ac7
 8006a98:	08006ac7 	.word	0x08006ac7
 8006a9c:	08006abf 	.word	0x08006abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fd fef6 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	61b8      	str	r0, [r7, #24]
        break;
 8006aa6:	e013      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa8:	f7fd ff06 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8006aac:	61b8      	str	r0, [r7, #24]
        break;
 8006aae:	e00f      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab0:	4b4b      	ldr	r3, [pc, #300]	; (8006be0 <UART_SetConfig+0x4c4>)
 8006ab2:	61bb      	str	r3, [r7, #24]
        break;
 8006ab4:	e00c      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ab6:	f7fd fdd9 	bl	800466c <HAL_RCC_GetSysClockFreq>
 8006aba:	61b8      	str	r0, [r7, #24]
        break;
 8006abc:	e008      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	61bb      	str	r3, [r7, #24]
        break;
 8006ac4:	e004      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	77bb      	strb	r3, [r7, #30]
        break;
 8006ace:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d074      	beq.n	8006bc0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	005a      	lsls	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	441a      	add	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d916      	bls.n	8006b20 <UART_SetConfig+0x404>
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af8:	d212      	bcs.n	8006b20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f023 030f 	bic.w	r3, r3, #15
 8006b02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	89fb      	ldrh	r3, [r7, #14]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	89fa      	ldrh	r2, [r7, #14]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	e04f      	b.n	8006bc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	77bb      	strb	r3, [r7, #30]
 8006b24:	e04c      	b.n	8006bc0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b26:	7ffb      	ldrb	r3, [r7, #31]
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d828      	bhi.n	8006b7e <UART_SetConfig+0x462>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0x418>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b61 	.word	0x08006b61
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	08006b7f 	.word	0x08006b7f
 8006b44:	08006b6f 	.word	0x08006b6f
 8006b48:	08006b7f 	.word	0x08006b7f
 8006b4c:	08006b7f 	.word	0x08006b7f
 8006b50:	08006b7f 	.word	0x08006b7f
 8006b54:	08006b77 	.word	0x08006b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7fd fe9a 	bl	8004890 <HAL_RCC_GetPCLK1Freq>
 8006b5c:	61b8      	str	r0, [r7, #24]
        break;
 8006b5e:	e013      	b.n	8006b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b60:	f7fd feaa 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 8006b64:	61b8      	str	r0, [r7, #24]
        break;
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <UART_SetConfig+0x4c4>)
 8006b6a:	61bb      	str	r3, [r7, #24]
        break;
 8006b6c:	e00c      	b.n	8006b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6e:	f7fd fd7d 	bl	800466c <HAL_RCC_GetSysClockFreq>
 8006b72:	61b8      	str	r0, [r7, #24]
        break;
 8006b74:	e008      	b.n	8006b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7a:	61bb      	str	r3, [r7, #24]
        break;
 8006b7c:	e004      	b.n	8006b88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	77bb      	strb	r3, [r7, #30]
        break;
 8006b86:	bf00      	nop
    }

    if (pclk != 0U)
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d018      	beq.n	8006bc0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	085a      	lsrs	r2, r3, #1
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	441a      	add	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b0f      	cmp	r3, #15
 8006ba6:	d909      	bls.n	8006bbc <UART_SetConfig+0x4a0>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bae:	d205      	bcs.n	8006bbc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e001      	b.n	8006bc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006bcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40007c00 	.word	0x40007c00
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	00f42400 	.word	0x00f42400

08006be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01a      	beq.n	8006cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce2:	d10a      	bne.n	8006cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d38:	f7fb fcc8 	bl	80026cc <HAL_GetTick>
 8006d3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d10e      	bne.n	8006d6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f831 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e027      	b.n	8006dba <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d10e      	bne.n	8006d96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f81b 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e011      	b.n	8006dba <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b09c      	sub	sp, #112	; 0x70
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd2:	e0a7      	b.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	f000 80a3 	beq.w	8006f24 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dde:	f7fb fc75 	bl	80026cc <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d302      	bcc.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d13f      	bne.n	8006e74 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e08:	667b      	str	r3, [r7, #100]	; 0x64
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e6      	bne.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e46:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e068      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0304 	and.w	r3, r3, #4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d050      	beq.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e90:	d148      	bne.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
 8006ebc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e6      	bne.n	8006e9c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
 8006ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3308      	adds	r3, #8
 8006eec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006eee:	623a      	str	r2, [r7, #32]
 8006ef0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	69f9      	ldr	r1, [r7, #28]
 8006ef4:	6a3a      	ldr	r2, [r7, #32]
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e5      	bne.n	8006ece <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e010      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69da      	ldr	r2, [r3, #28]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	f43f af48 	beq.w	8006dd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3770      	adds	r7, #112	; 0x70
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <findslot>:
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <findslot+0x2c>)
 8006f52:	b510      	push	{r4, lr}
 8006f54:	4604      	mov	r4, r0
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	b118      	cbz	r0, 8006f62 <findslot+0x12>
 8006f5a:	6983      	ldr	r3, [r0, #24]
 8006f5c:	b90b      	cbnz	r3, 8006f62 <findslot+0x12>
 8006f5e:	f000 faf7 	bl	8007550 <__sinit>
 8006f62:	2c13      	cmp	r4, #19
 8006f64:	d807      	bhi.n	8006f76 <findslot+0x26>
 8006f66:	4806      	ldr	r0, [pc, #24]	; (8006f80 <findslot+0x30>)
 8006f68:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006f6c:	3201      	adds	r2, #1
 8006f6e:	d002      	beq.n	8006f76 <findslot+0x26>
 8006f70:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006f74:	bd10      	pop	{r4, pc}
 8006f76:	2000      	movs	r0, #0
 8006f78:	e7fc      	b.n	8006f74 <findslot+0x24>
 8006f7a:	bf00      	nop
 8006f7c:	20000018 	.word	0x20000018
 8006f80:	200006c4 	.word	0x200006c4

08006f84 <error>:
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	4604      	mov	r4, r0
 8006f88:	f000 fa84 	bl	8007494 <__errno>
 8006f8c:	2613      	movs	r6, #19
 8006f8e:	4605      	mov	r5, r0
 8006f90:	2700      	movs	r7, #0
 8006f92:	4630      	mov	r0, r6
 8006f94:	4639      	mov	r1, r7
 8006f96:	beab      	bkpt	0x00ab
 8006f98:	4606      	mov	r6, r0
 8006f9a:	602e      	str	r6, [r5, #0]
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fa0 <checkerror>:
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d101      	bne.n	8006fa8 <checkerror+0x8>
 8006fa4:	f7ff bfee 	b.w	8006f84 <error>
 8006fa8:	4770      	bx	lr

08006faa <_swiread>:
 8006faa:	b530      	push	{r4, r5, lr}
 8006fac:	b085      	sub	sp, #20
 8006fae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006fb2:	9203      	str	r2, [sp, #12]
 8006fb4:	2406      	movs	r4, #6
 8006fb6:	ad01      	add	r5, sp, #4
 8006fb8:	4620      	mov	r0, r4
 8006fba:	4629      	mov	r1, r5
 8006fbc:	beab      	bkpt	0x00ab
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f7ff ffed 	bl	8006fa0 <checkerror>
 8006fc6:	b005      	add	sp, #20
 8006fc8:	bd30      	pop	{r4, r5, pc}

08006fca <_read>:
 8006fca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fcc:	4615      	mov	r5, r2
 8006fce:	9101      	str	r1, [sp, #4]
 8006fd0:	f7ff ffbe 	bl	8006f50 <findslot>
 8006fd4:	9901      	ldr	r1, [sp, #4]
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	b938      	cbnz	r0, 8006fea <_read+0x20>
 8006fda:	f000 fa5b 	bl	8007494 <__errno>
 8006fde:	2309      	movs	r3, #9
 8006fe0:	6003      	str	r3, [r0, #0]
 8006fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe6:	b003      	add	sp, #12
 8006fe8:	bd30      	pop	{r4, r5, pc}
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	462a      	mov	r2, r5
 8006fee:	f7ff ffdc 	bl	8006faa <_swiread>
 8006ff2:	1c43      	adds	r3, r0, #1
 8006ff4:	d0f7      	beq.n	8006fe6 <_read+0x1c>
 8006ff6:	6863      	ldr	r3, [r4, #4]
 8006ff8:	1a2a      	subs	r2, r5, r0
 8006ffa:	4413      	add	r3, r2
 8006ffc:	6063      	str	r3, [r4, #4]
 8006ffe:	4610      	mov	r0, r2
 8007000:	e7f1      	b.n	8006fe6 <_read+0x1c>

08007002 <_swilseek>:
 8007002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007004:	460c      	mov	r4, r1
 8007006:	4616      	mov	r6, r2
 8007008:	f7ff ffa2 	bl	8006f50 <findslot>
 800700c:	4605      	mov	r5, r0
 800700e:	b940      	cbnz	r0, 8007022 <_swilseek+0x20>
 8007010:	f000 fa40 	bl	8007494 <__errno>
 8007014:	2309      	movs	r3, #9
 8007016:	6003      	str	r3, [r0, #0]
 8007018:	f04f 34ff 	mov.w	r4, #4294967295
 800701c:	4620      	mov	r0, r4
 800701e:	b003      	add	sp, #12
 8007020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007022:	2e02      	cmp	r6, #2
 8007024:	d903      	bls.n	800702e <_swilseek+0x2c>
 8007026:	f000 fa35 	bl	8007494 <__errno>
 800702a:	2316      	movs	r3, #22
 800702c:	e7f3      	b.n	8007016 <_swilseek+0x14>
 800702e:	2e01      	cmp	r6, #1
 8007030:	d112      	bne.n	8007058 <_swilseek+0x56>
 8007032:	6843      	ldr	r3, [r0, #4]
 8007034:	18e4      	adds	r4, r4, r3
 8007036:	d4f6      	bmi.n	8007026 <_swilseek+0x24>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	260a      	movs	r6, #10
 800703c:	e9cd 3400 	strd	r3, r4, [sp]
 8007040:	466f      	mov	r7, sp
 8007042:	4630      	mov	r0, r6
 8007044:	4639      	mov	r1, r7
 8007046:	beab      	bkpt	0x00ab
 8007048:	4606      	mov	r6, r0
 800704a:	4630      	mov	r0, r6
 800704c:	f7ff ffa8 	bl	8006fa0 <checkerror>
 8007050:	2800      	cmp	r0, #0
 8007052:	dbe1      	blt.n	8007018 <_swilseek+0x16>
 8007054:	606c      	str	r4, [r5, #4]
 8007056:	e7e1      	b.n	800701c <_swilseek+0x1a>
 8007058:	2e02      	cmp	r6, #2
 800705a:	d1ed      	bne.n	8007038 <_swilseek+0x36>
 800705c:	6803      	ldr	r3, [r0, #0]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	260c      	movs	r6, #12
 8007062:	466f      	mov	r7, sp
 8007064:	4630      	mov	r0, r6
 8007066:	4639      	mov	r1, r7
 8007068:	beab      	bkpt	0x00ab
 800706a:	4606      	mov	r6, r0
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff ff97 	bl	8006fa0 <checkerror>
 8007072:	1c43      	adds	r3, r0, #1
 8007074:	d0d0      	beq.n	8007018 <_swilseek+0x16>
 8007076:	4404      	add	r4, r0
 8007078:	e7de      	b.n	8007038 <_swilseek+0x36>

0800707a <_lseek>:
 800707a:	f7ff bfc2 	b.w	8007002 <_swilseek>

0800707e <_swiwrite>:
 800707e:	b530      	push	{r4, r5, lr}
 8007080:	b085      	sub	sp, #20
 8007082:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007086:	9203      	str	r2, [sp, #12]
 8007088:	2405      	movs	r4, #5
 800708a:	ad01      	add	r5, sp, #4
 800708c:	4620      	mov	r0, r4
 800708e:	4629      	mov	r1, r5
 8007090:	beab      	bkpt	0x00ab
 8007092:	4604      	mov	r4, r0
 8007094:	4620      	mov	r0, r4
 8007096:	f7ff ff83 	bl	8006fa0 <checkerror>
 800709a:	b005      	add	sp, #20
 800709c:	bd30      	pop	{r4, r5, pc}

0800709e <_write>:
 800709e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070a0:	4615      	mov	r5, r2
 80070a2:	9101      	str	r1, [sp, #4]
 80070a4:	f7ff ff54 	bl	8006f50 <findslot>
 80070a8:	9901      	ldr	r1, [sp, #4]
 80070aa:	4604      	mov	r4, r0
 80070ac:	b930      	cbnz	r0, 80070bc <_write+0x1e>
 80070ae:	f000 f9f1 	bl	8007494 <__errno>
 80070b2:	2309      	movs	r3, #9
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ba:	e012      	b.n	80070e2 <_write+0x44>
 80070bc:	6800      	ldr	r0, [r0, #0]
 80070be:	462a      	mov	r2, r5
 80070c0:	f7ff ffdd 	bl	800707e <_swiwrite>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	dbf6      	blt.n	80070b6 <_write+0x18>
 80070c8:	6862      	ldr	r2, [r4, #4]
 80070ca:	1a2b      	subs	r3, r5, r0
 80070cc:	441a      	add	r2, r3
 80070ce:	42a8      	cmp	r0, r5
 80070d0:	6062      	str	r2, [r4, #4]
 80070d2:	d105      	bne.n	80070e0 <_write+0x42>
 80070d4:	2000      	movs	r0, #0
 80070d6:	b003      	add	sp, #12
 80070d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070dc:	f7ff bf52 	b.w	8006f84 <error>
 80070e0:	4618      	mov	r0, r3
 80070e2:	b003      	add	sp, #12
 80070e4:	bd30      	pop	{r4, r5, pc}

080070e6 <_swiclose>:
 80070e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070e8:	2402      	movs	r4, #2
 80070ea:	9001      	str	r0, [sp, #4]
 80070ec:	ad01      	add	r5, sp, #4
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	beab      	bkpt	0x00ab
 80070f4:	4604      	mov	r4, r0
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff ff52 	bl	8006fa0 <checkerror>
 80070fc:	b003      	add	sp, #12
 80070fe:	bd30      	pop	{r4, r5, pc}

08007100 <_close>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4605      	mov	r5, r0
 8007104:	f7ff ff24 	bl	8006f50 <findslot>
 8007108:	4604      	mov	r4, r0
 800710a:	b930      	cbnz	r0, 800711a <_close+0x1a>
 800710c:	f000 f9c2 	bl	8007494 <__errno>
 8007110:	2309      	movs	r3, #9
 8007112:	6003      	str	r3, [r0, #0]
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	bd38      	pop	{r3, r4, r5, pc}
 800711a:	3d01      	subs	r5, #1
 800711c:	2d01      	cmp	r5, #1
 800711e:	d809      	bhi.n	8007134 <_close+0x34>
 8007120:	4b09      	ldr	r3, [pc, #36]	; (8007148 <_close+0x48>)
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	429a      	cmp	r2, r3
 8007128:	d104      	bne.n	8007134 <_close+0x34>
 800712a:	f04f 33ff 	mov.w	r3, #4294967295
 800712e:	6003      	str	r3, [r0, #0]
 8007130:	2000      	movs	r0, #0
 8007132:	e7f1      	b.n	8007118 <_close+0x18>
 8007134:	6820      	ldr	r0, [r4, #0]
 8007136:	f7ff ffd6 	bl	80070e6 <_swiclose>
 800713a:	2800      	cmp	r0, #0
 800713c:	d1ec      	bne.n	8007118 <_close+0x18>
 800713e:	f04f 33ff 	mov.w	r3, #4294967295
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	e7e8      	b.n	8007118 <_close+0x18>
 8007146:	bf00      	nop
 8007148:	200006c4 	.word	0x200006c4

0800714c <_swistat>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	460c      	mov	r4, r1
 8007150:	f7ff fefe 	bl	8006f50 <findslot>
 8007154:	4605      	mov	r5, r0
 8007156:	b930      	cbnz	r0, 8007166 <_swistat+0x1a>
 8007158:	f000 f99c 	bl	8007494 <__errno>
 800715c:	2309      	movs	r3, #9
 800715e:	6003      	str	r3, [r0, #0]
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	6863      	ldr	r3, [r4, #4]
 8007168:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800716c:	6063      	str	r3, [r4, #4]
 800716e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007172:	64a3      	str	r3, [r4, #72]	; 0x48
 8007174:	260c      	movs	r6, #12
 8007176:	4630      	mov	r0, r6
 8007178:	4629      	mov	r1, r5
 800717a:	beab      	bkpt	0x00ab
 800717c:	4605      	mov	r5, r0
 800717e:	4628      	mov	r0, r5
 8007180:	f7ff ff0e 	bl	8006fa0 <checkerror>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	bf1c      	itt	ne
 8007188:	6120      	strne	r0, [r4, #16]
 800718a:	2000      	movne	r0, #0
 800718c:	e7ea      	b.n	8007164 <_swistat+0x18>

0800718e <_fstat>:
 800718e:	460b      	mov	r3, r1
 8007190:	b510      	push	{r4, lr}
 8007192:	2100      	movs	r1, #0
 8007194:	4604      	mov	r4, r0
 8007196:	2258      	movs	r2, #88	; 0x58
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fa9e 	bl	80076da <memset>
 800719e:	4601      	mov	r1, r0
 80071a0:	4620      	mov	r0, r4
 80071a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a6:	f7ff bfd1 	b.w	800714c <_swistat>

080071aa <_stat>:
 80071aa:	b538      	push	{r3, r4, r5, lr}
 80071ac:	460d      	mov	r5, r1
 80071ae:	4604      	mov	r4, r0
 80071b0:	2258      	movs	r2, #88	; 0x58
 80071b2:	2100      	movs	r1, #0
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 fa90 	bl	80076da <memset>
 80071ba:	4620      	mov	r0, r4
 80071bc:	2100      	movs	r1, #0
 80071be:	f000 f811 	bl	80071e4 <_swiopen>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	4604      	mov	r4, r0
 80071c6:	d00b      	beq.n	80071e0 <_stat+0x36>
 80071c8:	686b      	ldr	r3, [r5, #4]
 80071ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80071ce:	606b      	str	r3, [r5, #4]
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7ff ffbb 	bl	800714c <_swistat>
 80071d6:	4605      	mov	r5, r0
 80071d8:	4620      	mov	r0, r4
 80071da:	f7ff ff91 	bl	8007100 <_close>
 80071de:	462c      	mov	r4, r5
 80071e0:	4620      	mov	r0, r4
 80071e2:	bd38      	pop	{r3, r4, r5, pc}

080071e4 <_swiopen>:
 80071e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071e8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8007294 <_swiopen+0xb0>
 80071ec:	b097      	sub	sp, #92	; 0x5c
 80071ee:	4607      	mov	r7, r0
 80071f0:	460e      	mov	r6, r1
 80071f2:	2500      	movs	r5, #0
 80071f4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80071f8:	1c61      	adds	r1, r4, #1
 80071fa:	d037      	beq.n	800726c <_swiopen+0x88>
 80071fc:	3501      	adds	r5, #1
 80071fe:	2d14      	cmp	r5, #20
 8007200:	d1f8      	bne.n	80071f4 <_swiopen+0x10>
 8007202:	f000 f947 	bl	8007494 <__errno>
 8007206:	2318      	movs	r3, #24
 8007208:	6003      	str	r3, [r0, #0]
 800720a:	f04f 34ff 	mov.w	r4, #4294967295
 800720e:	e03d      	b.n	800728c <_swiopen+0xa8>
 8007210:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8007214:	f240 6301 	movw	r3, #1537	; 0x601
 8007218:	07b2      	lsls	r2, r6, #30
 800721a:	bf48      	it	mi
 800721c:	f044 0402 	orrmi.w	r4, r4, #2
 8007220:	421e      	tst	r6, r3
 8007222:	bf18      	it	ne
 8007224:	f044 0404 	orrne.w	r4, r4, #4
 8007228:	0733      	lsls	r3, r6, #28
 800722a:	bf48      	it	mi
 800722c:	f024 0404 	bicmi.w	r4, r4, #4
 8007230:	4638      	mov	r0, r7
 8007232:	bf48      	it	mi
 8007234:	f044 0408 	orrmi.w	r4, r4, #8
 8007238:	9700      	str	r7, [sp, #0]
 800723a:	f7f9 f801 	bl	8000240 <strlen>
 800723e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8007242:	2401      	movs	r4, #1
 8007244:	4620      	mov	r0, r4
 8007246:	4649      	mov	r1, r9
 8007248:	beab      	bkpt	0x00ab
 800724a:	4604      	mov	r4, r0
 800724c:	2c00      	cmp	r4, #0
 800724e:	db08      	blt.n	8007262 <_swiopen+0x7e>
 8007250:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8007254:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8007258:	2300      	movs	r3, #0
 800725a:	f8c8 3004 	str.w	r3, [r8, #4]
 800725e:	462c      	mov	r4, r5
 8007260:	e014      	b.n	800728c <_swiopen+0xa8>
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff fe8e 	bl	8006f84 <error>
 8007268:	4604      	mov	r4, r0
 800726a:	e00f      	b.n	800728c <_swiopen+0xa8>
 800726c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8007270:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007274:	46e9      	mov	r9, sp
 8007276:	d1cb      	bne.n	8007210 <_swiopen+0x2c>
 8007278:	4649      	mov	r1, r9
 800727a:	4638      	mov	r0, r7
 800727c:	f7ff ff95 	bl	80071aa <_stat>
 8007280:	3001      	adds	r0, #1
 8007282:	d0c5      	beq.n	8007210 <_swiopen+0x2c>
 8007284:	f000 f906 	bl	8007494 <__errno>
 8007288:	2311      	movs	r3, #17
 800728a:	6003      	str	r3, [r0, #0]
 800728c:	4620      	mov	r0, r4
 800728e:	b017      	add	sp, #92	; 0x5c
 8007290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007294:	200006c4 	.word	0x200006c4

08007298 <_get_semihosting_exts>:
 8007298:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800729c:	4606      	mov	r6, r0
 800729e:	460f      	mov	r7, r1
 80072a0:	482a      	ldr	r0, [pc, #168]	; (800734c <_get_semihosting_exts+0xb4>)
 80072a2:	2100      	movs	r1, #0
 80072a4:	4615      	mov	r5, r2
 80072a6:	f7ff ff9d 	bl	80071e4 <_swiopen>
 80072aa:	462a      	mov	r2, r5
 80072ac:	4604      	mov	r4, r0
 80072ae:	2100      	movs	r1, #0
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 fa12 	bl	80076da <memset>
 80072b6:	1c63      	adds	r3, r4, #1
 80072b8:	d016      	beq.n	80072e8 <_get_semihosting_exts+0x50>
 80072ba:	4620      	mov	r0, r4
 80072bc:	f7ff fe48 	bl	8006f50 <findslot>
 80072c0:	f04f 090c 	mov.w	r9, #12
 80072c4:	4680      	mov	r8, r0
 80072c6:	4648      	mov	r0, r9
 80072c8:	4641      	mov	r1, r8
 80072ca:	beab      	bkpt	0x00ab
 80072cc:	4680      	mov	r8, r0
 80072ce:	4640      	mov	r0, r8
 80072d0:	f7ff fe66 	bl	8006fa0 <checkerror>
 80072d4:	2803      	cmp	r0, #3
 80072d6:	dd02      	ble.n	80072de <_get_semihosting_exts+0x46>
 80072d8:	1ec3      	subs	r3, r0, #3
 80072da:	42ab      	cmp	r3, r5
 80072dc:	dc08      	bgt.n	80072f0 <_get_semihosting_exts+0x58>
 80072de:	4620      	mov	r0, r4
 80072e0:	f7ff ff0e 	bl	8007100 <_close>
 80072e4:	f04f 34ff 	mov.w	r4, #4294967295
 80072e8:	4620      	mov	r0, r4
 80072ea:	b003      	add	sp, #12
 80072ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072f0:	2204      	movs	r2, #4
 80072f2:	eb0d 0102 	add.w	r1, sp, r2
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7ff fe67 	bl	8006fca <_read>
 80072fc:	2803      	cmp	r0, #3
 80072fe:	ddee      	ble.n	80072de <_get_semihosting_exts+0x46>
 8007300:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007304:	2b53      	cmp	r3, #83	; 0x53
 8007306:	d1ea      	bne.n	80072de <_get_semihosting_exts+0x46>
 8007308:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800730c:	2b48      	cmp	r3, #72	; 0x48
 800730e:	d1e6      	bne.n	80072de <_get_semihosting_exts+0x46>
 8007310:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007314:	2b46      	cmp	r3, #70	; 0x46
 8007316:	d1e2      	bne.n	80072de <_get_semihosting_exts+0x46>
 8007318:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800731c:	2b42      	cmp	r3, #66	; 0x42
 800731e:	d1de      	bne.n	80072de <_get_semihosting_exts+0x46>
 8007320:	2201      	movs	r2, #1
 8007322:	4639      	mov	r1, r7
 8007324:	4620      	mov	r0, r4
 8007326:	f7ff fe6c 	bl	8007002 <_swilseek>
 800732a:	2800      	cmp	r0, #0
 800732c:	dbd7      	blt.n	80072de <_get_semihosting_exts+0x46>
 800732e:	462a      	mov	r2, r5
 8007330:	4631      	mov	r1, r6
 8007332:	4620      	mov	r0, r4
 8007334:	f7ff fe49 	bl	8006fca <_read>
 8007338:	4605      	mov	r5, r0
 800733a:	4620      	mov	r0, r4
 800733c:	f7ff fee0 	bl	8007100 <_close>
 8007340:	4628      	mov	r0, r5
 8007342:	f7ff fe2d 	bl	8006fa0 <checkerror>
 8007346:	4604      	mov	r4, r0
 8007348:	e7ce      	b.n	80072e8 <_get_semihosting_exts+0x50>
 800734a:	bf00      	nop
 800734c:	080085a4 	.word	0x080085a4

08007350 <initialise_semihosting_exts>:
 8007350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007352:	4d0a      	ldr	r5, [pc, #40]	; (800737c <initialise_semihosting_exts+0x2c>)
 8007354:	4c0a      	ldr	r4, [pc, #40]	; (8007380 <initialise_semihosting_exts+0x30>)
 8007356:	2100      	movs	r1, #0
 8007358:	2201      	movs	r2, #1
 800735a:	a801      	add	r0, sp, #4
 800735c:	6029      	str	r1, [r5, #0]
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	f7ff ff9a 	bl	8007298 <_get_semihosting_exts>
 8007364:	2800      	cmp	r0, #0
 8007366:	dd07      	ble.n	8007378 <initialise_semihosting_exts+0x28>
 8007368:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800736c:	f003 0201 	and.w	r2, r3, #1
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	602a      	str	r2, [r5, #0]
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	b003      	add	sp, #12
 800737a:	bd30      	pop	{r4, r5, pc}
 800737c:	20000010 	.word	0x20000010
 8007380:	20000014 	.word	0x20000014

08007384 <_has_ext_stdout_stderr>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4c04      	ldr	r4, [pc, #16]	; (8007398 <_has_ext_stdout_stderr+0x14>)
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	da01      	bge.n	8007392 <_has_ext_stdout_stderr+0xe>
 800738e:	f7ff ffdf 	bl	8007350 <initialise_semihosting_exts>
 8007392:	6820      	ldr	r0, [r4, #0]
 8007394:	bd10      	pop	{r4, pc}
 8007396:	bf00      	nop
 8007398:	20000014 	.word	0x20000014

0800739c <initialise_monitor_handles>:
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	b085      	sub	sp, #20
 80073a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007454 <initialise_monitor_handles+0xb8>
 80073a6:	f8cd 9004 	str.w	r9, [sp, #4]
 80073aa:	2303      	movs	r3, #3
 80073ac:	2400      	movs	r4, #0
 80073ae:	9303      	str	r3, [sp, #12]
 80073b0:	af01      	add	r7, sp, #4
 80073b2:	9402      	str	r4, [sp, #8]
 80073b4:	2501      	movs	r5, #1
 80073b6:	4628      	mov	r0, r5
 80073b8:	4639      	mov	r1, r7
 80073ba:	beab      	bkpt	0x00ab
 80073bc:	4605      	mov	r5, r0
 80073be:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007458 <initialise_monitor_handles+0xbc>
 80073c2:	4623      	mov	r3, r4
 80073c4:	4c20      	ldr	r4, [pc, #128]	; (8007448 <initialise_monitor_handles+0xac>)
 80073c6:	f8c8 5000 	str.w	r5, [r8]
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295
 80073ce:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80073d2:	3301      	adds	r3, #1
 80073d4:	2b14      	cmp	r3, #20
 80073d6:	d1fa      	bne.n	80073ce <initialise_monitor_handles+0x32>
 80073d8:	f7ff ffd4 	bl	8007384 <_has_ext_stdout_stderr>
 80073dc:	4d1b      	ldr	r5, [pc, #108]	; (800744c <initialise_monitor_handles+0xb0>)
 80073de:	b1d0      	cbz	r0, 8007416 <initialise_monitor_handles+0x7a>
 80073e0:	f04f 0a03 	mov.w	sl, #3
 80073e4:	2304      	movs	r3, #4
 80073e6:	f8cd 9004 	str.w	r9, [sp, #4]
 80073ea:	2601      	movs	r6, #1
 80073ec:	f8cd a00c 	str.w	sl, [sp, #12]
 80073f0:	9302      	str	r3, [sp, #8]
 80073f2:	4630      	mov	r0, r6
 80073f4:	4639      	mov	r1, r7
 80073f6:	beab      	bkpt	0x00ab
 80073f8:	4683      	mov	fp, r0
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <initialise_monitor_handles+0xb4>)
 80073fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007400:	f8c3 b000 	str.w	fp, [r3]
 8007404:	2308      	movs	r3, #8
 8007406:	f8cd a00c 	str.w	sl, [sp, #12]
 800740a:	9302      	str	r3, [sp, #8]
 800740c:	4630      	mov	r0, r6
 800740e:	4639      	mov	r1, r7
 8007410:	beab      	bkpt	0x00ab
 8007412:	4606      	mov	r6, r0
 8007414:	602e      	str	r6, [r5, #0]
 8007416:	682b      	ldr	r3, [r5, #0]
 8007418:	3301      	adds	r3, #1
 800741a:	bf02      	ittt	eq
 800741c:	4b0c      	ldreq	r3, [pc, #48]	; (8007450 <initialise_monitor_handles+0xb4>)
 800741e:	681b      	ldreq	r3, [r3, #0]
 8007420:	602b      	streq	r3, [r5, #0]
 8007422:	2600      	movs	r6, #0
 8007424:	f8d8 3000 	ldr.w	r3, [r8]
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	6066      	str	r6, [r4, #4]
 800742c:	f7ff ffaa 	bl	8007384 <_has_ext_stdout_stderr>
 8007430:	b130      	cbz	r0, 8007440 <initialise_monitor_handles+0xa4>
 8007432:	4b07      	ldr	r3, [pc, #28]	; (8007450 <initialise_monitor_handles+0xb4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800743a:	682b      	ldr	r3, [r5, #0]
 800743c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007440:	b005      	add	sp, #20
 8007442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007446:	bf00      	nop
 8007448:	200006c4 	.word	0x200006c4
 800744c:	200006b8 	.word	0x200006b8
 8007450:	200006c0 	.word	0x200006c0
 8007454:	080085ba 	.word	0x080085ba
 8007458:	200006bc 	.word	0x200006bc

0800745c <_isatty>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	f7ff fd77 	bl	8006f50 <findslot>
 8007462:	2509      	movs	r5, #9
 8007464:	4604      	mov	r4, r0
 8007466:	b920      	cbnz	r0, 8007472 <_isatty+0x16>
 8007468:	f000 f814 	bl	8007494 <__errno>
 800746c:	6005      	str	r5, [r0, #0]
 800746e:	4620      	mov	r0, r4
 8007470:	bd70      	pop	{r4, r5, r6, pc}
 8007472:	4628      	mov	r0, r5
 8007474:	4621      	mov	r1, r4
 8007476:	beab      	bkpt	0x00ab
 8007478:	4604      	mov	r4, r0
 800747a:	2c01      	cmp	r4, #1
 800747c:	d0f7      	beq.n	800746e <_isatty+0x12>
 800747e:	f000 f809 	bl	8007494 <__errno>
 8007482:	2400      	movs	r4, #0
 8007484:	4605      	mov	r5, r0
 8007486:	2613      	movs	r6, #19
 8007488:	4630      	mov	r0, r6
 800748a:	4621      	mov	r1, r4
 800748c:	beab      	bkpt	0x00ab
 800748e:	4606      	mov	r6, r0
 8007490:	602e      	str	r6, [r5, #0]
 8007492:	e7ec      	b.n	800746e <_isatty+0x12>

08007494 <__errno>:
 8007494:	4b01      	ldr	r3, [pc, #4]	; (800749c <__errno+0x8>)
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	20000018 	.word	0x20000018

080074a0 <std>:
 80074a0:	2300      	movs	r3, #0
 80074a2:	b510      	push	{r4, lr}
 80074a4:	4604      	mov	r4, r0
 80074a6:	e9c0 3300 	strd	r3, r3, [r0]
 80074aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074ae:	6083      	str	r3, [r0, #8]
 80074b0:	8181      	strh	r1, [r0, #12]
 80074b2:	6643      	str	r3, [r0, #100]	; 0x64
 80074b4:	81c2      	strh	r2, [r0, #14]
 80074b6:	6183      	str	r3, [r0, #24]
 80074b8:	4619      	mov	r1, r3
 80074ba:	2208      	movs	r2, #8
 80074bc:	305c      	adds	r0, #92	; 0x5c
 80074be:	f000 f90c 	bl	80076da <memset>
 80074c2:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <std+0x38>)
 80074c4:	6263      	str	r3, [r4, #36]	; 0x24
 80074c6:	4b05      	ldr	r3, [pc, #20]	; (80074dc <std+0x3c>)
 80074c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80074ca:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <std+0x40>)
 80074cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074ce:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <std+0x44>)
 80074d0:	6224      	str	r4, [r4, #32]
 80074d2:	6323      	str	r3, [r4, #48]	; 0x30
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	bf00      	nop
 80074d8:	08007951 	.word	0x08007951
 80074dc:	08007973 	.word	0x08007973
 80074e0:	080079ab 	.word	0x080079ab
 80074e4:	080079cf 	.word	0x080079cf

080074e8 <_cleanup_r>:
 80074e8:	4901      	ldr	r1, [pc, #4]	; (80074f0 <_cleanup_r+0x8>)
 80074ea:	f000 b8af 	b.w	800764c <_fwalk_reent>
 80074ee:	bf00      	nop
 80074f0:	08007ca9 	.word	0x08007ca9

080074f4 <__sfmoreglue>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	2268      	movs	r2, #104	; 0x68
 80074f8:	1e4d      	subs	r5, r1, #1
 80074fa:	4355      	muls	r5, r2
 80074fc:	460e      	mov	r6, r1
 80074fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007502:	f000 f913 	bl	800772c <_malloc_r>
 8007506:	4604      	mov	r4, r0
 8007508:	b140      	cbz	r0, 800751c <__sfmoreglue+0x28>
 800750a:	2100      	movs	r1, #0
 800750c:	e9c0 1600 	strd	r1, r6, [r0]
 8007510:	300c      	adds	r0, #12
 8007512:	60a0      	str	r0, [r4, #8]
 8007514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007518:	f000 f8df 	bl	80076da <memset>
 800751c:	4620      	mov	r0, r4
 800751e:	bd70      	pop	{r4, r5, r6, pc}

08007520 <__sfp_lock_acquire>:
 8007520:	4801      	ldr	r0, [pc, #4]	; (8007528 <__sfp_lock_acquire+0x8>)
 8007522:	f000 b8d8 	b.w	80076d6 <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	20000765 	.word	0x20000765

0800752c <__sfp_lock_release>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__sfp_lock_release+0x8>)
 800752e:	f000 b8d3 	b.w	80076d8 <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	20000765 	.word	0x20000765

08007538 <__sinit_lock_acquire>:
 8007538:	4801      	ldr	r0, [pc, #4]	; (8007540 <__sinit_lock_acquire+0x8>)
 800753a:	f000 b8cc 	b.w	80076d6 <__retarget_lock_acquire_recursive>
 800753e:	bf00      	nop
 8007540:	20000766 	.word	0x20000766

08007544 <__sinit_lock_release>:
 8007544:	4801      	ldr	r0, [pc, #4]	; (800754c <__sinit_lock_release+0x8>)
 8007546:	f000 b8c7 	b.w	80076d8 <__retarget_lock_release_recursive>
 800754a:	bf00      	nop
 800754c:	20000766 	.word	0x20000766

08007550 <__sinit>:
 8007550:	b510      	push	{r4, lr}
 8007552:	4604      	mov	r4, r0
 8007554:	f7ff fff0 	bl	8007538 <__sinit_lock_acquire>
 8007558:	69a3      	ldr	r3, [r4, #24]
 800755a:	b11b      	cbz	r3, 8007564 <__sinit+0x14>
 800755c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007560:	f7ff bff0 	b.w	8007544 <__sinit_lock_release>
 8007564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007568:	6523      	str	r3, [r4, #80]	; 0x50
 800756a:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <__sinit+0x68>)
 800756c:	4a13      	ldr	r2, [pc, #76]	; (80075bc <__sinit+0x6c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	62a2      	str	r2, [r4, #40]	; 0x28
 8007572:	42a3      	cmp	r3, r4
 8007574:	bf04      	itt	eq
 8007576:	2301      	moveq	r3, #1
 8007578:	61a3      	streq	r3, [r4, #24]
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f820 	bl	80075c0 <__sfp>
 8007580:	6060      	str	r0, [r4, #4]
 8007582:	4620      	mov	r0, r4
 8007584:	f000 f81c 	bl	80075c0 <__sfp>
 8007588:	60a0      	str	r0, [r4, #8]
 800758a:	4620      	mov	r0, r4
 800758c:	f000 f818 	bl	80075c0 <__sfp>
 8007590:	2200      	movs	r2, #0
 8007592:	60e0      	str	r0, [r4, #12]
 8007594:	2104      	movs	r1, #4
 8007596:	6860      	ldr	r0, [r4, #4]
 8007598:	f7ff ff82 	bl	80074a0 <std>
 800759c:	68a0      	ldr	r0, [r4, #8]
 800759e:	2201      	movs	r2, #1
 80075a0:	2109      	movs	r1, #9
 80075a2:	f7ff ff7d 	bl	80074a0 <std>
 80075a6:	68e0      	ldr	r0, [r4, #12]
 80075a8:	2202      	movs	r2, #2
 80075aa:	2112      	movs	r1, #18
 80075ac:	f7ff ff78 	bl	80074a0 <std>
 80075b0:	2301      	movs	r3, #1
 80075b2:	61a3      	str	r3, [r4, #24]
 80075b4:	e7d2      	b.n	800755c <__sinit+0xc>
 80075b6:	bf00      	nop
 80075b8:	08008620 	.word	0x08008620
 80075bc:	080074e9 	.word	0x080074e9

080075c0 <__sfp>:
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	4607      	mov	r7, r0
 80075c4:	f7ff ffac 	bl	8007520 <__sfp_lock_acquire>
 80075c8:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <__sfp+0x84>)
 80075ca:	681e      	ldr	r6, [r3, #0]
 80075cc:	69b3      	ldr	r3, [r6, #24]
 80075ce:	b913      	cbnz	r3, 80075d6 <__sfp+0x16>
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7ff ffbd 	bl	8007550 <__sinit>
 80075d6:	3648      	adds	r6, #72	; 0x48
 80075d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075dc:	3b01      	subs	r3, #1
 80075de:	d503      	bpl.n	80075e8 <__sfp+0x28>
 80075e0:	6833      	ldr	r3, [r6, #0]
 80075e2:	b30b      	cbz	r3, 8007628 <__sfp+0x68>
 80075e4:	6836      	ldr	r6, [r6, #0]
 80075e6:	e7f7      	b.n	80075d8 <__sfp+0x18>
 80075e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075ec:	b9d5      	cbnz	r5, 8007624 <__sfp+0x64>
 80075ee:	4b16      	ldr	r3, [pc, #88]	; (8007648 <__sfp+0x88>)
 80075f0:	60e3      	str	r3, [r4, #12]
 80075f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075f6:	6665      	str	r5, [r4, #100]	; 0x64
 80075f8:	f000 f86c 	bl	80076d4 <__retarget_lock_init_recursive>
 80075fc:	f7ff ff96 	bl	800752c <__sfp_lock_release>
 8007600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007608:	6025      	str	r5, [r4, #0]
 800760a:	61a5      	str	r5, [r4, #24]
 800760c:	2208      	movs	r2, #8
 800760e:	4629      	mov	r1, r5
 8007610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007614:	f000 f861 	bl	80076da <memset>
 8007618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800761c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007620:	4620      	mov	r0, r4
 8007622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007624:	3468      	adds	r4, #104	; 0x68
 8007626:	e7d9      	b.n	80075dc <__sfp+0x1c>
 8007628:	2104      	movs	r1, #4
 800762a:	4638      	mov	r0, r7
 800762c:	f7ff ff62 	bl	80074f4 <__sfmoreglue>
 8007630:	4604      	mov	r4, r0
 8007632:	6030      	str	r0, [r6, #0]
 8007634:	2800      	cmp	r0, #0
 8007636:	d1d5      	bne.n	80075e4 <__sfp+0x24>
 8007638:	f7ff ff78 	bl	800752c <__sfp_lock_release>
 800763c:	230c      	movs	r3, #12
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	e7ee      	b.n	8007620 <__sfp+0x60>
 8007642:	bf00      	nop
 8007644:	08008620 	.word	0x08008620
 8007648:	ffff0001 	.word	0xffff0001

0800764c <_fwalk_reent>:
 800764c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007650:	4606      	mov	r6, r0
 8007652:	4688      	mov	r8, r1
 8007654:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007658:	2700      	movs	r7, #0
 800765a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800765e:	f1b9 0901 	subs.w	r9, r9, #1
 8007662:	d505      	bpl.n	8007670 <_fwalk_reent+0x24>
 8007664:	6824      	ldr	r4, [r4, #0]
 8007666:	2c00      	cmp	r4, #0
 8007668:	d1f7      	bne.n	800765a <_fwalk_reent+0xe>
 800766a:	4638      	mov	r0, r7
 800766c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007670:	89ab      	ldrh	r3, [r5, #12]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d907      	bls.n	8007686 <_fwalk_reent+0x3a>
 8007676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800767a:	3301      	adds	r3, #1
 800767c:	d003      	beq.n	8007686 <_fwalk_reent+0x3a>
 800767e:	4629      	mov	r1, r5
 8007680:	4630      	mov	r0, r6
 8007682:	47c0      	blx	r8
 8007684:	4307      	orrs	r7, r0
 8007686:	3568      	adds	r5, #104	; 0x68
 8007688:	e7e9      	b.n	800765e <_fwalk_reent+0x12>
	...

0800768c <__libc_init_array>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	4d0d      	ldr	r5, [pc, #52]	; (80076c4 <__libc_init_array+0x38>)
 8007690:	4c0d      	ldr	r4, [pc, #52]	; (80076c8 <__libc_init_array+0x3c>)
 8007692:	1b64      	subs	r4, r4, r5
 8007694:	10a4      	asrs	r4, r4, #2
 8007696:	2600      	movs	r6, #0
 8007698:	42a6      	cmp	r6, r4
 800769a:	d109      	bne.n	80076b0 <__libc_init_array+0x24>
 800769c:	4d0b      	ldr	r5, [pc, #44]	; (80076cc <__libc_init_array+0x40>)
 800769e:	4c0c      	ldr	r4, [pc, #48]	; (80076d0 <__libc_init_array+0x44>)
 80076a0:	f000 ff30 	bl	8008504 <_init>
 80076a4:	1b64      	subs	r4, r4, r5
 80076a6:	10a4      	asrs	r4, r4, #2
 80076a8:	2600      	movs	r6, #0
 80076aa:	42a6      	cmp	r6, r4
 80076ac:	d105      	bne.n	80076ba <__libc_init_array+0x2e>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b4:	4798      	blx	r3
 80076b6:	3601      	adds	r6, #1
 80076b8:	e7ee      	b.n	8007698 <__libc_init_array+0xc>
 80076ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80076be:	4798      	blx	r3
 80076c0:	3601      	adds	r6, #1
 80076c2:	e7f2      	b.n	80076aa <__libc_init_array+0x1e>
 80076c4:	08008660 	.word	0x08008660
 80076c8:	08008660 	.word	0x08008660
 80076cc:	08008660 	.word	0x08008660
 80076d0:	08008664 	.word	0x08008664

080076d4 <__retarget_lock_init_recursive>:
 80076d4:	4770      	bx	lr

080076d6 <__retarget_lock_acquire_recursive>:
 80076d6:	4770      	bx	lr

080076d8 <__retarget_lock_release_recursive>:
 80076d8:	4770      	bx	lr

080076da <memset>:
 80076da:	4402      	add	r2, r0
 80076dc:	4603      	mov	r3, r0
 80076de:	4293      	cmp	r3, r2
 80076e0:	d100      	bne.n	80076e4 <memset+0xa>
 80076e2:	4770      	bx	lr
 80076e4:	f803 1b01 	strb.w	r1, [r3], #1
 80076e8:	e7f9      	b.n	80076de <memset+0x4>
	...

080076ec <sbrk_aligned>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	4e0e      	ldr	r6, [pc, #56]	; (8007728 <sbrk_aligned+0x3c>)
 80076f0:	460c      	mov	r4, r1
 80076f2:	6831      	ldr	r1, [r6, #0]
 80076f4:	4605      	mov	r5, r0
 80076f6:	b911      	cbnz	r1, 80076fe <sbrk_aligned+0x12>
 80076f8:	f000 f91a 	bl	8007930 <_sbrk_r>
 80076fc:	6030      	str	r0, [r6, #0]
 80076fe:	4621      	mov	r1, r4
 8007700:	4628      	mov	r0, r5
 8007702:	f000 f915 	bl	8007930 <_sbrk_r>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d00a      	beq.n	8007720 <sbrk_aligned+0x34>
 800770a:	1cc4      	adds	r4, r0, #3
 800770c:	f024 0403 	bic.w	r4, r4, #3
 8007710:	42a0      	cmp	r0, r4
 8007712:	d007      	beq.n	8007724 <sbrk_aligned+0x38>
 8007714:	1a21      	subs	r1, r4, r0
 8007716:	4628      	mov	r0, r5
 8007718:	f000 f90a 	bl	8007930 <_sbrk_r>
 800771c:	3001      	adds	r0, #1
 800771e:	d101      	bne.n	8007724 <sbrk_aligned+0x38>
 8007720:	f04f 34ff 	mov.w	r4, #4294967295
 8007724:	4620      	mov	r0, r4
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	2000076c 	.word	0x2000076c

0800772c <_malloc_r>:
 800772c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007730:	1ccd      	adds	r5, r1, #3
 8007732:	f025 0503 	bic.w	r5, r5, #3
 8007736:	3508      	adds	r5, #8
 8007738:	2d0c      	cmp	r5, #12
 800773a:	bf38      	it	cc
 800773c:	250c      	movcc	r5, #12
 800773e:	2d00      	cmp	r5, #0
 8007740:	4607      	mov	r7, r0
 8007742:	db01      	blt.n	8007748 <_malloc_r+0x1c>
 8007744:	42a9      	cmp	r1, r5
 8007746:	d905      	bls.n	8007754 <_malloc_r+0x28>
 8007748:	230c      	movs	r3, #12
 800774a:	603b      	str	r3, [r7, #0]
 800774c:	2600      	movs	r6, #0
 800774e:	4630      	mov	r0, r6
 8007750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007754:	4e2e      	ldr	r6, [pc, #184]	; (8007810 <_malloc_r+0xe4>)
 8007756:	f000 fb5b 	bl	8007e10 <__malloc_lock>
 800775a:	6833      	ldr	r3, [r6, #0]
 800775c:	461c      	mov	r4, r3
 800775e:	bb34      	cbnz	r4, 80077ae <_malloc_r+0x82>
 8007760:	4629      	mov	r1, r5
 8007762:	4638      	mov	r0, r7
 8007764:	f7ff ffc2 	bl	80076ec <sbrk_aligned>
 8007768:	1c43      	adds	r3, r0, #1
 800776a:	4604      	mov	r4, r0
 800776c:	d14d      	bne.n	800780a <_malloc_r+0xde>
 800776e:	6834      	ldr	r4, [r6, #0]
 8007770:	4626      	mov	r6, r4
 8007772:	2e00      	cmp	r6, #0
 8007774:	d140      	bne.n	80077f8 <_malloc_r+0xcc>
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	4631      	mov	r1, r6
 800777a:	4638      	mov	r0, r7
 800777c:	eb04 0803 	add.w	r8, r4, r3
 8007780:	f000 f8d6 	bl	8007930 <_sbrk_r>
 8007784:	4580      	cmp	r8, r0
 8007786:	d13a      	bne.n	80077fe <_malloc_r+0xd2>
 8007788:	6821      	ldr	r1, [r4, #0]
 800778a:	3503      	adds	r5, #3
 800778c:	1a6d      	subs	r5, r5, r1
 800778e:	f025 0503 	bic.w	r5, r5, #3
 8007792:	3508      	adds	r5, #8
 8007794:	2d0c      	cmp	r5, #12
 8007796:	bf38      	it	cc
 8007798:	250c      	movcc	r5, #12
 800779a:	4629      	mov	r1, r5
 800779c:	4638      	mov	r0, r7
 800779e:	f7ff ffa5 	bl	80076ec <sbrk_aligned>
 80077a2:	3001      	adds	r0, #1
 80077a4:	d02b      	beq.n	80077fe <_malloc_r+0xd2>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	442b      	add	r3, r5
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	e00e      	b.n	80077cc <_malloc_r+0xa0>
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	1b52      	subs	r2, r2, r5
 80077b2:	d41e      	bmi.n	80077f2 <_malloc_r+0xc6>
 80077b4:	2a0b      	cmp	r2, #11
 80077b6:	d916      	bls.n	80077e6 <_malloc_r+0xba>
 80077b8:	1961      	adds	r1, r4, r5
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	6025      	str	r5, [r4, #0]
 80077be:	bf18      	it	ne
 80077c0:	6059      	strne	r1, [r3, #4]
 80077c2:	6863      	ldr	r3, [r4, #4]
 80077c4:	bf08      	it	eq
 80077c6:	6031      	streq	r1, [r6, #0]
 80077c8:	5162      	str	r2, [r4, r5]
 80077ca:	604b      	str	r3, [r1, #4]
 80077cc:	4638      	mov	r0, r7
 80077ce:	f104 060b 	add.w	r6, r4, #11
 80077d2:	f000 fb23 	bl	8007e1c <__malloc_unlock>
 80077d6:	f026 0607 	bic.w	r6, r6, #7
 80077da:	1d23      	adds	r3, r4, #4
 80077dc:	1af2      	subs	r2, r6, r3
 80077de:	d0b6      	beq.n	800774e <_malloc_r+0x22>
 80077e0:	1b9b      	subs	r3, r3, r6
 80077e2:	50a3      	str	r3, [r4, r2]
 80077e4:	e7b3      	b.n	800774e <_malloc_r+0x22>
 80077e6:	6862      	ldr	r2, [r4, #4]
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	bf0c      	ite	eq
 80077ec:	6032      	streq	r2, [r6, #0]
 80077ee:	605a      	strne	r2, [r3, #4]
 80077f0:	e7ec      	b.n	80077cc <_malloc_r+0xa0>
 80077f2:	4623      	mov	r3, r4
 80077f4:	6864      	ldr	r4, [r4, #4]
 80077f6:	e7b2      	b.n	800775e <_malloc_r+0x32>
 80077f8:	4634      	mov	r4, r6
 80077fa:	6876      	ldr	r6, [r6, #4]
 80077fc:	e7b9      	b.n	8007772 <_malloc_r+0x46>
 80077fe:	230c      	movs	r3, #12
 8007800:	603b      	str	r3, [r7, #0]
 8007802:	4638      	mov	r0, r7
 8007804:	f000 fb0a 	bl	8007e1c <__malloc_unlock>
 8007808:	e7a1      	b.n	800774e <_malloc_r+0x22>
 800780a:	6025      	str	r5, [r4, #0]
 800780c:	e7de      	b.n	80077cc <_malloc_r+0xa0>
 800780e:	bf00      	nop
 8007810:	20000768 	.word	0x20000768

08007814 <iprintf>:
 8007814:	b40f      	push	{r0, r1, r2, r3}
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <iprintf+0x2c>)
 8007818:	b513      	push	{r0, r1, r4, lr}
 800781a:	681c      	ldr	r4, [r3, #0]
 800781c:	b124      	cbz	r4, 8007828 <iprintf+0x14>
 800781e:	69a3      	ldr	r3, [r4, #24]
 8007820:	b913      	cbnz	r3, 8007828 <iprintf+0x14>
 8007822:	4620      	mov	r0, r4
 8007824:	f7ff fe94 	bl	8007550 <__sinit>
 8007828:	ab05      	add	r3, sp, #20
 800782a:	9a04      	ldr	r2, [sp, #16]
 800782c:	68a1      	ldr	r1, [r4, #8]
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fb6f 	bl	8007f14 <_vfiprintf_r>
 8007836:	b002      	add	sp, #8
 8007838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800783c:	b004      	add	sp, #16
 800783e:	4770      	bx	lr
 8007840:	20000018 	.word	0x20000018

08007844 <_puts_r>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	460e      	mov	r6, r1
 8007848:	4605      	mov	r5, r0
 800784a:	b118      	cbz	r0, 8007854 <_puts_r+0x10>
 800784c:	6983      	ldr	r3, [r0, #24]
 800784e:	b90b      	cbnz	r3, 8007854 <_puts_r+0x10>
 8007850:	f7ff fe7e 	bl	8007550 <__sinit>
 8007854:	69ab      	ldr	r3, [r5, #24]
 8007856:	68ac      	ldr	r4, [r5, #8]
 8007858:	b913      	cbnz	r3, 8007860 <_puts_r+0x1c>
 800785a:	4628      	mov	r0, r5
 800785c:	f7ff fe78 	bl	8007550 <__sinit>
 8007860:	4b2c      	ldr	r3, [pc, #176]	; (8007914 <_puts_r+0xd0>)
 8007862:	429c      	cmp	r4, r3
 8007864:	d120      	bne.n	80078a8 <_puts_r+0x64>
 8007866:	686c      	ldr	r4, [r5, #4]
 8007868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800786a:	07db      	lsls	r3, r3, #31
 800786c:	d405      	bmi.n	800787a <_puts_r+0x36>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	0598      	lsls	r0, r3, #22
 8007872:	d402      	bmi.n	800787a <_puts_r+0x36>
 8007874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007876:	f7ff ff2e 	bl	80076d6 <__retarget_lock_acquire_recursive>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	0719      	lsls	r1, r3, #28
 800787e:	d51d      	bpl.n	80078bc <_puts_r+0x78>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	b1db      	cbz	r3, 80078bc <_puts_r+0x78>
 8007884:	3e01      	subs	r6, #1
 8007886:	68a3      	ldr	r3, [r4, #8]
 8007888:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800788c:	3b01      	subs	r3, #1
 800788e:	60a3      	str	r3, [r4, #8]
 8007890:	bb39      	cbnz	r1, 80078e2 <_puts_r+0x9e>
 8007892:	2b00      	cmp	r3, #0
 8007894:	da38      	bge.n	8007908 <_puts_r+0xc4>
 8007896:	4622      	mov	r2, r4
 8007898:	210a      	movs	r1, #10
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f89c 	bl	80079d8 <__swbuf_r>
 80078a0:	3001      	adds	r0, #1
 80078a2:	d011      	beq.n	80078c8 <_puts_r+0x84>
 80078a4:	250a      	movs	r5, #10
 80078a6:	e011      	b.n	80078cc <_puts_r+0x88>
 80078a8:	4b1b      	ldr	r3, [pc, #108]	; (8007918 <_puts_r+0xd4>)
 80078aa:	429c      	cmp	r4, r3
 80078ac:	d101      	bne.n	80078b2 <_puts_r+0x6e>
 80078ae:	68ac      	ldr	r4, [r5, #8]
 80078b0:	e7da      	b.n	8007868 <_puts_r+0x24>
 80078b2:	4b1a      	ldr	r3, [pc, #104]	; (800791c <_puts_r+0xd8>)
 80078b4:	429c      	cmp	r4, r3
 80078b6:	bf08      	it	eq
 80078b8:	68ec      	ldreq	r4, [r5, #12]
 80078ba:	e7d5      	b.n	8007868 <_puts_r+0x24>
 80078bc:	4621      	mov	r1, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 f8ee 	bl	8007aa0 <__swsetup_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d0dd      	beq.n	8007884 <_puts_r+0x40>
 80078c8:	f04f 35ff 	mov.w	r5, #4294967295
 80078cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078ce:	07da      	lsls	r2, r3, #31
 80078d0:	d405      	bmi.n	80078de <_puts_r+0x9a>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	059b      	lsls	r3, r3, #22
 80078d6:	d402      	bmi.n	80078de <_puts_r+0x9a>
 80078d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078da:	f7ff fefd 	bl	80076d8 <__retarget_lock_release_recursive>
 80078de:	4628      	mov	r0, r5
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da04      	bge.n	80078f0 <_puts_r+0xac>
 80078e6:	69a2      	ldr	r2, [r4, #24]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	dc06      	bgt.n	80078fa <_puts_r+0xb6>
 80078ec:	290a      	cmp	r1, #10
 80078ee:	d004      	beq.n	80078fa <_puts_r+0xb6>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	6022      	str	r2, [r4, #0]
 80078f6:	7019      	strb	r1, [r3, #0]
 80078f8:	e7c5      	b.n	8007886 <_puts_r+0x42>
 80078fa:	4622      	mov	r2, r4
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 f86b 	bl	80079d8 <__swbuf_r>
 8007902:	3001      	adds	r0, #1
 8007904:	d1bf      	bne.n	8007886 <_puts_r+0x42>
 8007906:	e7df      	b.n	80078c8 <_puts_r+0x84>
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	250a      	movs	r5, #10
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	6022      	str	r2, [r4, #0]
 8007910:	701d      	strb	r5, [r3, #0]
 8007912:	e7db      	b.n	80078cc <_puts_r+0x88>
 8007914:	080085e0 	.word	0x080085e0
 8007918:	08008600 	.word	0x08008600
 800791c:	080085c0 	.word	0x080085c0

08007920 <puts>:
 8007920:	4b02      	ldr	r3, [pc, #8]	; (800792c <puts+0xc>)
 8007922:	4601      	mov	r1, r0
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	f7ff bf8d 	b.w	8007844 <_puts_r>
 800792a:	bf00      	nop
 800792c:	20000018 	.word	0x20000018

08007930 <_sbrk_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4d06      	ldr	r5, [pc, #24]	; (800794c <_sbrk_r+0x1c>)
 8007934:	2300      	movs	r3, #0
 8007936:	4604      	mov	r4, r0
 8007938:	4608      	mov	r0, r1
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	f7fa fe00 	bl	8002540 <_sbrk>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_sbrk_r+0x1a>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_sbrk_r+0x1a>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	20000770 	.word	0x20000770

08007950 <__sread>:
 8007950:	b510      	push	{r4, lr}
 8007952:	460c      	mov	r4, r1
 8007954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007958:	f000 fda0 	bl	800849c <_read_r>
 800795c:	2800      	cmp	r0, #0
 800795e:	bfab      	itete	ge
 8007960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007962:	89a3      	ldrhlt	r3, [r4, #12]
 8007964:	181b      	addge	r3, r3, r0
 8007966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800796a:	bfac      	ite	ge
 800796c:	6563      	strge	r3, [r4, #84]	; 0x54
 800796e:	81a3      	strhlt	r3, [r4, #12]
 8007970:	bd10      	pop	{r4, pc}

08007972 <__swrite>:
 8007972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007976:	461f      	mov	r7, r3
 8007978:	898b      	ldrh	r3, [r1, #12]
 800797a:	05db      	lsls	r3, r3, #23
 800797c:	4605      	mov	r5, r0
 800797e:	460c      	mov	r4, r1
 8007980:	4616      	mov	r6, r2
 8007982:	d505      	bpl.n	8007990 <__swrite+0x1e>
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	2302      	movs	r3, #2
 800798a:	2200      	movs	r2, #0
 800798c:	f000 f9c8 	bl	8007d20 <_lseek_r>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	4632      	mov	r2, r6
 800799e:	463b      	mov	r3, r7
 80079a0:	4628      	mov	r0, r5
 80079a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a6:	f000 b869 	b.w	8007a7c <_write_r>

080079aa <__sseek>:
 80079aa:	b510      	push	{r4, lr}
 80079ac:	460c      	mov	r4, r1
 80079ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b2:	f000 f9b5 	bl	8007d20 <_lseek_r>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	bf15      	itete	ne
 80079bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80079be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079c6:	81a3      	strheq	r3, [r4, #12]
 80079c8:	bf18      	it	ne
 80079ca:	81a3      	strhne	r3, [r4, #12]
 80079cc:	bd10      	pop	{r4, pc}

080079ce <__sclose>:
 80079ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d2:	f000 b8d3 	b.w	8007b7c <_close_r>
	...

080079d8 <__swbuf_r>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	460e      	mov	r6, r1
 80079dc:	4614      	mov	r4, r2
 80079de:	4605      	mov	r5, r0
 80079e0:	b118      	cbz	r0, 80079ea <__swbuf_r+0x12>
 80079e2:	6983      	ldr	r3, [r0, #24]
 80079e4:	b90b      	cbnz	r3, 80079ea <__swbuf_r+0x12>
 80079e6:	f7ff fdb3 	bl	8007550 <__sinit>
 80079ea:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <__swbuf_r+0x98>)
 80079ec:	429c      	cmp	r4, r3
 80079ee:	d12b      	bne.n	8007a48 <__swbuf_r+0x70>
 80079f0:	686c      	ldr	r4, [r5, #4]
 80079f2:	69a3      	ldr	r3, [r4, #24]
 80079f4:	60a3      	str	r3, [r4, #8]
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	071a      	lsls	r2, r3, #28
 80079fa:	d52f      	bpl.n	8007a5c <__swbuf_r+0x84>
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	b36b      	cbz	r3, 8007a5c <__swbuf_r+0x84>
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	6820      	ldr	r0, [r4, #0]
 8007a04:	1ac0      	subs	r0, r0, r3
 8007a06:	6963      	ldr	r3, [r4, #20]
 8007a08:	b2f6      	uxtb	r6, r6
 8007a0a:	4283      	cmp	r3, r0
 8007a0c:	4637      	mov	r7, r6
 8007a0e:	dc04      	bgt.n	8007a1a <__swbuf_r+0x42>
 8007a10:	4621      	mov	r1, r4
 8007a12:	4628      	mov	r0, r5
 8007a14:	f000 f948 	bl	8007ca8 <_fflush_r>
 8007a18:	bb30      	cbnz	r0, 8007a68 <__swbuf_r+0x90>
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	60a3      	str	r3, [r4, #8]
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	6022      	str	r2, [r4, #0]
 8007a26:	701e      	strb	r6, [r3, #0]
 8007a28:	6963      	ldr	r3, [r4, #20]
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	4283      	cmp	r3, r0
 8007a2e:	d004      	beq.n	8007a3a <__swbuf_r+0x62>
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	07db      	lsls	r3, r3, #31
 8007a34:	d506      	bpl.n	8007a44 <__swbuf_r+0x6c>
 8007a36:	2e0a      	cmp	r6, #10
 8007a38:	d104      	bne.n	8007a44 <__swbuf_r+0x6c>
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f000 f933 	bl	8007ca8 <_fflush_r>
 8007a42:	b988      	cbnz	r0, 8007a68 <__swbuf_r+0x90>
 8007a44:	4638      	mov	r0, r7
 8007a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a48:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <__swbuf_r+0x9c>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d101      	bne.n	8007a52 <__swbuf_r+0x7a>
 8007a4e:	68ac      	ldr	r4, [r5, #8]
 8007a50:	e7cf      	b.n	80079f2 <__swbuf_r+0x1a>
 8007a52:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <__swbuf_r+0xa0>)
 8007a54:	429c      	cmp	r4, r3
 8007a56:	bf08      	it	eq
 8007a58:	68ec      	ldreq	r4, [r5, #12]
 8007a5a:	e7ca      	b.n	80079f2 <__swbuf_r+0x1a>
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 f81e 	bl	8007aa0 <__swsetup_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d0cb      	beq.n	8007a00 <__swbuf_r+0x28>
 8007a68:	f04f 37ff 	mov.w	r7, #4294967295
 8007a6c:	e7ea      	b.n	8007a44 <__swbuf_r+0x6c>
 8007a6e:	bf00      	nop
 8007a70:	080085e0 	.word	0x080085e0
 8007a74:	08008600 	.word	0x08008600
 8007a78:	080085c0 	.word	0x080085c0

08007a7c <_write_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d07      	ldr	r5, [pc, #28]	; (8007a9c <_write_r+0x20>)
 8007a80:	4604      	mov	r4, r0
 8007a82:	4608      	mov	r0, r1
 8007a84:	4611      	mov	r1, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	602a      	str	r2, [r5, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f7ff fb07 	bl	800709e <_write>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_write_r+0x1e>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_write_r+0x1e>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20000770 	.word	0x20000770

08007aa0 <__swsetup_r>:
 8007aa0:	4b32      	ldr	r3, [pc, #200]	; (8007b6c <__swsetup_r+0xcc>)
 8007aa2:	b570      	push	{r4, r5, r6, lr}
 8007aa4:	681d      	ldr	r5, [r3, #0]
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	b125      	cbz	r5, 8007ab6 <__swsetup_r+0x16>
 8007aac:	69ab      	ldr	r3, [r5, #24]
 8007aae:	b913      	cbnz	r3, 8007ab6 <__swsetup_r+0x16>
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f7ff fd4d 	bl	8007550 <__sinit>
 8007ab6:	4b2e      	ldr	r3, [pc, #184]	; (8007b70 <__swsetup_r+0xd0>)
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	d10f      	bne.n	8007adc <__swsetup_r+0x3c>
 8007abc:	686c      	ldr	r4, [r5, #4]
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac4:	0719      	lsls	r1, r3, #28
 8007ac6:	d42c      	bmi.n	8007b22 <__swsetup_r+0x82>
 8007ac8:	06dd      	lsls	r5, r3, #27
 8007aca:	d411      	bmi.n	8007af0 <__swsetup_r+0x50>
 8007acc:	2309      	movs	r3, #9
 8007ace:	6033      	str	r3, [r6, #0]
 8007ad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ad4:	81a3      	strh	r3, [r4, #12]
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	e03e      	b.n	8007b5a <__swsetup_r+0xba>
 8007adc:	4b25      	ldr	r3, [pc, #148]	; (8007b74 <__swsetup_r+0xd4>)
 8007ade:	429c      	cmp	r4, r3
 8007ae0:	d101      	bne.n	8007ae6 <__swsetup_r+0x46>
 8007ae2:	68ac      	ldr	r4, [r5, #8]
 8007ae4:	e7eb      	b.n	8007abe <__swsetup_r+0x1e>
 8007ae6:	4b24      	ldr	r3, [pc, #144]	; (8007b78 <__swsetup_r+0xd8>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	bf08      	it	eq
 8007aec:	68ec      	ldreq	r4, [r5, #12]
 8007aee:	e7e6      	b.n	8007abe <__swsetup_r+0x1e>
 8007af0:	0758      	lsls	r0, r3, #29
 8007af2:	d512      	bpl.n	8007b1a <__swsetup_r+0x7a>
 8007af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007af6:	b141      	cbz	r1, 8007b0a <__swsetup_r+0x6a>
 8007af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007afc:	4299      	cmp	r1, r3
 8007afe:	d002      	beq.n	8007b06 <__swsetup_r+0x66>
 8007b00:	4630      	mov	r0, r6
 8007b02:	f000 f991 	bl	8007e28 <_free_r>
 8007b06:	2300      	movs	r3, #0
 8007b08:	6363      	str	r3, [r4, #52]	; 0x34
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	2300      	movs	r3, #0
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f043 0308 	orr.w	r3, r3, #8
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	6923      	ldr	r3, [r4, #16]
 8007b24:	b94b      	cbnz	r3, 8007b3a <__swsetup_r+0x9a>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b30:	d003      	beq.n	8007b3a <__swsetup_r+0x9a>
 8007b32:	4621      	mov	r1, r4
 8007b34:	4630      	mov	r0, r6
 8007b36:	f000 f92b 	bl	8007d90 <__smakebuf_r>
 8007b3a:	89a0      	ldrh	r0, [r4, #12]
 8007b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b40:	f010 0301 	ands.w	r3, r0, #1
 8007b44:	d00a      	beq.n	8007b5c <__swsetup_r+0xbc>
 8007b46:	2300      	movs	r3, #0
 8007b48:	60a3      	str	r3, [r4, #8]
 8007b4a:	6963      	ldr	r3, [r4, #20]
 8007b4c:	425b      	negs	r3, r3
 8007b4e:	61a3      	str	r3, [r4, #24]
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	b943      	cbnz	r3, 8007b66 <__swsetup_r+0xc6>
 8007b54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b58:	d1ba      	bne.n	8007ad0 <__swsetup_r+0x30>
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	0781      	lsls	r1, r0, #30
 8007b5e:	bf58      	it	pl
 8007b60:	6963      	ldrpl	r3, [r4, #20]
 8007b62:	60a3      	str	r3, [r4, #8]
 8007b64:	e7f4      	b.n	8007b50 <__swsetup_r+0xb0>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e7f7      	b.n	8007b5a <__swsetup_r+0xba>
 8007b6a:	bf00      	nop
 8007b6c:	20000018 	.word	0x20000018
 8007b70:	080085e0 	.word	0x080085e0
 8007b74:	08008600 	.word	0x08008600
 8007b78:	080085c0 	.word	0x080085c0

08007b7c <_close_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d06      	ldr	r5, [pc, #24]	; (8007b98 <_close_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	f7ff faba 	bl	8007100 <_close>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_close_r+0x1a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_close_r+0x1a>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	20000770 	.word	0x20000770

08007b9c <__sflush_r>:
 8007b9c:	898a      	ldrh	r2, [r1, #12]
 8007b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	0710      	lsls	r0, r2, #28
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	d458      	bmi.n	8007c5c <__sflush_r+0xc0>
 8007baa:	684b      	ldr	r3, [r1, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc05      	bgt.n	8007bbc <__sflush_r+0x20>
 8007bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	dc02      	bgt.n	8007bbc <__sflush_r+0x20>
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	d0f9      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bc8:	682f      	ldr	r7, [r5, #0]
 8007bca:	602b      	str	r3, [r5, #0]
 8007bcc:	d032      	beq.n	8007c34 <__sflush_r+0x98>
 8007bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	075a      	lsls	r2, r3, #29
 8007bd4:	d505      	bpl.n	8007be2 <__sflush_r+0x46>
 8007bd6:	6863      	ldr	r3, [r4, #4]
 8007bd8:	1ac0      	subs	r0, r0, r3
 8007bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bdc:	b10b      	cbz	r3, 8007be2 <__sflush_r+0x46>
 8007bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be0:	1ac0      	subs	r0, r0, r3
 8007be2:	2300      	movs	r3, #0
 8007be4:	4602      	mov	r2, r0
 8007be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007be8:	6a21      	ldr	r1, [r4, #32]
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b0      	blx	r6
 8007bee:	1c43      	adds	r3, r0, #1
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	d106      	bne.n	8007c02 <__sflush_r+0x66>
 8007bf4:	6829      	ldr	r1, [r5, #0]
 8007bf6:	291d      	cmp	r1, #29
 8007bf8:	d82c      	bhi.n	8007c54 <__sflush_r+0xb8>
 8007bfa:	4a2a      	ldr	r2, [pc, #168]	; (8007ca4 <__sflush_r+0x108>)
 8007bfc:	40ca      	lsrs	r2, r1
 8007bfe:	07d6      	lsls	r6, r2, #31
 8007c00:	d528      	bpl.n	8007c54 <__sflush_r+0xb8>
 8007c02:	2200      	movs	r2, #0
 8007c04:	6062      	str	r2, [r4, #4]
 8007c06:	04d9      	lsls	r1, r3, #19
 8007c08:	6922      	ldr	r2, [r4, #16]
 8007c0a:	6022      	str	r2, [r4, #0]
 8007c0c:	d504      	bpl.n	8007c18 <__sflush_r+0x7c>
 8007c0e:	1c42      	adds	r2, r0, #1
 8007c10:	d101      	bne.n	8007c16 <__sflush_r+0x7a>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	b903      	cbnz	r3, 8007c18 <__sflush_r+0x7c>
 8007c16:	6560      	str	r0, [r4, #84]	; 0x54
 8007c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c1a:	602f      	str	r7, [r5, #0]
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	d0ca      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c24:	4299      	cmp	r1, r3
 8007c26:	d002      	beq.n	8007c2e <__sflush_r+0x92>
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f8fd 	bl	8007e28 <_free_r>
 8007c2e:	2000      	movs	r0, #0
 8007c30:	6360      	str	r0, [r4, #52]	; 0x34
 8007c32:	e7c1      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c34:	6a21      	ldr	r1, [r4, #32]
 8007c36:	2301      	movs	r3, #1
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b0      	blx	r6
 8007c3c:	1c41      	adds	r1, r0, #1
 8007c3e:	d1c7      	bne.n	8007bd0 <__sflush_r+0x34>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0c4      	beq.n	8007bd0 <__sflush_r+0x34>
 8007c46:	2b1d      	cmp	r3, #29
 8007c48:	d001      	beq.n	8007c4e <__sflush_r+0xb2>
 8007c4a:	2b16      	cmp	r3, #22
 8007c4c:	d101      	bne.n	8007c52 <__sflush_r+0xb6>
 8007c4e:	602f      	str	r7, [r5, #0]
 8007c50:	e7b1      	b.n	8007bb6 <__sflush_r+0x1a>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	e7ad      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c5c:	690f      	ldr	r7, [r1, #16]
 8007c5e:	2f00      	cmp	r7, #0
 8007c60:	d0a9      	beq.n	8007bb6 <__sflush_r+0x1a>
 8007c62:	0793      	lsls	r3, r2, #30
 8007c64:	680e      	ldr	r6, [r1, #0]
 8007c66:	bf08      	it	eq
 8007c68:	694b      	ldreq	r3, [r1, #20]
 8007c6a:	600f      	str	r7, [r1, #0]
 8007c6c:	bf18      	it	ne
 8007c6e:	2300      	movne	r3, #0
 8007c70:	eba6 0807 	sub.w	r8, r6, r7
 8007c74:	608b      	str	r3, [r1, #8]
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	dd9c      	ble.n	8007bb6 <__sflush_r+0x1a>
 8007c7c:	6a21      	ldr	r1, [r4, #32]
 8007c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c80:	4643      	mov	r3, r8
 8007c82:	463a      	mov	r2, r7
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b0      	blx	r6
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	dc06      	bgt.n	8007c9a <__sflush_r+0xfe>
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e78e      	b.n	8007bb8 <__sflush_r+0x1c>
 8007c9a:	4407      	add	r7, r0
 8007c9c:	eba8 0800 	sub.w	r8, r8, r0
 8007ca0:	e7e9      	b.n	8007c76 <__sflush_r+0xda>
 8007ca2:	bf00      	nop
 8007ca4:	20400001 	.word	0x20400001

08007ca8 <_fflush_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	690b      	ldr	r3, [r1, #16]
 8007cac:	4605      	mov	r5, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	b913      	cbnz	r3, 8007cb8 <_fflush_r+0x10>
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	b118      	cbz	r0, 8007cc2 <_fflush_r+0x1a>
 8007cba:	6983      	ldr	r3, [r0, #24]
 8007cbc:	b90b      	cbnz	r3, 8007cc2 <_fflush_r+0x1a>
 8007cbe:	f7ff fc47 	bl	8007550 <__sinit>
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <_fflush_r+0x6c>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d11b      	bne.n	8007d00 <_fflush_r+0x58>
 8007cc8:	686c      	ldr	r4, [r5, #4]
 8007cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0ef      	beq.n	8007cb2 <_fflush_r+0xa>
 8007cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cd4:	07d0      	lsls	r0, r2, #31
 8007cd6:	d404      	bmi.n	8007ce2 <_fflush_r+0x3a>
 8007cd8:	0599      	lsls	r1, r3, #22
 8007cda:	d402      	bmi.n	8007ce2 <_fflush_r+0x3a>
 8007cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cde:	f7ff fcfa 	bl	80076d6 <__retarget_lock_acquire_recursive>
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	f7ff ff59 	bl	8007b9c <__sflush_r>
 8007cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cec:	07da      	lsls	r2, r3, #31
 8007cee:	4605      	mov	r5, r0
 8007cf0:	d4e0      	bmi.n	8007cb4 <_fflush_r+0xc>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	059b      	lsls	r3, r3, #22
 8007cf6:	d4dd      	bmi.n	8007cb4 <_fflush_r+0xc>
 8007cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfa:	f7ff fced 	bl	80076d8 <__retarget_lock_release_recursive>
 8007cfe:	e7d9      	b.n	8007cb4 <_fflush_r+0xc>
 8007d00:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <_fflush_r+0x70>)
 8007d02:	429c      	cmp	r4, r3
 8007d04:	d101      	bne.n	8007d0a <_fflush_r+0x62>
 8007d06:	68ac      	ldr	r4, [r5, #8]
 8007d08:	e7df      	b.n	8007cca <_fflush_r+0x22>
 8007d0a:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <_fflush_r+0x74>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	bf08      	it	eq
 8007d10:	68ec      	ldreq	r4, [r5, #12]
 8007d12:	e7da      	b.n	8007cca <_fflush_r+0x22>
 8007d14:	080085e0 	.word	0x080085e0
 8007d18:	08008600 	.word	0x08008600
 8007d1c:	080085c0 	.word	0x080085c0

08007d20 <_lseek_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4d07      	ldr	r5, [pc, #28]	; (8007d40 <_lseek_r+0x20>)
 8007d24:	4604      	mov	r4, r0
 8007d26:	4608      	mov	r0, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	602a      	str	r2, [r5, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f7ff f9a3 	bl	800707a <_lseek>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_lseek_r+0x1e>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_lseek_r+0x1e>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	20000770 	.word	0x20000770

08007d44 <__swhatbuf_r>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	460e      	mov	r6, r1
 8007d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	b096      	sub	sp, #88	; 0x58
 8007d50:	4614      	mov	r4, r2
 8007d52:	461d      	mov	r5, r3
 8007d54:	da08      	bge.n	8007d68 <__swhatbuf_r+0x24>
 8007d56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	061a      	lsls	r2, r3, #24
 8007d60:	d410      	bmi.n	8007d84 <__swhatbuf_r+0x40>
 8007d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d66:	e00e      	b.n	8007d86 <__swhatbuf_r+0x42>
 8007d68:	466a      	mov	r2, sp
 8007d6a:	f000 fba9 	bl	80084c0 <_fstat_r>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	dbf1      	blt.n	8007d56 <__swhatbuf_r+0x12>
 8007d72:	9a01      	ldr	r2, [sp, #4]
 8007d74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d7c:	425a      	negs	r2, r3
 8007d7e:	415a      	adcs	r2, r3
 8007d80:	602a      	str	r2, [r5, #0]
 8007d82:	e7ee      	b.n	8007d62 <__swhatbuf_r+0x1e>
 8007d84:	2340      	movs	r3, #64	; 0x40
 8007d86:	2000      	movs	r0, #0
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	b016      	add	sp, #88	; 0x58
 8007d8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d90 <__smakebuf_r>:
 8007d90:	898b      	ldrh	r3, [r1, #12]
 8007d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d94:	079d      	lsls	r5, r3, #30
 8007d96:	4606      	mov	r6, r0
 8007d98:	460c      	mov	r4, r1
 8007d9a:	d507      	bpl.n	8007dac <__smakebuf_r+0x1c>
 8007d9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	6123      	str	r3, [r4, #16]
 8007da4:	2301      	movs	r3, #1
 8007da6:	6163      	str	r3, [r4, #20]
 8007da8:	b002      	add	sp, #8
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	ab01      	add	r3, sp, #4
 8007dae:	466a      	mov	r2, sp
 8007db0:	f7ff ffc8 	bl	8007d44 <__swhatbuf_r>
 8007db4:	9900      	ldr	r1, [sp, #0]
 8007db6:	4605      	mov	r5, r0
 8007db8:	4630      	mov	r0, r6
 8007dba:	f7ff fcb7 	bl	800772c <_malloc_r>
 8007dbe:	b948      	cbnz	r0, 8007dd4 <__smakebuf_r+0x44>
 8007dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc4:	059a      	lsls	r2, r3, #22
 8007dc6:	d4ef      	bmi.n	8007da8 <__smakebuf_r+0x18>
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	f043 0302 	orr.w	r3, r3, #2
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	e7e3      	b.n	8007d9c <__smakebuf_r+0xc>
 8007dd4:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <__smakebuf_r+0x7c>)
 8007dd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	6020      	str	r0, [r4, #0]
 8007ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	9b00      	ldr	r3, [sp, #0]
 8007de4:	6163      	str	r3, [r4, #20]
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	6120      	str	r0, [r4, #16]
 8007dea:	b15b      	cbz	r3, 8007e04 <__smakebuf_r+0x74>
 8007dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 fb77 	bl	80084e4 <_isatty_r>
 8007df6:	b128      	cbz	r0, 8007e04 <__smakebuf_r+0x74>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f023 0303 	bic.w	r3, r3, #3
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	81a3      	strh	r3, [r4, #12]
 8007e04:	89a0      	ldrh	r0, [r4, #12]
 8007e06:	4305      	orrs	r5, r0
 8007e08:	81a5      	strh	r5, [r4, #12]
 8007e0a:	e7cd      	b.n	8007da8 <__smakebuf_r+0x18>
 8007e0c:	080074e9 	.word	0x080074e9

08007e10 <__malloc_lock>:
 8007e10:	4801      	ldr	r0, [pc, #4]	; (8007e18 <__malloc_lock+0x8>)
 8007e12:	f7ff bc60 	b.w	80076d6 <__retarget_lock_acquire_recursive>
 8007e16:	bf00      	nop
 8007e18:	20000764 	.word	0x20000764

08007e1c <__malloc_unlock>:
 8007e1c:	4801      	ldr	r0, [pc, #4]	; (8007e24 <__malloc_unlock+0x8>)
 8007e1e:	f7ff bc5b 	b.w	80076d8 <__retarget_lock_release_recursive>
 8007e22:	bf00      	nop
 8007e24:	20000764 	.word	0x20000764

08007e28 <_free_r>:
 8007e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e2a:	2900      	cmp	r1, #0
 8007e2c:	d044      	beq.n	8007eb8 <_free_r+0x90>
 8007e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e32:	9001      	str	r0, [sp, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f1a1 0404 	sub.w	r4, r1, #4
 8007e3a:	bfb8      	it	lt
 8007e3c:	18e4      	addlt	r4, r4, r3
 8007e3e:	f7ff ffe7 	bl	8007e10 <__malloc_lock>
 8007e42:	4a1e      	ldr	r2, [pc, #120]	; (8007ebc <_free_r+0x94>)
 8007e44:	9801      	ldr	r0, [sp, #4]
 8007e46:	6813      	ldr	r3, [r2, #0]
 8007e48:	b933      	cbnz	r3, 8007e58 <_free_r+0x30>
 8007e4a:	6063      	str	r3, [r4, #4]
 8007e4c:	6014      	str	r4, [r2, #0]
 8007e4e:	b003      	add	sp, #12
 8007e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e54:	f7ff bfe2 	b.w	8007e1c <__malloc_unlock>
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d908      	bls.n	8007e6e <_free_r+0x46>
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	1961      	adds	r1, r4, r5
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf01      	itttt	eq
 8007e64:	6819      	ldreq	r1, [r3, #0]
 8007e66:	685b      	ldreq	r3, [r3, #4]
 8007e68:	1949      	addeq	r1, r1, r5
 8007e6a:	6021      	streq	r1, [r4, #0]
 8007e6c:	e7ed      	b.n	8007e4a <_free_r+0x22>
 8007e6e:	461a      	mov	r2, r3
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	b10b      	cbz	r3, 8007e78 <_free_r+0x50>
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	d9fa      	bls.n	8007e6e <_free_r+0x46>
 8007e78:	6811      	ldr	r1, [r2, #0]
 8007e7a:	1855      	adds	r5, r2, r1
 8007e7c:	42a5      	cmp	r5, r4
 8007e7e:	d10b      	bne.n	8007e98 <_free_r+0x70>
 8007e80:	6824      	ldr	r4, [r4, #0]
 8007e82:	4421      	add	r1, r4
 8007e84:	1854      	adds	r4, r2, r1
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	6011      	str	r1, [r2, #0]
 8007e8a:	d1e0      	bne.n	8007e4e <_free_r+0x26>
 8007e8c:	681c      	ldr	r4, [r3, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	6053      	str	r3, [r2, #4]
 8007e92:	4421      	add	r1, r4
 8007e94:	6011      	str	r1, [r2, #0]
 8007e96:	e7da      	b.n	8007e4e <_free_r+0x26>
 8007e98:	d902      	bls.n	8007ea0 <_free_r+0x78>
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	6003      	str	r3, [r0, #0]
 8007e9e:	e7d6      	b.n	8007e4e <_free_r+0x26>
 8007ea0:	6825      	ldr	r5, [r4, #0]
 8007ea2:	1961      	adds	r1, r4, r5
 8007ea4:	428b      	cmp	r3, r1
 8007ea6:	bf04      	itt	eq
 8007ea8:	6819      	ldreq	r1, [r3, #0]
 8007eaa:	685b      	ldreq	r3, [r3, #4]
 8007eac:	6063      	str	r3, [r4, #4]
 8007eae:	bf04      	itt	eq
 8007eb0:	1949      	addeq	r1, r1, r5
 8007eb2:	6021      	streq	r1, [r4, #0]
 8007eb4:	6054      	str	r4, [r2, #4]
 8007eb6:	e7ca      	b.n	8007e4e <_free_r+0x26>
 8007eb8:	b003      	add	sp, #12
 8007eba:	bd30      	pop	{r4, r5, pc}
 8007ebc:	20000768 	.word	0x20000768

08007ec0 <__sfputc_r>:
 8007ec0:	6893      	ldr	r3, [r2, #8]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	b410      	push	{r4}
 8007ec8:	6093      	str	r3, [r2, #8]
 8007eca:	da08      	bge.n	8007ede <__sfputc_r+0x1e>
 8007ecc:	6994      	ldr	r4, [r2, #24]
 8007ece:	42a3      	cmp	r3, r4
 8007ed0:	db01      	blt.n	8007ed6 <__sfputc_r+0x16>
 8007ed2:	290a      	cmp	r1, #10
 8007ed4:	d103      	bne.n	8007ede <__sfputc_r+0x1e>
 8007ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eda:	f7ff bd7d 	b.w	80079d8 <__swbuf_r>
 8007ede:	6813      	ldr	r3, [r2, #0]
 8007ee0:	1c58      	adds	r0, r3, #1
 8007ee2:	6010      	str	r0, [r2, #0]
 8007ee4:	7019      	strb	r1, [r3, #0]
 8007ee6:	4608      	mov	r0, r1
 8007ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <__sfputs_r>:
 8007eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	460f      	mov	r7, r1
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	18d5      	adds	r5, r2, r3
 8007ef8:	42ac      	cmp	r4, r5
 8007efa:	d101      	bne.n	8007f00 <__sfputs_r+0x12>
 8007efc:	2000      	movs	r0, #0
 8007efe:	e007      	b.n	8007f10 <__sfputs_r+0x22>
 8007f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f04:	463a      	mov	r2, r7
 8007f06:	4630      	mov	r0, r6
 8007f08:	f7ff ffda 	bl	8007ec0 <__sfputc_r>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	d1f3      	bne.n	8007ef8 <__sfputs_r+0xa>
 8007f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f14 <_vfiprintf_r>:
 8007f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f18:	460d      	mov	r5, r1
 8007f1a:	b09d      	sub	sp, #116	; 0x74
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	4698      	mov	r8, r3
 8007f20:	4606      	mov	r6, r0
 8007f22:	b118      	cbz	r0, 8007f2c <_vfiprintf_r+0x18>
 8007f24:	6983      	ldr	r3, [r0, #24]
 8007f26:	b90b      	cbnz	r3, 8007f2c <_vfiprintf_r+0x18>
 8007f28:	f7ff fb12 	bl	8007550 <__sinit>
 8007f2c:	4b89      	ldr	r3, [pc, #548]	; (8008154 <_vfiprintf_r+0x240>)
 8007f2e:	429d      	cmp	r5, r3
 8007f30:	d11b      	bne.n	8007f6a <_vfiprintf_r+0x56>
 8007f32:	6875      	ldr	r5, [r6, #4]
 8007f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f36:	07d9      	lsls	r1, r3, #31
 8007f38:	d405      	bmi.n	8007f46 <_vfiprintf_r+0x32>
 8007f3a:	89ab      	ldrh	r3, [r5, #12]
 8007f3c:	059a      	lsls	r2, r3, #22
 8007f3e:	d402      	bmi.n	8007f46 <_vfiprintf_r+0x32>
 8007f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f42:	f7ff fbc8 	bl	80076d6 <__retarget_lock_acquire_recursive>
 8007f46:	89ab      	ldrh	r3, [r5, #12]
 8007f48:	071b      	lsls	r3, r3, #28
 8007f4a:	d501      	bpl.n	8007f50 <_vfiprintf_r+0x3c>
 8007f4c:	692b      	ldr	r3, [r5, #16]
 8007f4e:	b9eb      	cbnz	r3, 8007f8c <_vfiprintf_r+0x78>
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff fda4 	bl	8007aa0 <__swsetup_r>
 8007f58:	b1c0      	cbz	r0, 8007f8c <_vfiprintf_r+0x78>
 8007f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f5c:	07dc      	lsls	r4, r3, #31
 8007f5e:	d50e      	bpl.n	8007f7e <_vfiprintf_r+0x6a>
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	b01d      	add	sp, #116	; 0x74
 8007f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6a:	4b7b      	ldr	r3, [pc, #492]	; (8008158 <_vfiprintf_r+0x244>)
 8007f6c:	429d      	cmp	r5, r3
 8007f6e:	d101      	bne.n	8007f74 <_vfiprintf_r+0x60>
 8007f70:	68b5      	ldr	r5, [r6, #8]
 8007f72:	e7df      	b.n	8007f34 <_vfiprintf_r+0x20>
 8007f74:	4b79      	ldr	r3, [pc, #484]	; (800815c <_vfiprintf_r+0x248>)
 8007f76:	429d      	cmp	r5, r3
 8007f78:	bf08      	it	eq
 8007f7a:	68f5      	ldreq	r5, [r6, #12]
 8007f7c:	e7da      	b.n	8007f34 <_vfiprintf_r+0x20>
 8007f7e:	89ab      	ldrh	r3, [r5, #12]
 8007f80:	0598      	lsls	r0, r3, #22
 8007f82:	d4ed      	bmi.n	8007f60 <_vfiprintf_r+0x4c>
 8007f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f86:	f7ff fba7 	bl	80076d8 <__retarget_lock_release_recursive>
 8007f8a:	e7e9      	b.n	8007f60 <_vfiprintf_r+0x4c>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f90:	2320      	movs	r3, #32
 8007f92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f9a:	2330      	movs	r3, #48	; 0x30
 8007f9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008160 <_vfiprintf_r+0x24c>
 8007fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fa4:	f04f 0901 	mov.w	r9, #1
 8007fa8:	4623      	mov	r3, r4
 8007faa:	469a      	mov	sl, r3
 8007fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fb0:	b10a      	cbz	r2, 8007fb6 <_vfiprintf_r+0xa2>
 8007fb2:	2a25      	cmp	r2, #37	; 0x25
 8007fb4:	d1f9      	bne.n	8007faa <_vfiprintf_r+0x96>
 8007fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fba:	d00b      	beq.n	8007fd4 <_vfiprintf_r+0xc0>
 8007fbc:	465b      	mov	r3, fp
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f7ff ff93 	bl	8007eee <__sfputs_r>
 8007fc8:	3001      	adds	r0, #1
 8007fca:	f000 80aa 	beq.w	8008122 <_vfiprintf_r+0x20e>
 8007fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fd0:	445a      	add	r2, fp
 8007fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 80a2 	beq.w	8008122 <_vfiprintf_r+0x20e>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fe8:	f10a 0a01 	add.w	sl, sl, #1
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	9307      	str	r3, [sp, #28]
 8007ff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ff4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ff6:	4654      	mov	r4, sl
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ffe:	4858      	ldr	r0, [pc, #352]	; (8008160 <_vfiprintf_r+0x24c>)
 8008000:	f7f8 f926 	bl	8000250 <memchr>
 8008004:	9a04      	ldr	r2, [sp, #16]
 8008006:	b9d8      	cbnz	r0, 8008040 <_vfiprintf_r+0x12c>
 8008008:	06d1      	lsls	r1, r2, #27
 800800a:	bf44      	itt	mi
 800800c:	2320      	movmi	r3, #32
 800800e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008012:	0713      	lsls	r3, r2, #28
 8008014:	bf44      	itt	mi
 8008016:	232b      	movmi	r3, #43	; 0x2b
 8008018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800801c:	f89a 3000 	ldrb.w	r3, [sl]
 8008020:	2b2a      	cmp	r3, #42	; 0x2a
 8008022:	d015      	beq.n	8008050 <_vfiprintf_r+0x13c>
 8008024:	9a07      	ldr	r2, [sp, #28]
 8008026:	4654      	mov	r4, sl
 8008028:	2000      	movs	r0, #0
 800802a:	f04f 0c0a 	mov.w	ip, #10
 800802e:	4621      	mov	r1, r4
 8008030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008034:	3b30      	subs	r3, #48	; 0x30
 8008036:	2b09      	cmp	r3, #9
 8008038:	d94e      	bls.n	80080d8 <_vfiprintf_r+0x1c4>
 800803a:	b1b0      	cbz	r0, 800806a <_vfiprintf_r+0x156>
 800803c:	9207      	str	r2, [sp, #28]
 800803e:	e014      	b.n	800806a <_vfiprintf_r+0x156>
 8008040:	eba0 0308 	sub.w	r3, r0, r8
 8008044:	fa09 f303 	lsl.w	r3, r9, r3
 8008048:	4313      	orrs	r3, r2
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	46a2      	mov	sl, r4
 800804e:	e7d2      	b.n	8007ff6 <_vfiprintf_r+0xe2>
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	1d19      	adds	r1, r3, #4
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	9103      	str	r1, [sp, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	bfbb      	ittet	lt
 800805c:	425b      	neglt	r3, r3
 800805e:	f042 0202 	orrlt.w	r2, r2, #2
 8008062:	9307      	strge	r3, [sp, #28]
 8008064:	9307      	strlt	r3, [sp, #28]
 8008066:	bfb8      	it	lt
 8008068:	9204      	strlt	r2, [sp, #16]
 800806a:	7823      	ldrb	r3, [r4, #0]
 800806c:	2b2e      	cmp	r3, #46	; 0x2e
 800806e:	d10c      	bne.n	800808a <_vfiprintf_r+0x176>
 8008070:	7863      	ldrb	r3, [r4, #1]
 8008072:	2b2a      	cmp	r3, #42	; 0x2a
 8008074:	d135      	bne.n	80080e2 <_vfiprintf_r+0x1ce>
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	1d1a      	adds	r2, r3, #4
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	9203      	str	r2, [sp, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	bfb8      	it	lt
 8008082:	f04f 33ff 	movlt.w	r3, #4294967295
 8008086:	3402      	adds	r4, #2
 8008088:	9305      	str	r3, [sp, #20]
 800808a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008170 <_vfiprintf_r+0x25c>
 800808e:	7821      	ldrb	r1, [r4, #0]
 8008090:	2203      	movs	r2, #3
 8008092:	4650      	mov	r0, sl
 8008094:	f7f8 f8dc 	bl	8000250 <memchr>
 8008098:	b140      	cbz	r0, 80080ac <_vfiprintf_r+0x198>
 800809a:	2340      	movs	r3, #64	; 0x40
 800809c:	eba0 000a 	sub.w	r0, r0, sl
 80080a0:	fa03 f000 	lsl.w	r0, r3, r0
 80080a4:	9b04      	ldr	r3, [sp, #16]
 80080a6:	4303      	orrs	r3, r0
 80080a8:	3401      	adds	r4, #1
 80080aa:	9304      	str	r3, [sp, #16]
 80080ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b0:	482c      	ldr	r0, [pc, #176]	; (8008164 <_vfiprintf_r+0x250>)
 80080b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080b6:	2206      	movs	r2, #6
 80080b8:	f7f8 f8ca 	bl	8000250 <memchr>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d03f      	beq.n	8008140 <_vfiprintf_r+0x22c>
 80080c0:	4b29      	ldr	r3, [pc, #164]	; (8008168 <_vfiprintf_r+0x254>)
 80080c2:	bb1b      	cbnz	r3, 800810c <_vfiprintf_r+0x1f8>
 80080c4:	9b03      	ldr	r3, [sp, #12]
 80080c6:	3307      	adds	r3, #7
 80080c8:	f023 0307 	bic.w	r3, r3, #7
 80080cc:	3308      	adds	r3, #8
 80080ce:	9303      	str	r3, [sp, #12]
 80080d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d2:	443b      	add	r3, r7
 80080d4:	9309      	str	r3, [sp, #36]	; 0x24
 80080d6:	e767      	b.n	8007fa8 <_vfiprintf_r+0x94>
 80080d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80080dc:	460c      	mov	r4, r1
 80080de:	2001      	movs	r0, #1
 80080e0:	e7a5      	b.n	800802e <_vfiprintf_r+0x11a>
 80080e2:	2300      	movs	r3, #0
 80080e4:	3401      	adds	r4, #1
 80080e6:	9305      	str	r3, [sp, #20]
 80080e8:	4619      	mov	r1, r3
 80080ea:	f04f 0c0a 	mov.w	ip, #10
 80080ee:	4620      	mov	r0, r4
 80080f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080f4:	3a30      	subs	r2, #48	; 0x30
 80080f6:	2a09      	cmp	r2, #9
 80080f8:	d903      	bls.n	8008102 <_vfiprintf_r+0x1ee>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0c5      	beq.n	800808a <_vfiprintf_r+0x176>
 80080fe:	9105      	str	r1, [sp, #20]
 8008100:	e7c3      	b.n	800808a <_vfiprintf_r+0x176>
 8008102:	fb0c 2101 	mla	r1, ip, r1, r2
 8008106:	4604      	mov	r4, r0
 8008108:	2301      	movs	r3, #1
 800810a:	e7f0      	b.n	80080ee <_vfiprintf_r+0x1da>
 800810c:	ab03      	add	r3, sp, #12
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	462a      	mov	r2, r5
 8008112:	4b16      	ldr	r3, [pc, #88]	; (800816c <_vfiprintf_r+0x258>)
 8008114:	a904      	add	r1, sp, #16
 8008116:	4630      	mov	r0, r6
 8008118:	f3af 8000 	nop.w
 800811c:	4607      	mov	r7, r0
 800811e:	1c78      	adds	r0, r7, #1
 8008120:	d1d6      	bne.n	80080d0 <_vfiprintf_r+0x1bc>
 8008122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008124:	07d9      	lsls	r1, r3, #31
 8008126:	d405      	bmi.n	8008134 <_vfiprintf_r+0x220>
 8008128:	89ab      	ldrh	r3, [r5, #12]
 800812a:	059a      	lsls	r2, r3, #22
 800812c:	d402      	bmi.n	8008134 <_vfiprintf_r+0x220>
 800812e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008130:	f7ff fad2 	bl	80076d8 <__retarget_lock_release_recursive>
 8008134:	89ab      	ldrh	r3, [r5, #12]
 8008136:	065b      	lsls	r3, r3, #25
 8008138:	f53f af12 	bmi.w	8007f60 <_vfiprintf_r+0x4c>
 800813c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800813e:	e711      	b.n	8007f64 <_vfiprintf_r+0x50>
 8008140:	ab03      	add	r3, sp, #12
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	462a      	mov	r2, r5
 8008146:	4b09      	ldr	r3, [pc, #36]	; (800816c <_vfiprintf_r+0x258>)
 8008148:	a904      	add	r1, sp, #16
 800814a:	4630      	mov	r0, r6
 800814c:	f000 f880 	bl	8008250 <_printf_i>
 8008150:	e7e4      	b.n	800811c <_vfiprintf_r+0x208>
 8008152:	bf00      	nop
 8008154:	080085e0 	.word	0x080085e0
 8008158:	08008600 	.word	0x08008600
 800815c:	080085c0 	.word	0x080085c0
 8008160:	08008624 	.word	0x08008624
 8008164:	0800862e 	.word	0x0800862e
 8008168:	00000000 	.word	0x00000000
 800816c:	08007eef 	.word	0x08007eef
 8008170:	0800862a 	.word	0x0800862a

08008174 <_printf_common>:
 8008174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008178:	4616      	mov	r6, r2
 800817a:	4699      	mov	r9, r3
 800817c:	688a      	ldr	r2, [r1, #8]
 800817e:	690b      	ldr	r3, [r1, #16]
 8008180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008184:	4293      	cmp	r3, r2
 8008186:	bfb8      	it	lt
 8008188:	4613      	movlt	r3, r2
 800818a:	6033      	str	r3, [r6, #0]
 800818c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008190:	4607      	mov	r7, r0
 8008192:	460c      	mov	r4, r1
 8008194:	b10a      	cbz	r2, 800819a <_printf_common+0x26>
 8008196:	3301      	adds	r3, #1
 8008198:	6033      	str	r3, [r6, #0]
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	0699      	lsls	r1, r3, #26
 800819e:	bf42      	ittt	mi
 80081a0:	6833      	ldrmi	r3, [r6, #0]
 80081a2:	3302      	addmi	r3, #2
 80081a4:	6033      	strmi	r3, [r6, #0]
 80081a6:	6825      	ldr	r5, [r4, #0]
 80081a8:	f015 0506 	ands.w	r5, r5, #6
 80081ac:	d106      	bne.n	80081bc <_printf_common+0x48>
 80081ae:	f104 0a19 	add.w	sl, r4, #25
 80081b2:	68e3      	ldr	r3, [r4, #12]
 80081b4:	6832      	ldr	r2, [r6, #0]
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	42ab      	cmp	r3, r5
 80081ba:	dc26      	bgt.n	800820a <_printf_common+0x96>
 80081bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081c0:	1e13      	subs	r3, r2, #0
 80081c2:	6822      	ldr	r2, [r4, #0]
 80081c4:	bf18      	it	ne
 80081c6:	2301      	movne	r3, #1
 80081c8:	0692      	lsls	r2, r2, #26
 80081ca:	d42b      	bmi.n	8008224 <_printf_common+0xb0>
 80081cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081d0:	4649      	mov	r1, r9
 80081d2:	4638      	mov	r0, r7
 80081d4:	47c0      	blx	r8
 80081d6:	3001      	adds	r0, #1
 80081d8:	d01e      	beq.n	8008218 <_printf_common+0xa4>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	68e5      	ldr	r5, [r4, #12]
 80081de:	6832      	ldr	r2, [r6, #0]
 80081e0:	f003 0306 	and.w	r3, r3, #6
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	bf08      	it	eq
 80081e8:	1aad      	subeq	r5, r5, r2
 80081ea:	68a3      	ldr	r3, [r4, #8]
 80081ec:	6922      	ldr	r2, [r4, #16]
 80081ee:	bf0c      	ite	eq
 80081f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081f4:	2500      	movne	r5, #0
 80081f6:	4293      	cmp	r3, r2
 80081f8:	bfc4      	itt	gt
 80081fa:	1a9b      	subgt	r3, r3, r2
 80081fc:	18ed      	addgt	r5, r5, r3
 80081fe:	2600      	movs	r6, #0
 8008200:	341a      	adds	r4, #26
 8008202:	42b5      	cmp	r5, r6
 8008204:	d11a      	bne.n	800823c <_printf_common+0xc8>
 8008206:	2000      	movs	r0, #0
 8008208:	e008      	b.n	800821c <_printf_common+0xa8>
 800820a:	2301      	movs	r3, #1
 800820c:	4652      	mov	r2, sl
 800820e:	4649      	mov	r1, r9
 8008210:	4638      	mov	r0, r7
 8008212:	47c0      	blx	r8
 8008214:	3001      	adds	r0, #1
 8008216:	d103      	bne.n	8008220 <_printf_common+0xac>
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008220:	3501      	adds	r5, #1
 8008222:	e7c6      	b.n	80081b2 <_printf_common+0x3e>
 8008224:	18e1      	adds	r1, r4, r3
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	2030      	movs	r0, #48	; 0x30
 800822a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800822e:	4422      	add	r2, r4
 8008230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008238:	3302      	adds	r3, #2
 800823a:	e7c7      	b.n	80081cc <_printf_common+0x58>
 800823c:	2301      	movs	r3, #1
 800823e:	4622      	mov	r2, r4
 8008240:	4649      	mov	r1, r9
 8008242:	4638      	mov	r0, r7
 8008244:	47c0      	blx	r8
 8008246:	3001      	adds	r0, #1
 8008248:	d0e6      	beq.n	8008218 <_printf_common+0xa4>
 800824a:	3601      	adds	r6, #1
 800824c:	e7d9      	b.n	8008202 <_printf_common+0x8e>
	...

08008250 <_printf_i>:
 8008250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008254:	7e0f      	ldrb	r7, [r1, #24]
 8008256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008258:	2f78      	cmp	r7, #120	; 0x78
 800825a:	4691      	mov	r9, r2
 800825c:	4680      	mov	r8, r0
 800825e:	460c      	mov	r4, r1
 8008260:	469a      	mov	sl, r3
 8008262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008266:	d807      	bhi.n	8008278 <_printf_i+0x28>
 8008268:	2f62      	cmp	r7, #98	; 0x62
 800826a:	d80a      	bhi.n	8008282 <_printf_i+0x32>
 800826c:	2f00      	cmp	r7, #0
 800826e:	f000 80d8 	beq.w	8008422 <_printf_i+0x1d2>
 8008272:	2f58      	cmp	r7, #88	; 0x58
 8008274:	f000 80a3 	beq.w	80083be <_printf_i+0x16e>
 8008278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800827c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008280:	e03a      	b.n	80082f8 <_printf_i+0xa8>
 8008282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008286:	2b15      	cmp	r3, #21
 8008288:	d8f6      	bhi.n	8008278 <_printf_i+0x28>
 800828a:	a101      	add	r1, pc, #4	; (adr r1, 8008290 <_printf_i+0x40>)
 800828c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008290:	080082e9 	.word	0x080082e9
 8008294:	080082fd 	.word	0x080082fd
 8008298:	08008279 	.word	0x08008279
 800829c:	08008279 	.word	0x08008279
 80082a0:	08008279 	.word	0x08008279
 80082a4:	08008279 	.word	0x08008279
 80082a8:	080082fd 	.word	0x080082fd
 80082ac:	08008279 	.word	0x08008279
 80082b0:	08008279 	.word	0x08008279
 80082b4:	08008279 	.word	0x08008279
 80082b8:	08008279 	.word	0x08008279
 80082bc:	08008409 	.word	0x08008409
 80082c0:	0800832d 	.word	0x0800832d
 80082c4:	080083eb 	.word	0x080083eb
 80082c8:	08008279 	.word	0x08008279
 80082cc:	08008279 	.word	0x08008279
 80082d0:	0800842b 	.word	0x0800842b
 80082d4:	08008279 	.word	0x08008279
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	08008279 	.word	0x08008279
 80082e0:	08008279 	.word	0x08008279
 80082e4:	080083f3 	.word	0x080083f3
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	1d1a      	adds	r2, r3, #4
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	602a      	str	r2, [r5, #0]
 80082f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082f8:	2301      	movs	r3, #1
 80082fa:	e0a3      	b.n	8008444 <_printf_i+0x1f4>
 80082fc:	6820      	ldr	r0, [r4, #0]
 80082fe:	6829      	ldr	r1, [r5, #0]
 8008300:	0606      	lsls	r6, r0, #24
 8008302:	f101 0304 	add.w	r3, r1, #4
 8008306:	d50a      	bpl.n	800831e <_printf_i+0xce>
 8008308:	680e      	ldr	r6, [r1, #0]
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	2e00      	cmp	r6, #0
 800830e:	da03      	bge.n	8008318 <_printf_i+0xc8>
 8008310:	232d      	movs	r3, #45	; 0x2d
 8008312:	4276      	negs	r6, r6
 8008314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008318:	485e      	ldr	r0, [pc, #376]	; (8008494 <_printf_i+0x244>)
 800831a:	230a      	movs	r3, #10
 800831c:	e019      	b.n	8008352 <_printf_i+0x102>
 800831e:	680e      	ldr	r6, [r1, #0]
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008326:	bf18      	it	ne
 8008328:	b236      	sxthne	r6, r6
 800832a:	e7ef      	b.n	800830c <_printf_i+0xbc>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	1d19      	adds	r1, r3, #4
 8008332:	6029      	str	r1, [r5, #0]
 8008334:	0601      	lsls	r1, r0, #24
 8008336:	d501      	bpl.n	800833c <_printf_i+0xec>
 8008338:	681e      	ldr	r6, [r3, #0]
 800833a:	e002      	b.n	8008342 <_printf_i+0xf2>
 800833c:	0646      	lsls	r6, r0, #25
 800833e:	d5fb      	bpl.n	8008338 <_printf_i+0xe8>
 8008340:	881e      	ldrh	r6, [r3, #0]
 8008342:	4854      	ldr	r0, [pc, #336]	; (8008494 <_printf_i+0x244>)
 8008344:	2f6f      	cmp	r7, #111	; 0x6f
 8008346:	bf0c      	ite	eq
 8008348:	2308      	moveq	r3, #8
 800834a:	230a      	movne	r3, #10
 800834c:	2100      	movs	r1, #0
 800834e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008352:	6865      	ldr	r5, [r4, #4]
 8008354:	60a5      	str	r5, [r4, #8]
 8008356:	2d00      	cmp	r5, #0
 8008358:	bfa2      	ittt	ge
 800835a:	6821      	ldrge	r1, [r4, #0]
 800835c:	f021 0104 	bicge.w	r1, r1, #4
 8008360:	6021      	strge	r1, [r4, #0]
 8008362:	b90e      	cbnz	r6, 8008368 <_printf_i+0x118>
 8008364:	2d00      	cmp	r5, #0
 8008366:	d04d      	beq.n	8008404 <_printf_i+0x1b4>
 8008368:	4615      	mov	r5, r2
 800836a:	fbb6 f1f3 	udiv	r1, r6, r3
 800836e:	fb03 6711 	mls	r7, r3, r1, r6
 8008372:	5dc7      	ldrb	r7, [r0, r7]
 8008374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008378:	4637      	mov	r7, r6
 800837a:	42bb      	cmp	r3, r7
 800837c:	460e      	mov	r6, r1
 800837e:	d9f4      	bls.n	800836a <_printf_i+0x11a>
 8008380:	2b08      	cmp	r3, #8
 8008382:	d10b      	bne.n	800839c <_printf_i+0x14c>
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	07de      	lsls	r6, r3, #31
 8008388:	d508      	bpl.n	800839c <_printf_i+0x14c>
 800838a:	6923      	ldr	r3, [r4, #16]
 800838c:	6861      	ldr	r1, [r4, #4]
 800838e:	4299      	cmp	r1, r3
 8008390:	bfde      	ittt	le
 8008392:	2330      	movle	r3, #48	; 0x30
 8008394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008398:	f105 35ff 	addle.w	r5, r5, #4294967295
 800839c:	1b52      	subs	r2, r2, r5
 800839e:	6122      	str	r2, [r4, #16]
 80083a0:	f8cd a000 	str.w	sl, [sp]
 80083a4:	464b      	mov	r3, r9
 80083a6:	aa03      	add	r2, sp, #12
 80083a8:	4621      	mov	r1, r4
 80083aa:	4640      	mov	r0, r8
 80083ac:	f7ff fee2 	bl	8008174 <_printf_common>
 80083b0:	3001      	adds	r0, #1
 80083b2:	d14c      	bne.n	800844e <_printf_i+0x1fe>
 80083b4:	f04f 30ff 	mov.w	r0, #4294967295
 80083b8:	b004      	add	sp, #16
 80083ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083be:	4835      	ldr	r0, [pc, #212]	; (8008494 <_printf_i+0x244>)
 80083c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083c4:	6829      	ldr	r1, [r5, #0]
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80083cc:	6029      	str	r1, [r5, #0]
 80083ce:	061d      	lsls	r5, r3, #24
 80083d0:	d514      	bpl.n	80083fc <_printf_i+0x1ac>
 80083d2:	07df      	lsls	r7, r3, #31
 80083d4:	bf44      	itt	mi
 80083d6:	f043 0320 	orrmi.w	r3, r3, #32
 80083da:	6023      	strmi	r3, [r4, #0]
 80083dc:	b91e      	cbnz	r6, 80083e6 <_printf_i+0x196>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	f023 0320 	bic.w	r3, r3, #32
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	2310      	movs	r3, #16
 80083e8:	e7b0      	b.n	800834c <_printf_i+0xfc>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	f043 0320 	orr.w	r3, r3, #32
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	2378      	movs	r3, #120	; 0x78
 80083f4:	4828      	ldr	r0, [pc, #160]	; (8008498 <_printf_i+0x248>)
 80083f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083fa:	e7e3      	b.n	80083c4 <_printf_i+0x174>
 80083fc:	0659      	lsls	r1, r3, #25
 80083fe:	bf48      	it	mi
 8008400:	b2b6      	uxthmi	r6, r6
 8008402:	e7e6      	b.n	80083d2 <_printf_i+0x182>
 8008404:	4615      	mov	r5, r2
 8008406:	e7bb      	b.n	8008380 <_printf_i+0x130>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	6826      	ldr	r6, [r4, #0]
 800840c:	6961      	ldr	r1, [r4, #20]
 800840e:	1d18      	adds	r0, r3, #4
 8008410:	6028      	str	r0, [r5, #0]
 8008412:	0635      	lsls	r5, r6, #24
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	d501      	bpl.n	800841c <_printf_i+0x1cc>
 8008418:	6019      	str	r1, [r3, #0]
 800841a:	e002      	b.n	8008422 <_printf_i+0x1d2>
 800841c:	0670      	lsls	r0, r6, #25
 800841e:	d5fb      	bpl.n	8008418 <_printf_i+0x1c8>
 8008420:	8019      	strh	r1, [r3, #0]
 8008422:	2300      	movs	r3, #0
 8008424:	6123      	str	r3, [r4, #16]
 8008426:	4615      	mov	r5, r2
 8008428:	e7ba      	b.n	80083a0 <_printf_i+0x150>
 800842a:	682b      	ldr	r3, [r5, #0]
 800842c:	1d1a      	adds	r2, r3, #4
 800842e:	602a      	str	r2, [r5, #0]
 8008430:	681d      	ldr	r5, [r3, #0]
 8008432:	6862      	ldr	r2, [r4, #4]
 8008434:	2100      	movs	r1, #0
 8008436:	4628      	mov	r0, r5
 8008438:	f7f7 ff0a 	bl	8000250 <memchr>
 800843c:	b108      	cbz	r0, 8008442 <_printf_i+0x1f2>
 800843e:	1b40      	subs	r0, r0, r5
 8008440:	6060      	str	r0, [r4, #4]
 8008442:	6863      	ldr	r3, [r4, #4]
 8008444:	6123      	str	r3, [r4, #16]
 8008446:	2300      	movs	r3, #0
 8008448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800844c:	e7a8      	b.n	80083a0 <_printf_i+0x150>
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	462a      	mov	r2, r5
 8008452:	4649      	mov	r1, r9
 8008454:	4640      	mov	r0, r8
 8008456:	47d0      	blx	sl
 8008458:	3001      	adds	r0, #1
 800845a:	d0ab      	beq.n	80083b4 <_printf_i+0x164>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	079b      	lsls	r3, r3, #30
 8008460:	d413      	bmi.n	800848a <_printf_i+0x23a>
 8008462:	68e0      	ldr	r0, [r4, #12]
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	4298      	cmp	r0, r3
 8008468:	bfb8      	it	lt
 800846a:	4618      	movlt	r0, r3
 800846c:	e7a4      	b.n	80083b8 <_printf_i+0x168>
 800846e:	2301      	movs	r3, #1
 8008470:	4632      	mov	r2, r6
 8008472:	4649      	mov	r1, r9
 8008474:	4640      	mov	r0, r8
 8008476:	47d0      	blx	sl
 8008478:	3001      	adds	r0, #1
 800847a:	d09b      	beq.n	80083b4 <_printf_i+0x164>
 800847c:	3501      	adds	r5, #1
 800847e:	68e3      	ldr	r3, [r4, #12]
 8008480:	9903      	ldr	r1, [sp, #12]
 8008482:	1a5b      	subs	r3, r3, r1
 8008484:	42ab      	cmp	r3, r5
 8008486:	dcf2      	bgt.n	800846e <_printf_i+0x21e>
 8008488:	e7eb      	b.n	8008462 <_printf_i+0x212>
 800848a:	2500      	movs	r5, #0
 800848c:	f104 0619 	add.w	r6, r4, #25
 8008490:	e7f5      	b.n	800847e <_printf_i+0x22e>
 8008492:	bf00      	nop
 8008494:	08008635 	.word	0x08008635
 8008498:	08008646 	.word	0x08008646

0800849c <_read_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d07      	ldr	r5, [pc, #28]	; (80084bc <_read_r+0x20>)
 80084a0:	4604      	mov	r4, r0
 80084a2:	4608      	mov	r0, r1
 80084a4:	4611      	mov	r1, r2
 80084a6:	2200      	movs	r2, #0
 80084a8:	602a      	str	r2, [r5, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f7fe fd8d 	bl	8006fca <_read>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_read_r+0x1e>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_read_r+0x1e>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20000770 	.word	0x20000770

080084c0 <_fstat_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4d07      	ldr	r5, [pc, #28]	; (80084e0 <_fstat_r+0x20>)
 80084c4:	2300      	movs	r3, #0
 80084c6:	4604      	mov	r4, r0
 80084c8:	4608      	mov	r0, r1
 80084ca:	4611      	mov	r1, r2
 80084cc:	602b      	str	r3, [r5, #0]
 80084ce:	f7fe fe5e 	bl	800718e <_fstat>
 80084d2:	1c43      	adds	r3, r0, #1
 80084d4:	d102      	bne.n	80084dc <_fstat_r+0x1c>
 80084d6:	682b      	ldr	r3, [r5, #0]
 80084d8:	b103      	cbz	r3, 80084dc <_fstat_r+0x1c>
 80084da:	6023      	str	r3, [r4, #0]
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
 80084de:	bf00      	nop
 80084e0:	20000770 	.word	0x20000770

080084e4 <_isatty_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4d06      	ldr	r5, [pc, #24]	; (8008500 <_isatty_r+0x1c>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	602b      	str	r3, [r5, #0]
 80084f0:	f7fe ffb4 	bl	800745c <_isatty>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d102      	bne.n	80084fe <_isatty_r+0x1a>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	b103      	cbz	r3, 80084fe <_isatty_r+0x1a>
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	20000770 	.word	0x20000770

08008504 <_init>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	bf00      	nop
 8008508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850a:	bc08      	pop	{r3}
 800850c:	469e      	mov	lr, r3
 800850e:	4770      	bx	lr

08008510 <_fini>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr
