
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f20  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007118  08007118  00017118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007130  08007130  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08007130  08007130  00017130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007138  08007138  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007138  08007138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  20000018  08007158  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  08007158  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b9c  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002978  00000000  00000000  00037be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003b978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029434  00000000  00000000  0003cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a28e  00000000  00000000  000660ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001046b6  00000000  00000000  0008033a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001849f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b4  00000000  00000000  00184a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000018 	.word	0x20000018
 8000214:	00000000 	.word	0x00000000
 8000218:	08007100 	.word	0x08007100

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000001c 	.word	0x2000001c
 8000234:	08007100 	.word	0x08007100

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 800053c:	b480      	push	{r7}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	4413      	add	r3, r2
 800054e:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	607a      	str	r2, [r7, #4]
 8000556:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000558:	2301      	movs	r3, #1
 800055a:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 800055c:	e025      	b.n	80005aa <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d109      	bne.n	800057a <cobsEncode+0x3e>
            FinishBlock(code);
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	7efa      	ldrb	r2, [r7, #27]
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	607a      	str	r2, [r7, #4]
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	2301      	movs	r3, #1
 8000576:	76fb      	strb	r3, [r7, #27]
 8000578:	e014      	b.n	80005a4 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	1c5a      	adds	r2, r3, #1
 800057e:	607a      	str	r2, [r7, #4]
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 8000586:	7efb      	ldrb	r3, [r7, #27]
 8000588:	3301      	adds	r3, #1
 800058a:	76fb      	strb	r3, [r7, #27]
 800058c:	7efb      	ldrb	r3, [r7, #27]
 800058e:	2bff      	cmp	r3, #255	; 0xff
 8000590:	d108      	bne.n	80005a4 <cobsEncode+0x68>
                FinishBlock(code);
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	7efa      	ldrb	r2, [r7, #27]
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	607a      	str	r2, [r7, #4]
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	2301      	movs	r3, #1
 80005a2:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3d5      	bcc.n	800055e <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	7efa      	ldrb	r2, [r7, #27]
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	607a      	str	r2, [r7, #4]
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	2301      	movs	r3, #1
 80005c2:	76fb      	strb	r3, [r7, #27]
}
 80005c4:	bf00      	nop
 80005c6:	3724      	adds	r7, #36	; 0x24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d01c      	beq.n	800061e <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3321      	adds	r3, #33	; 0x21
 80005e8:	461a      	mov	r2, r3
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	68b8      	ldr	r0, [r7, #8]
 80005ee:	f7ff ffa5 	bl	800053c <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	b29b      	uxth	r3, r3
 8000610:	3302      	adds	r3, #2
 8000612:	b29a      	uxth	r2, r3
 8000614:	2303      	movs	r3, #3
 8000616:	f005 ffd7 	bl	80065c8 <HAL_UART_Transmit>
 800061a:	4603      	mov	r3, r0
 800061c:	e000      	b.n	8000620 <ertc_dlog_send+0x50>
	}

	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1c59      	adds	r1, r3, #1
 800063a:	2303      	movs	r3, #3
 800063c:	2201      	movs	r2, #1
 800063e:	f006 f846 	bl	80066ce <HAL_UART_Receive>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10e      	bne.n	8000666 <ertc_dlog_update+0x3e>
		switch (logger->rxbuff[0]) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
 800064c:	2b41      	cmp	r3, #65	; 0x41
 800064e:	d002      	beq.n	8000656 <ertc_dlog_update+0x2e>
 8000650:	2b42      	cmp	r3, #66	; 0x42
 8000652:	d004      	beq.n	800065e <ertc_dlog_update+0x36>
 8000654:	e008      	b.n	8000668 <ertc_dlog_update+0x40>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
				break;
 800065c:	e004      	b.n	8000668 <ertc_dlog_update+0x40>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
				break;
 8000664:	e000      	b.n	8000668 <ertc_dlog_update+0x40>
//			default:
//				logger->tx_enable = false;
		}
	}
 8000666:	bf00      	nop
	return 0;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <saturate>:
struct datalog {
	float w1, w2;
	float u1, u2;
} data;

float saturate(float voltage){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(voltage> VBATT)
 800067e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000682:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800068a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068e:	dd03      	ble.n	8000698 <saturate+0x24>
		voltage = VBATT;
 8000690:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	e00a      	b.n	80006ae <saturate+0x3a>
	else if (voltage < -VBATT)
 8000698:	edd7 7a01 	vldr	s15, [r7, #4]
 800069c:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80006a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a8:	d501      	bpl.n	80006ae <saturate+0x3a>
		voltage = - VBATT;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <saturate+0x50>)
 80006ac:	607b      	str	r3, [r7, #4]
	return voltage;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	ee07 3a90 	vmov	s15, r3
}
 80006b4:	eeb0 0a67 	vmov.f32	s0, s15
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	c0800000 	.word	0xc0800000

080006c8 <PID>:

float PID(float error){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
	voltage = 0;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <PID+0xc8>)
 80006d4:	f04f 0200 	mov.w	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
	//I = I + error * KI *TS ;
	I = I + (error- KW * (buf[0]-buf[1])) * KI *TS ;
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <PID+0xcc>)
 80006dc:	edd3 7a00 	vldr	s15, [r3]
 80006e0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <PID+0xd0>)
 80006e6:	ed93 7a00 	vldr	s14, [r3]
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <PID+0xd0>)
 80006ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80006f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <PID+0xd4>)
 80006f6:	edd3 7a00 	vldr	s15, [r3]
 80006fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8000702:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <PID+0xd8>)
 8000708:	edd3 7a00 	vldr	s15, [r3]
 800070c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000714:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000788 <PID+0xc0>
 8000718:	ee27 7b05 	vmul.f64	d7, d7, d5
 800071c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000720:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <PID+0xcc>)
 8000726:	edc3 7a00 	vstr	s15, [r3]
	voltage = KP*error + I ;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <PID+0xdc>)
 800072c:	ed93 7a00 	vldr	s14, [r3]
 8000730:	edd7 7a01 	vldr	s15, [r7, #4]
 8000734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <PID+0xcc>)
 800073a:	edd3 7a00 	vldr	s15, [r3]
 800073e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <PID+0xc8>)
 8000744:	edc3 7a00 	vstr	s15, [r3]
	buf[0] = voltage;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <PID+0xc8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <PID+0xd0>)
 800074e:	6013      	str	r3, [r2, #0]
	voltage = saturate(voltage);
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <PID+0xc8>)
 8000752:	edd3 7a00 	vldr	s15, [r3]
 8000756:	eeb0 0a67 	vmov.f32	s0, s15
 800075a:	f7ff ff8b 	bl	8000674 <saturate>
 800075e:	eef0 7a40 	vmov.f32	s15, s0
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <PID+0xc8>)
 8000764:	edc3 7a00 	vstr	s15, [r3]
	buf[1] = voltage;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <PID+0xc8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <PID+0xd0>)
 800076e:	6053      	str	r3, [r2, #4]
	return voltage;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <PID+0xc8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	ee07 3a90 	vmov	s15, r3
}
 8000778:	eeb0 0a67 	vmov.f32	s0, s15
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	f3af 8000 	nop.w
 8000788:	47ae147b 	.word	0x47ae147b
 800078c:	3f847ae1 	.word	0x3f847ae1
 8000790:	20000784 	.word	0x20000784
 8000794:	20000780 	.word	0x20000780
 8000798:	20000788 	.word	0x20000788
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
// && logger.tx_enable
	if(htim->Instance == TIM6 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a43      	ldr	r2, [pc, #268]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d17d      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x10e>
	{

	static uint32_t TIM3_PreviousCount = 0;
	static uint32_t TIM4_PreviousCount = 0;

	TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 80007ba:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c0:	4a42      	ldr	r2, [pc, #264]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x124>)
 80007c2:	6013      	str	r3, [r2, #0]

	/* evaluate increment of TIM3 counter from previous count */
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 80007c4:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0310 	and.w	r3, r3, #16
 80007ce:	2b10      	cmp	r3, #16
 80007d0:	d117      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x5a>
	{
	/* check for counter underflow */
	if (TIM3_CurrentCount <= TIM3_PreviousCount)
 80007d2:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x124>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b3e      	ldr	r3, [pc, #248]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d807      	bhi.n	80007ee <HAL_TIM_PeriodElapsedCallback+0x46>
	TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80007de:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x124>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	4a3a      	ldr	r2, [pc, #232]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80007ea:	6013      	str	r3, [r2, #0]
 80007ec:	e020      	b.n	8000830 <HAL_TIM_PeriodElapsedCallback+0x88>
	else
	TIM3_DiffCount = -((TIM3_ARR_VALUE+1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 80007ee:	4b37      	ldr	r3, [pc, #220]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x124>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	f6a3 7301 	subw	r3, r3, #3841	; 0xf01
 80007fc:	4a35      	ldr	r2, [pc, #212]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	e016      	b.n	8000830 <HAL_TIM_PeriodElapsedCallback+0x88>
	}
	else
	{
		/* check for counter overflow */
		if (TIM3_CurrentCount >= TIM3_PreviousCount)
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	d307      	bcc.n	800081e <HAL_TIM_PeriodElapsedCallback+0x76>
		TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e008      	b.n	8000830 <HAL_TIM_PeriodElapsedCallback+0x88>
		else
		TIM3_DiffCount = ((TIM3_ARR_VALUE+1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	f603 7301 	addw	r3, r3, #3841	; 0xf01
 800082c:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800082e:	6013      	str	r3, [r2, #0]
	}

	TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	4a29      	ldr	r2, [pc, #164]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000838:	6013      	str	r3, [r2, #0]

		/* evaluate increment of TIM3 counter from previous count */
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0310 	and.w	r3, r3, #16
 8000844:	2b10      	cmp	r3, #16
 8000846:	d117      	bne.n	8000878 <HAL_TIM_PeriodElapsedCallback+0xd0>
	{
	/* check for counter underflow */
	if (TIM4_CurrentCount <= TIM4_PreviousCount)
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d807      	bhi.n	8000864 <HAL_TIM_PeriodElapsedCallback+0xbc>
	TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	e020      	b.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0xfe>
	else
	TIM4_DiffCount = -((TIM4_ARR_VALUE+1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	e016      	b.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0xfe>
	}
	else
	{
		/* check for counter overflow */
		if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d307      	bcc.n	8000894 <HAL_TIM_PeriodElapsedCallback+0xec>
		TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	e008      	b.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0xfe>
		else
		TIM4_DiffCount = ((TIM4_ARR_VALUE+1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80008a4:	6013      	str	r3, [r2, #0]
	}

	TIM3_PreviousCount = TIM3_CurrentCount;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80008ac:	6013      	str	r3, [r2, #0]
	TIM4_PreviousCount = TIM4_CurrentCount;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80008b4:	6013      	str	r3, [r2, #0]
//		ertc_dlog_send(&logger, &data, sizeof(data));
//		ertc_dlog_update(&logger);
	}


}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40001000 	.word	0x40001000
 80008c8:	20000220 	.word	0x20000220
 80008cc:	2000075c 	.word	0x2000075c
 80008d0:	200007a0 	.word	0x200007a0
 80008d4:	20000764 	.word	0x20000764
 80008d8:	2000026c 	.word	0x2000026c
 80008dc:	20000760 	.word	0x20000760
 80008e0:	200007a4 	.word	0x200007a4
 80008e4:	20000768 	.word	0x20000768

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f001 fe9d 	bl	800262a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f95a 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 ffb2 	bl	800185c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008f8:	f000 ff80 	bl	80017fc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80008fc:	f000 f9c6 	bl	8000c8c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000900:	f000 fa16 	bl	8000d30 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000904:	f000 fa54 	bl	8000db0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000908:	f000 fa92 	bl	8000e30 <MX_SPI1_Init>
  MX_TIM1_Init();
 800090c:	f000 face 	bl	8000eac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000910:	f000 fb9c 	bl	800104c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000914:	f000 fc34 	bl	8001180 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000918:	f000 fc88 	bl	800122c <MX_TIM4_Init>
  MX_TIM5_Init();
 800091c:	f000 fcdc 	bl	80012d8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000920:	f000 fd8a 	bl	8001438 <MX_TIM8_Init>
  MX_UART4_Init();
 8000924:	f000 feaa 	bl	800167c <MX_UART4_Init>
  MX_UART5_Init();
 8000928:	f000 fed8 	bl	80016dc <MX_UART5_Init>
  MX_USART1_UART_Init();
 800092c:	f000 ff06 	bl	800173c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000930:	f000 ff34 	bl	800179c <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000934:	f000 fe52 	bl	80015dc <MX_TIM9_Init>
  MX_TIM6_Init();
 8000938:	f000 fd46 	bl	80013c8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  logger.uart_handle = huart3; // for serial
 800093c:	4b8a      	ldr	r3, [pc, #552]	; (8000b68 <main+0x280>)
 800093e:	4a8b      	ldr	r2, [pc, #556]	; (8000b6c <main+0x284>)
 8000940:	3344      	adds	r3, #68	; 0x44
 8000942:	4611      	mov	r1, r2
 8000944:	2288      	movs	r2, #136	; 0x88
 8000946:	4618      	mov	r0, r3
 8000948:	f006 fbc4 	bl	80070d4 <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2110      	movs	r1, #16
 8000950:	4887      	ldr	r0, [pc, #540]	; (8000b70 <main+0x288>)
 8000952:	f002 fc3d 	bl	80031d0 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095a:	f001 fec3 	bl	80026e4 <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800095e:	213c      	movs	r1, #60	; 0x3c
 8000960:	4884      	ldr	r0, [pc, #528]	; (8000b74 <main+0x28c>)
 8000962:	f004 fb07 	bl	8004f74 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000966:	213c      	movs	r1, #60	; 0x3c
 8000968:	4883      	ldr	r0, [pc, #524]	; (8000b78 <main+0x290>)
 800096a:	f004 fb03 	bl	8004f74 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800096e:	2100      	movs	r1, #0
 8000970:	4882      	ldr	r0, [pc, #520]	; (8000b7c <main+0x294>)
 8000972:	f004 f8fd 	bl	8004b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000976:	2104      	movs	r1, #4
 8000978:	4880      	ldr	r0, [pc, #512]	; (8000b7c <main+0x294>)
 800097a:	f004 f8f9 	bl	8004b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800097e:	2108      	movs	r1, #8
 8000980:	487e      	ldr	r0, [pc, #504]	; (8000b7c <main+0x294>)
 8000982:	f004 f8f5 	bl	8004b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000986:	210c      	movs	r1, #12
 8000988:	487c      	ldr	r0, [pc, #496]	; (8000b7c <main+0x294>)
 800098a:	f004 f8f1 	bl	8004b70 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 800098e:	4b7c      	ldr	r3, [pc, #496]	; (8000b80 <main+0x298>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2200      	movs	r2, #0
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000996:	4b7a      	ldr	r3, [pc, #488]	; (8000b80 <main+0x298>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2200      	movs	r2, #0
 800099c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 800099e:	4b78      	ldr	r3, [pc, #480]	; (8000b80 <main+0x298>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80009a6:	4b76      	ldr	r3, [pc, #472]	; (8000b80 <main+0x298>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2200      	movs	r2, #0
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80009ae:	2100      	movs	r1, #0
 80009b0:	4873      	ldr	r0, [pc, #460]	; (8000b80 <main+0x298>)
 80009b2:	f004 f8dd 	bl	8004b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80009b6:	2104      	movs	r1, #4
 80009b8:	4871      	ldr	r0, [pc, #452]	; (8000b80 <main+0x298>)
 80009ba:	f004 f8d9 	bl	8004b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80009be:	2108      	movs	r1, #8
 80009c0:	486f      	ldr	r0, [pc, #444]	; (8000b80 <main+0x298>)
 80009c2:	f004 f8d5 	bl	8004b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80009c6:	210c      	movs	r1, #12
 80009c8:	486d      	ldr	r0, [pc, #436]	; (8000b80 <main+0x298>)
 80009ca:	f004 f8d1 	bl	8004b70 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 80009ce:	486d      	ldr	r0, [pc, #436]	; (8000b84 <main+0x29c>)
 80009d0:	f003 ff9e 	bl	8004910 <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  	v1 = TIM3_DiffCount*240*RPM2RADS;
 80009d4:	4b6c      	ldr	r3, [pc, #432]	; (8000b88 <main+0x2a0>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4613      	mov	r3, r2
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	015b      	lsls	r3, r3, #5
 80009e0:	ee07 3a90 	vmov	s15, r3
 80009e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009e8:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8000b48 <main+0x260>
 80009ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009f0:	ed9f 5b57 	vldr	d5, [pc, #348]	; 8000b50 <main+0x268>
 80009f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009fc:	4b63      	ldr	r3, [pc, #396]	; (8000b8c <main+0x2a4>)
 80009fe:	edc3 7a00 	vstr	s15, [r3]
	  	v2 = TIM4_DiffCount/16*60*RPM2RADS;
 8000a02:	4b63      	ldr	r3, [pc, #396]	; (8000b90 <main+0x2a8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	091a      	lsrs	r2, r3, #4
 8000a08:	4613      	mov	r3, r2
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	1a9b      	subs	r3, r3, r2
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a18:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8000b48 <main+0x260>
 8000a1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a20:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8000b50 <main+0x268>
 8000a24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a2c:	4b59      	ldr	r3, [pc, #356]	; (8000b94 <main+0x2ac>)
 8000a2e:	edc3 7a00 	vstr	s15, [r3]

	  	error = VREF*RPM2RADS - v1 ;
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <main+0x2a4>)
 8000a34:	edd3 7a00 	vldr	s15, [r3]
 8000a38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a3c:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8000b58 <main+0x270>
 8000a40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a48:	4b53      	ldr	r3, [pc, #332]	; (8000b98 <main+0x2b0>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	  	V = PID(error);
 8000a4e:	4b52      	ldr	r3, [pc, #328]	; (8000b98 <main+0x2b0>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb0 0a67 	vmov.f32	s0, s15
 8000a58:	f7ff fe36 	bl	80006c8 <PID>
 8000a5c:	eef0 7a40 	vmov.f32	s15, s0
 8000a60:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <main+0x2b4>)
 8000a62:	edc3 7a00 	vstr	s15, [r3]
	  	duty = V*V2DUTY;
 8000a66:	4b4d      	ldr	r3, [pc, #308]	; (8000b9c <main+0x2b4>)
 8000a68:	edd3 7a00 	vldr	s15, [r3]
 8000a6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a70:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8000b60 <main+0x278>
 8000a74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a78:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a7c:	ee17 2a90 	vmov	r2, s15
 8000a80:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <main+0x2b8>)
 8000a82:	601a      	str	r2, [r3, #0]

	  	/* Speed ctrl routine */

	       	/*	Prepare data packet */
	  		data.w1 = error/RPM2RADS;
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <main+0x2b0>)
 8000a86:	ed93 7a00 	vldr	s14, [r3]
 8000a8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a96:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000b48 <main+0x260>
 8000a9a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a9e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8000b50 <main+0x268>
 8000aa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000aa6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aaa:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <main+0x2bc>)
 8000aac:	edc3 7a00 	vstr	s15, [r3]
	  		data.w2 = 0;
 8000ab0:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <main+0x2bc>)
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
	  		data.u1 = TIM3_DiffCount*240;
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <main+0x2a0>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4613      	mov	r3, r2
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000acc:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <main+0x2bc>)
 8000ace:	edc3 7a02 	vstr	s15, [r3, #8]
	  		data.u2 = 0;
 8000ad2:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <main+0x2bc>)
 8000ad4:	f04f 0200 	mov.w	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]


	  		ertc_dlog_send(&logger, &data, sizeof(data));
 8000ada:	2210      	movs	r2, #16
 8000adc:	4931      	ldr	r1, [pc, #196]	; (8000ba4 <main+0x2bc>)
 8000ade:	4822      	ldr	r0, [pc, #136]	; (8000b68 <main+0x280>)
 8000ae0:	f7ff fd76 	bl	80005d0 <ertc_dlog_send>
	  		ertc_dlog_update(&logger);
 8000ae4:	4820      	ldr	r0, [pc, #128]	; (8000b68 <main+0x280>)
 8000ae6:	f7ff fd9f 	bl	8000628 <ertc_dlog_update>

	  /* calculate duty properly */
	  if (duty >= 0) { // rotate forward
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <main+0x2b8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db12      	blt.n	8000b18 <main+0x230>
		  /* alternate between forward and coast */
		  // Motor 1
		   __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty);
 8000af2:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <main+0x2b8>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <main+0x298>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	635a      	str	r2, [r3, #52]	; 0x34
		   __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <main+0x298>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2200      	movs	r2, #0
 8000b02:	639a      	str	r2, [r3, #56]	; 0x38
		   // Motor 2
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)duty);
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <main+0x2b8>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <main+0x298>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	63da      	str	r2, [r3, #60]	; 0x3c
		   __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <main+0x298>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2200      	movs	r2, #0
 8000b14:	641a      	str	r2, [r3, #64]	; 0x40
 8000b16:	e75d      	b.n	80009d4 <main+0xec>

	  } else { // rotate backward
		  // Motor 1
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <main+0x298>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty);
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <main+0x2b8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	425a      	negs	r2, r3
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <main+0x298>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	639a      	str	r2, [r3, #56]	; 0x38
		  // Motor 2
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <main+0x298>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)-duty);
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <main+0x2b8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	425a      	negs	r2, r3
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <main+0x298>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	641a      	str	r2, [r3, #64]	; 0x40
	  	v1 = TIM3_DiffCount*240*RPM2RADS;
 8000b40:	e748      	b.n	80009d4 <main+0xec>
 8000b42:	bf00      	nop
 8000b44:	f3af 8000 	nop.w
 8000b48:	54442d18 	.word	0x54442d18
 8000b4c:	400921fb 	.word	0x400921fb
 8000b50:	00000000 	.word	0x00000000
 8000b54:	404e0000 	.word	0x404e0000
 8000b58:	4adc62b1 	.word	0x4adc62b1
 8000b5c:	40905cca 	.word	0x40905cca
 8000b60:	00000000 	.word	0x00000000
 8000b64:	40590000 	.word	0x40590000
 8000b68:	20000690 	.word	0x20000690
 8000b6c:	20000608 	.word	0x20000608
 8000b70:	40021000 	.word	0x40021000
 8000b74:	20000220 	.word	0x20000220
 8000b78:	2000026c 	.word	0x2000026c
 8000b7c:	20000188 	.word	0x20000188
 8000b80:	20000350 	.word	0x20000350
 8000b84:	20000304 	.word	0x20000304
 8000b88:	20000764 	.word	0x20000764
 8000b8c:	20000778 	.word	0x20000778
 8000b90:	20000768 	.word	0x20000768
 8000b94:	2000077c 	.word	0x2000077c
 8000b98:	20000770 	.word	0x20000770
 8000b9c:	20000774 	.word	0x20000774
 8000ba0:	2000076c 	.word	0x2000076c
 8000ba4:	20000790 	.word	0x20000790

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	; 0x50
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2234      	movs	r2, #52	; 0x34
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f006 fa9a 	bl	80070f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bcc:	f002 fc42 	bl	8003454 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <SystemClock_Config+0xdc>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a2b      	ldr	r2, [pc, #172]	; (8000c84 <SystemClock_Config+0xdc>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <SystemClock_Config+0xdc>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <SystemClock_Config+0xe0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf0:	4a25      	ldr	r2, [pc, #148]	; (8000c88 <SystemClock_Config+0xe0>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <SystemClock_Config+0xe0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c1c:	2360      	movs	r3, #96	; 0x60
 8000c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c24:	2304      	movs	r3, #4
 8000c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 fc6f 	bl	8003514 <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c3c:	f000 ff40 	bl	8001ac0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c40:	f002 fc18 	bl	8003474 <HAL_PWREx_EnableOverDrive>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c4a:	f000 ff39 	bl	8001ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c52:	2302      	movs	r3, #2
 8000c54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	2103      	movs	r1, #3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 ff00 	bl	8003a70 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c76:	f000 ff23 	bl	8001ac0 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <MX_ADC1_Init+0x9c>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000ca6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000caa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <MX_ADC1_Init+0xa0>)
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000cee:	f001 fd1d 	bl	800272c <HAL_ADC_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cf8:	f000 fee2 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_ADC1_Init+0x98>)
 8000d0e:	f001 fd51 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d18:	f000 fed2 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000034 	.word	0x20000034
 8000d28:	40012000 	.word	0x40012000
 8000d2c:	0f000001 	.word	0x0f000001

08000d30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d36:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <MX_I2C1_Init+0x78>)
 8000d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d3c:	4a1b      	ldr	r2, [pc, #108]	; (8000dac <MX_I2C1_Init+0x7c>)
 8000d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d6a:	480e      	ldr	r0, [pc, #56]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d6c:	f002 fa4a 	bl	8003204 <HAL_I2C_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d76:	f000 fea3 	bl	8001ac0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4809      	ldr	r0, [pc, #36]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d7e:	f002 fad1 	bl	8003324 <HAL_I2CEx_ConfigAnalogFilter>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d88:	f000 fe9a 	bl	8001ac0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_I2C1_Init+0x74>)
 8000d90:	f002 fb13 	bl	80033ba <HAL_I2CEx_ConfigDigitalFilter>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 fe91 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000007c 	.word	0x2000007c
 8000da8:	40005400 	.word	0x40005400
 8000dac:	20303e5d 	.word	0x20303e5d

08000db0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <MX_I2C2_Init+0x78>)
 8000db8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <MX_I2C2_Init+0x7c>)
 8000dbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dea:	480e      	ldr	r0, [pc, #56]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000dec:	f002 fa0a 	bl	8003204 <HAL_I2C_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000df6:	f000 fe63 	bl	8001ac0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000dfe:	f002 fa91 	bl	8003324 <HAL_I2CEx_ConfigAnalogFilter>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e08:	f000 fe5a 	bl	8001ac0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_I2C2_Init+0x74>)
 8000e10:	f002 fad3 	bl	80033ba <HAL_I2CEx_ConfigDigitalFilter>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e1a:	f000 fe51 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000d0 	.word	0x200000d0
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	20303e5d 	.word	0x20303e5d

08000e30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e36:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <MX_SPI1_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e4a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e7e:	2207      	movs	r2, #7
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_SPI1_Init+0x74>)
 8000e90:	f003 fc3c 	bl	800470c <HAL_SPI_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e9a:	f000 fe11 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000124 	.word	0x20000124
 8000ea8:	40013000 	.word	0x40013000

08000eac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09a      	sub	sp, #104	; 0x68
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	222c      	movs	r2, #44	; 0x2c
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f006 f902 	bl	80070f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eec:	4b55      	ldr	r3, [pc, #340]	; (8001044 <MX_TIM1_Init+0x198>)
 8000eee:	4a56      	ldr	r2, [pc, #344]	; (8001048 <MX_TIM1_Init+0x19c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ef2:	4b54      	ldr	r3, [pc, #336]	; (8001044 <MX_TIM1_Init+0x198>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b52      	ldr	r3, [pc, #328]	; (8001044 <MX_TIM1_Init+0x198>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000efe:	4b51      	ldr	r3, [pc, #324]	; (8001044 <MX_TIM1_Init+0x198>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <MX_TIM1_Init+0x198>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <MX_TIM1_Init+0x198>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <MX_TIM1_Init+0x198>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f16:	484b      	ldr	r0, [pc, #300]	; (8001044 <MX_TIM1_Init+0x198>)
 8000f18:	f003 fca3 	bl	8004862 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f22:	f000 fdcd 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f30:	4619      	mov	r1, r3
 8000f32:	4844      	ldr	r0, [pc, #272]	; (8001044 <MX_TIM1_Init+0x198>)
 8000f34:	f004 fbf6 	bl	8005724 <HAL_TIM_ConfigClockSource>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f3e:	f000 fdbf 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000f42:	4840      	ldr	r0, [pc, #256]	; (8001044 <MX_TIM1_Init+0x198>)
 8000f44:	f003 fd5c 	bl	8004a00 <HAL_TIM_OC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f4e:	f000 fdb7 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f62:	4619      	mov	r1, r3
 8000f64:	4837      	ldr	r0, [pc, #220]	; (8001044 <MX_TIM1_Init+0x198>)
 8000f66:	f005 f9b7 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000f70:	f000 fda6 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000f74:	2350      	movs	r3, #80	; 0x50
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f94:	2200      	movs	r2, #0
 8000f96:	4619      	mov	r1, r3
 8000f98:	482a      	ldr	r0, [pc, #168]	; (8001044 <MX_TIM1_Init+0x198>)
 8000f9a:	f004 f999 	bl	80052d0 <HAL_TIM_OC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000fa4:	f000 fd8c 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fac:	2204      	movs	r2, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4824      	ldr	r0, [pc, #144]	; (8001044 <MX_TIM1_Init+0x198>)
 8000fb2:	f004 f98d 	bl	80052d0 <HAL_TIM_OC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000fbc:	f000 fd80 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481e      	ldr	r0, [pc, #120]	; (8001044 <MX_TIM1_Init+0x198>)
 8000fca:	f004 f981 	bl	80052d0 <HAL_TIM_OC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000fd4:	f000 fd74 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fdc:	220c      	movs	r2, #12
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4818      	ldr	r0, [pc, #96]	; (8001044 <MX_TIM1_Init+0x198>)
 8000fe2:	f004 f975 	bl	80052d0 <HAL_TIM_OC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000fec:	f000 fd68 	bl	8001ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <MX_TIM1_Init+0x198>)
 8001026:	f005 f9e5 	bl	80063f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001030:	f000 fd46 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <MX_TIM1_Init+0x198>)
 8001036:	f001 f805 	bl	8002044 <HAL_TIM_MspPostInit>

}
 800103a:	bf00      	nop
 800103c:	3768      	adds	r7, #104	; 0x68
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000188 	.word	0x20000188
 8001048:	40010000 	.word	0x40010000

0800104c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b092      	sub	sp, #72	; 0x48
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800108c:	4b3b      	ldr	r3, [pc, #236]	; (800117c <MX_TIM2_Init+0x130>)
 800108e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001092:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001094:	4b39      	ldr	r3, [pc, #228]	; (800117c <MX_TIM2_Init+0x130>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <MX_TIM2_Init+0x130>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010a0:	4b36      	ldr	r3, [pc, #216]	; (800117c <MX_TIM2_Init+0x130>)
 80010a2:	f04f 32ff 	mov.w	r2, #4294967295
 80010a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <MX_TIM2_Init+0x130>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <MX_TIM2_Init+0x130>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b4:	4831      	ldr	r0, [pc, #196]	; (800117c <MX_TIM2_Init+0x130>)
 80010b6:	f003 fbd4 	bl	8004862 <HAL_TIM_Base_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010c0:	f000 fcfe 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010ce:	4619      	mov	r1, r3
 80010d0:	482a      	ldr	r0, [pc, #168]	; (800117c <MX_TIM2_Init+0x130>)
 80010d2:	f004 fb27 	bl	8005724 <HAL_TIM_ConfigClockSource>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010dc:	f000 fcf0 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010e0:	4826      	ldr	r0, [pc, #152]	; (800117c <MX_TIM2_Init+0x130>)
 80010e2:	f003 fcee 	bl	8004ac2 <HAL_TIM_PWM_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80010ec:	f000 fce8 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010f0:	4822      	ldr	r0, [pc, #136]	; (800117c <MX_TIM2_Init+0x130>)
 80010f2:	f003 fe37 	bl	8004d64 <HAL_TIM_IC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010fc:	f000 fce0 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110c:	4619      	mov	r1, r3
 800110e:	481b      	ldr	r0, [pc, #108]	; (800117c <MX_TIM2_Init+0x130>)
 8001110:	f005 f8e2 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800111a:	f000 fcd1 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	; 0x60
 8001120:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4811      	ldr	r0, [pc, #68]	; (800117c <MX_TIM2_Init+0x130>)
 8001138:	f004 f9e0 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001142:	f000 fcbd 	bl	8001ac0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2208      	movs	r2, #8
 800115a:	4619      	mov	r1, r3
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_TIM2_Init+0x130>)
 800115e:	f004 f931 	bl	80053c4 <HAL_TIM_IC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001168:	f000 fcaa 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <MX_TIM2_Init+0x130>)
 800116e:	f000 ff69 	bl	8002044 <HAL_TIM_MspPostInit>

}
 8001172:	bf00      	nop
 8001174:	3748      	adds	r7, #72	; 0x48
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200001d4 	.word	0x200001d4

08001180 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2224      	movs	r2, #36	; 0x24
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f005 ffae 	bl	80070f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	463b      	mov	r3, r7
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <MX_TIM3_Init+0xa4>)
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <MX_TIM3_Init+0xa8>)
 80011a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_TIM3_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_TIM3_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_TIM3_Init+0xa4>)
 80011b2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80011b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_TIM3_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM3_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011c4:	2303      	movs	r3, #3
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80011d4:	230f      	movs	r3, #15
 80011d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011dc:	2301      	movs	r3, #1
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80011e4:	230f      	movs	r3, #15
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM3_Init+0xa4>)
 80011f0:	f003 fe1a 	bl	8004e28 <HAL_TIM_Encoder_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80011fa:	f000 fc61 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM3_Init+0xa4>)
 800120c:	f005 f864 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001216:	f000 fc53 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000220 	.word	0x20000220
 8001228:	40000400 	.word	0x40000400

0800122c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2224      	movs	r2, #36	; 0x24
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f005 ff58 	bl	80070f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_TIM4_Init+0xa4>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <MX_TIM4_Init+0xa8>)
 800124e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_TIM4_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM4_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM4_Init+0xa4>)
 800125e:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001262:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM4_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM4_Init+0xa4>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001270:	2303      	movs	r3, #3
 8001272:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001278:	2301      	movs	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001280:	230f      	movs	r3, #15
 8001282:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001288:	2301      	movs	r3, #1
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001290:	230f      	movs	r3, #15
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM4_Init+0xa4>)
 800129c:	f003 fdc4 	bl	8004e28 <HAL_TIM_Encoder_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012a6:	f000 fc0b 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012b2:	463b      	mov	r3, r7
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM4_Init+0xa4>)
 80012b8:	f005 f80e 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012c2:	f000 fbfd 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3730      	adds	r7, #48	; 0x30
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000026c 	.word	0x2000026c
 80012d4:	40000800 	.word	0x40000800

080012d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <MX_TIM5_Init+0xe8>)
 800130c:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <MX_TIM5_Init+0xec>)
 800130e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <MX_TIM5_Init+0xe8>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <MX_TIM5_Init+0xe8>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <MX_TIM5_Init+0xe8>)
 800131e:	f04f 32ff 	mov.w	r2, #4294967295
 8001322:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <MX_TIM5_Init+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <MX_TIM5_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001330:	4823      	ldr	r0, [pc, #140]	; (80013c0 <MX_TIM5_Init+0xe8>)
 8001332:	f003 fa96 	bl	8004862 <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800133c:	f000 fbc0 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134a:	4619      	mov	r1, r3
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <MX_TIM5_Init+0xe8>)
 800134e:	f004 f9e9 	bl	8005724 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001358:	f000 fbb2 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800135c:	4818      	ldr	r0, [pc, #96]	; (80013c0 <MX_TIM5_Init+0xe8>)
 800135e:	f003 fbb0 	bl	8004ac2 <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001368:	f000 fbaa 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <MX_TIM5_Init+0xe8>)
 800137c:	f004 ffac 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001386:	f000 fb9b 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138a:	2360      	movs	r3, #96	; 0x60
 800138c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4807      	ldr	r0, [pc, #28]	; (80013c0 <MX_TIM5_Init+0xe8>)
 80013a2:	f004 f8ab 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013ac:	f000 fb88 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <MX_TIM5_Init+0xe8>)
 80013b2:	f000 fe47 	bl	8002044 <HAL_TIM_MspPostInit>

}
 80013b6:	bf00      	nop
 80013b8:	3738      	adds	r7, #56	; 0x38
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200002b8 	.word	0x200002b8
 80013c4:	40000c00 	.word	0x40000c00

080013c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_TIM6_Init+0x68>)
 80013da:	4a16      	ldr	r2, [pc, #88]	; (8001434 <MX_TIM6_Init+0x6c>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_TIM6_Init+0x68>)
 80013e0:	f240 32bf 	movw	r2, #959	; 0x3bf
 80013e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_TIM6_Init+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_TIM6_Init+0x68>)
 80013ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_TIM6_Init+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_TIM6_Init+0x68>)
 80013fc:	f003 fa31 	bl	8004862 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001406:	f000 fb5b 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_TIM6_Init+0x68>)
 8001418:	f004 ff5e 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001422:	f000 fb4d 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000304 	.word	0x20000304
 8001434:	40001000 	.word	0x40001000

08001438 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b09a      	sub	sp, #104	; 0x68
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	222c      	movs	r2, #44	; 0x2c
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f005 fe3c 	bl	80070f0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001478:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <MX_TIM8_Init+0x19c>)
 800147a:	4a57      	ldr	r2, [pc, #348]	; (80015d8 <MX_TIM8_Init+0x1a0>)
 800147c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 800147e:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <MX_TIM8_Init+0x19c>)
 8001480:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001484:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <MX_TIM8_Init+0x19c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 800148c:	4b51      	ldr	r3, [pc, #324]	; (80015d4 <MX_TIM8_Init+0x19c>)
 800148e:	f240 128f 	movw	r2, #399	; 0x18f
 8001492:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b4f      	ldr	r3, [pc, #316]	; (80015d4 <MX_TIM8_Init+0x19c>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800149a:	4b4e      	ldr	r3, [pc, #312]	; (80015d4 <MX_TIM8_Init+0x19c>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <MX_TIM8_Init+0x19c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014a6:	484b      	ldr	r0, [pc, #300]	; (80015d4 <MX_TIM8_Init+0x19c>)
 80014a8:	f003 f9db 	bl	8004862 <HAL_TIM_Base_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80014b2:	f000 fb05 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ba:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014c0:	4619      	mov	r1, r3
 80014c2:	4844      	ldr	r0, [pc, #272]	; (80015d4 <MX_TIM8_Init+0x19c>)
 80014c4:	f004 f92e 	bl	8005724 <HAL_TIM_ConfigClockSource>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80014ce:	f000 faf7 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014d2:	4840      	ldr	r0, [pc, #256]	; (80015d4 <MX_TIM8_Init+0x19c>)
 80014d4:	f003 faf5 	bl	8004ac2 <HAL_TIM_PWM_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80014de:	f000 faef 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f2:	4619      	mov	r1, r3
 80014f4:	4837      	ldr	r0, [pc, #220]	; (80015d4 <MX_TIM8_Init+0x19c>)
 80014f6:	f004 feef 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001500:	f000 fade 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001504:	2360      	movs	r3, #96	; 0x60
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001510:	2300      	movs	r3, #0
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001520:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	482a      	ldr	r0, [pc, #168]	; (80015d4 <MX_TIM8_Init+0x19c>)
 800152a:	f003 ffe7 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001534:	f000 fac4 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153c:	2204      	movs	r2, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4824      	ldr	r0, [pc, #144]	; (80015d4 <MX_TIM8_Init+0x19c>)
 8001542:	f003 ffdb 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800154c:	f000 fab8 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001554:	2208      	movs	r2, #8
 8001556:	4619      	mov	r1, r3
 8001558:	481e      	ldr	r0, [pc, #120]	; (80015d4 <MX_TIM8_Init+0x19c>)
 800155a:	f003 ffcf 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001564:	f000 faac 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800156c:	220c      	movs	r2, #12
 800156e:	4619      	mov	r1, r3
 8001570:	4818      	ldr	r0, [pc, #96]	; (80015d4 <MX_TIM8_Init+0x19c>)
 8001572:	f003 ffc3 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 800157c:	f000 faa0 	bl	8001ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001598:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <MX_TIM8_Init+0x19c>)
 80015b6:	f004 ff1d 	bl	80063f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 80015c0:	f000 fa7e 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MX_TIM8_Init+0x19c>)
 80015c6:	f000 fd3d 	bl	8002044 <HAL_TIM_MspPostInit>

}
 80015ca:	bf00      	nop
 80015cc:	3768      	adds	r7, #104	; 0x68
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000350 	.word	0x20000350
 80015d8:	40010400 	.word	0x40010400

080015dc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <MX_TIM9_Init+0x98>)
 80015f6:	4a20      	ldr	r2, [pc, #128]	; (8001678 <MX_TIM9_Init+0x9c>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <MX_TIM9_Init+0x98>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <MX_TIM9_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001606:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_TIM9_Init+0x98>)
 8001608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <MX_TIM9_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_TIM9_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800161a:	4816      	ldr	r0, [pc, #88]	; (8001674 <MX_TIM9_Init+0x98>)
 800161c:	f003 fa51 	bl	8004ac2 <HAL_TIM_PWM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001626:	f000 fa4b 	bl	8001ac0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162a:	2360      	movs	r3, #96	; 0x60
 800162c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	4619      	mov	r1, r3
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <MX_TIM9_Init+0x98>)
 8001642:	f003 ff5b 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 800164c:	f000 fa38 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2204      	movs	r2, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4807      	ldr	r0, [pc, #28]	; (8001674 <MX_TIM9_Init+0x98>)
 8001658:	f003 ff50 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001662:	f000 fa2d 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001666:	4803      	ldr	r0, [pc, #12]	; (8001674 <MX_TIM9_Init+0x98>)
 8001668:	f000 fcec 	bl	8002044 <HAL_TIM_MspPostInit>

}
 800166c:	bf00      	nop
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000039c 	.word	0x2000039c
 8001678:	40014000 	.word	0x40014000

0800167c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_UART4_Init+0x58>)
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <MX_UART4_Init+0x5c>)
 8001684:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_UART4_Init+0x58>)
 8001688:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800168c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_UART4_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_UART4_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <MX_UART4_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_UART4_Init+0x58>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <MX_UART4_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_UART4_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <MX_UART4_Init+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_UART4_Init+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_UART4_Init+0x58>)
 80016c0:	f004 ff34 	bl	800652c <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80016ca:	f000 f9f9 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200003e8 	.word	0x200003e8
 80016d8:	40004c00 	.word	0x40004c00

080016dc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_UART5_Init+0x58>)
 80016e2:	4a15      	ldr	r2, [pc, #84]	; (8001738 <MX_UART5_Init+0x5c>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_UART5_Init+0x58>)
 80016e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_UART5_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_UART5_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_UART5_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_UART5_Init+0x58>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <MX_UART5_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_UART5_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <MX_UART5_Init+0x58>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_UART5_Init+0x58>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_UART5_Init+0x58>)
 8001720:	f004 ff04 	bl	800652c <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800172a:	f000 f9c9 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000470 	.word	0x20000470
 8001738:	40005000 	.word	0x40005000

0800173c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_USART1_UART_Init+0x58>)
 8001742:	4a15      	ldr	r2, [pc, #84]	; (8001798 <MX_USART1_UART_Init+0x5c>)
 8001744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_USART1_UART_Init+0x58>)
 8001748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800174c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_USART1_UART_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_USART1_UART_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_USART1_UART_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_USART1_UART_Init+0x58>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_USART1_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_USART1_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_USART1_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_USART1_UART_Init+0x58>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_USART1_UART_Init+0x58>)
 8001780:	f004 fed4 	bl	800652c <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800178a:	f000 f999 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200004f8 	.word	0x200004f8
 8001798:	40011000 	.word	0x40011000

0800179c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <MX_USART2_UART_Init+0x58>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017a8:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <MX_USART2_UART_Init+0x5c>)
 80017aa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017c0:	220c      	movs	r2, #12
 80017c2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_USART2_UART_Init+0x54>)
 80017de:	f004 fea5 	bl	800652c <HAL_UART_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80017e8:	f000 f96a 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000580 	.word	0x20000580
 80017f4:	40004400 	.word	0x40004400
 80017f8:	000f4240 	.word	0x000f4240

080017fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_USART3_UART_Init+0x58>)
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <MX_USART3_UART_Init+0x5c>)
 8001804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <MX_USART3_UART_Init+0x58>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_USART3_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_USART3_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_USART3_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_USART3_UART_Init+0x58>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <MX_USART3_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_USART3_UART_Init+0x58>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <MX_USART3_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_USART3_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_USART3_UART_Init+0x58>)
 8001840:	f004 fe74 	bl	800652c <HAL_UART_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800184a:	f000 f939 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000608 	.word	0x20000608
 8001858:	40004800 	.word	0x40004800

0800185c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08e      	sub	sp, #56	; 0x38
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001872:	4b8c      	ldr	r3, [pc, #560]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a8b      	ldr	r2, [pc, #556]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001878:	f043 0310 	orr.w	r3, r3, #16
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b89      	ldr	r3, [pc, #548]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	4b86      	ldr	r3, [pc, #536]	; (8001aa4 <MX_GPIO_Init+0x248>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a85      	ldr	r2, [pc, #532]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b83      	ldr	r3, [pc, #524]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a2:	4b80      	ldr	r3, [pc, #512]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a7f      	ldr	r2, [pc, #508]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018a8:	f043 0320 	orr.w	r3, r3, #32
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ba:	4b7a      	ldr	r3, [pc, #488]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a79      	ldr	r2, [pc, #484]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b77      	ldr	r3, [pc, #476]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b74      	ldr	r3, [pc, #464]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a73      	ldr	r2, [pc, #460]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b6e      	ldr	r3, [pc, #440]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a6d      	ldr	r2, [pc, #436]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b6b      	ldr	r3, [pc, #428]	; (8001aa4 <MX_GPIO_Init+0x248>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001902:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a67      	ldr	r2, [pc, #412]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b65      	ldr	r3, [pc, #404]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800191a:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <MX_GPIO_Init+0x248>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a61      	ldr	r2, [pc, #388]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <MX_GPIO_Init+0x248>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2118      	movs	r1, #24
 8001936:	485c      	ldr	r0, [pc, #368]	; (8001aa8 <MX_GPIO_Init+0x24c>)
 8001938:	f001 fc4a 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001942:	485a      	ldr	r0, [pc, #360]	; (8001aac <MX_GPIO_Init+0x250>)
 8001944:	f001 fc44 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	2140      	movs	r1, #64	; 0x40
 800194c:	4858      	ldr	r0, [pc, #352]	; (8001ab0 <MX_GPIO_Init+0x254>)
 800194e:	f001 fc3f 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001952:	2318      	movs	r3, #24
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001956:	2301      	movs	r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	484f      	ldr	r0, [pc, #316]	; (8001aa8 <MX_GPIO_Init+0x24c>)
 800196a:	f001 fa85 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 800196e:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001974:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800197e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001982:	4619      	mov	r1, r3
 8001984:	484b      	ldr	r0, [pc, #300]	; (8001ab4 <MX_GPIO_Init+0x258>)
 8001986:	f001 fa77 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800198a:	2332      	movs	r3, #50	; 0x32
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199a:	230b      	movs	r3, #11
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a2:	4619      	mov	r1, r3
 80019a4:	4844      	ldr	r0, [pc, #272]	; (8001ab8 <MX_GPIO_Init+0x25c>)
 80019a6:	f001 fa67 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80019aa:	2386      	movs	r3, #134	; 0x86
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ba:	230b      	movs	r3, #11
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	4619      	mov	r1, r3
 80019c4:	483d      	ldr	r0, [pc, #244]	; (8001abc <MX_GPIO_Init+0x260>)
 80019c6:	f001 fa57 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019ca:	f244 0381 	movw	r3, #16513	; 0x4081
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	4619      	mov	r1, r3
 80019e2:	4832      	ldr	r0, [pc, #200]	; (8001aac <MX_GPIO_Init+0x250>)
 80019e4:	f001 fa48 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019fa:	230b      	movs	r3, #11
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	4829      	ldr	r0, [pc, #164]	; (8001aac <MX_GPIO_Init+0x250>)
 8001a06:	f001 fa37 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a0a:	2340      	movs	r3, #64	; 0x40
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4823      	ldr	r0, [pc, #140]	; (8001ab0 <MX_GPIO_Init+0x254>)
 8001a22:	f001 fa29 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a36:	4619      	mov	r1, r3
 8001a38:	481d      	ldr	r0, [pc, #116]	; (8001ab0 <MX_GPIO_Init+0x254>)
 8001a3a:	f001 fa1d 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a3e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a50:	230a      	movs	r3, #10
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4818      	ldr	r0, [pc, #96]	; (8001abc <MX_GPIO_Init+0x260>)
 8001a5c:	f001 fa0c 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_GPIO_Init+0x260>)
 8001a76:	f001 f9ff 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a8c:	230b      	movs	r3, #11
 8001a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	4619      	mov	r1, r3
 8001a96:	4806      	ldr	r0, [pc, #24]	; (8001ab0 <MX_GPIO_Init+0x254>)
 8001a98:	f001 f9ee 	bl	8002e78 <HAL_GPIO_Init>

}
 8001a9c:	bf00      	nop
 8001a9e:	3738      	adds	r7, #56	; 0x38
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40021800 	.word	0x40021800
 8001ab4:	40021400 	.word	0x40021400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020000 	.word	0x40020000

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <Error_Handler+0x8>
	...

08001acc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_MspInit+0x44>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <HAL_MspInit+0x44>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_MspInit+0x44>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_MspInit+0x44>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_MspInit+0x44>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_MspInit+0x44>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <HAL_ADC_MspInit+0x74>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d123      	bne.n	8001b7e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_ADC_MspInit+0x78>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8001b66:	2308      	movs	r3, #8
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <HAL_ADC_MspInit+0x7c>)
 8001b7a:	f001 f97d 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40012000 	.word	0x40012000
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020000 	.word	0x40020000

08001b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b0b0      	sub	sp, #192	; 0xc0
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	2290      	movs	r2, #144	; 0x90
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f005 fa9b 	bl	80070f0 <memset>
  if(hi2c->Instance==I2C1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a44      	ldr	r2, [pc, #272]	; (8001cd0 <HAL_I2C_MspInit+0x13c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d13e      	bne.n	8001c42 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bc8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 f971 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001be0:	f7ff ff6e 	bl	8001ac0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4a3a      	ldr	r2, [pc, #232]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf0:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c04:	2312      	movs	r3, #18
 8001c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c16:	2304      	movs	r3, #4
 8001c18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c20:	4619      	mov	r1, r3
 8001c22:	482d      	ldr	r0, [pc, #180]	; (8001cd8 <HAL_I2C_MspInit+0x144>)
 8001c24:	f001 f928 	bl	8002e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	4a29      	ldr	r2, [pc, #164]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c32:	6413      	str	r3, [r2, #64]	; 0x40
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c40:	e041      	b.n	8001cc6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <HAL_I2C_MspInit+0x148>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d13c      	bne.n	8001cc6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c50:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 f92d 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001c68:	f7ff ff2a 	bl	8001ac0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001c72:	f043 0320 	orr.w	r3, r3, #32
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8a:	2312      	movs	r3, #18
 8001c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ca2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <HAL_I2C_MspInit+0x14c>)
 8001caa:	f001 f8e5 	bl	8002e78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_I2C_MspInit+0x140>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
}
 8001cc6:	bf00      	nop
 8001cc8:	37c0      	adds	r7, #192	; 0xc0
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40005400 	.word	0x40005400
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40005800 	.word	0x40005800
 8001ce0:	40021400 	.word	0x40021400

08001ce4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	; 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a33      	ldr	r2, [pc, #204]	; (8001dd0 <HAL_SPI_MspInit+0xec>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d160      	bne.n	8001dc8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d06:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a32      	ldr	r2, [pc, #200]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a26      	ldr	r2, [pc, #152]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <HAL_SPI_MspInit+0xf0>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d66:	2320      	movs	r3, #32
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d76:	2305      	movs	r3, #5
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4815      	ldr	r0, [pc, #84]	; (8001dd8 <HAL_SPI_MspInit+0xf4>)
 8001d82:	f001 f879 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d96:	2305      	movs	r3, #5
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9a:	f107 031c 	add.w	r3, r7, #28
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480e      	ldr	r0, [pc, #56]	; (8001ddc <HAL_SPI_MspInit+0xf8>)
 8001da2:	f001 f869 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db8:	2305      	movs	r3, #5
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4807      	ldr	r0, [pc, #28]	; (8001de0 <HAL_SPI_MspInit+0xfc>)
 8001dc4:	f001 f858 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3730      	adds	r7, #48	; 0x30
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40013000 	.word	0x40013000
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020c00 	.word	0x40020c00
 8001de0:	40021800 	.word	0x40021800

08001de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08e      	sub	sp, #56	; 0x38
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a3f      	ldr	r2, [pc, #252]	; (8001f00 <HAL_TIM_Base_MspInit+0x11c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10c      	bne.n	8001e20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a3e      	ldr	r2, [pc, #248]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	623b      	str	r3, [r7, #32]
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e1e:	e06b      	b.n	8001ef8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e28:	d129      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a35      	ldr	r2, [pc, #212]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 8001e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4824      	ldr	r0, [pc, #144]	; (8001f08 <HAL_TIM_Base_MspInit+0x124>)
 8001e78:	f000 fffe 	bl	8002e78 <HAL_GPIO_Init>
}
 8001e7c:	e03c      	b.n	8001ef8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_TIM_Base_MspInit+0x128>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d10c      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e8e:	f043 0308 	orr.w	r3, r3, #8
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697b      	ldr	r3, [r7, #20]
}
 8001ea0:	e02a      	b.n	8001ef8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <HAL_TIM_Base_MspInit+0x12c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d114      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	4a14      	ldr	r2, [pc, #80]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	2036      	movs	r0, #54	; 0x36
 8001eca:	f000 ff9e 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ece:	2036      	movs	r0, #54	; 0x36
 8001ed0:	f000 ffb7 	bl	8002e42 <HAL_NVIC_EnableIRQ>
}
 8001ed4:	e010      	b.n	8001ef8 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_TIM_Base_MspInit+0x130>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d10b      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	6453      	str	r3, [r2, #68]	; 0x44
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_TIM_Base_MspInit+0x120>)
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3738      	adds	r7, #56	; 0x38
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40010000 	.word	0x40010000
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40000c00 	.word	0x40000c00
 8001f10:	40001000 	.word	0x40001000
 8001f14:	40010400 	.word	0x40010400

08001f18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	; 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2e      	ldr	r2, [pc, #184]	; (8001ff0 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d128      	bne.n	8001f8c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8001f6a:	2330      	movs	r3, #48	; 0x30
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f86:	f000 ff77 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f8a:	e02d      	b.n	8001fe8 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d128      	bne.n	8001fe8 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8001fc6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4807      	ldr	r0, [pc, #28]	; (8002000 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001fe4:	f000 ff48 	bl	8002e78 <HAL_GPIO_Init>
}
 8001fe8:	bf00      	nop
 8001fea:	3730      	adds	r7, #48	; 0x30
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40000800 	.word	0x40000800
 8002000:	40020c00 	.word	0x40020c00

08002004 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_TIM_PWM_MspInit+0x38>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10b      	bne.n	800202e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_TIM_PWM_MspInit+0x3c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_TIM_PWM_MspInit+0x3c>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_TIM_PWM_MspInit+0x3c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40014000 	.word	0x40014000
 8002040:	40023800 	.word	0x40023800

08002044 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a56      	ldr	r2, [pc, #344]	; (80021bc <HAL_TIM_MspPostInit+0x178>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d11d      	bne.n	80020a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002066:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a55      	ldr	r2, [pc, #340]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 800206c:	f043 0310 	orr.w	r3, r3, #16
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 800207e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002090:	2301      	movs	r3, #1
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	4619      	mov	r1, r3
 800209a:	484a      	ldr	r0, [pc, #296]	; (80021c4 <HAL_TIM_MspPostInit+0x180>)
 800209c:	f000 feec 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80020a0:	e088      	b.n	80021b4 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d11d      	bne.n	80020e8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4a43      	ldr	r2, [pc, #268]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6313      	str	r3, [r2, #48]	; 0x30
 80020b8:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 80020c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020d6:	2301      	movs	r3, #1
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	4839      	ldr	r0, [pc, #228]	; (80021c8 <HAL_TIM_MspPostInit+0x184>)
 80020e2:	f000 fec9 	bl	8002e78 <HAL_GPIO_Init>
}
 80020e6:	e065      	b.n	80021b4 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a37      	ldr	r2, [pc, #220]	; (80021cc <HAL_TIM_MspPostInit+0x188>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d11c      	bne.n	800212c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a32      	ldr	r2, [pc, #200]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 800210a:	2301      	movs	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800211a:	2302      	movs	r3, #2
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	4828      	ldr	r0, [pc, #160]	; (80021c8 <HAL_TIM_MspPostInit+0x184>)
 8002126:	f000 fea7 	bl	8002e78 <HAL_GPIO_Init>
}
 800212a:	e043      	b.n	80021b4 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <HAL_TIM_MspPostInit+0x18c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d11d      	bne.n	8002172 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a21      	ldr	r2, [pc, #132]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 800214e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002160:	2303      	movs	r3, #3
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	481a      	ldr	r0, [pc, #104]	; (80021d4 <HAL_TIM_MspPostInit+0x190>)
 800216c:	f000 fe84 	bl	8002e78 <HAL_GPIO_Init>
}
 8002170:	e020      	b.n	80021b4 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a18      	ldr	r2, [pc, #96]	; (80021d8 <HAL_TIM_MspPostInit+0x194>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d11b      	bne.n	80021b4 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	6313      	str	r3, [r2, #48]	; 0x30
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_TIM_MspPostInit+0x17c>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8002194:	2360      	movs	r3, #96	; 0x60
 8002196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80021a4:	2303      	movs	r3, #3
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a8:	f107 031c 	add.w	r3, r7, #28
 80021ac:	4619      	mov	r1, r3
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <HAL_TIM_MspPostInit+0x180>)
 80021b0:	f000 fe62 	bl	8002e78 <HAL_GPIO_Init>
}
 80021b4:	bf00      	nop
 80021b6:	3730      	adds	r7, #48	; 0x30
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40010000 	.word	0x40010000
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40000c00 	.word	0x40000c00
 80021d0:	40010400 	.word	0x40010400
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40014000 	.word	0x40014000

080021dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b0b6      	sub	sp, #216	; 0xd8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021f8:	2290      	movs	r2, #144	; 0x90
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 ff77 	bl	80070f0 <memset>
  if(huart->Instance==UART4)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4aa0      	ldr	r2, [pc, #640]	; (8002488 <HAL_UART_MspInit+0x2ac>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d13e      	bne.n	800228a <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800220c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002218:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800221c:	4618      	mov	r0, r3
 800221e:	f001 fe4d 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002228:	f7ff fc4a 	bl	8001ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800222c:	4b97      	ldr	r3, [pc, #604]	; (800248c <HAL_UART_MspInit+0x2b0>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a96      	ldr	r2, [pc, #600]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b94      	ldr	r3, [pc, #592]	; (800248c <HAL_UART_MspInit+0x2b0>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
 8002242:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002244:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a90      	ldr	r2, [pc, #576]	; (800248c <HAL_UART_MspInit+0x2b0>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b8e      	ldr	r3, [pc, #568]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 800225c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002260:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002276:	2308      	movs	r3, #8
 8002278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002280:	4619      	mov	r1, r3
 8002282:	4883      	ldr	r0, [pc, #524]	; (8002490 <HAL_UART_MspInit+0x2b4>)
 8002284:	f000 fdf8 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002288:	e151      	b.n	800252e <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a81      	ldr	r2, [pc, #516]	; (8002494 <HAL_UART_MspInit+0x2b8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d160      	bne.n	8002356 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 fe09 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80022b0:	f7ff fc06 	bl	8001ac0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80022b4:	4b75      	ldr	r3, [pc, #468]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4a74      	ldr	r2, [pc, #464]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80022ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022be:	6413      	str	r3, [r2, #64]	; 0x40
 80022c0:	4b72      	ldr	r3, [pc, #456]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80022d2:	f043 0302 	orr.w	r3, r3, #2
 80022d6:	6313      	str	r3, [r2, #48]	; 0x30
 80022d8:	4b6c      	ldr	r3, [pc, #432]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e4:	4b69      	ldr	r3, [pc, #420]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4a68      	ldr	r2, [pc, #416]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6313      	str	r3, [r2, #48]	; 0x30
 80022f0:	4b66      	ldr	r3, [pc, #408]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002300:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002316:	2308      	movs	r3, #8
 8002318:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002320:	4619      	mov	r1, r3
 8002322:	485d      	ldr	r0, [pc, #372]	; (8002498 <HAL_UART_MspInit+0x2bc>)
 8002324:	f000 fda8 	bl	8002e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233c:	2303      	movs	r3, #3
 800233e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002342:	2308      	movs	r3, #8
 8002344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002348:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800234c:	4619      	mov	r1, r3
 800234e:	4850      	ldr	r0, [pc, #320]	; (8002490 <HAL_UART_MspInit+0x2b4>)
 8002350:	f000 fd92 	bl	8002e78 <HAL_GPIO_Init>
}
 8002354:	e0eb      	b.n	800252e <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a50      	ldr	r2, [pc, #320]	; (800249c <HAL_UART_MspInit+0x2c0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d151      	bne.n	8002404 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002360:	2340      	movs	r3, #64	; 0x40
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002364:	2300      	movs	r3, #0
 8002366:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800236c:	4618      	mov	r0, r3
 800236e:	f001 fda5 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002378:	f7ff fba2 	bl	8001ac0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_UART_MspInit+0x2b0>)
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	4a42      	ldr	r2, [pc, #264]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002382:	f043 0310 	orr.w	r3, r3, #16
 8002386:	6453      	str	r3, [r2, #68]	; 0x44
 8002388:	4b40      	ldr	r3, [pc, #256]	; (800248c <HAL_UART_MspInit+0x2b0>)
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002394:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	4a3c      	ldr	r2, [pc, #240]	; (800248c <HAL_UART_MspInit+0x2b0>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	6313      	str	r3, [r2, #48]	; 0x30
 80023a0:	4b3a      	ldr	r3, [pc, #232]	; (800248c <HAL_UART_MspInit+0x2b0>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80023c6:	2304      	movs	r3, #4
 80023c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4831      	ldr	r0, [pc, #196]	; (8002498 <HAL_UART_MspInit+0x2bc>)
 80023d4:	f000 fd50 	bl	8002e78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023d8:	2340      	movs	r3, #64	; 0x40
 80023da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f0:	2307      	movs	r3, #7
 80023f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4826      	ldr	r0, [pc, #152]	; (8002498 <HAL_UART_MspInit+0x2bc>)
 80023fe:	f000 fd3b 	bl	8002e78 <HAL_GPIO_Init>
}
 8002402:	e094      	b.n	800252e <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a25      	ldr	r2, [pc, #148]	; (80024a0 <HAL_UART_MspInit+0x2c4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d14c      	bne.n	80024a8 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002412:	2300      	movs	r3, #0
 8002414:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002416:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800241a:	4618      	mov	r0, r3
 800241c:	f001 fd4e 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002426:	f7ff fb4b 	bl	8001ac0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_UART_MspInit+0x2b0>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a11      	ldr	r2, [pc, #68]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_UART_MspInit+0x2b0>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800245a:	2360      	movs	r3, #96	; 0x60
 800245c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246c:	2303      	movs	r3, #3
 800246e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002472:	2307      	movs	r3, #7
 8002474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002478:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800247c:	4619      	mov	r1, r3
 800247e:	4809      	ldr	r0, [pc, #36]	; (80024a4 <HAL_UART_MspInit+0x2c8>)
 8002480:	f000 fcfa 	bl	8002e78 <HAL_GPIO_Init>
}
 8002484:	e053      	b.n	800252e <HAL_UART_MspInit+0x352>
 8002486:	bf00      	nop
 8002488:	40004c00 	.word	0x40004c00
 800248c:	40023800 	.word	0x40023800
 8002490:	40020800 	.word	0x40020800
 8002494:	40005000 	.word	0x40005000
 8002498:	40020400 	.word	0x40020400
 800249c:	40011000 	.word	0x40011000
 80024a0:	40004400 	.word	0x40004400
 80024a4:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a22      	ldr	r2, [pc, #136]	; (8002538 <HAL_UART_MspInit+0x35c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d13d      	bne.n	800252e <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 fcfa 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 80024ce:	f7ff faf7 	bl	8001ac0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_UART_MspInit+0x360>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a19      	ldr	r2, [pc, #100]	; (800253c <HAL_UART_MspInit+0x360>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_UART_MspInit+0x360>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <HAL_UART_MspInit+0x360>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <HAL_UART_MspInit+0x360>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_UART_MspInit+0x360>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002506:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800251c:	2307      	movs	r3, #7
 800251e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002522:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <HAL_UART_MspInit+0x364>)
 800252a:	f000 fca5 	bl	8002e78 <HAL_GPIO_Init>
}
 800252e:	bf00      	nop
 8002530:	37d8      	adds	r7, #216	; 0xd8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40004800 	.word	0x40004800
 800253c:	40023800 	.word	0x40023800
 8002540:	40020c00 	.word	0x40020c00

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f000 f888 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <TIM6_DAC_IRQHandler+0x10>)
 800259e:	f002 fd77 	bl	8005090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000304 	.word	0x20000304

080025ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <SystemInit+0x28>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <SystemInit+0x28>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <SystemInit+0x28>)
 80025c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025c6:	609a      	str	r2, [r3, #8]
#endif
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002610 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025de:	e003      	b.n	80025e8 <LoopCopyDataInit>

080025e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025e6:	3104      	adds	r1, #4

080025e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025e8:	480b      	ldr	r0, [pc, #44]	; (8002618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025f0:	d3f6      	bcc.n	80025e0 <CopyDataInit>
  ldr  r2, =_sbss
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025f4:	e002      	b.n	80025fc <LoopFillZerobss>

080025f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025f8:	f842 3b04 	str.w	r3, [r2], #4

080025fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002600:	d3f9      	bcc.n	80025f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002602:	f7ff ffd3 	bl	80025ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002606:	f004 fd41 	bl	800708c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260a:	f7fe f96d 	bl	80008e8 <main>
  bx  lr    
 800260e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002610:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002614:	08007140 	.word	0x08007140
  ldr  r0, =_sdata
 8002618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800261c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8002620:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8002624:	200007ac 	.word	0x200007ac

08002628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC_IRQHandler>

0800262a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800262e:	2003      	movs	r0, #3
 8002630:	f000 fbe0 	bl	8002df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002634:	2000      	movs	r0, #0
 8002636:	f000 f805 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800263a:	f7ff fa47 	bl	8001acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fbfb 	bl	8002e5e <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 fbc3 	bl	8002e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000000c 	.word	0x2000000c
 800269c:	20000014 	.word	0x20000014
 80026a0:	20000010 	.word	0x20000010

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000014 	.word	0x20000014
 80026c8:	200007a8 	.word	0x200007a8

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200007a8 	.word	0x200007a8

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000014 	.word	0x20000014

0800272c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e031      	b.n	80027a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff f9e2 	bl	8001b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_ADC_Init+0x84>)
 8002770:	4013      	ands	r3, r2
 8002772:	f043 0202 	orr.w	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f970 	bl	8002a60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	e001      	b.n	800279c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	ffffeefd 	.word	0xffffeefd

080027b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e136      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x28a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d93a      	bls.n	8002856 <HAL_ADC_ConfigChannel+0xa2>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027e8:	d035      	beq.n	8002856 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68d9      	ldr	r1, [r3, #12]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	3b1e      	subs	r3, #30
 8002800:	2207      	movs	r2, #7
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43da      	mvns	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	400a      	ands	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a8d      	ldr	r2, [pc, #564]	; (8002a4c <HAL_ADC_ConfigChannel+0x298>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10a      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68d9      	ldr	r1, [r3, #12]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	061a      	lsls	r2, r3, #24
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282e:	e035      	b.n	800289c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	4603      	mov	r3, r0
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4403      	add	r3, r0
 8002848:	3b1e      	subs	r3, #30
 800284a:	409a      	lsls	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002854:	e022      	b.n	800289c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	2207      	movs	r2, #7
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43da      	mvns	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	400a      	ands	r2, r1
 8002878:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6919      	ldr	r1, [r3, #16]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	4603      	mov	r3, r0
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4403      	add	r3, r0
 8002892:	409a      	lsls	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d824      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b05      	subs	r3, #5
 80028b6:	221f      	movs	r2, #31
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43da      	mvns	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	400a      	ands	r2, r1
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b05      	subs	r3, #5
 80028e0:	fa00 f203 	lsl.w	r2, r0, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	635a      	str	r2, [r3, #52]	; 0x34
 80028ec:	e04c      	b.n	8002988 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d824      	bhi.n	8002940 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	3b23      	subs	r3, #35	; 0x23
 8002908:	221f      	movs	r2, #31
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	400a      	ands	r2, r1
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	4618      	mov	r0, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b23      	subs	r3, #35	; 0x23
 8002932:	fa00 f203 	lsl.w	r2, r0, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
 800293e:	e023      	b.n	8002988 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b41      	subs	r3, #65	; 0x41
 8002952:	221f      	movs	r2, #31
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43da      	mvns	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	400a      	ands	r2, r1
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	3b41      	subs	r3, #65	; 0x41
 800297c:	fa00 f203 	lsl.w	r2, r0, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_ADC_ConfigChannel+0x29c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10a      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1f4>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800299c:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029a2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029a6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <HAL_ADC_ConfigChannel+0x29c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10f      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d10b      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029c4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029d0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1e      	ldr	r2, [pc, #120]	; (8002a50 <HAL_ADC_ConfigChannel+0x29c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d12b      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x280>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_ADC_ConfigChannel+0x298>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d003      	beq.n	80029ee <HAL_ADC_ConfigChannel+0x23a>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b11      	cmp	r3, #17
 80029ec:	d122      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029f8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a04:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <HAL_ADC_ConfigChannel+0x298>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d111      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <HAL_ADC_ConfigChannel+0x2a8>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	0c9a      	lsrs	r2, r3, #18
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a26:	e002      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f9      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	10000012 	.word	0x10000012
 8002a50:	40012000 	.word	0x40012000
 8002a54:	40012300 	.word	0x40012300
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	431bde83 	.word	0x431bde83

08002a60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a68:	4b78      	ldr	r3, [pc, #480]	; (8002c4c <ADC_Init+0x1ec>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a77      	ldr	r2, [pc, #476]	; (8002c4c <ADC_Init+0x1ec>)
 8002a6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a72:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a74:	4b75      	ldr	r3, [pc, #468]	; (8002c4c <ADC_Init+0x1ec>)
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4973      	ldr	r1, [pc, #460]	; (8002c4c <ADC_Init+0x1ec>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	021a      	lsls	r2, r3, #8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <ADC_Init+0x1f0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d022      	beq.n	8002b3a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	e00f      	b.n	8002b5a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0202 	bic.w	r2, r2, #2
 8002b68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	005a      	lsls	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ba6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	035a      	lsls	r2, r3, #13
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	e007      	b.n	8002bd0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	051a      	lsls	r2, r3, #20
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c12:	025a      	lsls	r2, r3, #9
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6899      	ldr	r1, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	029a      	lsls	r2, r3, #10
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40012300 	.word	0x40012300
 8002c50:	0f000001 	.word	0x0f000001

08002c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <__NVIC_SetPriorityGrouping+0x40>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <__NVIC_SetPriorityGrouping+0x40>)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60d3      	str	r3, [r2, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00
 8002c98:	05fa0000 	.word	0x05fa0000

08002c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 0307 	and.w	r3, r3, #7
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db0b      	blt.n	8002ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <__NVIC_EnableIRQ+0x38>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2001      	movs	r0, #1
 8002cda:	fa00 f202 	lsl.w	r2, r0, r2
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	db0a      	blt.n	8002d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	490c      	ldr	r1, [pc, #48]	; (8002d40 <__NVIC_SetPriority+0x4c>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	440b      	add	r3, r1
 8002d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d1c:	e00a      	b.n	8002d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4908      	ldr	r1, [pc, #32]	; (8002d44 <__NVIC_SetPriority+0x50>)
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	761a      	strb	r2, [r3, #24]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f1c3 0307 	rsb	r3, r3, #7
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	bf28      	it	cs
 8002d66:	2304      	movcs	r3, #4
 8002d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d902      	bls.n	8002d78 <NVIC_EncodePriority+0x30>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3b03      	subs	r3, #3
 8002d76:	e000      	b.n	8002d7a <NVIC_EncodePriority+0x32>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43d9      	mvns	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	4313      	orrs	r3, r2
         );
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc0:	d301      	bcc.n	8002dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00f      	b.n	8002de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <SysTick_Config+0x40>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dce:	210f      	movs	r1, #15
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f7ff ff8e 	bl	8002cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <SysTick_Config+0x40>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <SysTick_Config+0x40>)
 8002de0:	2207      	movs	r2, #7
 8002de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	e000e010 	.word	0xe000e010

08002df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ff29 	bl	8002c54 <__NVIC_SetPriorityGrouping>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e1c:	f7ff ff3e 	bl	8002c9c <__NVIC_GetPriorityGrouping>
 8002e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	6978      	ldr	r0, [r7, #20]
 8002e28:	f7ff ff8e 	bl	8002d48 <NVIC_EncodePriority>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff5d 	bl	8002cf4 <__NVIC_SetPriority>
}
 8002e3a:	bf00      	nop
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff31 	bl	8002cb8 <__NVIC_EnableIRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff ffa2 	bl	8002db0 <SysTick_Config>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	e175      	b.n	8003184 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e98:	2201      	movs	r2, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	f040 8164 	bne.w	800317e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d005      	beq.n	8002ece <HAL_GPIO_Init+0x56>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d130      	bne.n	8002f30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 0201 	and.w	r2, r3, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d017      	beq.n	8002f6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	2203      	movs	r2, #3
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d123      	bne.n	8002fc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	08da      	lsrs	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3208      	adds	r2, #8
 8002f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	220f      	movs	r2, #15
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	08da      	lsrs	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3208      	adds	r2, #8
 8002fba:	69b9      	ldr	r1, [r7, #24]
 8002fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0203 	and.w	r2, r3, #3
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80be 	beq.w	800317e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003002:	4b66      	ldr	r3, [pc, #408]	; (800319c <HAL_GPIO_Init+0x324>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	4a65      	ldr	r2, [pc, #404]	; (800319c <HAL_GPIO_Init+0x324>)
 8003008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300c:	6453      	str	r3, [r2, #68]	; 0x44
 800300e:	4b63      	ldr	r3, [pc, #396]	; (800319c <HAL_GPIO_Init+0x324>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800301a:	4a61      	ldr	r2, [pc, #388]	; (80031a0 <HAL_GPIO_Init+0x328>)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_GPIO_Init+0x32c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d037      	beq.n	80030b6 <HAL_GPIO_Init+0x23e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a57      	ldr	r2, [pc, #348]	; (80031a8 <HAL_GPIO_Init+0x330>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_GPIO_Init+0x23a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a56      	ldr	r2, [pc, #344]	; (80031ac <HAL_GPIO_Init+0x334>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d02b      	beq.n	80030ae <HAL_GPIO_Init+0x236>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a55      	ldr	r2, [pc, #340]	; (80031b0 <HAL_GPIO_Init+0x338>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d025      	beq.n	80030aa <HAL_GPIO_Init+0x232>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a54      	ldr	r2, [pc, #336]	; (80031b4 <HAL_GPIO_Init+0x33c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01f      	beq.n	80030a6 <HAL_GPIO_Init+0x22e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a53      	ldr	r2, [pc, #332]	; (80031b8 <HAL_GPIO_Init+0x340>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d019      	beq.n	80030a2 <HAL_GPIO_Init+0x22a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_GPIO_Init+0x344>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0x226>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a51      	ldr	r2, [pc, #324]	; (80031c0 <HAL_GPIO_Init+0x348>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00d      	beq.n	800309a <HAL_GPIO_Init+0x222>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a50      	ldr	r2, [pc, #320]	; (80031c4 <HAL_GPIO_Init+0x34c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <HAL_GPIO_Init+0x21e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4f      	ldr	r2, [pc, #316]	; (80031c8 <HAL_GPIO_Init+0x350>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_GPIO_Init+0x21a>
 800308e:	2309      	movs	r3, #9
 8003090:	e012      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 8003092:	230a      	movs	r3, #10
 8003094:	e010      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 8003096:	2308      	movs	r3, #8
 8003098:	e00e      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 800309a:	2307      	movs	r3, #7
 800309c:	e00c      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 800309e:	2306      	movs	r3, #6
 80030a0:	e00a      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030a2:	2305      	movs	r3, #5
 80030a4:	e008      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030a6:	2304      	movs	r3, #4
 80030a8:	e006      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030aa:	2303      	movs	r3, #3
 80030ac:	e004      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e002      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_GPIO_Init+0x240>
 80030b6:	2300      	movs	r3, #0
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	f002 0203 	and.w	r2, r2, #3
 80030be:	0092      	lsls	r2, r2, #2
 80030c0:	4093      	lsls	r3, r2
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030c8:	4935      	ldr	r1, [pc, #212]	; (80031a0 <HAL_GPIO_Init+0x328>)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	3302      	adds	r3, #2
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030d6:	4b3d      	ldr	r3, [pc, #244]	; (80031cc <HAL_GPIO_Init+0x354>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030fa:	4a34      	ldr	r2, [pc, #208]	; (80031cc <HAL_GPIO_Init+0x354>)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003100:	4b32      	ldr	r3, [pc, #200]	; (80031cc <HAL_GPIO_Init+0x354>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003124:	4a29      	ldr	r2, [pc, #164]	; (80031cc <HAL_GPIO_Init+0x354>)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800312a:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_GPIO_Init+0x354>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_GPIO_Init+0x354>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_GPIO_Init+0x354>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_GPIO_Init+0x354>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3301      	adds	r3, #1
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b0f      	cmp	r3, #15
 8003188:	f67f ae86 	bls.w	8002e98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3724      	adds	r7, #36	; 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	40020400 	.word	0x40020400
 80031ac:	40020800 	.word	0x40020800
 80031b0:	40020c00 	.word	0x40020c00
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40021400 	.word	0x40021400
 80031bc:	40021800 	.word	0x40021800
 80031c0:	40021c00 	.word	0x40021c00
 80031c4:	40022000 	.word	0x40022000
 80031c8:	40022400 	.word	0x40022400
 80031cc:	40013c00 	.word	0x40013c00

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e0:	787b      	ldrb	r3, [r7, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031ec:	e003      	b.n	80031f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	041a      	lsls	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	619a      	str	r2, [r3, #24]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e07f      	b.n	8003316 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe fcb2 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2224      	movs	r2, #36	; 0x24
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	e006      	b.n	800328c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800328a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d104      	bne.n	800329e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800329c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_I2C_Init+0x11c>)
 80032aa:	430b      	orrs	r3, r1
 80032ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69d9      	ldr	r1, [r3, #28]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	02008000 	.word	0x02008000

08003324 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	d138      	bne.n	80033ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003344:	2302      	movs	r3, #2
 8003346:	e032      	b.n	80033ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	; 0x24
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003376:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d139      	bne.n	8003444 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033da:	2302      	movs	r3, #2
 80033dc:	e033      	b.n	8003446 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2224      	movs	r2, #36	; 0x24
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800340c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a04      	ldr	r2, [pc, #16]	; (8003470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40007000 	.word	0x40007000

08003474 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b23      	ldr	r3, [pc, #140]	; (800350c <HAL_PWREx_EnableOverDrive+0x98>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a22      	ldr	r2, [pc, #136]	; (800350c <HAL_PWREx_EnableOverDrive+0x98>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_PWREx_EnableOverDrive+0x98>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a2:	f7ff f913 	bl	80026cc <HAL_GetTick>
 80034a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034a8:	e009      	b.n	80034be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034aa:	f7ff f90f 	bl	80026cc <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b8:	d901      	bls.n	80034be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e022      	b.n	8003504 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ca:	d1ee      	bne.n	80034aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d8:	f7ff f8f8 	bl	80026cc <HAL_GetTick>
 80034dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034de:	e009      	b.n	80034f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034e0:	f7ff f8f4 	bl	80026cc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ee:	d901      	bls.n	80034f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e007      	b.n	8003504 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003500:	d1ee      	bne.n	80034e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000

08003514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800351c:	2300      	movs	r3, #0
 800351e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e29b      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8087 	beq.w	8003646 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003538:	4b96      	ldr	r3, [pc, #600]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b04      	cmp	r3, #4
 8003542:	d00c      	beq.n	800355e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003544:	4b93      	ldr	r3, [pc, #588]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b08      	cmp	r3, #8
 800354e:	d112      	bne.n	8003576 <HAL_RCC_OscConfig+0x62>
 8003550:	4b90      	ldr	r3, [pc, #576]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355c:	d10b      	bne.n	8003576 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355e:	4b8d      	ldr	r3, [pc, #564]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d06c      	beq.n	8003644 <HAL_RCC_OscConfig+0x130>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d168      	bne.n	8003644 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e275      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x7a>
 8003580:	4b84      	ldr	r3, [pc, #528]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a83      	ldr	r2, [pc, #524]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	e02e      	b.n	80035ec <HAL_RCC_OscConfig+0xd8>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x9c>
 8003596:	4b7f      	ldr	r3, [pc, #508]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a7e      	ldr	r2, [pc, #504]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7b      	ldr	r2, [pc, #492]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e01d      	b.n	80035ec <HAL_RCC_OscConfig+0xd8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0xc0>
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a75      	ldr	r2, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a72      	ldr	r2, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0xd8>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b6c      	ldr	r3, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6b      	ldr	r2, [pc, #428]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80035e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7ff f86a 	bl	80026cc <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7ff f866 	bl	80026cc <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e229      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b61      	ldr	r3, [pc, #388]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0xe8>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7ff f856 	bl	80026cc <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7ff f852 	bl	80026cc <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e215      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x110>
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d069      	beq.n	8003726 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003652:	4b50      	ldr	r3, [pc, #320]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365e:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d11c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x190>
 800366a:	4b4a      	ldr	r3, [pc, #296]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d116      	bne.n	80036a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_RCC_OscConfig+0x17a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e1e9      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	493d      	ldr	r1, [pc, #244]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	e040      	b.n	8003726 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d023      	beq.n	80036f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a38      	ldr	r2, [pc, #224]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7ff f808 	bl	80026cc <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c0:	f7ff f804 	bl	80026cc <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1c7      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d2:	4b30      	ldr	r3, [pc, #192]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036de:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4929      	ldr	r1, [pc, #164]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]
 80036f2:	e018      	b.n	8003726 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f4:	4b27      	ldr	r3, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a26      	ldr	r2, [pc, #152]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe ffe4 	bl	80026cc <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003708:	f7fe ffe0 	bl	80026cc <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1a3      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d038      	beq.n	80037a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d019      	beq.n	800376e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003746:	f7fe ffc1 	bl	80026cc <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374e:	f7fe ffbd 	bl	80026cc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e180      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x23a>
 800376c:	e01a      	b.n	80037a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_RCC_OscConfig+0x280>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fe ffa7 	bl	80026cc <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003782:	f7fe ffa3 	bl	80026cc <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d903      	bls.n	8003798 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e166      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
 8003794:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	4b92      	ldr	r3, [pc, #584]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 800379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ee      	bne.n	8003782 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80a4 	beq.w	80038fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b2:	4b8c      	ldr	r3, [pc, #560]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10d      	bne.n	80037da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4b89      	ldr	r3, [pc, #548]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a88      	ldr	r2, [pc, #544]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b86      	ldr	r3, [pc, #536]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037da:	4b83      	ldr	r3, [pc, #524]	; (80039e8 <HAL_RCC_OscConfig+0x4d4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d118      	bne.n	8003818 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037e6:	4b80      	ldr	r3, [pc, #512]	; (80039e8 <HAL_RCC_OscConfig+0x4d4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7f      	ldr	r2, [pc, #508]	; (80039e8 <HAL_RCC_OscConfig+0x4d4>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7fe ff6b 	bl	80026cc <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7fe ff67 	bl	80026cc <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b64      	cmp	r3, #100	; 0x64
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e12a      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380c:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x4d4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x31a>
 8003820:	4b70      	ldr	r3, [pc, #448]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a6f      	ldr	r2, [pc, #444]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	e02d      	b.n	800388a <HAL_RCC_OscConfig+0x376>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x33c>
 8003836:	4b6b      	ldr	r3, [pc, #428]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a6a      	ldr	r2, [pc, #424]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
 8003842:	4b68      	ldr	r3, [pc, #416]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a67      	ldr	r2, [pc, #412]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003848:	f023 0304 	bic.w	r3, r3, #4
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
 800384e:	e01c      	b.n	800388a <HAL_RCC_OscConfig+0x376>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b05      	cmp	r3, #5
 8003856:	d10c      	bne.n	8003872 <HAL_RCC_OscConfig+0x35e>
 8003858:	4b62      	ldr	r3, [pc, #392]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a61      	ldr	r2, [pc, #388]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
 8003864:	4b5f      	ldr	r3, [pc, #380]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a5e      	ldr	r2, [pc, #376]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	e00b      	b.n	800388a <HAL_RCC_OscConfig+0x376>
 8003872:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003876:	4a5b      	ldr	r2, [pc, #364]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	6713      	str	r3, [r2, #112]	; 0x70
 800387e:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d015      	beq.n	80038be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fe ff1b 	bl	80026cc <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003898:	e00a      	b.n	80038b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe ff17 	bl	80026cc <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0d8      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80038b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ee      	beq.n	800389a <HAL_RCC_OscConfig+0x386>
 80038bc:	e014      	b.n	80038e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fe ff05 	bl	80026cc <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe ff01 	bl	80026cc <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0c2      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	4b41      	ldr	r3, [pc, #260]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ee      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d105      	bne.n	80038fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4b3d      	ldr	r3, [pc, #244]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a3c      	ldr	r2, [pc, #240]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80ae 	beq.w	8003a60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003904:	4b37      	ldr	r3, [pc, #220]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d06d      	beq.n	80039ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d14b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003918:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a31      	ldr	r2, [pc, #196]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 800391e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe fed2 	bl	80026cc <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fe fece 	bl	80026cc <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e091      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	019b      	lsls	r3, r3, #6
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	3b01      	subs	r3, #1
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	071b      	lsls	r3, r3, #28
 8003976:	491b      	ldr	r1, [pc, #108]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 8003982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fea0 	bl	80026cc <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003990:	f7fe fe9c 	bl	80026cc <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e05f      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x47c>
 80039ae:	e057      	b.n	8003a60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80039b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe fe86 	bl	80026cc <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fe fe82 	bl	80026cc <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e045      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x4b0>
 80039e2:	e03d      	b.n	8003a60 <HAL_RCC_OscConfig+0x54c>
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80039ec:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <HAL_RCC_OscConfig+0x558>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d030      	beq.n	8003a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d129      	bne.n	8003a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d122      	bne.n	8003a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d119      	bne.n	8003a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d10f      	bne.n	8003a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800

08003a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0d0      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d910      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 020f 	bic.w	r2, r3, #15
 8003a9e:	4965      	ldr	r1, [pc, #404]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b8      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003af2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494d      	ldr	r1, [pc, #308]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d040      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d115      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b32:	4b41      	ldr	r3, [pc, #260]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e073      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b42:	4b3d      	ldr	r3, [pc, #244]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e06b      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 0203 	bic.w	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4936      	ldr	r1, [pc, #216]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b64:	f7fe fdb2 	bl	80026cc <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fe fdae 	bl	80026cc <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e053      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 020c 	and.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d1eb      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b94:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d210      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 020f 	bic.w	r2, r3, #15
 8003baa:	4922      	ldr	r1, [pc, #136]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4916      	ldr	r1, [pc, #88]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490e      	ldr	r1, [pc, #56]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f821 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	490a      	ldr	r1, [pc, #40]	; (8003c3c <HAL_RCC_ClockConfig+0x1cc>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1d0>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCC_ClockConfig+0x1d4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fd0e 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	08007118 	.word	0x08007118
 8003c40:	2000000c 	.word	0x2000000c
 8003c44:	20000010 	.word	0x20000010

08003c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c4c:	b094      	sub	sp, #80	; 0x50
 8003c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	647b      	str	r3, [r7, #68]	; 0x44
 8003c54:	2300      	movs	r3, #0
 8003c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c58:	2300      	movs	r3, #0
 8003c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c60:	4b79      	ldr	r3, [pc, #484]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d00d      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x40>
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	f200 80e1 	bhi.w	8003e34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x34>
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d003      	beq.n	8003c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c7a:	e0db      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c7c:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c80:	e0db      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c82:	4b73      	ldr	r3, [pc, #460]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c86:	e0d8      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c88:	4b6f      	ldr	r3, [pc, #444]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c90:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c92:	4b6d      	ldr	r3, [pc, #436]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d063      	beq.n	8003d66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9e:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cba:	4622      	mov	r2, r4
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	f04f 0000 	mov.w	r0, #0
 8003cc2:	f04f 0100 	mov.w	r1, #0
 8003cc6:	0159      	lsls	r1, r3, #5
 8003cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ccc:	0150      	lsls	r0, r2, #5
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	1a51      	subs	r1, r2, r1
 8003cd6:	6139      	str	r1, [r7, #16]
 8003cd8:	4629      	mov	r1, r5
 8003cda:	eb63 0301 	sbc.w	r3, r3, r1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cec:	4659      	mov	r1, fp
 8003cee:	018b      	lsls	r3, r1, #6
 8003cf0:	4651      	mov	r1, sl
 8003cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	018a      	lsls	r2, r1, #6
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	ebb2 0801 	subs.w	r8, r2, r1
 8003d00:	4659      	mov	r1, fp
 8003d02:	eb63 0901 	sbc.w	r9, r3, r1
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d1a:	4690      	mov	r8, r2
 8003d1c:	4699      	mov	r9, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	eb18 0303 	adds.w	r3, r8, r3
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	462b      	mov	r3, r5
 8003d28:	eb49 0303 	adc.w	r3, r9, r3
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	024b      	lsls	r3, r1, #9
 8003d3e:	4621      	mov	r1, r4
 8003d40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d44:	4621      	mov	r1, r4
 8003d46:	024a      	lsls	r2, r1, #9
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4e:	2200      	movs	r2, #0
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d58:	f7fc fa6e 	bl	8000238 <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4613      	mov	r3, r2
 8003d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d64:	e058      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d66:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	4611      	mov	r1, r2
 8003d72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d76:	623b      	str	r3, [r7, #32]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d80:	4642      	mov	r2, r8
 8003d82:	464b      	mov	r3, r9
 8003d84:	f04f 0000 	mov.w	r0, #0
 8003d88:	f04f 0100 	mov.w	r1, #0
 8003d8c:	0159      	lsls	r1, r3, #5
 8003d8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d92:	0150      	lsls	r0, r2, #5
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4641      	mov	r1, r8
 8003d9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d9e:	4649      	mov	r1, r9
 8003da0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003db0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003db4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003db8:	ebb2 040a 	subs.w	r4, r2, sl
 8003dbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	00eb      	lsls	r3, r5, #3
 8003dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dce:	00e2      	lsls	r2, r4, #3
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	461d      	mov	r5, r3
 8003dd4:	4643      	mov	r3, r8
 8003dd6:	18e3      	adds	r3, r4, r3
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	464b      	mov	r3, r9
 8003ddc:	eb45 0303 	adc.w	r3, r5, r3
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dee:	4629      	mov	r1, r5
 8003df0:	028b      	lsls	r3, r1, #10
 8003df2:	4621      	mov	r1, r4
 8003df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003df8:	4621      	mov	r1, r4
 8003dfa:	028a      	lsls	r2, r1, #10
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e02:	2200      	movs	r2, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	61fa      	str	r2, [r7, #28]
 8003e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e0c:	f7fc fa14 	bl	8000238 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4613      	mov	r3, r2
 8003e16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e32:	e002      	b.n	8003e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3750      	adds	r7, #80	; 0x50
 8003e40:	46bd      	mov	sp, r7
 8003e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	007a1200 	.word	0x007a1200

08003e54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	2000000c 	.word	0x2000000c

08003e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e70:	f7ff fff0 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0a9b      	lsrs	r3, r3, #10
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4903      	ldr	r1, [pc, #12]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	08007128 	.word	0x08007128

08003e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e98:	f7ff ffdc 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	0b5b      	lsrs	r3, r3, #13
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	4903      	ldr	r1, [pc, #12]	; (8003eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eaa:	5ccb      	ldrb	r3, [r1, r3]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	08007128 	.word	0x08007128

08003ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d012      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ee4:	4b69      	ldr	r3, [pc, #420]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4a68      	ldr	r2, [pc, #416]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eee:	6093      	str	r3, [r2, #8]
 8003ef0:	4b66      	ldr	r3, [pc, #408]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef8:	4964      	ldr	r1, [pc, #400]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d017      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f16:	4b5d      	ldr	r3, [pc, #372]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	4959      	ldr	r1, [pc, #356]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f34:	d101      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d017      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f52:	4b4e      	ldr	r3, [pc, #312]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	494a      	ldr	r1, [pc, #296]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 808b 	beq.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa0:	4b3a      	ldr	r3, [pc, #232]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	4a39      	ldr	r2, [pc, #228]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003faa:	6413      	str	r3, [r2, #64]	; 0x40
 8003fac:	4b37      	ldr	r3, [pc, #220]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fb8:	4b35      	ldr	r3, [pc, #212]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a34      	ldr	r2, [pc, #208]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc4:	f7fe fb82 	bl	80026cc <HAL_GetTick>
 8003fc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fcc:	f7fe fb7e 	bl	80026cc <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e38f      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fde:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fea:	4b28      	ldr	r3, [pc, #160]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d035      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	429a      	cmp	r2, r3
 8004006:	d02e      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004008:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004010:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004012:	4b1e      	ldr	r3, [pc, #120]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	4a1d      	ldr	r2, [pc, #116]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800401e:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004028:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800402a:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004030:	4b16      	ldr	r3, [pc, #88]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b01      	cmp	r3, #1
 800403a:	d114      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fb46 	bl	80026cc <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004042:	e00a      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004044:	f7fe fb42 	bl	80026cc <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e351      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ee      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004072:	d111      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004074:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004082:	400b      	ands	r3, r1
 8004084:	4901      	ldr	r1, [pc, #4]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
 800408a:	e00b      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800408c:	40023800 	.word	0x40023800
 8004090:	40007000 	.word	0x40007000
 8004094:	0ffffcff 	.word	0x0ffffcff
 8004098:	4bac      	ldr	r3, [pc, #688]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4aab      	ldr	r2, [pc, #684]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040a2:	6093      	str	r3, [r2, #8]
 80040a4:	4ba9      	ldr	r3, [pc, #676]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	49a6      	ldr	r1, [pc, #664]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d010      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040c2:	4ba2      	ldr	r3, [pc, #648]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c8:	4aa0      	ldr	r2, [pc, #640]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040d2:	4b9e      	ldr	r3, [pc, #632]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	499b      	ldr	r1, [pc, #620]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f0:	4b96      	ldr	r3, [pc, #600]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040fe:	4993      	ldr	r1, [pc, #588]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004112:	4b8e      	ldr	r3, [pc, #568]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004120:	498a      	ldr	r1, [pc, #552]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004134:	4b85      	ldr	r3, [pc, #532]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	4982      	ldr	r1, [pc, #520]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004156:	4b7d      	ldr	r3, [pc, #500]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4979      	ldr	r1, [pc, #484]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004178:	4b74      	ldr	r3, [pc, #464]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f023 0203 	bic.w	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	4971      	ldr	r1, [pc, #452]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800419a:	4b6c      	ldr	r3, [pc, #432]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f023 020c 	bic.w	r2, r3, #12
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	4968      	ldr	r1, [pc, #416]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041bc:	4b63      	ldr	r3, [pc, #396]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	4960      	ldr	r1, [pc, #384]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041de:	4b5b      	ldr	r3, [pc, #364]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ec:	4957      	ldr	r1, [pc, #348]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004200:	4b52      	ldr	r3, [pc, #328]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	494f      	ldr	r1, [pc, #316]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004222:	4b4a      	ldr	r3, [pc, #296]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	4946      	ldr	r1, [pc, #280]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004244:	4b41      	ldr	r3, [pc, #260]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004252:	493e      	ldr	r1, [pc, #248]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004274:	4935      	ldr	r1, [pc, #212]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004288:	4b30      	ldr	r3, [pc, #192]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004296:	492d      	ldr	r1, [pc, #180]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d011      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042aa:	4b28      	ldr	r3, [pc, #160]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b8:	4924      	ldr	r1, [pc, #144]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042c8:	d101      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042da:	2301      	movs	r3, #1
 80042dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ea:	4b18      	ldr	r3, [pc, #96]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f8:	4914      	ldr	r1, [pc, #80]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00b      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431c:	490b      	ldr	r1, [pc, #44]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00f      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004340:	4902      	ldr	r1, [pc, #8]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004348:	e002      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800435c:	4b8a      	ldr	r3, [pc, #552]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004362:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	4986      	ldr	r1, [pc, #536]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004380:	4b81      	ldr	r3, [pc, #516]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004386:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004390:	497d      	ldr	r1, [pc, #500]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d006      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80d6 	beq.w	8004558 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043ac:	4b76      	ldr	r3, [pc, #472]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a75      	ldr	r2, [pc, #468]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b8:	f7fe f988 	bl	80026cc <HAL_GetTick>
 80043bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043c0:	f7fe f984 	bl	80026cc <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	; 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e195      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043d2:	4b6d      	ldr	r3, [pc, #436]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d021      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11d      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043f2:	4b65      	ldr	r3, [pc, #404]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004400:	4b61      	ldr	r3, [pc, #388]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004406:	0e1b      	lsrs	r3, r3, #24
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	019a      	lsls	r2, r3, #6
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	431a      	orrs	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	071b      	lsls	r3, r3, #28
 8004426:	4958      	ldr	r1, [pc, #352]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d004      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02e      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004458:	d129      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800445a:	4b4b      	ldr	r3, [pc, #300]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004468:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800446e:	0f1b      	lsrs	r3, r3, #28
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	019a      	lsls	r2, r3, #6
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	431a      	orrs	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	071b      	lsls	r3, r3, #28
 800448e:	493e      	ldr	r1, [pc, #248]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004496:	4b3c      	ldr	r3, [pc, #240]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800449c:	f023 021f 	bic.w	r2, r3, #31
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	3b01      	subs	r3, #1
 80044a6:	4938      	ldr	r1, [pc, #224]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01d      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044ba:	4b33      	ldr	r3, [pc, #204]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c0:	0e1b      	lsrs	r3, r3, #24
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044c8:	4b2f      	ldr	r3, [pc, #188]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ce:	0f1b      	lsrs	r3, r3, #28
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	019a      	lsls	r2, r3, #6
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	431a      	orrs	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	061b      	lsls	r3, r3, #24
 80044e8:	431a      	orrs	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	071b      	lsls	r3, r3, #28
 80044ee:	4926      	ldr	r1, [pc, #152]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d011      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	019a      	lsls	r2, r3, #6
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	071b      	lsls	r3, r3, #28
 800451e:	491a      	ldr	r1, [pc, #104]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a17      	ldr	r2, [pc, #92]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004532:	f7fe f8cb 	bl	80026cc <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004538:	e008      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800453a:	f7fe f8c7 	bl	80026cc <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	; 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0d8      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800454c:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b01      	cmp	r3, #1
 800455c:	f040 80ce 	bne.w	80046fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a08      	ldr	r2, [pc, #32]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456c:	f7fe f8ae 	bl	80026cc <HAL_GetTick>
 8004570:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004572:	e00b      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004574:	f7fe f8aa 	bl	80026cc <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d904      	bls.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e0bb      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800458c:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004598:	d0ec      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02e      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d12a      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045c2:	4b51      	ldr	r3, [pc, #324]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045d0:	4b4d      	ldr	r3, [pc, #308]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	0f1b      	lsrs	r3, r3, #28
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	019a      	lsls	r2, r3, #6
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	041b      	lsls	r3, r3, #16
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	071b      	lsls	r3, r3, #28
 80045f6:	4944      	ldr	r1, [pc, #272]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045fe:	4b42      	ldr	r3, [pc, #264]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004604:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	493d      	ldr	r1, [pc, #244]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d022      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800462c:	d11d      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800462e:	4b36      	ldr	r3, [pc, #216]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	0e1b      	lsrs	r3, r3, #24
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800463c:	4b32      	ldr	r3, [pc, #200]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	0f1b      	lsrs	r3, r3, #28
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	019a      	lsls	r2, r3, #6
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	431a      	orrs	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	061b      	lsls	r3, r3, #24
 800465c:	431a      	orrs	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	071b      	lsls	r3, r3, #28
 8004662:	4929      	ldr	r1, [pc, #164]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d028      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004676:	4b24      	ldr	r3, [pc, #144]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	0e1b      	lsrs	r3, r3, #24
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004684:	4b20      	ldr	r3, [pc, #128]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	0c1b      	lsrs	r3, r3, #16
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	019a      	lsls	r2, r3, #6
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	431a      	orrs	r2, r3
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	071b      	lsls	r3, r3, #28
 80046aa:	4917      	ldr	r1, [pc, #92]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	4911      	ldr	r1, [pc, #68]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a0e      	ldr	r2, [pc, #56]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d4:	f7fd fffa 	bl	80026cc <HAL_GetTick>
 80046d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046dc:	f7fd fff6 	bl	80026cc <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	; 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e007      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046fa:	d1ef      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800

0800470c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e09d      	b.n	800485a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472e:	d009      	beq.n	8004744 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	61da      	str	r2, [r3, #28]
 8004736:	e005      	b.n	8004744 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd fac0 	bl	8001ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004784:	d902      	bls.n	800478c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e002      	b.n	8004792 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800478c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004790:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800479a:	d007      	beq.n	80047ac <HAL_SPI_Init+0xa0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047a4:	d002      	beq.n	80047ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	ea42 0103 	orr.w	r1, r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	0c1b      	lsrs	r3, r3, #16
 8004808:	f003 0204 	and.w	r2, r3, #4
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004828:	ea42 0103 	orr.w	r1, r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004848:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e049      	b.n	8004908 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7fd faab 	bl	8001de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f001 f831 	bl	8005908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d001      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e054      	b.n	80049d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a26      	ldr	r2, [pc, #152]	; (80049e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d022      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004952:	d01d      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d018      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a21      	ldr	r2, [pc, #132]	; (80049e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <HAL_TIM_Base_Start_IT+0xdc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00e      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0x80>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d115      	bne.n	80049bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	4b19      	ldr	r3, [pc, #100]	; (80049fc <HAL_TIM_Base_Start_IT+0xec>)
 8004998:	4013      	ands	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b06      	cmp	r3, #6
 80049a0:	d015      	beq.n	80049ce <HAL_TIM_Base_Start_IT+0xbe>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a8:	d011      	beq.n	80049ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ba:	e008      	b.n	80049ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e000      	b.n	80049d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40010400 	.word	0x40010400
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40001800 	.word	0x40001800
 80049fc:	00010007 	.word	0x00010007

08004a00 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e049      	b.n	8004aa6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f841 	bl	8004aae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f000 ff62 	bl	8005908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e049      	b.n	8004b68 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f7fd fa8b 	bl	8002004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f000 ff01 	bl	8005908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_TIM_PWM_Start+0x24>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	e03c      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d109      	bne.n	8004bae <HAL_TIM_PWM_Start+0x3e>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	bf14      	ite	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	2300      	moveq	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	e02f      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d109      	bne.n	8004bc8 <HAL_TIM_PWM_Start+0x58>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	bf14      	ite	ne
 8004bc0:	2301      	movne	r3, #1
 8004bc2:	2300      	moveq	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	e022      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d109      	bne.n	8004be2 <HAL_TIM_PWM_Start+0x72>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	bf14      	ite	ne
 8004bda:	2301      	movne	r3, #1
 8004bdc:	2300      	moveq	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	e015      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d109      	bne.n	8004bfc <HAL_TIM_PWM_Start+0x8c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	bf14      	ite	ne
 8004bf4:	2301      	movne	r3, #1
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	e008      	b.n	8004c0e <HAL_TIM_PWM_Start+0x9e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e092      	b.n	8004d3c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_PWM_Start+0xb6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c24:	e023      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_PWM_Start+0xc6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c34:	e01b      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_PWM_Start+0xd6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c44:	e013      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	d104      	bne.n	8004c56 <HAL_TIM_PWM_Start+0xe6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c54:	e00b      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_PWM_Start+0xf6>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c64:	e003      	b.n	8004c6e <HAL_TIM_PWM_Start+0xfe>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2201      	movs	r2, #1
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f001 fb08 	bl	800628c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a30      	ldr	r2, [pc, #192]	; (8004d44 <HAL_TIM_PWM_Start+0x1d4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_TIM_PWM_Start+0x120>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2f      	ldr	r2, [pc, #188]	; (8004d48 <HAL_TIM_PWM_Start+0x1d8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d101      	bne.n	8004c94 <HAL_TIM_PWM_Start+0x124>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_TIM_PWM_Start+0x126>
 8004c94:	2300      	movs	r3, #0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a25      	ldr	r2, [pc, #148]	; (8004d44 <HAL_TIM_PWM_Start+0x1d4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d022      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d01d      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a22      	ldr	r2, [pc, #136]	; (8004d4c <HAL_TIM_PWM_Start+0x1dc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d018      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <HAL_TIM_PWM_Start+0x1e0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <HAL_TIM_PWM_Start+0x1e4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00e      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <HAL_TIM_PWM_Start+0x1d8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1b      	ldr	r2, [pc, #108]	; (8004d58 <HAL_TIM_PWM_Start+0x1e8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_TIM_PWM_Start+0x18a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_TIM_PWM_Start+0x1ec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d115      	bne.n	8004d26 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_TIM_PWM_Start+0x1f0>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b06      	cmp	r3, #6
 8004d0a:	d015      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1c8>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d12:	d011      	beq.n	8004d38 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	e008      	b.n	8004d38 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e000      	b.n	8004d3a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40010400 	.word	0x40010400
 8004d4c:	40000400 	.word	0x40000400
 8004d50:	40000800 	.word	0x40000800
 8004d54:	40000c00 	.word	0x40000c00
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40001800 	.word	0x40001800
 8004d60:	00010007 	.word	0x00010007

08004d64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e049      	b.n	8004e0a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f841 	bl	8004e12 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f000 fdb0 	bl	8005908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e08f      	b.n	8004f5c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7fd f861 	bl	8001f18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b3e      	ldr	r3, [pc, #248]	; (8004f64 <HAL_TIM_Encoder_Init+0x13c>)
 8004e6a:	400b      	ands	r3, r1
 8004e6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f000 fd45 	bl	8005908 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <HAL_TIM_Encoder_Init+0x140>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <HAL_TIM_Encoder_Init+0x144>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <HAL_TIM_Encoder_Init+0x148>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	011a      	lsls	r2, r3, #4
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	031b      	lsls	r3, r3, #12
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	fffebff8 	.word	0xfffebff8
 8004f68:	fffffcfc 	.word	0xfffffcfc
 8004f6c:	fffff3f3 	.word	0xfffff3f3
 8004f70:	ffff0f0f 	.word	0xffff0f0f

08004f74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d110      	bne.n	8004fc6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d102      	bne.n	8004fb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004faa:	7b7b      	ldrb	r3, [r7, #13]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d001      	beq.n	8004fb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e069      	b.n	8005088 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc4:	e031      	b.n	800502a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d110      	bne.n	8004fee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d102      	bne.n	8004fd8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fd2:	7b3b      	ldrb	r3, [r7, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d001      	beq.n	8004fdc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e055      	b.n	8005088 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fec:	e01d      	b.n	800502a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d108      	bne.n	8005006 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ff4:	7bbb      	ldrb	r3, [r7, #14]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d105      	bne.n	8005006 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ffa:	7b7b      	ldrb	r3, [r7, #13]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d102      	bne.n	8005006 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005000:	7b3b      	ldrb	r3, [r7, #12]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d001      	beq.n	800500a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e03e      	b.n	8005088 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_TIM_Encoder_Start+0xc4>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b04      	cmp	r3, #4
 8005034:	d008      	beq.n	8005048 <HAL_TIM_Encoder_Start+0xd4>
 8005036:	e00f      	b.n	8005058 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2201      	movs	r2, #1
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f001 f923 	bl	800628c <TIM_CCxChannelCmd>
      break;
 8005046:	e016      	b.n	8005076 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2201      	movs	r2, #1
 800504e:	2104      	movs	r1, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f001 f91b 	bl	800628c <TIM_CCxChannelCmd>
      break;
 8005056:	e00e      	b.n	8005076 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2201      	movs	r2, #1
 800505e:	2100      	movs	r1, #0
 8005060:	4618      	mov	r0, r3
 8005062:	f001 f913 	bl	800628c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2201      	movs	r2, #1
 800506c:	2104      	movs	r1, #4
 800506e:	4618      	mov	r0, r3
 8005070:	f001 f90c 	bl	800628c <TIM_CCxChannelCmd>
      break;
 8005074:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0201 	orr.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d122      	bne.n	80050ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d11b      	bne.n	80050ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0202 	mvn.w	r2, #2
 80050bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fbfa 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 80050d8:	e005      	b.n	80050e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fbec 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fbfd 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d122      	bne.n	8005140 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b04      	cmp	r3, #4
 8005106:	d11b      	bne.n	8005140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0204 	mvn.w	r2, #4
 8005110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fbd0 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 800512c:	e005      	b.n	800513a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fbc2 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fbd3 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b08      	cmp	r3, #8
 800514c:	d122      	bne.n	8005194 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d11b      	bne.n	8005194 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0208 	mvn.w	r2, #8
 8005164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2204      	movs	r2, #4
 800516a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fba6 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fb98 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fba9 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d122      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d11b      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0210 	mvn.w	r2, #16
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2208      	movs	r2, #8
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fb7c 	bl	80058cc <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fb6e 	bl	80058b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fb7f 	bl	80058e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10e      	bne.n	8005214 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	d107      	bne.n	8005214 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0201 	mvn.w	r2, #1
 800520c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fb faca 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b80      	cmp	r3, #128	; 0x80
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d107      	bne.n	8005240 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 f962 	bl	8006504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524e:	d10e      	bne.n	800526e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b80      	cmp	r3, #128	; 0x80
 800525c:	d107      	bne.n	800526e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 f955 	bl	8006518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d10e      	bne.n	800529a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d107      	bne.n	800529a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fb2d 	bl	80058f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d10e      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f06f 0220 	mvn.w	r2, #32
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f001 f915 	bl	80064f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_TIM_OC_ConfigChannel+0x1e>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e066      	b.n	80053bc <HAL_TIM_OC_ConfigChannel+0xec>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b14      	cmp	r3, #20
 80052fa:	d857      	bhi.n	80053ac <HAL_TIM_OC_ConfigChannel+0xdc>
 80052fc:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <HAL_TIM_OC_ConfigChannel+0x34>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005359 	.word	0x08005359
 8005308:	080053ad 	.word	0x080053ad
 800530c:	080053ad 	.word	0x080053ad
 8005310:	080053ad 	.word	0x080053ad
 8005314:	08005367 	.word	0x08005367
 8005318:	080053ad 	.word	0x080053ad
 800531c:	080053ad 	.word	0x080053ad
 8005320:	080053ad 	.word	0x080053ad
 8005324:	08005375 	.word	0x08005375
 8005328:	080053ad 	.word	0x080053ad
 800532c:	080053ad 	.word	0x080053ad
 8005330:	080053ad 	.word	0x080053ad
 8005334:	08005383 	.word	0x08005383
 8005338:	080053ad 	.word	0x080053ad
 800533c:	080053ad 	.word	0x080053ad
 8005340:	080053ad 	.word	0x080053ad
 8005344:	08005391 	.word	0x08005391
 8005348:	080053ad 	.word	0x080053ad
 800534c:	080053ad 	.word	0x080053ad
 8005350:	080053ad 	.word	0x080053ad
 8005354:	0800539f 	.word	0x0800539f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fb72 	bl	8005a48 <TIM_OC1_SetConfig>
      break;
 8005364:	e025      	b.n	80053b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fbdd 	bl	8005b2c <TIM_OC2_SetConfig>
      break;
 8005372:	e01e      	b.n	80053b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fc4e 	bl	8005c1c <TIM_OC3_SetConfig>
      break;
 8005380:	e017      	b.n	80053b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fcbd 	bl	8005d08 <TIM_OC4_SetConfig>
      break;
 800538e:	e010      	b.n	80053b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fd0e 	bl	8005db8 <TIM_OC5_SetConfig>
      break;
 800539c:	e009      	b.n	80053b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fd59 	bl	8005e5c <TIM_OC6_SetConfig>
      break;
 80053aa:	e002      	b.n	80053b2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	75fb      	strb	r3, [r7, #23]
      break;
 80053b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80053de:	2302      	movs	r3, #2
 80053e0:	e088      	b.n	80054f4 <HAL_TIM_IC_ConfigChannel+0x130>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	6819      	ldr	r1, [r3, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f000 fd80 	bl	8005f04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 020c 	bic.w	r2, r2, #12
 8005412:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6999      	ldr	r1, [r3, #24]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	619a      	str	r2, [r3, #24]
 8005426:	e060      	b.n	80054ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b04      	cmp	r3, #4
 800542c:	d11c      	bne.n	8005468 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6819      	ldr	r1, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f000 fe04 	bl	800604a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699a      	ldr	r2, [r3, #24]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005450:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6999      	ldr	r1, [r3, #24]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	021a      	lsls	r2, r3, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	619a      	str	r2, [r3, #24]
 8005466:	e040      	b.n	80054ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b08      	cmp	r3, #8
 800546c:	d11b      	bne.n	80054a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f000 fe51 	bl	8006124 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 020c 	bic.w	r2, r2, #12
 8005490:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69d9      	ldr	r1, [r3, #28]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	61da      	str	r2, [r3, #28]
 80054a4:	e021      	b.n	80054ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d11c      	bne.n	80054e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f000 fe6e 	bl	800619c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69d9      	ldr	r1, [r3, #28]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	021a      	lsls	r2, r3, #8
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	61da      	str	r2, [r3, #28]
 80054e4:	e001      	b.n	80054ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005516:	2302      	movs	r3, #2
 8005518:	e0ff      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b14      	cmp	r3, #20
 8005526:	f200 80f0 	bhi.w	800570a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005585 	.word	0x08005585
 8005534:	0800570b 	.word	0x0800570b
 8005538:	0800570b 	.word	0x0800570b
 800553c:	0800570b 	.word	0x0800570b
 8005540:	080055c5 	.word	0x080055c5
 8005544:	0800570b 	.word	0x0800570b
 8005548:	0800570b 	.word	0x0800570b
 800554c:	0800570b 	.word	0x0800570b
 8005550:	08005607 	.word	0x08005607
 8005554:	0800570b 	.word	0x0800570b
 8005558:	0800570b 	.word	0x0800570b
 800555c:	0800570b 	.word	0x0800570b
 8005560:	08005647 	.word	0x08005647
 8005564:	0800570b 	.word	0x0800570b
 8005568:	0800570b 	.word	0x0800570b
 800556c:	0800570b 	.word	0x0800570b
 8005570:	08005689 	.word	0x08005689
 8005574:	0800570b 	.word	0x0800570b
 8005578:	0800570b 	.word	0x0800570b
 800557c:	0800570b 	.word	0x0800570b
 8005580:	080056c9 	.word	0x080056c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fa5c 	bl	8005a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0208 	orr.w	r2, r2, #8
 800559e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0204 	bic.w	r2, r2, #4
 80055ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6999      	ldr	r1, [r3, #24]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	619a      	str	r2, [r3, #24]
      break;
 80055c2:	e0a5      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 faae 	bl	8005b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6999      	ldr	r1, [r3, #24]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	021a      	lsls	r2, r3, #8
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	619a      	str	r2, [r3, #24]
      break;
 8005604:	e084      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fb05 	bl	8005c1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0208 	orr.w	r2, r2, #8
 8005620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0204 	bic.w	r2, r2, #4
 8005630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69d9      	ldr	r1, [r3, #28]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	61da      	str	r2, [r3, #28]
      break;
 8005644:	e064      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fb5b 	bl	8005d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69d9      	ldr	r1, [r3, #28]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	021a      	lsls	r2, r3, #8
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	61da      	str	r2, [r3, #28]
      break;
 8005686:	e043      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fb92 	bl	8005db8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0204 	bic.w	r2, r2, #4
 80056b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056c6:	e023      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fbc4 	bl	8005e5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005708:	e002      	b.n	8005710 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
      break;
 800570e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop

08005724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIM_ConfigClockSource+0x1c>
 800573c:	2302      	movs	r3, #2
 800573e:	e0b4      	b.n	80058aa <HAL_TIM_ConfigClockSource+0x186>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	4b56      	ldr	r3, [pc, #344]	; (80058b4 <HAL_TIM_ConfigClockSource+0x190>)
 800575c:	4013      	ands	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005778:	d03e      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0xd4>
 800577a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577e:	f200 8087 	bhi.w	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005786:	f000 8086 	beq.w	8005896 <HAL_TIM_ConfigClockSource+0x172>
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578e:	d87f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 8005790:	2b70      	cmp	r3, #112	; 0x70
 8005792:	d01a      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0xa6>
 8005794:	2b70      	cmp	r3, #112	; 0x70
 8005796:	d87b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 8005798:	2b60      	cmp	r3, #96	; 0x60
 800579a:	d050      	beq.n	800583e <HAL_TIM_ConfigClockSource+0x11a>
 800579c:	2b60      	cmp	r3, #96	; 0x60
 800579e:	d877      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057a0:	2b50      	cmp	r3, #80	; 0x50
 80057a2:	d03c      	beq.n	800581e <HAL_TIM_ConfigClockSource+0xfa>
 80057a4:	2b50      	cmp	r3, #80	; 0x50
 80057a6:	d873      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d058      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x13a>
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d86f      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b30      	cmp	r3, #48	; 0x30
 80057b2:	d064      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x15a>
 80057b4:	2b30      	cmp	r3, #48	; 0x30
 80057b6:	d86b      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d060      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x15a>
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d867      	bhi.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d05c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x15a>
 80057c4:	2b10      	cmp	r3, #16
 80057c6:	d05a      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x15a>
 80057c8:	e062      	b.n	8005890 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6899      	ldr	r1, [r3, #8]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f000 fd37 	bl	800624c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	609a      	str	r2, [r3, #8]
      break;
 80057f6:	e04f      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6899      	ldr	r1, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f000 fd20 	bl	800624c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800581a:	609a      	str	r2, [r3, #8]
      break;
 800581c:	e03c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6859      	ldr	r1, [r3, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	461a      	mov	r2, r3
 800582c:	f000 fbde 	bl	8005fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2150      	movs	r1, #80	; 0x50
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fced 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 800583c:	e02c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	461a      	mov	r2, r3
 800584c:	f000 fc3a 	bl	80060c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2160      	movs	r1, #96	; 0x60
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fcdd 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 800585c:	e01c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	461a      	mov	r2, r3
 800586c:	f000 fbbe 	bl	8005fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2140      	movs	r1, #64	; 0x40
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fccd 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 800587c:	e00c      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f000 fcc4 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 800588e:	e003      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      break;
 8005894:	e000      	b.n	8005898 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	fffeff88 	.word	0xfffeff88

080058b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a40      	ldr	r2, [pc, #256]	; (8005a1c <TIM_Base_SetConfig+0x114>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005926:	d00f      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a3d      	ldr	r2, [pc, #244]	; (8005a20 <TIM_Base_SetConfig+0x118>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00b      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a3c      	ldr	r2, [pc, #240]	; (8005a24 <TIM_Base_SetConfig+0x11c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d007      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3b      	ldr	r2, [pc, #236]	; (8005a28 <TIM_Base_SetConfig+0x120>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3a      	ldr	r2, [pc, #232]	; (8005a2c <TIM_Base_SetConfig+0x124>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d108      	bne.n	800595a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <TIM_Base_SetConfig+0x114>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d02b      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005968:	d027      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <TIM_Base_SetConfig+0x118>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d023      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2b      	ldr	r2, [pc, #172]	; (8005a24 <TIM_Base_SetConfig+0x11c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01f      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <TIM_Base_SetConfig+0x120>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01b      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a29      	ldr	r2, [pc, #164]	; (8005a2c <TIM_Base_SetConfig+0x124>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d017      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a28      	ldr	r2, [pc, #160]	; (8005a30 <TIM_Base_SetConfig+0x128>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a27      	ldr	r2, [pc, #156]	; (8005a34 <TIM_Base_SetConfig+0x12c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00f      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a26      	ldr	r2, [pc, #152]	; (8005a38 <TIM_Base_SetConfig+0x130>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00b      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <TIM_Base_SetConfig+0x134>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a24      	ldr	r2, [pc, #144]	; (8005a40 <TIM_Base_SetConfig+0x138>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a23      	ldr	r2, [pc, #140]	; (8005a44 <TIM_Base_SetConfig+0x13c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d108      	bne.n	80059cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <TIM_Base_SetConfig+0x114>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0xf8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a0c      	ldr	r2, [pc, #48]	; (8005a2c <TIM_Base_SetConfig+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d103      	bne.n	8005a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	615a      	str	r2, [r3, #20]
}
 8005a0e:	bf00      	nop
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40010400 	.word	0x40010400
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800
 8005a3c:	40001800 	.word	0x40001800
 8005a40:	40001c00 	.word	0x40001c00
 8005a44:	40002000 	.word	0x40002000

08005a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <TIM_OC1_SetConfig+0xd8>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 0302 	bic.w	r3, r3, #2
 8005a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a21      	ldr	r2, [pc, #132]	; (8005b24 <TIM_OC1_SetConfig+0xdc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC1_SetConfig+0x64>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <TIM_OC1_SetConfig+0xe0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10c      	bne.n	8005ac6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0308 	bic.w	r3, r3, #8
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 0304 	bic.w	r3, r3, #4
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_OC1_SetConfig+0xdc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_OC1_SetConfig+0x8e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <TIM_OC1_SetConfig+0xe0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d111      	bne.n	8005afa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	fffeff8f 	.word	0xfffeff8f
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010400 	.word	0x40010400

08005b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0210 	bic.w	r2, r3, #16
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <TIM_OC2_SetConfig+0xe4>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0320 	bic.w	r3, r3, #32
 8005b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a23      	ldr	r2, [pc, #140]	; (8005c14 <TIM_OC2_SetConfig+0xe8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC2_SetConfig+0x68>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <TIM_OC2_SetConfig+0xec>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10d      	bne.n	8005bb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <TIM_OC2_SetConfig+0xe8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_OC2_SetConfig+0x94>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <TIM_OC2_SetConfig+0xec>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d113      	bne.n	8005be8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	feff8fff 	.word	0xfeff8fff
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40010400 	.word	0x40010400

08005c1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <TIM_OC3_SetConfig+0xe0>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <TIM_OC3_SetConfig+0xe4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_OC3_SetConfig+0x66>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <TIM_OC3_SetConfig+0xe8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10d      	bne.n	8005c9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <TIM_OC3_SetConfig+0xe4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_OC3_SetConfig+0x92>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <TIM_OC3_SetConfig+0xe8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d113      	bne.n	8005cd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	621a      	str	r2, [r3, #32]
}
 8005cf0:	bf00      	nop
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	fffeff8f 	.word	0xfffeff8f
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400

08005d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4b1e      	ldr	r3, [pc, #120]	; (8005dac <TIM_OC4_SetConfig+0xa4>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	031b      	lsls	r3, r3, #12
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a13      	ldr	r2, [pc, #76]	; (8005db0 <TIM_OC4_SetConfig+0xa8>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC4_SetConfig+0x68>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a12      	ldr	r2, [pc, #72]	; (8005db4 <TIM_OC4_SetConfig+0xac>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d109      	bne.n	8005d84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	feff8fff 	.word	0xfeff8fff
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40010400 	.word	0x40010400

08005db8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <TIM_OC5_SetConfig+0x98>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005df8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <TIM_OC5_SetConfig+0x9c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_OC5_SetConfig+0x5e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a11      	ldr	r2, [pc, #68]	; (8005e58 <TIM_OC5_SetConfig+0xa0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d109      	bne.n	8005e2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	fffeff8f 	.word	0xfffeff8f
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40010400 	.word	0x40010400

08005e5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4b1c      	ldr	r3, [pc, #112]	; (8005ef8 <TIM_OC6_SetConfig+0x9c>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	051b      	lsls	r3, r3, #20
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a13      	ldr	r2, [pc, #76]	; (8005efc <TIM_OC6_SetConfig+0xa0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_OC6_SetConfig+0x60>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <TIM_OC6_SetConfig+0xa4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d109      	bne.n	8005ed0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	029b      	lsls	r3, r3, #10
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	feff8fff 	.word	0xfeff8fff
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40010400 	.word	0x40010400

08005f04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f023 0201 	bic.w	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a1b      	ldr	r3, [r3, #32]
 8005f28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a28      	ldr	r2, [pc, #160]	; (8005fd0 <TIM_TI1_SetConfig+0xcc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01b      	beq.n	8005f6a <TIM_TI1_SetConfig+0x66>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f38:	d017      	beq.n	8005f6a <TIM_TI1_SetConfig+0x66>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a25      	ldr	r2, [pc, #148]	; (8005fd4 <TIM_TI1_SetConfig+0xd0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <TIM_TI1_SetConfig+0x66>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a24      	ldr	r2, [pc, #144]	; (8005fd8 <TIM_TI1_SetConfig+0xd4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00f      	beq.n	8005f6a <TIM_TI1_SetConfig+0x66>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4a23      	ldr	r2, [pc, #140]	; (8005fdc <TIM_TI1_SetConfig+0xd8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00b      	beq.n	8005f6a <TIM_TI1_SetConfig+0x66>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <TIM_TI1_SetConfig+0xdc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <TIM_TI1_SetConfig+0x66>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a21      	ldr	r2, [pc, #132]	; (8005fe4 <TIM_TI1_SetConfig+0xe0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d003      	beq.n	8005f6a <TIM_TI1_SetConfig+0x66>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <TIM_TI1_SetConfig+0xe4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d101      	bne.n	8005f6e <TIM_TI1_SetConfig+0x6a>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <TIM_TI1_SetConfig+0x6c>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	e003      	b.n	8005f8e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f023 030a 	bic.w	r3, r3, #10
 8005fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f003 030a 	and.w	r3, r3, #10
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	621a      	str	r2, [r3, #32]
}
 8005fc2:	bf00      	nop
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40000c00 	.word	0x40000c00
 8005fe0:	40010400 	.word	0x40010400
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40001800 	.word	0x40001800

08005fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f023 0201 	bic.w	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 030a 	bic.w	r3, r3, #10
 8006028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f023 0210 	bic.w	r2, r3, #16
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006076:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	031b      	lsls	r3, r3, #12
 800608e:	b29b      	uxth	r3, r3
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800609c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	621a      	str	r2, [r3, #32]
}
 80060b8:	bf00      	nop
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 0210 	bic.w	r2, r3, #16
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	031b      	lsls	r3, r3, #12
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006100:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	621a      	str	r2, [r3, #32]
}
 8006118:	bf00      	nop
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 0303 	bic.w	r3, r3, #3
 8006150:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4313      	orrs	r3, r2
 8006158:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006160:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	b2db      	uxtb	r3, r3
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006174:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	621a      	str	r2, [r3, #32]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	021b      	lsls	r3, r3, #8
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	031b      	lsls	r3, r3, #12
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80061ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	031b      	lsls	r3, r3, #12
 80061f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	f043 0307 	orr.w	r3, r3, #7
 8006238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	431a      	orrs	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4313      	orrs	r3, r2
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	2201      	movs	r2, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1a      	ldr	r2, [r3, #32]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	401a      	ands	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e06d      	b.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a30      	ldr	r2, [pc, #192]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2f      	ldr	r2, [pc, #188]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800632a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a20      	ldr	r2, [pc, #128]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d022      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d01d      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1d      	ldr	r2, [pc, #116]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d018      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1a      	ldr	r2, [pc, #104]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00e      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a15      	ldr	r2, [pc, #84]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d009      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d004      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d10c      	bne.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40010400 	.word	0x40010400
 80063e0:	40000400 	.word	0x40000400
 80063e4:	40000800 	.word	0x40000800
 80063e8:	40000c00 	.word	0x40000c00
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40001800 	.word	0x40001800

080063f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800640c:	2302      	movs	r3, #2
 800640e:	e065      	b.n	80064dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	041b      	lsls	r3, r3, #16
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a16      	ldr	r2, [pc, #88]	; (80064e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a14      	ldr	r2, [pc, #80]	; (80064ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d115      	bne.n	80064ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	051b      	lsls	r3, r3, #20
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40010400 	.word	0x40010400

080064f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e040      	b.n	80065c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fb fe44 	bl	80021dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2224      	movs	r2, #36	; 0x24
 8006558:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0201 	bic.w	r2, r2, #1
 8006568:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f974 	bl	8006858 <UART_SetConfig>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e022      	b.n	80065c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fbcc 	bl	8006d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689a      	ldr	r2, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fc53 	bl	8006e64 <UART_CheckIdleState>
 80065be:	4603      	mov	r3, r0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	603b      	str	r3, [r7, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d171      	bne.n	80066c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_UART_Transmit+0x24>
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e06a      	b.n	80066c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2221      	movs	r2, #33	; 0x21
 80065fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065fe:	f7fc f865 	bl	80026cc <HAL_GetTick>
 8006602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	88fa      	ldrh	r2, [r7, #6]
 8006610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661c:	d108      	bne.n	8006630 <HAL_UART_Transmit+0x68>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	e003      	b.n	8006638 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006638:	e02c      	b.n	8006694 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2200      	movs	r2, #0
 8006642:	2180      	movs	r1, #128	; 0x80
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fc5a 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e038      	b.n	80066c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006668:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	3302      	adds	r3, #2
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	e007      	b.n	8006682 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	781a      	ldrb	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3301      	adds	r3, #1
 8006680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1cc      	bne.n	800663a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2200      	movs	r2, #0
 80066a8:	2140      	movs	r1, #64	; 0x40
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 fc27 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e005      	b.n	80066c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2220      	movs	r2, #32
 80066be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e000      	b.n	80066c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b08a      	sub	sp, #40	; 0x28
 80066d2:	af02      	add	r7, sp, #8
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	4613      	mov	r3, r2
 80066dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	f040 80b1 	bne.w	800684c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_UART_Receive+0x28>
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e0a9      	b.n	800684e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2222      	movs	r2, #34	; 0x22
 8006706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006710:	f7fb ffdc 	bl	80026cc <HAL_GetTick>
 8006714:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	88fa      	ldrh	r2, [r7, #6]
 800671a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	88fa      	ldrh	r2, [r7, #6]
 8006722:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672e:	d10e      	bne.n	800674e <HAL_UART_Receive+0x80>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <HAL_UART_Receive+0x76>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800673e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006742:	e02d      	b.n	80067a0 <HAL_UART_Receive+0xd2>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	22ff      	movs	r2, #255	; 0xff
 8006748:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800674c:	e028      	b.n	80067a0 <HAL_UART_Receive+0xd2>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10d      	bne.n	8006772 <HAL_UART_Receive+0xa4>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <HAL_UART_Receive+0x9a>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	22ff      	movs	r2, #255	; 0xff
 8006762:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006766:	e01b      	b.n	80067a0 <HAL_UART_Receive+0xd2>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	227f      	movs	r2, #127	; 0x7f
 800676c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006770:	e016      	b.n	80067a0 <HAL_UART_Receive+0xd2>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800677a:	d10d      	bne.n	8006798 <HAL_UART_Receive+0xca>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <HAL_UART_Receive+0xc0>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	227f      	movs	r2, #127	; 0x7f
 8006788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800678c:	e008      	b.n	80067a0 <HAL_UART_Receive+0xd2>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	223f      	movs	r2, #63	; 0x3f
 8006792:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006796:	e003      	b.n	80067a0 <HAL_UART_Receive+0xd2>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b0:	d108      	bne.n	80067c4 <HAL_UART_Receive+0xf6>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	e003      	b.n	80067cc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80067cc:	e032      	b.n	8006834 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2200      	movs	r2, #0
 80067d6:	2120      	movs	r1, #32
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fb90 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e032      	b.n	800684e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10c      	bne.n	8006808 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	8a7b      	ldrh	r3, [r7, #18]
 80067f8:	4013      	ands	r3, r2
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	3302      	adds	r3, #2
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	e00c      	b.n	8006822 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	b2da      	uxtb	r2, r3
 8006810:	8a7b      	ldrh	r3, [r7, #18]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	4013      	ands	r3, r2
 8006816:	b2da      	uxtb	r2, r3
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	3301      	adds	r3, #1
 8006820:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b01      	subs	r3, #1
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1c6      	bne.n	80067ce <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
  }
}
 800684e:	4618      	mov	r0, r3
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4ba6      	ldr	r3, [pc, #664]	; (8006b1c <UART_SetConfig+0x2c4>)
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	6979      	ldr	r1, [r7, #20]
 800688c:	430b      	orrs	r3, r1
 800688e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a94      	ldr	r2, [pc, #592]	; (8006b20 <UART_SetConfig+0x2c8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d120      	bne.n	8006916 <UART_SetConfig+0xbe>
 80068d4:	4b93      	ldr	r3, [pc, #588]	; (8006b24 <UART_SetConfig+0x2cc>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d816      	bhi.n	8006910 <UART_SetConfig+0xb8>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <UART_SetConfig+0x90>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	08006905 	.word	0x08006905
 80068f0:	080068ff 	.word	0x080068ff
 80068f4:	0800690b 	.word	0x0800690b
 80068f8:	2301      	movs	r3, #1
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e150      	b.n	8006ba0 <UART_SetConfig+0x348>
 80068fe:	2302      	movs	r3, #2
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e14d      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006904:	2304      	movs	r3, #4
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e14a      	b.n	8006ba0 <UART_SetConfig+0x348>
 800690a:	2308      	movs	r3, #8
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e147      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e144      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a83      	ldr	r2, [pc, #524]	; (8006b28 <UART_SetConfig+0x2d0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d132      	bne.n	8006986 <UART_SetConfig+0x12e>
 8006920:	4b80      	ldr	r3, [pc, #512]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b0c      	cmp	r3, #12
 800692c:	d828      	bhi.n	8006980 <UART_SetConfig+0x128>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0xdc>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006969 	.word	0x08006969
 8006938:	08006981 	.word	0x08006981
 800693c:	08006981 	.word	0x08006981
 8006940:	08006981 	.word	0x08006981
 8006944:	08006975 	.word	0x08006975
 8006948:	08006981 	.word	0x08006981
 800694c:	08006981 	.word	0x08006981
 8006950:	08006981 	.word	0x08006981
 8006954:	0800696f 	.word	0x0800696f
 8006958:	08006981 	.word	0x08006981
 800695c:	08006981 	.word	0x08006981
 8006960:	08006981 	.word	0x08006981
 8006964:	0800697b 	.word	0x0800697b
 8006968:	2300      	movs	r3, #0
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e118      	b.n	8006ba0 <UART_SetConfig+0x348>
 800696e:	2302      	movs	r3, #2
 8006970:	77fb      	strb	r3, [r7, #31]
 8006972:	e115      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006974:	2304      	movs	r3, #4
 8006976:	77fb      	strb	r3, [r7, #31]
 8006978:	e112      	b.n	8006ba0 <UART_SetConfig+0x348>
 800697a:	2308      	movs	r3, #8
 800697c:	77fb      	strb	r3, [r7, #31]
 800697e:	e10f      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006980:	2310      	movs	r3, #16
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e10c      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a68      	ldr	r2, [pc, #416]	; (8006b2c <UART_SetConfig+0x2d4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d120      	bne.n	80069d2 <UART_SetConfig+0x17a>
 8006990:	4b64      	ldr	r3, [pc, #400]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006996:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800699a:	2b30      	cmp	r3, #48	; 0x30
 800699c:	d013      	beq.n	80069c6 <UART_SetConfig+0x16e>
 800699e:	2b30      	cmp	r3, #48	; 0x30
 80069a0:	d814      	bhi.n	80069cc <UART_SetConfig+0x174>
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d009      	beq.n	80069ba <UART_SetConfig+0x162>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d810      	bhi.n	80069cc <UART_SetConfig+0x174>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <UART_SetConfig+0x15c>
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d006      	beq.n	80069c0 <UART_SetConfig+0x168>
 80069b2:	e00b      	b.n	80069cc <UART_SetConfig+0x174>
 80069b4:	2300      	movs	r3, #0
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	e0f2      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069ba:	2302      	movs	r3, #2
 80069bc:	77fb      	strb	r3, [r7, #31]
 80069be:	e0ef      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069c0:	2304      	movs	r3, #4
 80069c2:	77fb      	strb	r3, [r7, #31]
 80069c4:	e0ec      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069c6:	2308      	movs	r3, #8
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e0e9      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069cc:	2310      	movs	r3, #16
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e0e6      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a56      	ldr	r2, [pc, #344]	; (8006b30 <UART_SetConfig+0x2d8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d120      	bne.n	8006a1e <UART_SetConfig+0x1c6>
 80069dc:	4b51      	ldr	r3, [pc, #324]	; (8006b24 <UART_SetConfig+0x2cc>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069e6:	2bc0      	cmp	r3, #192	; 0xc0
 80069e8:	d013      	beq.n	8006a12 <UART_SetConfig+0x1ba>
 80069ea:	2bc0      	cmp	r3, #192	; 0xc0
 80069ec:	d814      	bhi.n	8006a18 <UART_SetConfig+0x1c0>
 80069ee:	2b80      	cmp	r3, #128	; 0x80
 80069f0:	d009      	beq.n	8006a06 <UART_SetConfig+0x1ae>
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d810      	bhi.n	8006a18 <UART_SetConfig+0x1c0>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <UART_SetConfig+0x1a8>
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d006      	beq.n	8006a0c <UART_SetConfig+0x1b4>
 80069fe:	e00b      	b.n	8006a18 <UART_SetConfig+0x1c0>
 8006a00:	2300      	movs	r3, #0
 8006a02:	77fb      	strb	r3, [r7, #31]
 8006a04:	e0cc      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a06:	2302      	movs	r3, #2
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e0c9      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e0c6      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a12:	2308      	movs	r3, #8
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e0c3      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e0c0      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a44      	ldr	r2, [pc, #272]	; (8006b34 <UART_SetConfig+0x2dc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d125      	bne.n	8006a74 <UART_SetConfig+0x21c>
 8006a28:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a36:	d017      	beq.n	8006a68 <UART_SetConfig+0x210>
 8006a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3c:	d817      	bhi.n	8006a6e <UART_SetConfig+0x216>
 8006a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a42:	d00b      	beq.n	8006a5c <UART_SetConfig+0x204>
 8006a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a48:	d811      	bhi.n	8006a6e <UART_SetConfig+0x216>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <UART_SetConfig+0x1fe>
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a52:	d006      	beq.n	8006a62 <UART_SetConfig+0x20a>
 8006a54:	e00b      	b.n	8006a6e <UART_SetConfig+0x216>
 8006a56:	2300      	movs	r3, #0
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e0a1      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e09e      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a62:	2304      	movs	r3, #4
 8006a64:	77fb      	strb	r3, [r7, #31]
 8006a66:	e09b      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a68:	2308      	movs	r3, #8
 8006a6a:	77fb      	strb	r3, [r7, #31]
 8006a6c:	e098      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a6e:	2310      	movs	r3, #16
 8006a70:	77fb      	strb	r3, [r7, #31]
 8006a72:	e095      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2f      	ldr	r2, [pc, #188]	; (8006b38 <UART_SetConfig+0x2e0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d125      	bne.n	8006aca <UART_SetConfig+0x272>
 8006a7e:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a8c:	d017      	beq.n	8006abe <UART_SetConfig+0x266>
 8006a8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a92:	d817      	bhi.n	8006ac4 <UART_SetConfig+0x26c>
 8006a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a98:	d00b      	beq.n	8006ab2 <UART_SetConfig+0x25a>
 8006a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9e:	d811      	bhi.n	8006ac4 <UART_SetConfig+0x26c>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <UART_SetConfig+0x254>
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa8:	d006      	beq.n	8006ab8 <UART_SetConfig+0x260>
 8006aaa:	e00b      	b.n	8006ac4 <UART_SetConfig+0x26c>
 8006aac:	2301      	movs	r3, #1
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	e076      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e073      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e070      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006abe:	2308      	movs	r3, #8
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e06d      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e06a      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1b      	ldr	r2, [pc, #108]	; (8006b3c <UART_SetConfig+0x2e4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d138      	bne.n	8006b46 <UART_SetConfig+0x2ee>
 8006ad4:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ada:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ade:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ae2:	d017      	beq.n	8006b14 <UART_SetConfig+0x2bc>
 8006ae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ae8:	d82a      	bhi.n	8006b40 <UART_SetConfig+0x2e8>
 8006aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aee:	d00b      	beq.n	8006b08 <UART_SetConfig+0x2b0>
 8006af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af4:	d824      	bhi.n	8006b40 <UART_SetConfig+0x2e8>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <UART_SetConfig+0x2aa>
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afe:	d006      	beq.n	8006b0e <UART_SetConfig+0x2b6>
 8006b00:	e01e      	b.n	8006b40 <UART_SetConfig+0x2e8>
 8006b02:	2300      	movs	r3, #0
 8006b04:	77fb      	strb	r3, [r7, #31]
 8006b06:	e04b      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e048      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b0e:	2304      	movs	r3, #4
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e045      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b14:	2308      	movs	r3, #8
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e042      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b1a:	bf00      	nop
 8006b1c:	efff69f3 	.word	0xefff69f3
 8006b20:	40011000 	.word	0x40011000
 8006b24:	40023800 	.word	0x40023800
 8006b28:	40004400 	.word	0x40004400
 8006b2c:	40004800 	.word	0x40004800
 8006b30:	40004c00 	.word	0x40004c00
 8006b34:	40005000 	.word	0x40005000
 8006b38:	40011400 	.word	0x40011400
 8006b3c:	40007800 	.word	0x40007800
 8006b40:	2310      	movs	r3, #16
 8006b42:	77fb      	strb	r3, [r7, #31]
 8006b44:	e02c      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a72      	ldr	r2, [pc, #456]	; (8006d14 <UART_SetConfig+0x4bc>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d125      	bne.n	8006b9c <UART_SetConfig+0x344>
 8006b50:	4b71      	ldr	r3, [pc, #452]	; (8006d18 <UART_SetConfig+0x4c0>)
 8006b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b5e:	d017      	beq.n	8006b90 <UART_SetConfig+0x338>
 8006b60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b64:	d817      	bhi.n	8006b96 <UART_SetConfig+0x33e>
 8006b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6a:	d00b      	beq.n	8006b84 <UART_SetConfig+0x32c>
 8006b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b70:	d811      	bhi.n	8006b96 <UART_SetConfig+0x33e>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <UART_SetConfig+0x326>
 8006b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b7a:	d006      	beq.n	8006b8a <UART_SetConfig+0x332>
 8006b7c:	e00b      	b.n	8006b96 <UART_SetConfig+0x33e>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	77fb      	strb	r3, [r7, #31]
 8006b82:	e00d      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b84:	2302      	movs	r3, #2
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e00a      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b8a:	2304      	movs	r3, #4
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e007      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b90:	2308      	movs	r3, #8
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e004      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b96:	2310      	movs	r3, #16
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e001      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba8:	d15b      	bne.n	8006c62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006baa:	7ffb      	ldrb	r3, [r7, #31]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d828      	bhi.n	8006c02 <UART_SetConfig+0x3aa>
 8006bb0:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0x360>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	08006c03 	.word	0x08006c03
 8006bc8:	08006bf3 	.word	0x08006bf3
 8006bcc:	08006c03 	.word	0x08006c03
 8006bd0:	08006c03 	.word	0x08006c03
 8006bd4:	08006c03 	.word	0x08006c03
 8006bd8:	08006bfb 	.word	0x08006bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fd f946 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8006be0:	61b8      	str	r0, [r7, #24]
        break;
 8006be2:	e013      	b.n	8006c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be4:	f7fd f956 	bl	8003e94 <HAL_RCC_GetPCLK2Freq>
 8006be8:	61b8      	str	r0, [r7, #24]
        break;
 8006bea:	e00f      	b.n	8006c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bec:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <UART_SetConfig+0x4c4>)
 8006bee:	61bb      	str	r3, [r7, #24]
        break;
 8006bf0:	e00c      	b.n	8006c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fd f829 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8006bf6:	61b8      	str	r0, [r7, #24]
        break;
 8006bf8:	e008      	b.n	8006c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bfe:	61bb      	str	r3, [r7, #24]
        break;
 8006c00:	e004      	b.n	8006c0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	77bb      	strb	r3, [r7, #30]
        break;
 8006c0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d074      	beq.n	8006cfc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	005a      	lsls	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b0f      	cmp	r3, #15
 8006c2c:	d916      	bls.n	8006c5c <UART_SetConfig+0x404>
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c34:	d212      	bcs.n	8006c5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f023 030f 	bic.w	r3, r3, #15
 8006c3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	89fb      	ldrh	r3, [r7, #14]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	89fa      	ldrh	r2, [r7, #14]
 8006c58:	60da      	str	r2, [r3, #12]
 8006c5a:	e04f      	b.n	8006cfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77bb      	strb	r3, [r7, #30]
 8006c60:	e04c      	b.n	8006cfc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c62:	7ffb      	ldrb	r3, [r7, #31]
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d828      	bhi.n	8006cba <UART_SetConfig+0x462>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <UART_SetConfig+0x418>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006ca5 	.word	0x08006ca5
 8006c7c:	08006cbb 	.word	0x08006cbb
 8006c80:	08006cab 	.word	0x08006cab
 8006c84:	08006cbb 	.word	0x08006cbb
 8006c88:	08006cbb 	.word	0x08006cbb
 8006c8c:	08006cbb 	.word	0x08006cbb
 8006c90:	08006cb3 	.word	0x08006cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c94:	f7fd f8ea 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8006c98:	61b8      	str	r0, [r7, #24]
        break;
 8006c9a:	e013      	b.n	8006cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c9c:	f7fd f8fa 	bl	8003e94 <HAL_RCC_GetPCLK2Freq>
 8006ca0:	61b8      	str	r0, [r7, #24]
        break;
 8006ca2:	e00f      	b.n	8006cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <UART_SetConfig+0x4c4>)
 8006ca6:	61bb      	str	r3, [r7, #24]
        break;
 8006ca8:	e00c      	b.n	8006cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006caa:	f7fc ffcd 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8006cae:	61b8      	str	r0, [r7, #24]
        break;
 8006cb0:	e008      	b.n	8006cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb6:	61bb      	str	r3, [r7, #24]
        break;
 8006cb8:	e004      	b.n	8006cc4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	77bb      	strb	r3, [r7, #30]
        break;
 8006cc2:	bf00      	nop
    }

    if (pclk != 0U)
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d018      	beq.n	8006cfc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	085a      	lsrs	r2, r3, #1
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	441a      	add	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d909      	bls.n	8006cf8 <UART_SetConfig+0x4a0>
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cea:	d205      	bcs.n	8006cf8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60da      	str	r2, [r3, #12]
 8006cf6:	e001      	b.n	8006cfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d08:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40007c00 	.word	0x40007c00
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	00f42400 	.word	0x00f42400

08006d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01a      	beq.n	8006e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1e:	d10a      	bne.n	8006e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	605a      	str	r2, [r3, #4]
  }
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e74:	f7fb fc2a 	bl	80026cc <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d10e      	bne.n	8006ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f831 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e027      	b.n	8006ef6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d10e      	bne.n	8006ed2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f81b 	bl	8006efe <UART_WaitOnFlagUntilTimeout>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e011      	b.n	8006ef6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b09c      	sub	sp, #112	; 0x70
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0e:	e0a7      	b.n	8007060 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	f000 80a3 	beq.w	8007060 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fb fbd7 	bl	80026cc <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d13f      	bne.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f44:	667b      	str	r3, [r7, #100]	; 0x64
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e6      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3308      	adds	r3, #8
 8006f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	663b      	str	r3, [r7, #96]	; 0x60
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3308      	adds	r3, #8
 8006f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f82:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e5      	bne.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e068      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d050      	beq.n	8007060 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fcc:	d148      	bne.n	8007060 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fd6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e6      	bne.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3308      	adds	r3, #8
 8007010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	613b      	str	r3, [r7, #16]
   return(result);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	66bb      	str	r3, [r7, #104]	; 0x68
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3308      	adds	r3, #8
 8007028:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800702a:	623a      	str	r2, [r7, #32]
 800702c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	69f9      	ldr	r1, [r7, #28]
 8007030:	6a3a      	ldr	r2, [r7, #32]
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	61bb      	str	r3, [r7, #24]
   return(result);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e5      	bne.n	800700a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e010      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69da      	ldr	r2, [r3, #28]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	4013      	ands	r3, r2
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	429a      	cmp	r2, r3
 800706e:	bf0c      	ite	eq
 8007070:	2301      	moveq	r3, #1
 8007072:	2300      	movne	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	429a      	cmp	r2, r3
 800707c:	f43f af48 	beq.w	8006f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3770      	adds	r7, #112	; 0x70
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <__libc_init_array>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	4d0d      	ldr	r5, [pc, #52]	; (80070c4 <__libc_init_array+0x38>)
 8007090:	4c0d      	ldr	r4, [pc, #52]	; (80070c8 <__libc_init_array+0x3c>)
 8007092:	1b64      	subs	r4, r4, r5
 8007094:	10a4      	asrs	r4, r4, #2
 8007096:	2600      	movs	r6, #0
 8007098:	42a6      	cmp	r6, r4
 800709a:	d109      	bne.n	80070b0 <__libc_init_array+0x24>
 800709c:	4d0b      	ldr	r5, [pc, #44]	; (80070cc <__libc_init_array+0x40>)
 800709e:	4c0c      	ldr	r4, [pc, #48]	; (80070d0 <__libc_init_array+0x44>)
 80070a0:	f000 f82e 	bl	8007100 <_init>
 80070a4:	1b64      	subs	r4, r4, r5
 80070a6:	10a4      	asrs	r4, r4, #2
 80070a8:	2600      	movs	r6, #0
 80070aa:	42a6      	cmp	r6, r4
 80070ac:	d105      	bne.n	80070ba <__libc_init_array+0x2e>
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b4:	4798      	blx	r3
 80070b6:	3601      	adds	r6, #1
 80070b8:	e7ee      	b.n	8007098 <__libc_init_array+0xc>
 80070ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80070be:	4798      	blx	r3
 80070c0:	3601      	adds	r6, #1
 80070c2:	e7f2      	b.n	80070aa <__libc_init_array+0x1e>
 80070c4:	08007138 	.word	0x08007138
 80070c8:	08007138 	.word	0x08007138
 80070cc:	08007138 	.word	0x08007138
 80070d0:	0800713c 	.word	0x0800713c

080070d4 <memcpy>:
 80070d4:	440a      	add	r2, r1
 80070d6:	4291      	cmp	r1, r2
 80070d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070dc:	d100      	bne.n	80070e0 <memcpy+0xc>
 80070de:	4770      	bx	lr
 80070e0:	b510      	push	{r4, lr}
 80070e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ea:	4291      	cmp	r1, r2
 80070ec:	d1f9      	bne.n	80070e2 <memcpy+0xe>
 80070ee:	bd10      	pop	{r4, pc}

080070f0 <memset>:
 80070f0:	4402      	add	r2, r0
 80070f2:	4603      	mov	r3, r0
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d100      	bne.n	80070fa <memset+0xa>
 80070f8:	4770      	bx	lr
 80070fa:	f803 1b01 	strb.w	r1, [r3], #1
 80070fe:	e7f9      	b.n	80070f4 <memset+0x4>

08007100 <_init>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	bf00      	nop
 8007104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007106:	bc08      	pop	{r3}
 8007108:	469e      	mov	lr, r3
 800710a:	4770      	bx	lr

0800710c <_fini>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	bf00      	nop
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr
