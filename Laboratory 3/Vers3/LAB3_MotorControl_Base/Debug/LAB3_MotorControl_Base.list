
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009158  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009438  08009438  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009440  08009440  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c0  2000007c  080094c4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  080094c4  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cd9  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c97  00000000  00000000  00038d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0003ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003cf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a834  00000000  00000000  0003e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b50e  00000000  00000000  00068b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001076c5  00000000  00000000  0008405a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b71f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006174  00000000  00000000  0018b770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009340 	.word	0x08009340

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08009340 	.word	0x08009340

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000600:	2301      	movs	r3, #1
 8000602:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8000604:	e025      	b.n	8000652 <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <cobsEncode+0x3e>
            FinishBlock(code);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	7efa      	ldrb	r2, [r7, #27]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	2301      	movs	r3, #1
 800061e:	76fb      	strb	r3, [r7, #27]
 8000620:	e014      	b.n	800064c <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 800062e:	7efb      	ldrb	r3, [r7, #27]
 8000630:	3301      	adds	r3, #1
 8000632:	76fb      	strb	r3, [r7, #27]
 8000634:	7efb      	ldrb	r3, [r7, #27]
 8000636:	2bff      	cmp	r3, #255	; 0xff
 8000638:	d108      	bne.n	800064c <cobsEncode+0x68>
                FinishBlock(code);
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	7efa      	ldrb	r2, [r7, #27]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	2301      	movs	r3, #1
 800064a:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3d5      	bcc.n	8000606 <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	7efa      	ldrb	r2, [r7, #27]
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	2301      	movs	r3, #1
 800066a:	76fb      	strb	r3, [r7, #27]
}
 800066c:	bf00      	nop
 800066e:	3724      	adds	r7, #36	; 0x24
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01c      	beq.n	80006c6 <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3321      	adds	r3, #33	; 0x21
 8000690:	461a      	mov	r2, r3
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff ffa5 	bl	80005e4 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3302      	adds	r3, #2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	f007 f90f 	bl	80078e0 <HAL_UART_Transmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e000      	b.n	80006c8 <ertc_dlog_send+0x50>
	}

	return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c59      	adds	r1, r3, #1
 80006e2:	2303      	movs	r3, #3
 80006e4:	2201      	movs	r2, #1
 80006e6:	f007 f97e 	bl	80079e6 <HAL_UART_Receive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10e      	bne.n	800070e <ertc_dlog_update+0x3e>
		switch (logger->rxbuff[0]) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b41      	cmp	r3, #65	; 0x41
 80006f6:	d002      	beq.n	80006fe <ertc_dlog_update+0x2e>
 80006f8:	2b42      	cmp	r3, #66	; 0x42
 80006fa:	d004      	beq.n	8000706 <ertc_dlog_update+0x36>
 80006fc:	e008      	b.n	8000710 <ertc_dlog_update+0x40>
			case TX_START_CMD:
				logger->tx_enable = true;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				break;
 8000704:	e004      	b.n	8000710 <ertc_dlog_update+0x40>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
				break;
 800070c:	e000      	b.n	8000710 <ertc_dlog_update+0x40>
//			default:
//				logger->tx_enable = false;
		}
	}
 800070e:	bf00      	nop
	return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <saturate>:
} data;

// Saturation function (we do not exceed the VBATT/2 to avoid to damege the motor)
float VLIM = VBATT / 2;
float saturate(float voltage)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	ed87 0a01 	vstr	s0, [r7, #4]
  if (voltage > VLIM)
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <saturate+0x60>)
 8000728:	edd3 7a00 	vldr	s15, [r3]
 800072c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000738:	dd03      	ble.n	8000742 <saturate+0x26>
    voltage = VLIM;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <saturate+0x60>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e012      	b.n	8000768 <saturate+0x4c>
  else if (voltage < -VLIM)
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <saturate+0x60>)
 8000744:	edd3 7a00 	vldr	s15, [r3]
 8000748:	eef1 7a67 	vneg.f32	s15, s15
 800074c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000758:	d506      	bpl.n	8000768 <saturate+0x4c>
    voltage = -VLIM;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <saturate+0x60>)
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	eef1 7a67 	vneg.f32	s15, s15
 8000764:	edc7 7a01 	vstr	s15, [r7, #4]
  return voltage;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	ee07 3a90 	vmov	s15, r3
}
 800076e:	eeb0 0a67 	vmov.f32	s0, s15
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	20000004 	.word	0x20000004

08000780 <PID1>:
  return voltage;
}

// Function to compute the PID with the anti-wind up
float PID1(float error)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	ed87 0a01 	vstr	s0, [r7, #4]
  voltage = 0;
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <PID1+0x98>)
 800078c:	f04f 0200 	mov.w	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
  I1 = I1 + error * KI * TS;
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <PID1+0x9c>)
 8000794:	edd3 7a00 	vldr	s15, [r3]
 8000798:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <PID1+0xa0>)
 800079e:	ed93 7a00 	vldr	s14, [r3]
 80007a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ae:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8000810 <PID1+0x90>
 80007b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80007b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <PID1+0x9c>)
 80007c0:	edc3 7a00 	vstr	s15, [r3]
  voltage = KP * error + I1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <PID1+0xa4>)
 80007c6:	ed93 7a00 	vldr	s14, [r3]
 80007ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <PID1+0x9c>)
 80007d4:	edd3 7a00 	vldr	s15, [r3]
 80007d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <PID1+0x98>)
 80007de:	edc3 7a00 	vstr	s15, [r3]
  voltage = saturate(voltage);
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <PID1+0x98>)
 80007e4:	edd3 7a00 	vldr	s15, [r3]
 80007e8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ec:	f7ff ff96 	bl	800071c <saturate>
 80007f0:	eef0 7a40 	vmov.f32	s15, s0
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <PID1+0x98>)
 80007f6:	edc3 7a00 	vstr	s15, [r3]
  return voltage;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <PID1+0x98>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	ee07 3a90 	vmov	s15, r3
}
 8000802:	eeb0 0a67 	vmov.f32	s0, s15
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	f3af 8000 	nop.w
 8000810:	47ae147b 	.word	0x47ae147b
 8000814:	3f847ae1 	.word	0x3f847ae1
 8000818:	200007fc 	.word	0x200007fc
 800081c:	200007f4 	.word	0x200007f4
 8000820:	200007f0 	.word	0x200007f0
 8000824:	20000000 	.word	0x20000000

08000828 <PID2>:

float PID2(float error)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	ed87 0a01 	vstr	s0, [r7, #4]
  voltage = 0;
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <PID2+0x98>)
 8000834:	f04f 0200 	mov.w	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
  I2 = I2 + error * KI * TS;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <PID2+0x9c>)
 800083c:	edd3 7a00 	vldr	s15, [r3]
 8000840:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <PID2+0xa0>)
 8000846:	ed93 7a00 	vldr	s14, [r3]
 800084a:	edd7 7a01 	vldr	s15, [r7, #4]
 800084e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80008b8 <PID2+0x90>
 800085a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800085e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000862:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <PID2+0x9c>)
 8000868:	edc3 7a00 	vstr	s15, [r3]
  voltage = KP * error + I2;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <PID2+0xa4>)
 800086e:	ed93 7a00 	vldr	s14, [r3]
 8000872:	edd7 7a01 	vldr	s15, [r7, #4]
 8000876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <PID2+0x9c>)
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <PID2+0x98>)
 8000886:	edc3 7a00 	vstr	s15, [r3]
  voltage = saturate(voltage);
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <PID2+0x98>)
 800088c:	edd3 7a00 	vldr	s15, [r3]
 8000890:	eeb0 0a67 	vmov.f32	s0, s15
 8000894:	f7ff ff42 	bl	800071c <saturate>
 8000898:	eef0 7a40 	vmov.f32	s15, s0
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <PID2+0x98>)
 800089e:	edc3 7a00 	vstr	s15, [r3]
  return voltage;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <PID2+0x98>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	ee07 3a90 	vmov	s15, r3
}
 80008aa:	eeb0 0a67 	vmov.f32	s0, s15
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	f3af 8000 	nop.w
 80008b8:	47ae147b 	.word	0x47ae147b
 80008bc:	3f847ae1 	.word	0x3f847ae1
 80008c0:	200007fc 	.word	0x200007fc
 80008c4:	200007f8 	.word	0x200007f8
 80008c8:	200007f0 	.word	0x200007f0
 80008cc:	20000000 	.word	0x20000000

080008d0 <computeRpm>:

float computeRpm(int32_t encoder_read)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  float revolutions = 0;
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  float motor_rpm = 0;
 80008de:	f04f 0300 	mov.w	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  revolutions = ((float)encoder_read / 3840.0);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	ee07 3a90 	vmov	s15, r3
 80008ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ee:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000950 <computeRpm+0x80>
 80008f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f6:	edc7 7a05 	vstr	s15, [r7, #20]
  float wheel_rpm = 60.0 * revolutions / (float)TS;
 80008fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80008fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000902:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000940 <computeRpm+0x70>
 8000906:	ee27 6b06 	vmul.f64	d6, d7, d6
 800090a:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000948 <computeRpm+0x78>
 800090e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000912:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000916:	edc7 7a03 	vstr	s15, [r7, #12]
  motor_rpm = wheel_rpm * 120;
 800091a:	edd7 7a03 	vldr	s15, [r7, #12]
 800091e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000954 <computeRpm+0x84>
 8000922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000926:	edc7 7a04 	vstr	s15, [r7, #16]
  return (float)motor_rpm;
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	ee07 3a90 	vmov	s15, r3
}
 8000930:	eeb0 0a67 	vmov.f32	s0, s15
 8000934:	371c      	adds	r7, #28
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	00000000 	.word	0x00000000
 8000944:	404e0000 	.word	0x404e0000
 8000948:	40000000 	.word	0x40000000
 800094c:	3f847ae1 	.word	0x3f847ae1
 8000950:	45700000 	.word	0x45700000
 8000954:	42f00000 	.word	0x42f00000

08000958 <countBit>:

// Callback to select VREF manually
float speed = VREF;
int actual_keyboard_value;

uint8_t countBit(uint8_t n){
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	73fb      	strb	r3, [r7, #15]
	while(n){
 8000966:	e009      	b.n	800097c <countBit+0x24>
		count += n & 1;
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	b2da      	uxtb	r2, r3
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	4413      	add	r3, r2
 8000974:	73fb      	strb	r3, [r7, #15]
		n>>=1;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	71fb      	strb	r3, [r7, #7]
	while(n){
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1f2      	bne.n	8000968 <countBit+0x10>
	}
	return count;
 8000982:	7bfb      	ldrb	r3, [r7, #15]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af04      	add	r7, sp, #16
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]

  uint8_t buf[2], data;

  HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &buf[0], 1, HAL_TIMEOUT);
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	2301      	movs	r3, #1
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	2227      	movs	r2, #39	; 0x27
 80009ac:	217e      	movs	r1, #126	; 0x7e
 80009ae:	482c      	ldr	r0, [pc, #176]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xd0>)
 80009b0:	f003 fa90 	bl	8003ed4 <HAL_I2C_Mem_Read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	75fb      	strb	r3, [r7, #23]

  status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &buf[1], 1, HAL_TIMEOUT);
 80009b8:	2364      	movs	r3, #100	; 0x64
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2301      	movs	r3, #1
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	3301      	adds	r3, #1
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2301      	movs	r3, #1
 80009ca:	2228      	movs	r2, #40	; 0x28
 80009cc:	217e      	movs	r1, #126	; 0x7e
 80009ce:	4824      	ldr	r0, [pc, #144]	; (8000a60 <HAL_GPIO_EXTI_Callback+0xd0>)
 80009d0:	f003 fa80 	bl	8003ed4 <HAL_I2C_Mem_Read>
 80009d4:	4603      	mov	r3, r0
 80009d6:	75fb      	strb	r3, [r7, #23]

  int row = countBit(~buf[0]-1);
 80009d8:	7a3a      	ldrb	r2, [r7, #8]
 80009da:	f06f 0301 	mvn.w	r3, #1
 80009de:	1a9b      	subs	r3, r3, r2
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ffb8 	bl	8000958 <countBit>
 80009e8:	4603      	mov	r3, r0
 80009ea:	613b      	str	r3, [r7, #16]
  int column = countBit(~buf[1]-1);
 80009ec:	7a7a      	ldrb	r2, [r7, #9]
 80009ee:	f06f 0301 	mvn.w	r3, #1
 80009f2:	1a9b      	subs	r3, r3, r2
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffae 	bl	8000958 <countBit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	60fb      	str	r3, [r7, #12]


  // HARD WAY
  if(keypadLayout[column][row] == '#')
 8000a00:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	441a      	add	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b23      	cmp	r3, #35	; 0x23
 8000a10:	d110      	bne.n	8000a34 <HAL_GPIO_EXTI_Callback+0xa4>
  {
	  speed = (float) actual_keyboard_value*120;
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a1e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000a6c <HAL_GPIO_EXTI_Callback+0xdc>
 8000a22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000a28:	edc3 7a00 	vstr	s15, [r3]
	  actual_keyboard_value = 0;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
  else
  {
	  actual_keyboard_value = actual_keyboard_value*10 + ((int) keypadLayout[column][row]-48);
  }

}
 8000a32:	e011      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0xc8>
	  actual_keyboard_value = actual_keyboard_value*10 + ((int) keypadLayout[column][row]-48);
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	441a      	add	r2, r3
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	3b30      	subs	r3, #48	; 0x30
 8000a52:	440b      	add	r3, r1
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000e0 	.word	0x200000e0
 8000a64:	08009378 	.word	0x08009378
 8000a68:	20000818 	.word	0x20000818
 8000a6c:	42f00000 	.word	0x42f00000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	00000000 	.word	0x00000000

08000a78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  // && logger.tx_enable
  if (htim->Instance == TIM6)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4aa2      	ldr	r2, [pc, #648]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	f040 81c9 	bne.w	8000e1e <HAL_TIM_PeriodElapsedCallback+0x3a6>
  {

    static int32_t TIM3_PreviousCount = 0;
    static int32_t TIM4_PreviousCount = 0;

    TIM3_CurrentCount = (int32_t) __HAL_TIM_GET_COUNTER(&htim3);
 8000a8c:	4ba1      	ldr	r3, [pc, #644]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a92:	461a      	mov	r2, r3
 8000a94:	4ba0      	ldr	r3, [pc, #640]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000a96:	601a      	str	r2, [r3, #0]
    TIM4_CurrentCount = (int32_t) __HAL_TIM_GET_COUNTER(&htim4);
 8000a98:	4ba0      	ldr	r3, [pc, #640]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b9f      	ldr	r3, [pc, #636]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000aa2:	601a      	str	r2, [r3, #0]

    /* evaluate increment of TIM3 counter from previous count */
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8000aa4:	4b9b      	ldr	r3, [pc, #620]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	2b10      	cmp	r3, #16
 8000ab0:	d117      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x6a>
    {
      /* check for counter underflow */
      if (TIM3_CurrentCount <= TIM3_PreviousCount)
 8000ab2:	4b99      	ldr	r3, [pc, #612]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b9b      	ldr	r3, [pc, #620]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	dc07      	bgt.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x56>
        TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000abe:	4b96      	ldr	r3, [pc, #600]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4b98      	ldr	r3, [pc, #608]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	4a97      	ldr	r2, [pc, #604]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	e021      	b.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x9a>
      else
        TIM3_DiffCount = -((TIM3_ARR_VALUE + 1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 8000ace:	4b92      	ldr	r3, [pc, #584]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f6a3 7201 	subw	r2, r3, #3841	; 0xf01
 8000ad6:	4b93      	ldr	r3, [pc, #588]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	e017      	b.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x9a>
    }
    else
    {
      /* check for counter overflow */
      if (TIM3_CurrentCount >= TIM3_PreviousCount)
 8000ae2:	4b8d      	ldr	r3, [pc, #564]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b8f      	ldr	r3, [pc, #572]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	db07      	blt.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x86>
        TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000aee:	4b8a      	ldr	r3, [pc, #552]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b8c      	ldr	r3, [pc, #560]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	4a8b      	ldr	r2, [pc, #556]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	e009      	b.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x9a>
      else
        TIM3_DiffCount = ((TIM3_ARR_VALUE + 1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 8000afe:	4b89      	ldr	r3, [pc, #548]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f640 7301 	movw	r3, #3841	; 0xf01
 8000b06:	1a9b      	subs	r3, r3, r2
 8000b08:	4a83      	ldr	r2, [pc, #524]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a86      	ldr	r2, [pc, #536]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b10:	6013      	str	r3, [r2, #0]
    }

    /* evaluate increment of TIM4 counter from previous count */
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8000b12:	4b82      	ldr	r3, [pc, #520]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d117      	bne.n	8000b50 <HAL_TIM_PeriodElapsedCallback+0xd8>
    {
      /* check for counter underflow */
      if (TIM4_CurrentCount <= TIM4_PreviousCount)
 8000b20:	4b7f      	ldr	r3, [pc, #508]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b81      	ldr	r3, [pc, #516]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dc07      	bgt.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0xc4>
        TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000b2c:	4b7c      	ldr	r3, [pc, #496]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b7e      	ldr	r3, [pc, #504]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	4a7e      	ldr	r2, [pc, #504]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	e020      	b.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x106>
      else
        TIM4_DiffCount = -((TIM4_ARR_VALUE + 1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 8000b3c:	4b78      	ldr	r3, [pc, #480]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f5a3 6270 	sub.w	r2, r3, #3840	; 0xf00
 8000b44:	4b79      	ldr	r3, [pc, #484]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	4a79      	ldr	r2, [pc, #484]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e016      	b.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x106>
    }
    else
    {
      /* check for counter overflow */
      if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8000b50:	4b73      	ldr	r3, [pc, #460]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b75      	ldr	r3, [pc, #468]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	db07      	blt.n	8000b6c <HAL_TIM_PeriodElapsedCallback+0xf4>
        TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000b5c:	4b70      	ldr	r3, [pc, #448]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b72      	ldr	r3, [pc, #456]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	4a72      	ldr	r2, [pc, #456]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e008      	b.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x106>
      else
        TIM4_DiffCount = ((TIM4_ARR_VALUE + 1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 8000b6c:	4b6f      	ldr	r3, [pc, #444]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f5c3 6270 	rsb	r2, r3, #3840	; 0xf00
 8000b74:	4b6a      	ldr	r3, [pc, #424]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a6d      	ldr	r2, [pc, #436]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b7c:	6013      	str	r3, [r2, #0]
    }

    TIM3_PreviousCount = TIM3_CurrentCount;
 8000b7e:	4b66      	ldr	r3, [pc, #408]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a68      	ldr	r2, [pc, #416]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b84:	6013      	str	r3, [r2, #0]
    TIM4_PreviousCount = TIM4_CurrentCount;
 8000b86:	4b66      	ldr	r3, [pc, #408]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a68      	ldr	r2, [pc, #416]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b8c:	6013      	str	r3, [r2, #0]

    // Compute rpm considering 16 pulses per round
    // This speed [rpm] is considered at the motor side
    // If we want the speed of the wheels we have to convert this value taking into account the gear ratio
    // This is done when we pass data to the logger
    v1 = computeRpm(TIM3_DiffCount);
 8000b8e:	4b66      	ldr	r3, [pc, #408]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe9c 	bl	80008d0 <computeRpm>
 8000b98:	eef0 7a40 	vmov.f32	s15, s0
 8000b9c:	4b65      	ldr	r3, [pc, #404]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b9e:	edc3 7a00 	vstr	s15, [r3]
    v2 = computeRpm(TIM4_DiffCount);
 8000ba2:	4b63      	ldr	r3, [pc, #396]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe92 	bl	80008d0 <computeRpm>
 8000bac:	eef0 7a40 	vmov.f32	s15, s0
 8000bb0:	4b61      	ldr	r3, [pc, #388]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bb2:	edc3 7a00 	vstr	s15, [r3]

    // Compute tracking error
    error1 = (float)(speed - v1);
 8000bb6:	4b61      	ldr	r3, [pc, #388]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bb8:	ed93 7a00 	vldr	s14, [r3]
 8000bbc:	4b5d      	ldr	r3, [pc, #372]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bbe:	edd3 7a00 	vldr	s15, [r3]
 8000bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc6:	4b5e      	ldr	r3, [pc, #376]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000bc8:	edc3 7a00 	vstr	s15, [r3]
    error2 = (float)(speed - v2);
 8000bcc:	4b5b      	ldr	r3, [pc, #364]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000bce:	ed93 7a00 	vldr	s14, [r3]
 8000bd2:	4b59      	ldr	r3, [pc, #356]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000bd4:	edd3 7a00 	vldr	s15, [r3]
 8000bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bdc:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000bde:	edc3 7a00 	vstr	s15, [r3]

    // By reading the maximum value of the error using our voltage limit, we get that the maximum error is 3600
    // To prevent errors due to strange wrong readings of the encoder, we limit this value

    if(error1 > 3600)
 8000be2:	4b57      	ldr	r3, [pc, #348]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000be4:	edd3 7a00 	vldr	s15, [r3]
 8000be8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000d48 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 8000bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf4:	dd03      	ble.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x186>
    	error1 = 3600;
 8000bf6:	4b52      	ldr	r3, [pc, #328]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000bf8:	4a54      	ldr	r2, [pc, #336]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e00c      	b.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x1a0>
    else if(error1 <-3600)
 8000bfe:	4b50      	ldr	r3, [pc, #320]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c00:	edd3 7a00 	vldr	s15, [r3]
 8000c04:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8000d50 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8000c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c10:	d502      	bpl.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x1a0>
    	error1 = -3600;
 8000c12:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c14:	4a4f      	ldr	r2, [pc, #316]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000c16:	601a      	str	r2, [r3, #0]

    if(error2 > 3600)
 8000c18:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000d48 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 8000c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2a:	dd03      	ble.n	8000c34 <HAL_TIM_PeriodElapsedCallback+0x1bc>
    	error2 = 3600;
 8000c2c:	4b45      	ldr	r3, [pc, #276]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c2e:	4a47      	ldr	r2, [pc, #284]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e00c      	b.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x1d6>
    else if(error2 <-3600)
 8000c34:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c36:	edd3 7a00 	vldr	s15, [r3]
 8000c3a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8000d50 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8000c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d502      	bpl.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x1d6>
    	error2 = -3600;
 8000c48:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c4a:	4a42      	ldr	r2, [pc, #264]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000c4c:	601a      	str	r2, [r3, #0]

    // Compute control input with PID
    vIn1 = PID1(RPM2RADS * error1);
 8000c4e:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000c50:	edd3 7a00 	vldr	s15, [r3]
 8000c54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c58:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000d08 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000c5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c64:	eeb0 0a67 	vmov.f32	s0, s15
 8000c68:	f7ff fd8a 	bl	8000780 <PID1>
 8000c6c:	eef0 7a40 	vmov.f32	s15, s0
 8000c70:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000c72:	edc3 7a00 	vstr	s15, [r3]
    vIn2 = PID2(RPM2RADS * error2);
 8000c76:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000c78:	edd3 7a00 	vldr	s15, [r3]
 8000c7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c80:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000d08 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000c84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c90:	f7ff fdca 	bl	8000828 <PID2>
 8000c94:	eef0 7a40 	vmov.f32	s15, s0
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000c9a:	edc3 7a00 	vstr	s15, [r3]

    // Compute duty cycle
    duty1 = V2DUTY * vIn1;
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000ca0:	edd3 7a00 	vldr	s15, [r3]
 8000ca4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000d60 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8000ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000cae:	edc3 7a00 	vstr	s15, [r3]
    duty2 = V2DUTY * vIn2;
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000d60 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8000cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000cc2:	edc3 7a00 	vstr	s15, [r3]

    // Speed control routine
    /* Alternate between forward and coast */
    /* [Commented] alternate between forward and brake, TIM8_ARR_VALUE is a define*/

    if (duty1 < 0)
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000cc8:	edd3 7a00 	vldr	s15, [r3]
 8000ccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd4:	d501      	bpl.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x262>
    	{uint32_t i = 0;}
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]

    //duty1 = 100;

    // Motor 1
    if (duty1 >= 0) {
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000cdc:	edd3 7a00 	vldr	s15, [r3]
 8000ce0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce8:	db42      	blt.n	8000d70 <HAL_TIM_PeriodElapsedCallback+0x2f8>
       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty1);
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000cec:	edd3 7a00 	vldr	s15, [r3]
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf8:	ee17 2a90 	vmov	r2, s15
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
 8000d06:	e043      	b.n	8000d90 <HAL_TIM_PeriodElapsedCallback+0x318>
 8000d08:	f37bebd5 	.word	0xf37bebd5
 8000d0c:	3fbacee9 	.word	0x3fbacee9
 8000d10:	40001000 	.word	0x40001000
 8000d14:	20000284 	.word	0x20000284
 8000d18:	200007c0 	.word	0x200007c0
 8000d1c:	200002d0 	.word	0x200002d0
 8000d20:	200007c4 	.word	0x200007c4
 8000d24:	2000081c 	.word	0x2000081c
 8000d28:	200007c8 	.word	0x200007c8
 8000d2c:	20000820 	.word	0x20000820
 8000d30:	200007cc 	.word	0x200007cc
 8000d34:	200007e8 	.word	0x200007e8
 8000d38:	200007ec 	.word	0x200007ec
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200007d8 	.word	0x200007d8
 8000d44:	200007dc 	.word	0x200007dc
 8000d48:	45610000 	.word	0x45610000
 8000d4c:	45610000 	.word	0x45610000
 8000d50:	c5610000 	.word	0xc5610000
 8000d54:	c5610000 	.word	0xc5610000
 8000d58:	200007e0 	.word	0x200007e0
 8000d5c:	200007e4 	.word	0x200007e4
 8000d60:	42c80000 	.word	0x42c80000
 8000d64:	200007d0 	.word	0x200007d0
 8000d68:	200007d4 	.word	0x200007d4
 8000d6c:	200003b4 	.word	0x200003b4
       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, TIM8_ARR_VALUE - duty1);
    } else {
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty1);
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8000d7a:	edd3 7a00 	vldr	s15, [r3]
 8000d7e:	eef1 7a67 	vneg.f32	s15, s15
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d8a:	ee17 2a90 	vmov	r2, s15
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    // Motor 2
    if (duty2 >= 0) {
 8000d90:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000d92:	edd3 7a00 	vldr	s15, [r3]
 8000d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9e:	db0e      	blt.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x346>
       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)duty2);
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000da2:	edd3 7a00 	vldr	s15, [r3]
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dae:	ee17 2a90 	vmov	r2, s15
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	641a      	str	r2, [r3, #64]	; 0x40
 8000dbc:	e00f      	b.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x366>
       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, TIM8_ARR_VALUE - duty2);
    } else {
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)-duty2);
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000dc8:	edd3 7a00 	vldr	s15, [r3]
 8000dcc:	eef1 7a67 	vneg.f32	s15, s15
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dd8:	ee17 2a90 	vmov	r2, s15
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /*	Prepare data packet */
    // Error speed and voltage
    // In this way error and speed should have the same measurement unit
    data.w1 = error1;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000de4:	6013      	str	r3, [r2, #0]
    data.w2 = v1;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000dec:	6053      	str	r3, [r2, #4]
    data.w3 = vIn1;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000df4:	6093      	str	r3, [r2, #8]
    data.u1 = error2;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000dfc:	60d3      	str	r3, [r2, #12]
    data.u2 = v2;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000e04:	6113      	str	r3, [r2, #16]
    data.u3 = vIn2;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000e0c:	6153      	str	r3, [r2, #20]

    ertc_dlog_send(&logger, &data, sizeof(data));
 8000e0e:	2218      	movs	r2, #24
 8000e10:	4909      	ldr	r1, [pc, #36]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000e12:	480f      	ldr	r0, [pc, #60]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000e14:	f7ff fc30 	bl	8000678 <ertc_dlog_send>
    ertc_dlog_update(&logger);
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000e1a:	f7ff fc59 	bl	80006d0 <ertc_dlog_update>

  }
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200003b4 	.word	0x200003b4
 8000e2c:	200007d0 	.word	0x200007d0
 8000e30:	200007d4 	.word	0x200007d4
 8000e34:	200007d8 	.word	0x200007d8
 8000e38:	20000800 	.word	0x20000800
 8000e3c:	200007e8 	.word	0x200007e8
 8000e40:	200007e0 	.word	0x200007e0
 8000e44:	200007dc 	.word	0x200007dc
 8000e48:	200007ec 	.word	0x200007ec
 8000e4c:	200007e4 	.word	0x200007e4
 8000e50:	200006f4 	.word	0x200006f4

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5a:	f002 f860 	bl	8002f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5e:	f000 fa5b 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e62:	f001 f8b3 	bl	8001fcc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e66:	f001 f881 	bl	8001f6c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e6a:	f000 fac7 	bl	80013fc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e6e:	f000 fb17 	bl	80014a0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e72:	f000 fb55 	bl	8001520 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000e76:	f000 fb93 	bl	80015a0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e7a:	f000 fbcf 	bl	800161c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e7e:	f000 fc9d 	bl	80017bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e82:	f000 fd35 	bl	80018f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e86:	f000 fd89 	bl	800199c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e8a:	f000 fddd 	bl	8001a48 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000e8e:	f000 fe8b 	bl	8001ba8 <MX_TIM8_Init>
  MX_UART4_Init();
 8000e92:	f000 ffab 	bl	8001dec <MX_UART4_Init>
  MX_UART5_Init();
 8000e96:	f000 ffd9 	bl	8001e4c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000e9a:	f001 f807 	bl	8001eac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e9e:	f001 f835 	bl	8001f0c <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000ea2:	f000 ff53 	bl	8001d4c <MX_TIM9_Init>
  MX_TIM6_Init();
 8000ea6:	f000 fe47 	bl	8001b38 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
    HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2110      	movs	r1, #16
 8000eae:	48bc      	ldr	r0, [pc, #752]	; (80011a0 <main+0x34c>)
 8000eb0:	f002 fe3a 	bl	8003b28 <HAL_GPIO_WritePin>

    /* Disable EXTI4_IRQ during SX1509 initialization */
    HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000eb4:	200a      	movs	r0, #10
 8000eb6:	f002 fc70 	bl	800379a <HAL_NVIC_DisableIRQ>

    /* Software reset */
    data = 0x12;
 8000eba:	2312      	movs	r3, #18
 8000ebc:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000ebe:	23c8      	movs	r3, #200	; 0xc8
 8000ec0:	9302      	str	r3, [sp, #8]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	1dbb      	adds	r3, r7, #6
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	227d      	movs	r2, #125	; 0x7d
 8000ece:	217e      	movs	r1, #126	; 0x7e
 8000ed0:	48b4      	ldr	r0, [pc, #720]	; (80011a4 <main+0x350>)
 8000ed2:	f002 feeb 	bl	8003cac <HAL_I2C_Mem_Write>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <main+0x96>
      printf("I2C communication error (%X).\n", status);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	48b0      	ldr	r0, [pc, #704]	; (80011a8 <main+0x354>)
 8000ee6:	f007 fa9d 	bl	8008424 <iprintf>

    data = 0x34;
 8000eea:	2334      	movs	r3, #52	; 0x34
 8000eec:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000eee:	23c8      	movs	r3, #200	; 0xc8
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	1dbb      	adds	r3, r7, #6
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	227d      	movs	r2, #125	; 0x7d
 8000efe:	217e      	movs	r1, #126	; 0x7e
 8000f00:	48a8      	ldr	r0, [pc, #672]	; (80011a4 <main+0x350>)
 8000f02:	f002 fed3 	bl	8003cac <HAL_I2C_Mem_Write>
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d004      	beq.n	8000f1a <main+0xc6>
      printf("I2C communication error (%X).\n", status);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4619      	mov	r1, r3
 8000f14:	48a4      	ldr	r0, [pc, #656]	; (80011a8 <main+0x354>)
 8000f16:	f007 fa85 	bl	8008424 <iprintf>

    HAL_Delay(100);
 8000f1a:	2064      	movs	r0, #100	; 0x64
 8000f1c:	f002 f85c 	bl	8002fd8 <HAL_Delay>

    /* Set KeyPad scanning engine */

    /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
    data = 0x40;
 8000f20:	2340      	movs	r3, #64	; 0x40
 8000f22:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 8000f24:	23c8      	movs	r3, #200	; 0xc8
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	1dbb      	adds	r3, r7, #6
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	221e      	movs	r2, #30
 8000f34:	217e      	movs	r1, #126	; 0x7e
 8000f36:	489b      	ldr	r0, [pc, #620]	; (80011a4 <main+0x350>)
 8000f38:	f002 feb8 	bl	8003cac <HAL_I2C_Mem_Write>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <main+0xfc>
      printf("I2C communication error (%X).\n", status);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4897      	ldr	r0, [pc, #604]	; (80011a8 <main+0x354>)
 8000f4c:	f007 fa6a 	bl	8008424 <iprintf>

    /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
    data = 0xF0;
 8000f50:	23f0      	movs	r3, #240	; 0xf0
 8000f52:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000f54:	23c8      	movs	r3, #200	; 0xc8
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	1dbb      	adds	r3, r7, #6
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	220f      	movs	r2, #15
 8000f64:	217e      	movs	r1, #126	; 0x7e
 8000f66:	488f      	ldr	r0, [pc, #572]	; (80011a4 <main+0x350>)
 8000f68:	f002 fea0 	bl	8003cac <HAL_I2C_Mem_Write>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <main+0x12c>
      printf("I2C communication error (%X).\n", status);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	488b      	ldr	r0, [pc, #556]	; (80011a8 <main+0x354>)
 8000f7c:	f007 fa52 	bl	8008424 <iprintf>

    /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
    data = 0x0F;
 8000f80:	230f      	movs	r3, #15
 8000f82:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000f84:	23c8      	movs	r3, #200	; 0xc8
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	1dbb      	adds	r3, r7, #6
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	220e      	movs	r2, #14
 8000f94:	217e      	movs	r1, #126	; 0x7e
 8000f96:	4883      	ldr	r0, [pc, #524]	; (80011a4 <main+0x350>)
 8000f98:	f002 fe88 	bl	8003cac <HAL_I2C_Mem_Write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d004      	beq.n	8000fb0 <main+0x15c>
      printf("I2C communication error (%X).\n", status);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	487f      	ldr	r0, [pc, #508]	; (80011a8 <main+0x354>)
 8000fac:	f007 fa3a 	bl	8008424 <iprintf>

    /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
    data = 0x0F;
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 8000fb4:	23c8      	movs	r3, #200	; 0xc8
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	1dbb      	adds	r3, r7, #6
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	220b      	movs	r2, #11
 8000fc4:	217e      	movs	r1, #126	; 0x7e
 8000fc6:	4877      	ldr	r0, [pc, #476]	; (80011a4 <main+0x350>)
 8000fc8:	f002 fe70 	bl	8003cac <HAL_I2C_Mem_Write>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <main+0x18c>
      printf("I2C communication error (%X).\n", status);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4873      	ldr	r0, [pc, #460]	; (80011a8 <main+0x354>)
 8000fdc:	f007 fa22 	bl	8008424 <iprintf>

    /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
    data = 0x0F;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 8000fe4:	23c8      	movs	r3, #200	; 0xc8
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	217e      	movs	r1, #126	; 0x7e
 8000ff6:	486b      	ldr	r0, [pc, #428]	; (80011a4 <main+0x350>)
 8000ff8:	f002 fe58 	bl	8003cac <HAL_I2C_Mem_Write>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <main+0x1bc>
      printf("I2C communication error (%X).\n", status);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4619      	mov	r1, r3
 800100a:	4867      	ldr	r0, [pc, #412]	; (80011a8 <main+0x354>)
 800100c:	f007 fa0a 	bl	8008424 <iprintf>

    /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
    data = 0x0F;
 8001010:	230f      	movs	r3, #15
 8001012:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 8001014:	23c8      	movs	r3, #200	; 0xc8
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	1dbb      	adds	r3, r7, #6
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2223      	movs	r2, #35	; 0x23
 8001024:	217e      	movs	r1, #126	; 0x7e
 8001026:	485f      	ldr	r0, [pc, #380]	; (80011a4 <main+0x350>)
 8001028:	f002 fe40 	bl	8003cac <HAL_I2C_Mem_Write>
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <main+0x1ec>
      printf("I2C communication error (%X).\n", status);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4619      	mov	r1, r3
 800103a:	485b      	ldr	r0, [pc, #364]	; (80011a8 <main+0x354>)
 800103c:	f007 f9f2 	bl	8008424 <iprintf>

    /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
    data = 0x05;
 8001040:	2305      	movs	r3, #5
 8001042:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8001044:	23c8      	movs	r3, #200	; 0xc8
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	1dbb      	adds	r3, r7, #6
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2222      	movs	r2, #34	; 0x22
 8001054:	217e      	movs	r1, #126	; 0x7e
 8001056:	4853      	ldr	r0, [pc, #332]	; (80011a4 <main+0x350>)
 8001058:	f002 fe28 	bl	8003cac <HAL_I2C_Mem_Write>
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <main+0x21c>
      printf("I2C communication error (%X).\n", status);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4619      	mov	r1, r3
 800106a:	484f      	ldr	r0, [pc, #316]	; (80011a8 <main+0x354>)
 800106c:	f007 f9da 	bl	8008424 <iprintf>

    /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
    data = 0x7D;
 8001070:	237d      	movs	r3, #125	; 0x7d
 8001072:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 8001074:	23c8      	movs	r3, #200	; 0xc8
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2301      	movs	r3, #1
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	1dbb      	adds	r3, r7, #6
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	2225      	movs	r2, #37	; 0x25
 8001084:	217e      	movs	r1, #126	; 0x7e
 8001086:	4847      	ldr	r0, [pc, #284]	; (80011a4 <main+0x350>)
 8001088:	f002 fe10 	bl	8003cac <HAL_I2C_Mem_Write>
 800108c:	4603      	mov	r3, r0
 800108e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <main+0x24c>
      printf("I2C communication error (%X).\n", status);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4619      	mov	r1, r3
 800109a:	4843      	ldr	r0, [pc, #268]	; (80011a8 <main+0x354>)
 800109c:	f007 f9c2 	bl	8008424 <iprintf>

    /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
    data = 0x1B;
 80010a0:	231b      	movs	r3, #27
 80010a2:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 80010a4:	23c8      	movs	r3, #200	; 0xc8
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	1dbb      	adds	r3, r7, #6
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2226      	movs	r2, #38	; 0x26
 80010b4:	217e      	movs	r1, #126	; 0x7e
 80010b6:	483b      	ldr	r0, [pc, #236]	; (80011a4 <main+0x350>)
 80010b8:	f002 fdf8 	bl	8003cac <HAL_I2C_Mem_Write>
 80010bc:	4603      	mov	r3, r0
 80010be:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <main+0x27c>
      printf("I2C communication error (%X).\n", status);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4837      	ldr	r0, [pc, #220]	; (80011a8 <main+0x354>)
 80010cc:	f007 f9aa 	bl	8008424 <iprintf>

    /* Enable EXTI4_IRQ after SX1509 initialization */
    HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	; 0x64
 80010d2:	f001 ff81 	bl	8002fd8 <HAL_Delay>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f002 fb51 	bl	800377e <HAL_NVIC_EnableIRQ>

    /* Disable EXTI2_IRQ during SX1509 initialization */
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80010dc:	2008      	movs	r0, #8
 80010de:	f002 fb5c 	bl	800379a <HAL_NVIC_DisableIRQ>

    /* Software reset */
    data = 0x12;
 80010e2:	2312      	movs	r3, #18
 80010e4:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80010e6:	23c8      	movs	r3, #200	; 0xc8
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	1dbb      	adds	r3, r7, #6
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	227d      	movs	r2, #125	; 0x7d
 80010f6:	217c      	movs	r1, #124	; 0x7c
 80010f8:	482a      	ldr	r0, [pc, #168]	; (80011a4 <main+0x350>)
 80010fa:	f002 fdd7 	bl	8003cac <HAL_I2C_Mem_Write>
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d004      	beq.n	8001112 <main+0x2be>
      printf("I2C communication error (%X).\n", status);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4619      	mov	r1, r3
 800110c:	4826      	ldr	r0, [pc, #152]	; (80011a8 <main+0x354>)
 800110e:	f007 f989 	bl	8008424 <iprintf>

    data = 0x34;
 8001112:	2334      	movs	r3, #52	; 0x34
 8001114:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8001116:	23c8      	movs	r3, #200	; 0xc8
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dbb      	adds	r3, r7, #6
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	227d      	movs	r2, #125	; 0x7d
 8001126:	217c      	movs	r1, #124	; 0x7c
 8001128:	481e      	ldr	r0, [pc, #120]	; (80011a4 <main+0x350>)
 800112a:	f002 fdbf 	bl	8003cac <HAL_I2C_Mem_Write>
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <main+0x2ee>
      printf("I2C communication error (%X).\n", status);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4619      	mov	r1, r3
 800113c:	481a      	ldr	r0, [pc, #104]	; (80011a8 <main+0x354>)
 800113e:	f007 f971 	bl	8008424 <iprintf>

    HAL_Delay(100);
 8001142:	2064      	movs	r0, #100	; 0x64
 8001144:	f001 ff48 	bl	8002fd8 <HAL_Delay>

    /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8001148:	23ff      	movs	r3, #255	; 0xff
 800114a:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 800114c:	23c8      	movs	r3, #200	; 0xc8
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	1dbb      	adds	r3, r7, #6
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	220f      	movs	r2, #15
 800115c:	217c      	movs	r1, #124	; 0x7c
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <main+0x350>)
 8001160:	f002 fda4 	bl	8003cac <HAL_I2C_Mem_Write>
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <main+0x324>
      printf("I2C communication error (%X).\n", status);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <main+0x354>)
 8001174:	f007 f956 	bl	8008424 <iprintf>

    /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8001178:	23ff      	movs	r3, #255	; 0xff
 800117a:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 800117c:	23c8      	movs	r3, #200	; 0xc8
 800117e:	9302      	str	r3, [sp, #8]
 8001180:	2301      	movs	r3, #1
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	1dbb      	adds	r3, r7, #6
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	220e      	movs	r2, #14
 800118c:	217c      	movs	r1, #124	; 0x7c
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <main+0x350>)
 8001190:	f002 fd8c 	bl	8003cac <HAL_I2C_Mem_Write>
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	e006      	b.n	80011ac <main+0x358>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	200000e0 	.word	0x200000e0
 80011a8:	08009358 	.word	0x08009358
 80011ac:	d004      	beq.n	80011b8 <main+0x364>
      printf("I2C communication error (%X).\n", status);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4619      	mov	r1, r3
 80011b2:	484f      	ldr	r0, [pc, #316]	; (80012f0 <main+0x49c>)
 80011b4:	f007 f936 	bl	8008424 <iprintf>

    /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
    data = 0x00;
 80011b8:	2300      	movs	r3, #0
 80011ba:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 80011bc:	23c8      	movs	r3, #200	; 0xc8
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2213      	movs	r2, #19
 80011cc:	217c      	movs	r1, #124	; 0x7c
 80011ce:	4849      	ldr	r0, [pc, #292]	; (80012f4 <main+0x4a0>)
 80011d0:	f002 fd6c 	bl	8003cac <HAL_I2C_Mem_Write>
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <main+0x394>
      printf("I2C communication error (%X).\n", status);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4843      	ldr	r0, [pc, #268]	; (80012f0 <main+0x49c>)
 80011e4:	f007 f91e 	bl	8008424 <iprintf>

    /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 80011e8:	23aa      	movs	r3, #170	; 0xaa
 80011ea:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 80011ec:	23c8      	movs	r3, #200	; 0xc8
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	2301      	movs	r3, #1
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	1dbb      	adds	r3, r7, #6
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	2216      	movs	r2, #22
 80011fc:	217c      	movs	r1, #124	; 0x7c
 80011fe:	483d      	ldr	r0, [pc, #244]	; (80012f4 <main+0x4a0>)
 8001200:	f002 fd54 	bl	8003cac <HAL_I2C_Mem_Write>
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <main+0x3c4>
      printf("I2C communication error (%X).\n", status);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4619      	mov	r1, r3
 8001212:	4837      	ldr	r0, [pc, #220]	; (80012f0 <main+0x49c>)
 8001214:	f007 f906 	bl	8008424 <iprintf>

    /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8001218:	23aa      	movs	r3, #170	; 0xaa
 800121a:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 800121c:	23c8      	movs	r3, #200	; 0xc8
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2301      	movs	r3, #1
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	1dbb      	adds	r3, r7, #6
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	2217      	movs	r2, #23
 800122c:	217c      	movs	r1, #124	; 0x7c
 800122e:	4831      	ldr	r0, [pc, #196]	; (80012f4 <main+0x4a0>)
 8001230:	f002 fd3c 	bl	8003cac <HAL_I2C_Mem_Write>
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <main+0x3f4>
      printf("I2C communication error (%X).\n", status);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4619      	mov	r1, r3
 8001242:	482b      	ldr	r0, [pc, #172]	; (80012f0 <main+0x49c>)
 8001244:	f007 f8ee 	bl	8008424 <iprintf>

    /* Enable EXTI2_IRQ after SX1509 initialization */
    HAL_Delay(100);
 8001248:	2064      	movs	r0, #100	; 0x64
 800124a:	f001 fec5 	bl	8002fd8 <HAL_Delay>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800124e:	2008      	movs	r0, #8
 8001250:	f002 fa95 	bl	800377e <HAL_NVIC_EnableIRQ>


    //printf("Ready\n");


  logger.uart_handle = huart3; // for serial
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <main+0x4a4>)
 8001256:	4a29      	ldr	r2, [pc, #164]	; (80012fc <main+0x4a8>)
 8001258:	3344      	adds	r3, #68	; 0x44
 800125a:	4611      	mov	r1, r2
 800125c:	2288      	movs	r2, #136	; 0x88
 800125e:	4618      	mov	r0, r3
 8001260:	f007 f8ca 	bl	80083f8 <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2110      	movs	r1, #16
 8001268:	4825      	ldr	r0, [pc, #148]	; (8001300 <main+0x4ac>)
 800126a:	f002 fc5d 	bl	8003b28 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 800126e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001272:	f001 feb1 	bl	8002fd8 <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001276:	213c      	movs	r1, #60	; 0x3c
 8001278:	4822      	ldr	r0, [pc, #136]	; (8001304 <main+0x4b0>)
 800127a:	f005 f807 	bl	800628c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800127e:	213c      	movs	r1, #60	; 0x3c
 8001280:	4821      	ldr	r0, [pc, #132]	; (8001308 <main+0x4b4>)
 8001282:	f005 f803 	bl	800628c <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001286:	2100      	movs	r1, #0
 8001288:	4820      	ldr	r0, [pc, #128]	; (800130c <main+0x4b8>)
 800128a:	f004 fdfd 	bl	8005e88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800128e:	2104      	movs	r1, #4
 8001290:	481e      	ldr	r0, [pc, #120]	; (800130c <main+0x4b8>)
 8001292:	f004 fdf9 	bl	8005e88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001296:	2108      	movs	r1, #8
 8001298:	481c      	ldr	r0, [pc, #112]	; (800130c <main+0x4b8>)
 800129a:	f004 fdf5 	bl	8005e88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800129e:	210c      	movs	r1, #12
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <main+0x4b8>)
 80012a2:	f004 fdf1 	bl	8005e88 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <main+0x4bc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2200      	movs	r2, #0
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <main+0x4bc>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2200      	movs	r2, #0
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <main+0x4bc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <main+0x4bc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80012c6:	2100      	movs	r1, #0
 80012c8:	4811      	ldr	r0, [pc, #68]	; (8001310 <main+0x4bc>)
 80012ca:	f004 fddd 	bl	8005e88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80012ce:	2104      	movs	r1, #4
 80012d0:	480f      	ldr	r0, [pc, #60]	; (8001310 <main+0x4bc>)
 80012d2:	f004 fdd9 	bl	8005e88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80012d6:	2108      	movs	r1, #8
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <main+0x4bc>)
 80012da:	f004 fdd5 	bl	8005e88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80012de:	210c      	movs	r1, #12
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <main+0x4bc>)
 80012e2:	f004 fdd1 	bl	8005e88 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <main+0x4c0>)
 80012e8:	f004 fc9e 	bl	8005c28 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80012ec:	e7fe      	b.n	80012ec <main+0x498>
 80012ee:	bf00      	nop
 80012f0:	08009358 	.word	0x08009358
 80012f4:	200000e0 	.word	0x200000e0
 80012f8:	200006f4 	.word	0x200006f4
 80012fc:	2000066c 	.word	0x2000066c
 8001300:	40021000 	.word	0x40021000
 8001304:	20000284 	.word	0x20000284
 8001308:	200002d0 	.word	0x200002d0
 800130c:	200001ec 	.word	0x200001ec
 8001310:	200003b4 	.word	0x200003b4
 8001314:	20000368 	.word	0x20000368

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	; 0x50
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2234      	movs	r2, #52	; 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f007 f874 	bl	8008414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800133c:	f003 fa16 	bl	800476c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <SystemClock_Config+0xdc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	4a2b      	ldr	r2, [pc, #172]	; (80013f4 <SystemClock_Config+0xdc>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	; 0x40
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <SystemClock_Config+0xdc>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <SystemClock_Config+0xe0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001360:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <SystemClock_Config+0xe0>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <SystemClock_Config+0xe0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001374:	2301      	movs	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001378:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800137c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137e:	2302      	movs	r3, #2
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001382:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001386:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001388:	2304      	movs	r3, #4
 800138a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800138c:	2360      	movs	r3, #96	; 0x60
 800138e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001390:	2302      	movs	r3, #2
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001394:	2304      	movs	r3, #4
 8001396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001398:	2302      	movs	r3, #2
 800139a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fa43 	bl	800482c <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013ac:	f000 ff56 	bl	800225c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013b0:	f003 f9ec 	bl	800478c <HAL_PWREx_EnableOverDrive>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013ba:	f000 ff4f 	bl	800225c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013be:	230f      	movs	r3, #15
 80013c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c2:	2302      	movs	r3, #2
 80013c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	2103      	movs	r1, #3
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fcd4 	bl	8004d88 <HAL_RCC_ClockConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013e6:	f000 ff39 	bl	800225c <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3750      	adds	r7, #80	; 0x50
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40007000 	.word	0x40007000

080013fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <MX_ADC1_Init+0x98>)
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <MX_ADC1_Init+0x9c>)
 8001412:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_ADC1_Init+0x98>)
 8001416:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_ADC1_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_ADC1_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_ADC1_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_ADC1_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_ADC1_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_ADC1_Init+0x98>)
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <MX_ADC1_Init+0xa0>)
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_ADC1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_ADC1_Init+0x98>)
 800144a:	2201      	movs	r2, #1
 800144c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_ADC1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_ADC1_Init+0x98>)
 8001458:	2201      	movs	r2, #1
 800145a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_ADC1_Init+0x98>)
 800145e:	f001 fddf 	bl	8003020 <HAL_ADC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001468:	f000 fef8 	bl	800225c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800146c:	2303      	movs	r3, #3
 800146e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001470:	2301      	movs	r3, #1
 8001472:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_ADC1_Init+0x98>)
 800147e:	f001 fe13 	bl	80030a8 <HAL_ADC_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001488:	f000 fee8 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000098 	.word	0x20000098
 8001498:	40012000 	.word	0x40012000
 800149c:	0f000001 	.word	0x0f000001

080014a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_I2C1_Init+0x74>)
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <MX_I2C1_Init+0x78>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_I2C1_Init+0x74>)
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <MX_I2C1_Init+0x7c>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_I2C1_Init+0x74>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_I2C1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <MX_I2C1_Init+0x74>)
 80014dc:	f002 fb56 	bl	8003b8c <HAL_I2C_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014e6:	f000 feb9 	bl	800225c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4809      	ldr	r0, [pc, #36]	; (8001514 <MX_I2C1_Init+0x74>)
 80014ee:	f003 f8a5 	bl	800463c <HAL_I2CEx_ConfigAnalogFilter>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f000 feb0 	bl	800225c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_I2C1_Init+0x74>)
 8001500:	f003 f8e7 	bl	80046d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 fea7 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000e0 	.word	0x200000e0
 8001518:	40005400 	.word	0x40005400
 800151c:	20303e5d 	.word	0x20303e5d

08001520 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <MX_I2C2_Init+0x74>)
 8001526:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <MX_I2C2_Init+0x78>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <MX_I2C2_Init+0x74>)
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <MX_I2C2_Init+0x7c>)
 800152e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <MX_I2C2_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <MX_I2C2_Init+0x74>)
 8001538:	2201      	movs	r2, #1
 800153a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_I2C2_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001542:	4b14      	ldr	r3, [pc, #80]	; (8001594 <MX_I2C2_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <MX_I2C2_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_I2C2_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <MX_I2C2_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <MX_I2C2_Init+0x74>)
 800155c:	f002 fb16 	bl	8003b8c <HAL_I2C_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001566:	f000 fe79 	bl	800225c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800156a:	2100      	movs	r1, #0
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <MX_I2C2_Init+0x74>)
 800156e:	f003 f865 	bl	800463c <HAL_I2CEx_ConfigAnalogFilter>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001578:	f000 fe70 	bl	800225c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800157c:	2100      	movs	r1, #0
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_I2C2_Init+0x74>)
 8001580:	f003 f8a7 	bl	80046d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800158a:	f000 fe67 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000134 	.word	0x20000134
 8001598:	40005800 	.word	0x40005800
 800159c:	20303e5d 	.word	0x20303e5d

080015a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <MX_SPI1_Init+0x74>)
 80015a6:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <MX_SPI1_Init+0x78>)
 80015a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_SPI1_Init+0x74>)
 80015ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_SPI1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_SPI1_Init+0x74>)
 80015ba:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_SPI1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_SPI1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_SPI1_Init+0x74>)
 80015ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_SPI1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_SPI1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_SPI1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_SPI1_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_SPI1_Init+0x74>)
 80015ee:	2207      	movs	r2, #7
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_SPI1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_SPI1_Init+0x74>)
 80015fa:	2208      	movs	r2, #8
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_SPI1_Init+0x74>)
 8001600:	f004 fa10 	bl	8005a24 <HAL_SPI_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800160a:	f000 fe27 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000188 	.word	0x20000188
 8001618:	40013000 	.word	0x40013000

0800161c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b09a      	sub	sp, #104	; 0x68
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	222c      	movs	r2, #44	; 0x2c
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f006 fedc 	bl	8008414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800165c:	4b55      	ldr	r3, [pc, #340]	; (80017b4 <MX_TIM1_Init+0x198>)
 800165e:	4a56      	ldr	r2, [pc, #344]	; (80017b8 <MX_TIM1_Init+0x19c>)
 8001660:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001662:	4b54      	ldr	r3, [pc, #336]	; (80017b4 <MX_TIM1_Init+0x198>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <MX_TIM1_Init+0x198>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800166e:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <MX_TIM1_Init+0x198>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <MX_TIM1_Init+0x198>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800167a:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <MX_TIM1_Init+0x198>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <MX_TIM1_Init+0x198>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001686:	484b      	ldr	r0, [pc, #300]	; (80017b4 <MX_TIM1_Init+0x198>)
 8001688:	f004 fa77 	bl	8005b7a <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001692:	f000 fde3 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016a0:	4619      	mov	r1, r3
 80016a2:	4844      	ldr	r0, [pc, #272]	; (80017b4 <MX_TIM1_Init+0x198>)
 80016a4:	f005 f9ca 	bl	8006a3c <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016ae:	f000 fdd5 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80016b2:	4840      	ldr	r0, [pc, #256]	; (80017b4 <MX_TIM1_Init+0x198>)
 80016b4:	f004 fb30 	bl	8005d18 <HAL_TIM_OC_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016be:	f000 fdcd 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d2:	4619      	mov	r1, r3
 80016d4:	4837      	ldr	r0, [pc, #220]	; (80017b4 <MX_TIM1_Init+0x198>)
 80016d6:	f005 ff8b 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80016e0:	f000 fdbc 	bl	800225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80016e4:	2350      	movs	r3, #80	; 0x50
 80016e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016ec:	2302      	movs	r3, #2
 80016ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016f0:	2300      	movs	r3, #0
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001704:	2200      	movs	r2, #0
 8001706:	4619      	mov	r1, r3
 8001708:	482a      	ldr	r0, [pc, #168]	; (80017b4 <MX_TIM1_Init+0x198>)
 800170a:	f004 ff6d 	bl	80065e8 <HAL_TIM_OC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001714:	f000 fda2 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4824      	ldr	r0, [pc, #144]	; (80017b4 <MX_TIM1_Init+0x198>)
 8001722:	f004 ff61 	bl	80065e8 <HAL_TIM_OC_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800172c:	f000 fd96 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001730:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001734:	2208      	movs	r2, #8
 8001736:	4619      	mov	r1, r3
 8001738:	481e      	ldr	r0, [pc, #120]	; (80017b4 <MX_TIM1_Init+0x198>)
 800173a:	f004 ff55 	bl	80065e8 <HAL_TIM_OC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001744:	f000 fd8a 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001748:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800174c:	220c      	movs	r2, #12
 800174e:	4619      	mov	r1, r3
 8001750:	4818      	ldr	r0, [pc, #96]	; (80017b4 <MX_TIM1_Init+0x198>)
 8001752:	f004 ff49 	bl	80065e8 <HAL_TIM_OC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800175c:	f000 fd7e 	bl	800225c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001778:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <MX_TIM1_Init+0x198>)
 8001796:	f005 ffb9 	bl	800770c <HAL_TIMEx_ConfigBreakDeadTime>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80017a0:	f000 fd5c 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <MX_TIM1_Init+0x198>)
 80017a6:	f001 f81b 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 80017aa:	bf00      	nop
 80017ac:	3768      	adds	r7, #104	; 0x68
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200001ec 	.word	0x200001ec
 80017b8:	40010000 	.word	0x40010000

080017bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b092      	sub	sp, #72	; 0x48
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017fc:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <MX_TIM2_Init+0x130>)
 80017fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001804:	4b39      	ldr	r3, [pc, #228]	; (80018ec <MX_TIM2_Init+0x130>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <MX_TIM2_Init+0x130>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001810:	4b36      	ldr	r3, [pc, #216]	; (80018ec <MX_TIM2_Init+0x130>)
 8001812:	f04f 32ff 	mov.w	r2, #4294967295
 8001816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b34      	ldr	r3, [pc, #208]	; (80018ec <MX_TIM2_Init+0x130>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b33      	ldr	r3, [pc, #204]	; (80018ec <MX_TIM2_Init+0x130>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001824:	4831      	ldr	r0, [pc, #196]	; (80018ec <MX_TIM2_Init+0x130>)
 8001826:	f004 f9a8 	bl	8005b7a <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001830:	f000 fd14 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001838:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800183a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800183e:	4619      	mov	r1, r3
 8001840:	482a      	ldr	r0, [pc, #168]	; (80018ec <MX_TIM2_Init+0x130>)
 8001842:	f005 f8fb 	bl	8006a3c <HAL_TIM_ConfigClockSource>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800184c:	f000 fd06 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001850:	4826      	ldr	r0, [pc, #152]	; (80018ec <MX_TIM2_Init+0x130>)
 8001852:	f004 fac2 	bl	8005dda <HAL_TIM_PWM_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800185c:	f000 fcfe 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001860:	4822      	ldr	r0, [pc, #136]	; (80018ec <MX_TIM2_Init+0x130>)
 8001862:	f004 fc0b 	bl	800607c <HAL_TIM_IC_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800186c:	f000 fcf6 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187c:	4619      	mov	r1, r3
 800187e:	481b      	ldr	r0, [pc, #108]	; (80018ec <MX_TIM2_Init+0x130>)
 8001880:	f005 feb6 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800188a:	f000 fce7 	bl	800225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188e:	2360      	movs	r3, #96	; 0x60
 8001890:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4811      	ldr	r0, [pc, #68]	; (80018ec <MX_TIM2_Init+0x130>)
 80018a8:	f004 ffb4 	bl	8006814 <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80018b2:	f000 fcd3 	bl	800225c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018b6:	2300      	movs	r3, #0
 80018b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018ba:	2301      	movs	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	2208      	movs	r2, #8
 80018ca:	4619      	mov	r1, r3
 80018cc:	4807      	ldr	r0, [pc, #28]	; (80018ec <MX_TIM2_Init+0x130>)
 80018ce:	f004 ff05 	bl	80066dc <HAL_TIM_IC_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80018d8:	f000 fcc0 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <MX_TIM2_Init+0x130>)
 80018de:	f000 ff7f 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 80018e2:	bf00      	nop
 80018e4:	3748      	adds	r7, #72	; 0x48
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000238 	.word	0x20000238

080018f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	; 0x30
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2224      	movs	r2, #36	; 0x24
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f006 fd88 	bl	8008414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <MX_TIM3_Init+0xa4>)
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <MX_TIM3_Init+0xa8>)
 8001912:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001914:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <MX_TIM3_Init+0xa4>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <MX_TIM3_Init+0xa4>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8001920:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <MX_TIM3_Init+0xa4>)
 8001922:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <MX_TIM3_Init+0xa4>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_TIM3_Init+0xa4>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001934:	2303      	movs	r3, #3
 8001936:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800193c:	2301      	movs	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001944:	230f      	movs	r3, #15
 8001946:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800194c:	2301      	movs	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001954:	230f      	movs	r3, #15
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4619      	mov	r1, r3
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <MX_TIM3_Init+0xa4>)
 8001960:	f004 fbee 	bl	8006140 <HAL_TIM_Encoder_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800196a:	f000 fc77 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001976:	463b      	mov	r3, r7
 8001978:	4619      	mov	r1, r3
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <MX_TIM3_Init+0xa4>)
 800197c:	f005 fe38 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001986:	f000 fc69 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	3730      	adds	r7, #48	; 0x30
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000284 	.word	0x20000284
 8001998:	40000400 	.word	0x40000400

0800199c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	; 0x30
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2224      	movs	r2, #36	; 0x24
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 fd32 	bl	8008414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	463b      	mov	r3, r7
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <MX_TIM4_Init+0xa4>)
 80019bc:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <MX_TIM4_Init+0xa8>)
 80019be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <MX_TIM4_Init+0xa4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <MX_TIM4_Init+0xa4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <MX_TIM4_Init+0xa4>)
 80019ce:	f640 62ff 	movw	r2, #3839	; 0xeff
 80019d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_TIM4_Init+0xa4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <MX_TIM4_Init+0xa4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019e0:	2303      	movs	r3, #3
 80019e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e8:	2301      	movs	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80019f0:	230f      	movs	r3, #15
 80019f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f8:	2301      	movs	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001a00:	230f      	movs	r3, #15
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_TIM4_Init+0xa4>)
 8001a0c:	f004 fb98 	bl	8006140 <HAL_TIM_Encoder_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a16:	f000 fc21 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_TIM4_Init+0xa4>)
 8001a28:	f005 fde2 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a32:	f000 fc13 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3730      	adds	r7, #48	; 0x30
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002d0 	.word	0x200002d0
 8001a44:	40000800 	.word	0x40000800

08001a48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08e      	sub	sp, #56	; 0x38
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5c:	f107 031c 	add.w	r3, r7, #28
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	611a      	str	r2, [r3, #16]
 8001a76:	615a      	str	r2, [r3, #20]
 8001a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001a7c:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <MX_TIM5_Init+0xec>)
 8001a7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001aa0:	4823      	ldr	r0, [pc, #140]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001aa2:	f004 f86a 	bl	8005b7a <HAL_TIM_Base_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001aac:	f000 fbd6 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aba:	4619      	mov	r1, r3
 8001abc:	481c      	ldr	r0, [pc, #112]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001abe:	f004 ffbd 	bl	8006a3c <HAL_TIM_ConfigClockSource>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001ac8:	f000 fbc8 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001acc:	4818      	ldr	r0, [pc, #96]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001ace:	f004 f984 	bl	8005dda <HAL_TIM_PWM_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001ad8:	f000 fbc0 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4811      	ldr	r0, [pc, #68]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001aec:	f005 fd80 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001af6:	f000 fbb1 	bl	800225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afa:	2360      	movs	r3, #96	; 0x60
 8001afc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4807      	ldr	r0, [pc, #28]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001b12:	f004 fe7f 	bl	8006814 <HAL_TIM_PWM_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001b1c:	f000 fb9e 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <MX_TIM5_Init+0xe8>)
 8001b22:	f000 fe5d 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 8001b26:	bf00      	nop
 8001b28:	3738      	adds	r7, #56	; 0x38
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000031c 	.word	0x2000031c
 8001b34:	40000c00 	.word	0x40000c00

08001b38 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_TIM6_Init+0x68>)
 8001b4a:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <MX_TIM6_Init+0x6c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_TIM6_Init+0x68>)
 8001b50:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001b54:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_TIM6_Init+0x68>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <MX_TIM6_Init+0x68>)
 8001b5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_TIM6_Init+0x68>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_TIM6_Init+0x68>)
 8001b6c:	f004 f805 	bl	8005b7a <HAL_TIM_Base_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001b76:	f000 fb71 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <MX_TIM6_Init+0x68>)
 8001b88:	f005 fd32 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001b92:	f000 fb63 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000368 	.word	0x20000368
 8001ba4:	40001000 	.word	0x40001000

08001ba8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b09a      	sub	sp, #104	; 0x68
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	222c      	movs	r2, #44	; 0x2c
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f006 fc16 	bl	8008414 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001be8:	4b56      	ldr	r3, [pc, #344]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001bea:	4a57      	ldr	r2, [pc, #348]	; (8001d48 <MX_TIM8_Init+0x1a0>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001bee:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001bf0:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001bf4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001bfc:	4b51      	ldr	r3, [pc, #324]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001bfe:	f240 128f 	movw	r2, #399	; 0x18f
 8001c02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b4f      	ldr	r3, [pc, #316]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c0a:	4b4e      	ldr	r3, [pc, #312]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c10:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c16:	484b      	ldr	r0, [pc, #300]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001c18:	f003 ffaf 	bl	8005b7a <HAL_TIM_Base_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001c22:	f000 fb1b 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c30:	4619      	mov	r1, r3
 8001c32:	4844      	ldr	r0, [pc, #272]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001c34:	f004 ff02 	bl	8006a3c <HAL_TIM_ConfigClockSource>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001c3e:	f000 fb0d 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c42:	4840      	ldr	r0, [pc, #256]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001c44:	f004 f8c9 	bl	8005dda <HAL_TIM_PWM_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001c4e:	f000 fb05 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c62:	4619      	mov	r1, r3
 8001c64:	4837      	ldr	r0, [pc, #220]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001c66:	f005 fcc3 	bl	80075f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001c70:	f000 faf4 	bl	800225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c74:	2360      	movs	r3, #96	; 0x60
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c94:	2200      	movs	r2, #0
 8001c96:	4619      	mov	r1, r3
 8001c98:	482a      	ldr	r0, [pc, #168]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001c9a:	f004 fdbb 	bl	8006814 <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001ca4:	f000 fada 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ca8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cac:	2204      	movs	r2, #4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4824      	ldr	r0, [pc, #144]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001cb2:	f004 fdaf 	bl	8006814 <HAL_TIM_PWM_ConfigChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001cbc:	f000 face 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481e      	ldr	r0, [pc, #120]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001cca:	f004 fda3 	bl	8006814 <HAL_TIM_PWM_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001cd4:	f000 fac2 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cdc:	220c      	movs	r2, #12
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4818      	ldr	r0, [pc, #96]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001ce2:	f004 fd97 	bl	8006814 <HAL_TIM_PWM_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001cec:	f000 fab6 	bl	800225c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001d26:	f005 fcf1 	bl	800770c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001d30:	f000 fa94 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <MX_TIM8_Init+0x19c>)
 8001d36:	f000 fd53 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 8001d3a:	bf00      	nop
 8001d3c:	3768      	adds	r7, #104	; 0x68
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200003b4 	.word	0x200003b4
 8001d48:	40010400 	.word	0x40010400

08001d4c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]
 8001d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001d66:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <MX_TIM9_Init+0x9c>)
 8001d68:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001d8a:	4816      	ldr	r0, [pc, #88]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001d8c:	f004 f825 	bl	8005dda <HAL_TIM_PWM_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001d96:	f000 fa61 	bl	800225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d9a:	2360      	movs	r3, #96	; 0x60
 8001d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001db2:	f004 fd2f 	bl	8006814 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001dbc:	f000 fa4e 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4807      	ldr	r0, [pc, #28]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001dc8:	f004 fd24 	bl	8006814 <HAL_TIM_PWM_ConfigChannel>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001dd2:	f000 fa43 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001dd6:	4803      	ldr	r0, [pc, #12]	; (8001de4 <MX_TIM9_Init+0x98>)
 8001dd8:	f000 fd02 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 8001ddc:	bf00      	nop
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000400 	.word	0x20000400
 8001de8:	40014000 	.word	0x40014000

08001dec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_UART4_Init+0x58>)
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <MX_UART4_Init+0x5c>)
 8001df4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <MX_UART4_Init+0x58>)
 8001df8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001dfc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_UART4_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_UART4_Init+0x58>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <MX_UART4_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_UART4_Init+0x58>)
 8001e12:	220c      	movs	r2, #12
 8001e14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <MX_UART4_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <MX_UART4_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <MX_UART4_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <MX_UART4_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_UART4_Init+0x58>)
 8001e30:	f005 fd08 	bl	8007844 <HAL_UART_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001e3a:	f000 fa0f 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000044c 	.word	0x2000044c
 8001e48:	40004c00 	.word	0x40004c00

08001e4c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <MX_UART5_Init+0x5c>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_UART5_Init+0x58>)
 8001e90:	f005 fcd8 	bl	8007844 <HAL_UART_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001e9a:	f000 f9df 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200004d4 	.word	0x200004d4
 8001ea8:	40005000 	.word	0x40005000

08001eac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001eb2:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <MX_USART1_UART_Init+0x5c>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_USART1_UART_Init+0x58>)
 8001ef0:	f005 fca8 	bl	8007844 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001efa:	f000 f9af 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000055c 	.word	0x2000055c
 8001f08:	40011000 	.word	0x40011000

08001f0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f12:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <MX_USART2_UART_Init+0x58>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <MX_USART2_UART_Init+0x5c>)
 8001f1a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f30:	220c      	movs	r2, #12
 8001f32:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_USART2_UART_Init+0x54>)
 8001f4e:	f005 fc79 	bl	8007844 <HAL_UART_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001f58:	f000 f980 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200005e4 	.word	0x200005e4
 8001f64:	40004400 	.word	0x40004400
 8001f68:	000f4240 	.word	0x000f4240

08001f6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <MX_USART3_UART_Init+0x5c>)
 8001f74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f92:	220c      	movs	r2, #12
 8001f94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_USART3_UART_Init+0x58>)
 8001fb0:	f005 fc48 	bl	8007844 <HAL_UART_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001fba:	f000 f94f 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000066c 	.word	0x2000066c
 8001fc8:	40004800 	.word	0x40004800

08001fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe2:	4b97      	ldr	r3, [pc, #604]	; (8002240 <MX_GPIO_Init+0x274>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a96      	ldr	r2, [pc, #600]	; (8002240 <MX_GPIO_Init+0x274>)
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b94      	ldr	r3, [pc, #592]	; (8002240 <MX_GPIO_Init+0x274>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffa:	4b91      	ldr	r3, [pc, #580]	; (8002240 <MX_GPIO_Init+0x274>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a90      	ldr	r2, [pc, #576]	; (8002240 <MX_GPIO_Init+0x274>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b8e      	ldr	r3, [pc, #568]	; (8002240 <MX_GPIO_Init+0x274>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <MX_GPIO_Init+0x274>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a8a      	ldr	r2, [pc, #552]	; (8002240 <MX_GPIO_Init+0x274>)
 8002018:	f043 0320 	orr.w	r3, r3, #32
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <MX_GPIO_Init+0x274>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800202a:	4b85      	ldr	r3, [pc, #532]	; (8002240 <MX_GPIO_Init+0x274>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a84      	ldr	r2, [pc, #528]	; (8002240 <MX_GPIO_Init+0x274>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <MX_GPIO_Init+0x274>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <MX_GPIO_Init+0x274>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a7e      	ldr	r2, [pc, #504]	; (8002240 <MX_GPIO_Init+0x274>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b7c      	ldr	r3, [pc, #496]	; (8002240 <MX_GPIO_Init+0x274>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	4b79      	ldr	r3, [pc, #484]	; (8002240 <MX_GPIO_Init+0x274>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a78      	ldr	r2, [pc, #480]	; (8002240 <MX_GPIO_Init+0x274>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <MX_GPIO_Init+0x274>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002072:	4b73      	ldr	r3, [pc, #460]	; (8002240 <MX_GPIO_Init+0x274>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a72      	ldr	r2, [pc, #456]	; (8002240 <MX_GPIO_Init+0x274>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b70      	ldr	r3, [pc, #448]	; (8002240 <MX_GPIO_Init+0x274>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <MX_GPIO_Init+0x274>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <MX_GPIO_Init+0x274>)
 8002090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <MX_GPIO_Init+0x274>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2118      	movs	r1, #24
 80020a6:	4867      	ldr	r0, [pc, #412]	; (8002244 <MX_GPIO_Init+0x278>)
 80020a8:	f001 fd3e 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f244 0181 	movw	r1, #16513	; 0x4081
 80020b2:	4865      	ldr	r0, [pc, #404]	; (8002248 <MX_GPIO_Init+0x27c>)
 80020b4:	f001 fd38 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2140      	movs	r1, #64	; 0x40
 80020bc:	4863      	ldr	r0, [pc, #396]	; (800224c <MX_GPIO_Init+0x280>)
 80020be:	f001 fd33 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 80020c2:	2318      	movs	r3, #24
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	4619      	mov	r1, r3
 80020d8:	485a      	ldr	r0, [pc, #360]	; (8002244 <MX_GPIO_Init+0x278>)
 80020da:	f001 fb79 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 80020de:	f643 7308 	movw	r3, #16136	; 0x3f08
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	4856      	ldr	r0, [pc, #344]	; (8002250 <MX_GPIO_Init+0x284>)
 80020f6:	f001 fb6b 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020fa:	2310      	movs	r3, #16
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	4619      	mov	r1, r3
 800210e:	4850      	ldr	r0, [pc, #320]	; (8002250 <MX_GPIO_Init+0x284>)
 8002110:	f001 fb5e 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002114:	2332      	movs	r3, #50	; 0x32
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002124:	230b      	movs	r3, #11
 8002126:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212c:	4619      	mov	r1, r3
 800212e:	4849      	ldr	r0, [pc, #292]	; (8002254 <MX_GPIO_Init+0x288>)
 8002130:	f001 fb4e 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002134:	2386      	movs	r3, #134	; 0x86
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002144:	230b      	movs	r3, #11
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214c:	4619      	mov	r1, r3
 800214e:	4842      	ldr	r0, [pc, #264]	; (8002258 <MX_GPIO_Init+0x28c>)
 8002150:	f001 fb3e 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002154:	f244 0381 	movw	r3, #16513	; 0x4081
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215a:	2301      	movs	r3, #1
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216a:	4619      	mov	r1, r3
 800216c:	4836      	ldr	r0, [pc, #216]	; (8002248 <MX_GPIO_Init+0x27c>)
 800216e:	f001 fb2f 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002184:	230b      	movs	r3, #11
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	482e      	ldr	r0, [pc, #184]	; (8002248 <MX_GPIO_Init+0x27c>)
 8002190:	f001 fb1e 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002194:	2340      	movs	r3, #64	; 0x40
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002198:	2301      	movs	r3, #1
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	4828      	ldr	r0, [pc, #160]	; (800224c <MX_GPIO_Init+0x280>)
 80021ac:	f001 fb10 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	4619      	mov	r1, r3
 80021c2:	4822      	ldr	r0, [pc, #136]	; (800224c <MX_GPIO_Init+0x280>)
 80021c4:	f001 fb04 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021c8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021da:	230a      	movs	r3, #10
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e2:	4619      	mov	r1, r3
 80021e4:	481c      	ldr	r0, [pc, #112]	; (8002258 <MX_GPIO_Init+0x28c>)
 80021e6:	f001 faf3 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fc:	4619      	mov	r1, r3
 80021fe:	4816      	ldr	r0, [pc, #88]	; (8002258 <MX_GPIO_Init+0x28c>)
 8002200:	f001 fae6 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002204:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002216:	230b      	movs	r3, #11
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800221a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221e:	4619      	mov	r1, r3
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <MX_GPIO_Init+0x280>)
 8002222:	f001 fad5 	bl	80037d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	200a      	movs	r0, #10
 800222c:	f001 fa8b 	bl	8003746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002230:	200a      	movs	r0, #10
 8002232:	f001 faa4 	bl	800377e <HAL_NVIC_EnableIRQ>

}
 8002236:	bf00      	nop
 8002238:	3738      	adds	r7, #56	; 0x38
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	40021000 	.word	0x40021000
 8002248:	40020400 	.word	0x40020400
 800224c:	40021800 	.word	0x40021800
 8002250:	40021400 	.word	0x40021400
 8002254:	40020800 	.word	0x40020800
 8002258:	40020000 	.word	0x40020000

0800225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
}
 8002262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002264:	e7fe      	b.n	8002264 <Error_Handler+0x8>
	...

08002268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_MspInit+0x44>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_MspInit+0x44>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_MspInit+0x44>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_MspInit+0x44>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a08      	ldr	r2, [pc, #32]	; (80022ac <HAL_MspInit+0x44>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_MspInit+0x44>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800

080022b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_ADC_MspInit+0x74>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d123      	bne.n	800231a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_ADC_MspInit+0x78>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_ADC_MspInit+0x78>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_ADC_MspInit+0x78>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_ADC_MspInit+0x78>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_ADC_MspInit+0x78>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <HAL_ADC_MspInit+0x78>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8002302:	2308      	movs	r3, #8
 8002304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002306:	2303      	movs	r3, #3
 8002308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <HAL_ADC_MspInit+0x7c>)
 8002316:	f001 fa5b 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40012000 	.word	0x40012000
 8002328:	40023800 	.word	0x40023800
 800232c:	40020000 	.word	0x40020000

08002330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b0b0      	sub	sp, #192	; 0xc0
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	2290      	movs	r2, #144	; 0x90
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f006 f85f 	bl	8008414 <memset>
  if(hi2c->Instance==I2C1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a44      	ldr	r2, [pc, #272]	; (800246c <HAL_I2C_MspInit+0x13c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d13e      	bne.n	80023de <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002360:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002364:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4618      	mov	r0, r3
 8002372:	f002 ff2f 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800237c:	f7ff ff6e 	bl	800225c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_I2C_MspInit+0x140>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	4a3a      	ldr	r2, [pc, #232]	; (8002470 <HAL_I2C_MspInit+0x140>)
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	6313      	str	r3, [r2, #48]	; 0x30
 800238c:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_I2C_MspInit+0x140>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002398:	f44f 7340 	mov.w	r3, #768	; 0x300
 800239c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a0:	2312      	movs	r3, #18
 80023a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023b2:	2304      	movs	r3, #4
 80023b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023bc:	4619      	mov	r1, r3
 80023be:	482d      	ldr	r0, [pc, #180]	; (8002474 <HAL_I2C_MspInit+0x144>)
 80023c0:	f001 fa06 	bl	80037d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_I2C_MspInit+0x140>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	4a29      	ldr	r2, [pc, #164]	; (8002470 <HAL_I2C_MspInit+0x140>)
 80023ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ce:	6413      	str	r3, [r2, #64]	; 0x40
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_I2C_MspInit+0x140>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023dc:	e041      	b.n	8002462 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a25      	ldr	r2, [pc, #148]	; (8002478 <HAL_I2C_MspInit+0x148>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d13c      	bne.n	8002462 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80023e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 feeb 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002404:	f7ff ff2a 	bl	800225c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_I2C_MspInit+0x140>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_I2C_MspInit+0x140>)
 800240e:	f043 0320 	orr.w	r3, r3, #32
 8002412:	6313      	str	r3, [r2, #48]	; 0x30
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_I2C_MspInit+0x140>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002420:	2303      	movs	r3, #3
 8002422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002426:	2312      	movs	r3, #18
 8002428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800242c:	2301      	movs	r3, #1
 800242e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002438:	2304      	movs	r3, #4
 800243a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800243e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002442:	4619      	mov	r1, r3
 8002444:	480d      	ldr	r0, [pc, #52]	; (800247c <HAL_I2C_MspInit+0x14c>)
 8002446:	f001 f9c3 	bl	80037d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_I2C_MspInit+0x140>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a08      	ldr	r2, [pc, #32]	; (8002470 <HAL_I2C_MspInit+0x140>)
 8002450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_I2C_MspInit+0x140>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	bf00      	nop
 8002464:	37c0      	adds	r7, #192	; 0xc0
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40005400 	.word	0x40005400
 8002470:	40023800 	.word	0x40023800
 8002474:	40020400 	.word	0x40020400
 8002478:	40005800 	.word	0x40005800
 800247c:	40021400 	.word	0x40021400

08002480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a33      	ldr	r2, [pc, #204]	; (800256c <HAL_SPI_MspInit+0xec>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d160      	bne.n	8002564 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024a2:	4b33      	ldr	r3, [pc, #204]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a32      	ldr	r2, [pc, #200]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a2c      	ldr	r2, [pc, #176]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a26      	ldr	r2, [pc, #152]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024d8:	f043 0308 	orr.w	r3, r3, #8
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a20      	ldr	r2, [pc, #128]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <HAL_SPI_MspInit+0xf0>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002502:	2320      	movs	r3, #32
 8002504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002512:	2305      	movs	r3, #5
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	4619      	mov	r1, r3
 800251c:	4815      	ldr	r0, [pc, #84]	; (8002574 <HAL_SPI_MspInit+0xf4>)
 800251e:	f001 f957 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002532:	2305      	movs	r3, #5
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4619      	mov	r1, r3
 800253c:	480e      	ldr	r0, [pc, #56]	; (8002578 <HAL_SPI_MspInit+0xf8>)
 800253e:	f001 f947 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002554:	2305      	movs	r3, #5
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4619      	mov	r1, r3
 800255e:	4807      	ldr	r0, [pc, #28]	; (800257c <HAL_SPI_MspInit+0xfc>)
 8002560:	f001 f936 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002564:	bf00      	nop
 8002566:	3730      	adds	r7, #48	; 0x30
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40013000 	.word	0x40013000
 8002570:	40023800 	.word	0x40023800
 8002574:	40020000 	.word	0x40020000
 8002578:	40020c00 	.word	0x40020c00
 800257c:	40021800 	.word	0x40021800

08002580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08e      	sub	sp, #56	; 0x38
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a3f      	ldr	r2, [pc, #252]	; (800269c <HAL_TIM_Base_MspInit+0x11c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10c      	bne.n	80025bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b3c      	ldr	r3, [pc, #240]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80025ba:	e06b      	b.n	8002694 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c4:	d129      	bne.n	800261a <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a35      	ldr	r2, [pc, #212]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a2f      	ldr	r2, [pc, #188]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 80025f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002608:	2301      	movs	r3, #1
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 800260c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002610:	4619      	mov	r1, r3
 8002612:	4824      	ldr	r0, [pc, #144]	; (80026a4 <HAL_TIM_Base_MspInit+0x124>)
 8002614:	f001 f8dc 	bl	80037d0 <HAL_GPIO_Init>
}
 8002618:	e03c      	b.n	8002694 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a22      	ldr	r2, [pc, #136]	; (80026a8 <HAL_TIM_Base_MspInit+0x128>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d10c      	bne.n	800263e <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	6413      	str	r3, [r2, #64]	; 0x40
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	697b      	ldr	r3, [r7, #20]
}
 800263c:	e02a      	b.n	8002694 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <HAL_TIM_Base_MspInit+0x12c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d114      	bne.n	8002672 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 800264e:	f043 0310 	orr.w	r3, r3, #16
 8002652:	6413      	str	r3, [r2, #64]	; 0x40
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2101      	movs	r1, #1
 8002664:	2036      	movs	r0, #54	; 0x36
 8002666:	f001 f86e 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800266a:	2036      	movs	r0, #54	; 0x36
 800266c:	f001 f887 	bl	800377e <HAL_NVIC_EnableIRQ>
}
 8002670:	e010      	b.n	8002694 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <HAL_TIM_Base_MspInit+0x130>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d10b      	bne.n	8002694 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	6453      	str	r3, [r2, #68]	; 0x44
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_TIM_Base_MspInit+0x120>)
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	bf00      	nop
 8002696:	3738      	adds	r7, #56	; 0x38
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40010000 	.word	0x40010000
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40000c00 	.word	0x40000c00
 80026ac:	40001000 	.word	0x40001000
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 031c 	add.w	r3, r7, #28
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2e      	ldr	r2, [pc, #184]	; (800278c <HAL_TIM_Encoder_MspInit+0xd8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d128      	bne.n	8002728 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 80026dc:	f043 0302 	orr.w	r3, r3, #2
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8002706:	2330      	movs	r3, #48	; 0x30
 8002708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002716:	2302      	movs	r3, #2
 8002718:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271a:	f107 031c 	add.w	r3, r7, #28
 800271e:	4619      	mov	r1, r3
 8002720:	481c      	ldr	r0, [pc, #112]	; (8002794 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002722:	f001 f855 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002726:	e02d      	b.n	8002784 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <HAL_TIM_Encoder_MspInit+0xe4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d128      	bne.n	8002784 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002750:	f043 0308 	orr.w	r3, r3, #8
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8002762:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002774:	2302      	movs	r3, #2
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4807      	ldr	r0, [pc, #28]	; (800279c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002780:	f001 f826 	bl	80037d0 <HAL_GPIO_Init>
}
 8002784:	bf00      	nop
 8002786:	3730      	adds	r7, #48	; 0x30
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40000400 	.word	0x40000400
 8002790:	40023800 	.word	0x40023800
 8002794:	40020400 	.word	0x40020400
 8002798:	40000800 	.word	0x40000800
 800279c:	40020c00 	.word	0x40020c00

080027a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_TIM_PWM_MspInit+0x38>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10b      	bne.n	80027ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_TIM_PWM_MspInit+0x3c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_TIM_PWM_MspInit+0x3c>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <HAL_TIM_PWM_MspInit+0x3c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40014000 	.word	0x40014000
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a56      	ldr	r2, [pc, #344]	; (8002958 <HAL_TIM_MspPostInit+0x178>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d11d      	bne.n	800283e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002802:	4b56      	ldr	r3, [pc, #344]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a55      	ldr	r2, [pc, #340]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 8002808:	f043 0310 	orr.w	r3, r3, #16
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b53      	ldr	r3, [pc, #332]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 800281a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800282c:	2301      	movs	r3, #1
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	4619      	mov	r1, r3
 8002836:	484a      	ldr	r0, [pc, #296]	; (8002960 <HAL_TIM_MspPostInit+0x180>)
 8002838:	f000 ffca 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800283c:	e088      	b.n	8002950 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002846:	d11d      	bne.n	8002884 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002848:	4b44      	ldr	r3, [pc, #272]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	4a43      	ldr	r2, [pc, #268]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6313      	str	r3, [r2, #48]	; 0x30
 8002854:	4b41      	ldr	r3, [pc, #260]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002872:	2301      	movs	r3, #1
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	4839      	ldr	r0, [pc, #228]	; (8002964 <HAL_TIM_MspPostInit+0x184>)
 800287e:	f000 ffa7 	bl	80037d0 <HAL_GPIO_Init>
}
 8002882:	e065      	b.n	8002950 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a37      	ldr	r2, [pc, #220]	; (8002968 <HAL_TIM_MspPostInit+0x188>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d11c      	bne.n	80028c8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	4b33      	ldr	r3, [pc, #204]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a32      	ldr	r2, [pc, #200]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b30      	ldr	r3, [pc, #192]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028b6:	2302      	movs	r3, #2
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4619      	mov	r1, r3
 80028c0:	4828      	ldr	r0, [pc, #160]	; (8002964 <HAL_TIM_MspPostInit+0x184>)
 80028c2:	f000 ff85 	bl	80037d0 <HAL_GPIO_Init>
}
 80028c6:	e043      	b.n	8002950 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_TIM_MspPostInit+0x18c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11d      	bne.n	800290e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b1f      	ldr	r3, [pc, #124]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 80028ea:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80028fc:	2303      	movs	r3, #3
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	4619      	mov	r1, r3
 8002906:	481a      	ldr	r0, [pc, #104]	; (8002970 <HAL_TIM_MspPostInit+0x190>)
 8002908:	f000 ff62 	bl	80037d0 <HAL_GPIO_Init>
}
 800290c:	e020      	b.n	8002950 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_TIM_MspPostInit+0x194>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d11b      	bne.n	8002950 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	4a0f      	ldr	r2, [pc, #60]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 800291e:	f043 0310 	orr.w	r3, r3, #16
 8002922:	6313      	str	r3, [r2, #48]	; 0x30
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_TIM_MspPostInit+0x17c>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8002930:	2360      	movs	r3, #96	; 0x60
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002940:	2303      	movs	r3, #3
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	4619      	mov	r1, r3
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <HAL_TIM_MspPostInit+0x180>)
 800294c:	f000 ff40 	bl	80037d0 <HAL_GPIO_Init>
}
 8002950:	bf00      	nop
 8002952:	3730      	adds	r7, #48	; 0x30
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40010000 	.word	0x40010000
 800295c:	40023800 	.word	0x40023800
 8002960:	40021000 	.word	0x40021000
 8002964:	40020000 	.word	0x40020000
 8002968:	40000c00 	.word	0x40000c00
 800296c:	40010400 	.word	0x40010400
 8002970:	40020800 	.word	0x40020800
 8002974:	40014000 	.word	0x40014000

08002978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b0b6      	sub	sp, #216	; 0xd8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002990:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002994:	2290      	movs	r2, #144	; 0x90
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f005 fd3b 	bl	8008414 <memset>
  if(huart->Instance==UART4)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4aa0      	ldr	r2, [pc, #640]	; (8002c24 <HAL_UART_MspInit+0x2ac>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d13e      	bne.n	8002a26 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80029a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 fc0b 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80029c4:	f7ff fc4a 	bl	800225c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029c8:	4b97      	ldr	r3, [pc, #604]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	4a96      	ldr	r2, [pc, #600]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 80029ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029d2:	6413      	str	r3, [r2, #64]	; 0x40
 80029d4:	4b94      	ldr	r3, [pc, #592]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e0:	4b91      	ldr	r3, [pc, #580]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	4a90      	ldr	r2, [pc, #576]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6313      	str	r3, [r2, #48]	; 0x30
 80029ec:	4b8e      	ldr	r3, [pc, #568]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 80029f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a12:	2308      	movs	r3, #8
 8002a14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4883      	ldr	r0, [pc, #524]	; (8002c2c <HAL_UART_MspInit+0x2b4>)
 8002a20:	f000 fed6 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a24:	e151      	b.n	8002cca <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a81      	ldr	r2, [pc, #516]	; (8002c30 <HAL_UART_MspInit+0x2b8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d160      	bne.n	8002af2 <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fbc7 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002a4c:	f7ff fc06 	bl	800225c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a50:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a74      	ldr	r2, [pc, #464]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5c:	4b72      	ldr	r3, [pc, #456]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a68:	4b6f      	ldr	r3, [pc, #444]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4a6e      	ldr	r2, [pc, #440]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	6313      	str	r3, [r2, #48]	; 0x30
 8002a74:	4b6c      	ldr	r3, [pc, #432]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a80:	4b69      	ldr	r3, [pc, #420]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4a68      	ldr	r2, [pc, #416]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8c:	4b66      	ldr	r3, [pc, #408]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	623b      	str	r3, [r7, #32]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aac:	2303      	movs	r3, #3
 8002aae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002abc:	4619      	mov	r1, r3
 8002abe:	485d      	ldr	r0, [pc, #372]	; (8002c34 <HAL_UART_MspInit+0x2bc>)
 8002ac0:	f000 fe86 	bl	80037d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4850      	ldr	r0, [pc, #320]	; (8002c2c <HAL_UART_MspInit+0x2b4>)
 8002aec:	f000 fe70 	bl	80037d0 <HAL_GPIO_Init>
}
 8002af0:	e0eb      	b.n	8002cca <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a50      	ldr	r2, [pc, #320]	; (8002c38 <HAL_UART_MspInit+0x2c0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d151      	bne.n	8002ba0 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002afc:	2340      	movs	r3, #64	; 0x40
 8002afe:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b00:	2300      	movs	r3, #0
 8002b02:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 fb63 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002b14:	f7ff fba2 	bl	800225c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b18:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	4a42      	ldr	r2, [pc, #264]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002b1e:	f043 0310 	orr.w	r3, r3, #16
 8002b22:	6453      	str	r3, [r2, #68]	; 0x44
 8002b24:	4b40      	ldr	r3, [pc, #256]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b30:	4b3d      	ldr	r3, [pc, #244]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	4a3c      	ldr	r2, [pc, #240]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3c:	4b3a      	ldr	r3, [pc, #232]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002b62:	2304      	movs	r3, #4
 8002b64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4831      	ldr	r0, [pc, #196]	; (8002c34 <HAL_UART_MspInit+0x2bc>)
 8002b70:	f000 fe2e 	bl	80037d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b74:	2340      	movs	r3, #64	; 0x40
 8002b76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b86:	2303      	movs	r3, #3
 8002b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b8c:	2307      	movs	r3, #7
 8002b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4826      	ldr	r0, [pc, #152]	; (8002c34 <HAL_UART_MspInit+0x2bc>)
 8002b9a:	f000 fe19 	bl	80037d0 <HAL_GPIO_Init>
}
 8002b9e:	e094      	b.n	8002cca <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <HAL_UART_MspInit+0x2c4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d14c      	bne.n	8002c44 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fb0c 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002bc2:	f7ff fb4b 	bl	800225c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_UART_MspInit+0x2b0>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bf6:	2360      	movs	r3, #96	; 0x60
 8002bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c0e:	2307      	movs	r3, #7
 8002c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4809      	ldr	r0, [pc, #36]	; (8002c40 <HAL_UART_MspInit+0x2c8>)
 8002c1c:	f000 fdd8 	bl	80037d0 <HAL_GPIO_Init>
}
 8002c20:	e053      	b.n	8002cca <HAL_UART_MspInit+0x352>
 8002c22:	bf00      	nop
 8002c24:	40004c00 	.word	0x40004c00
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40005000 	.word	0x40005000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	40004400 	.word	0x40004400
 8002c40:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_UART_MspInit+0x35c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d13d      	bne.n	8002cca <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fab8 	bl	80051d4 <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002c6a:	f7ff faf7 	bl	800225c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_UART_MspInit+0x360>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_UART_MspInit+0x360>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_UART_MspInit+0x360>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_UART_MspInit+0x360>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <HAL_UART_MspInit+0x360>)
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_UART_MspInit+0x360>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ca2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cb8:	2307      	movs	r3, #7
 8002cba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cbe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4805      	ldr	r0, [pc, #20]	; (8002cdc <HAL_UART_MspInit+0x364>)
 8002cc6:	f000 fd83 	bl	80037d0 <HAL_GPIO_Init>
}
 8002cca:	bf00      	nop
 8002ccc:	37d8      	adds	r7, #216	; 0xd8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40004800 	.word	0x40004800
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020c00 	.word	0x40020c00

08002ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <NMI_Handler+0x4>

08002ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <HardFault_Handler+0x4>

08002cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <MemManage_Handler+0x4>

08002cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf6:	e7fe      	b.n	8002cf6 <BusFault_Handler+0x4>

08002cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cfc:	e7fe      	b.n	8002cfc <UsageFault_Handler+0x4>

08002cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d2c:	f000 f934 	bl	8002f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002d38:	2010      	movs	r0, #16
 8002d3a:	f000 ff0f 	bl	8003b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <TIM6_DAC_IRQHandler+0x10>)
 8002d4a:	f003 fb2d 	bl	80063a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000368 	.word	0x20000368

08002d58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e00a      	b.n	8002d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d6a:	f3af 8000 	nop.w
 8002d6e:	4601      	mov	r1, r0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	b2ca      	uxtb	r2, r1
 8002d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf0      	blt.n	8002d6a <_read+0x12>
	}

return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e009      	b.n	8002db8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	60ba      	str	r2, [r7, #8]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3301      	adds	r3, #1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	dbf1      	blt.n	8002da4 <_write+0x12>
	}
	return len;
 8002dc0:	687b      	ldr	r3, [r7, #4]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <_close>:

int _close(int file)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002df2:	605a      	str	r2, [r3, #4]
	return 0;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <_isatty>:

int _isatty(int file)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
	return 1;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
	return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <_sbrk+0x5c>)
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <_sbrk+0x60>)
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <_sbrk+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <_sbrk+0x64>)
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <_sbrk+0x68>)
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <_sbrk+0x64>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d207      	bcs.n	8002e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e64:	f005 fa9e 	bl	80083a4 <__errno>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e72:	e009      	b.n	8002e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <_sbrk+0x64>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <_sbrk+0x64>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4413      	add	r3, r2
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <_sbrk+0x64>)
 8002e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e86:	68fb      	ldr	r3, [r7, #12]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20080000 	.word	0x20080000
 8002e94:	00000400 	.word	0x00000400
 8002e98:	20000824 	.word	0x20000824
 8002e9c:	20000840 	.word	0x20000840

08002ea0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <SystemInit+0x28>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <SystemInit+0x28>)
 8002eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <SystemInit+0x28>)
 8002eb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eba:	609a      	str	r2, [r3, #8]
#endif
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ed0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ed2:	e003      	b.n	8002edc <LoopCopyDataInit>

08002ed4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ed6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ed8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002eda:	3104      	adds	r1, #4

08002edc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002edc:	480b      	ldr	r0, [pc, #44]	; (8002f0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ee0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ee2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ee4:	d3f6      	bcc.n	8002ed4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ee8:	e002      	b.n	8002ef0 <LoopFillZerobss>

08002eea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002eea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002eec:	f842 3b04 	str.w	r3, [r2], #4

08002ef0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ef2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ef4:	d3f9      	bcc.n	8002eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ef6:	f7ff ffd3 	bl	8002ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002efa:	f005 fa59 	bl	80083b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efe:	f7fd ffa9 	bl	8000e54 <main>
  bx  lr    
 8002f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f04:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002f08:	08009448 	.word	0x08009448
  ldr  r0, =_sdata
 8002f0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f10:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002f14:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002f18:	2000083c 	.word	0x2000083c

08002f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f1c:	e7fe      	b.n	8002f1c <ADC_IRQHandler>

08002f1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f22:	2003      	movs	r0, #3
 8002f24:	f000 fc04 	bl	8003730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f000 f805 	bl	8002f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f2e:	f7ff f99b 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_InitTick+0x54>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_InitTick+0x58>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fc2d 	bl	80037b6 <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00e      	b.n	8002f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d80a      	bhi.n	8002f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f000 fbe7 	bl	8003746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <HAL_InitTick+0x5c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	20000014 	.word	0x20000014
 8002f94:	20000010 	.word	0x20000010

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000014 	.word	0x20000014
 8002fbc:	20000828 	.word	0x20000828

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000828 	.word	0x20000828

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000014 	.word	0x20000014

08003020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e031      	b.n	800309a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff f936 	bl	80022b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_ADC_Init+0x84>)
 8003064:	4013      	ands	r3, r2
 8003066:	f043 0202 	orr.w	r2, r3, #2
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f970 	bl	8003354 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
 800308a:	e001      	b.n	8003090 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	ffffeefd 	.word	0xffffeefd

080030a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1c>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e136      	b.n	8003332 <HAL_ADC_ConfigChannel+0x28a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b09      	cmp	r3, #9
 80030d2:	d93a      	bls.n	800314a <HAL_ADC_ConfigChannel+0xa2>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030dc:	d035      	beq.n	800314a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68d9      	ldr	r1, [r3, #12]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	3b1e      	subs	r3, #30
 80030f4:	2207      	movs	r2, #7
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	400a      	ands	r2, r1
 8003102:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a8d      	ldr	r2, [pc, #564]	; (8003340 <HAL_ADC_ConfigChannel+0x298>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d10a      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68d9      	ldr	r1, [r3, #12]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	061a      	lsls	r2, r3, #24
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003122:	e035      	b.n	8003190 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68d9      	ldr	r1, [r3, #12]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	4618      	mov	r0, r3
 8003136:	4603      	mov	r3, r0
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4403      	add	r3, r0
 800313c:	3b1e      	subs	r3, #30
 800313e:	409a      	lsls	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003148:	e022      	b.n	8003190 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6919      	ldr	r1, [r3, #16]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	2207      	movs	r2, #7
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43da      	mvns	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	400a      	ands	r2, r1
 800316c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6919      	ldr	r1, [r3, #16]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	4618      	mov	r0, r3
 8003180:	4603      	mov	r3, r0
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4403      	add	r3, r0
 8003186:	409a      	lsls	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b06      	cmp	r3, #6
 8003196:	d824      	bhi.n	80031e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	3b05      	subs	r3, #5
 80031aa:	221f      	movs	r2, #31
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43da      	mvns	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	400a      	ands	r2, r1
 80031b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	3b05      	subs	r3, #5
 80031d4:	fa00 f203 	lsl.w	r2, r0, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	635a      	str	r2, [r3, #52]	; 0x34
 80031e0:	e04c      	b.n	800327c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d824      	bhi.n	8003234 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	3b23      	subs	r3, #35	; 0x23
 80031fc:	221f      	movs	r2, #31
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	400a      	ands	r2, r1
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	4618      	mov	r0, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	3b23      	subs	r3, #35	; 0x23
 8003226:	fa00 f203 	lsl.w	r2, r0, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
 8003232:	e023      	b.n	800327c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	3b41      	subs	r3, #65	; 0x41
 8003246:	221f      	movs	r2, #31
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43da      	mvns	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	400a      	ands	r2, r1
 8003254:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	4618      	mov	r0, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	3b41      	subs	r3, #65	; 0x41
 8003270:	fa00 f203 	lsl.w	r2, r0, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a30      	ldr	r2, [pc, #192]	; (8003344 <HAL_ADC_ConfigChannel+0x29c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10a      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1f4>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800328e:	d105      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003290:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a2c      	ldr	r2, [pc, #176]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 8003296:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800329a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a28      	ldr	r2, [pc, #160]	; (8003344 <HAL_ADC_ConfigChannel+0x29c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10f      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x21e>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b12      	cmp	r3, #18
 80032ac:	d10b      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4a25      	ldr	r2, [pc, #148]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 80032b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032b8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80032ba:	4b23      	ldr	r3, [pc, #140]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4a22      	ldr	r2, [pc, #136]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 80032c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_ADC_ConfigChannel+0x29c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d12b      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x280>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1a      	ldr	r2, [pc, #104]	; (8003340 <HAL_ADC_ConfigChannel+0x298>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <HAL_ADC_ConfigChannel+0x23a>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b11      	cmp	r3, #17
 80032e0:	d122      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80032e2:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 80032e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80032ec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_ADC_ConfigChannel+0x2a0>)
 80032f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032f8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a10      	ldr	r2, [pc, #64]	; (8003340 <HAL_ADC_ConfigChannel+0x298>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d111      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_ADC_ConfigChannel+0x2a4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a11      	ldr	r2, [pc, #68]	; (8003350 <HAL_ADC_ConfigChannel+0x2a8>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	0c9a      	lsrs	r2, r3, #18
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800331a:	e002      	b.n	8003322 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3b01      	subs	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f9      	bne.n	800331c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	10000012 	.word	0x10000012
 8003344:	40012000 	.word	0x40012000
 8003348:	40012300 	.word	0x40012300
 800334c:	2000000c 	.word	0x2000000c
 8003350:	431bde83 	.word	0x431bde83

08003354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800335c:	4b78      	ldr	r3, [pc, #480]	; (8003540 <ADC_Init+0x1ec>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a77      	ldr	r2, [pc, #476]	; (8003540 <ADC_Init+0x1ec>)
 8003362:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003366:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003368:	4b75      	ldr	r3, [pc, #468]	; (8003540 <ADC_Init+0x1ec>)
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4973      	ldr	r1, [pc, #460]	; (8003540 <ADC_Init+0x1ec>)
 8003372:	4313      	orrs	r3, r2
 8003374:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	021a      	lsls	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	4a58      	ldr	r2, [pc, #352]	; (8003544 <ADC_Init+0x1f0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6899      	ldr	r1, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6899      	ldr	r1, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	e00f      	b.n	800344e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800343c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800344c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0202 	bic.w	r2, r2, #2
 800345c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	005a      	lsls	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800349a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	3b01      	subs	r3, #1
 80034a8:	035a      	lsls	r2, r3, #13
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e007      	b.n	80034c4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	3b01      	subs	r3, #1
 80034e0:	051a      	lsls	r2, r3, #20
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003506:	025a      	lsls	r2, r3, #9
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6899      	ldr	r1, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	029a      	lsls	r2, r3, #10
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40012300 	.word	0x40012300
 8003544:	0f000001 	.word	0x0f000001

08003548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <__NVIC_SetPriorityGrouping+0x40>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <__NVIC_SetPriorityGrouping+0x44>)
 8003572:	4313      	orrs	r3, r2
 8003574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003576:	4a04      	ldr	r2, [pc, #16]	; (8003588 <__NVIC_SetPriorityGrouping+0x40>)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	60d3      	str	r3, [r2, #12]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00
 800358c:	05fa0000 	.word	0x05fa0000

08003590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 0307 	and.w	r3, r3, #7
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	db0b      	blt.n	80035d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	4907      	ldr	r1, [pc, #28]	; (80035e4 <__NVIC_EnableIRQ+0x38>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2001      	movs	r0, #1
 80035ce:	fa00 f202 	lsl.w	r2, r0, r2
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	db12      	blt.n	8003620 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	490a      	ldr	r1, [pc, #40]	; (800362c <__NVIC_DisableIRQ+0x44>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2001      	movs	r0, #1
 800360a:	fa00 f202 	lsl.w	r2, r0, r2
 800360e:	3320      	adds	r3, #32
 8003610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003614:	f3bf 8f4f 	dsb	sy
}
 8003618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800361a:	f3bf 8f6f 	isb	sy
}
 800361e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000e100 	.word	0xe000e100

08003630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	6039      	str	r1, [r7, #0]
 800363a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003640:	2b00      	cmp	r3, #0
 8003642:	db0a      	blt.n	800365a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	490c      	ldr	r1, [pc, #48]	; (800367c <__NVIC_SetPriority+0x4c>)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	0112      	lsls	r2, r2, #4
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	440b      	add	r3, r1
 8003654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003658:	e00a      	b.n	8003670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4908      	ldr	r1, [pc, #32]	; (8003680 <__NVIC_SetPriority+0x50>)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	3b04      	subs	r3, #4
 8003668:	0112      	lsls	r2, r2, #4
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	440b      	add	r3, r1
 800366e:	761a      	strb	r2, [r3, #24]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000e100 	.word	0xe000e100
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f1c3 0307 	rsb	r3, r3, #7
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf28      	it	cs
 80036a2:	2304      	movcs	r3, #4
 80036a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3304      	adds	r3, #4
 80036aa:	2b06      	cmp	r3, #6
 80036ac:	d902      	bls.n	80036b4 <NVIC_EncodePriority+0x30>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3b03      	subs	r3, #3
 80036b2:	e000      	b.n	80036b6 <NVIC_EncodePriority+0x32>
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	401a      	ands	r2, r3
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	43d9      	mvns	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036dc:	4313      	orrs	r3, r2
         );
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036fc:	d301      	bcc.n	8003702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036fe:	2301      	movs	r3, #1
 8003700:	e00f      	b.n	8003722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <SysTick_Config+0x40>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370a:	210f      	movs	r1, #15
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	f7ff ff8e 	bl	8003630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <SysTick_Config+0x40>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <SysTick_Config+0x40>)
 800371c:	2207      	movs	r2, #7
 800371e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000e010 	.word	0xe000e010

08003730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff05 	bl	8003548 <__NVIC_SetPriorityGrouping>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003758:	f7ff ff1a 	bl	8003590 <__NVIC_GetPriorityGrouping>
 800375c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7ff ff8e 	bl	8003684 <NVIC_EncodePriority>
 8003768:	4602      	mov	r2, r0
 800376a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff5d 	bl	8003630 <__NVIC_SetPriority>
}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff0d 	bl	80035ac <__NVIC_EnableIRQ>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff1d 	bl	80035e8 <__NVIC_DisableIRQ>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff94 	bl	80036ec <SysTick_Config>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	e175      	b.n	8003adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037f0:	2201      	movs	r2, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	f040 8164 	bne.w	8003ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d005      	beq.n	8003826 <HAL_GPIO_Init+0x56>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d130      	bne.n	8003888 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	2203      	movs	r2, #3
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 0201 	and.w	r2, r3, #1
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b03      	cmp	r3, #3
 8003892:	d017      	beq.n	80038c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2203      	movs	r2, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d123      	bne.n	8003918 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	08da      	lsrs	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3208      	adds	r2, #8
 80038d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	220f      	movs	r2, #15
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	08da      	lsrs	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3208      	adds	r2, #8
 8003912:	69b9      	ldr	r1, [r7, #24]
 8003914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0203 	and.w	r2, r3, #3
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80be 	beq.w	8003ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395a:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_GPIO_Init+0x324>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	4a65      	ldr	r2, [pc, #404]	; (8003af4 <HAL_GPIO_Init+0x324>)
 8003960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003964:	6453      	str	r3, [r2, #68]	; 0x44
 8003966:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <HAL_GPIO_Init+0x324>)
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003972:	4a61      	ldr	r2, [pc, #388]	; (8003af8 <HAL_GPIO_Init+0x328>)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	3302      	adds	r3, #2
 800397a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	220f      	movs	r2, #15
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a58      	ldr	r2, [pc, #352]	; (8003afc <HAL_GPIO_Init+0x32c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d037      	beq.n	8003a0e <HAL_GPIO_Init+0x23e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a57      	ldr	r2, [pc, #348]	; (8003b00 <HAL_GPIO_Init+0x330>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d031      	beq.n	8003a0a <HAL_GPIO_Init+0x23a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a56      	ldr	r2, [pc, #344]	; (8003b04 <HAL_GPIO_Init+0x334>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02b      	beq.n	8003a06 <HAL_GPIO_Init+0x236>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a55      	ldr	r2, [pc, #340]	; (8003b08 <HAL_GPIO_Init+0x338>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d025      	beq.n	8003a02 <HAL_GPIO_Init+0x232>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a54      	ldr	r2, [pc, #336]	; (8003b0c <HAL_GPIO_Init+0x33c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01f      	beq.n	80039fe <HAL_GPIO_Init+0x22e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a53      	ldr	r2, [pc, #332]	; (8003b10 <HAL_GPIO_Init+0x340>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d019      	beq.n	80039fa <HAL_GPIO_Init+0x22a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a52      	ldr	r2, [pc, #328]	; (8003b14 <HAL_GPIO_Init+0x344>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_GPIO_Init+0x226>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a51      	ldr	r2, [pc, #324]	; (8003b18 <HAL_GPIO_Init+0x348>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00d      	beq.n	80039f2 <HAL_GPIO_Init+0x222>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a50      	ldr	r2, [pc, #320]	; (8003b1c <HAL_GPIO_Init+0x34c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <HAL_GPIO_Init+0x21e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4f      	ldr	r2, [pc, #316]	; (8003b20 <HAL_GPIO_Init+0x350>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_GPIO_Init+0x21a>
 80039e6:	2309      	movs	r3, #9
 80039e8:	e012      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039ea:	230a      	movs	r3, #10
 80039ec:	e010      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039ee:	2308      	movs	r3, #8
 80039f0:	e00e      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039f2:	2307      	movs	r3, #7
 80039f4:	e00c      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039f6:	2306      	movs	r3, #6
 80039f8:	e00a      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039fa:	2305      	movs	r3, #5
 80039fc:	e008      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 80039fe:	2304      	movs	r3, #4
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a02:	2303      	movs	r3, #3
 8003a04:	e004      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_GPIO_Init+0x240>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	69fa      	ldr	r2, [r7, #28]
 8003a12:	f002 0203 	and.w	r2, r2, #3
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	4093      	lsls	r3, r2
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a20:	4935      	ldr	r1, [pc, #212]	; (8003af8 <HAL_GPIO_Init+0x328>)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2e:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	43db      	mvns	r3, r3
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a52:	4a34      	ldr	r2, [pc, #208]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a7c:	4a29      	ldr	r2, [pc, #164]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a82:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa6:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ad0:	4a14      	ldr	r2, [pc, #80]	; (8003b24 <HAL_GPIO_Init+0x354>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	f67f ae86 	bls.w	80037f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3724      	adds	r7, #36	; 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40013800 	.word	0x40013800
 8003afc:	40020000 	.word	0x40020000
 8003b00:	40020400 	.word	0x40020400
 8003b04:	40020800 	.word	0x40020800
 8003b08:	40020c00 	.word	0x40020c00
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40021400 	.word	0x40021400
 8003b14:	40021800 	.word	0x40021800
 8003b18:	40021c00 	.word	0x40021c00
 8003b1c:	40022000 	.word	0x40022000
 8003b20:	40022400 	.word	0x40022400
 8003b24:	40013c00 	.word	0x40013c00

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b72:	4a05      	ldr	r2, [pc, #20]	; (8003b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fc ff08 	bl	8000990 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40013c00 	.word	0x40013c00

08003b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e07f      	b.n	8003c9e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fbbc 	bl	8002330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d107      	bne.n	8003c06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	e006      	b.n	8003c14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d104      	bne.n	8003c26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <HAL_I2C_Init+0x11c>)
 8003c32:	430b      	orrs	r3, r1
 8003c34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69d9      	ldr	r1, [r3, #28]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	02008000 	.word	0x02008000

08003cac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	817b      	strh	r3, [r7, #10]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	813b      	strh	r3, [r7, #8]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	f040 80f9 	bne.w	8003ec6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_I2C_Mem_Write+0x34>
 8003cda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0ed      	b.n	8003ec8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2C_Mem_Write+0x4e>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e0e6      	b.n	8003ec8 <HAL_I2C_Mem_Write+0x21c>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d02:	f7ff f95d 	bl	8002fc0 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2319      	movs	r3, #25
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fac3 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0d1      	b.n	8003ec8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2221      	movs	r2, #33	; 0x21
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2240      	movs	r2, #64	; 0x40
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d4c:	88f8      	ldrh	r0, [r7, #6]
 8003d4e:	893a      	ldrh	r2, [r7, #8]
 8003d50:	8979      	ldrh	r1, [r7, #10]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f9d3 	bl	8004108 <I2C_RequestMemoryWrite>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0a9      	b.n	8003ec8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2bff      	cmp	r3, #255	; 0xff
 8003d7c:	d90e      	bls.n	8003d9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	22ff      	movs	r2, #255	; 0xff
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	8979      	ldrh	r1, [r7, #10]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fc1f 	bl	80045d8 <I2C_TransferConfig>
 8003d9a:	e00f      	b.n	8003dbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	8979      	ldrh	r1, [r7, #10]
 8003dae:	2300      	movs	r3, #0
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fc0e 	bl	80045d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 faad 	bl	8004320 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e07b      	b.n	8003ec8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	781a      	ldrb	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d034      	beq.n	8003e74 <HAL_I2C_Mem_Write+0x1c8>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d130      	bne.n	8003e74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fa3f 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e04d      	b.n	8003ec8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2bff      	cmp	r3, #255	; 0xff
 8003e34:	d90e      	bls.n	8003e54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	22ff      	movs	r2, #255	; 0xff
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	8979      	ldrh	r1, [r7, #10]
 8003e44:	2300      	movs	r3, #0
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fbc3 	bl	80045d8 <I2C_TransferConfig>
 8003e52:	e00f      	b.n	8003e74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	8979      	ldrh	r1, [r7, #10]
 8003e66:	2300      	movs	r3, #0
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fbb2 	bl	80045d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d19e      	bne.n	8003dbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fa8c 	bl	80043a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e01a      	b.n	8003ec8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2220      	movs	r2, #32
 8003e98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <HAL_I2C_Mem_Write+0x224>)
 8003ea6:	400b      	ands	r3, r1
 8003ea8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003ec6:	2302      	movs	r3, #2
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	fe00e800 	.word	0xfe00e800

08003ed4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	4608      	mov	r0, r1
 8003ede:	4611      	mov	r1, r2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	817b      	strh	r3, [r7, #10]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	813b      	strh	r3, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	f040 80fd 	bne.w	80040f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_I2C_Mem_Read+0x34>
 8003f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d105      	bne.n	8003f14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0f1      	b.n	80040f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2C_Mem_Read+0x4e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e0ea      	b.n	80040f8 <HAL_I2C_Mem_Read+0x224>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f2a:	f7ff f849 	bl	8002fc0 <HAL_GetTick>
 8003f2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2319      	movs	r3, #25
 8003f36:	2201      	movs	r2, #1
 8003f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f9af 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0d5      	b.n	80040f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2222      	movs	r2, #34	; 0x22
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2240      	movs	r2, #64	; 0x40
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f74:	88f8      	ldrh	r0, [r7, #6]
 8003f76:	893a      	ldrh	r2, [r7, #8]
 8003f78:	8979      	ldrh	r1, [r7, #10]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	4603      	mov	r3, r0
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f913 	bl	80041b0 <I2C_RequestMemoryRead>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0ad      	b.n	80040f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2bff      	cmp	r3, #255	; 0xff
 8003fa4:	d90e      	bls.n	8003fc4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	22ff      	movs	r2, #255	; 0xff
 8003faa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	8979      	ldrh	r1, [r7, #10]
 8003fb4:	4b52      	ldr	r3, [pc, #328]	; (8004100 <HAL_I2C_Mem_Read+0x22c>)
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fb0b 	bl	80045d8 <I2C_TransferConfig>
 8003fc2:	e00f      	b.n	8003fe4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	8979      	ldrh	r1, [r7, #10]
 8003fd6:	4b4a      	ldr	r3, [pc, #296]	; (8004100 <HAL_I2C_Mem_Read+0x22c>)
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fafa 	bl	80045d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	2200      	movs	r2, #0
 8003fec:	2104      	movs	r1, #4
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f956 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07c      	b.n	80040f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d034      	beq.n	80040a4 <HAL_I2C_Mem_Read+0x1d0>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	2b00      	cmp	r3, #0
 8004040:	d130      	bne.n	80040a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f927 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e04d      	b.n	80040f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2bff      	cmp	r3, #255	; 0xff
 8004064:	d90e      	bls.n	8004084 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	b2da      	uxtb	r2, r3
 8004072:	8979      	ldrh	r1, [r7, #10]
 8004074:	2300      	movs	r3, #0
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 faab 	bl	80045d8 <I2C_TransferConfig>
 8004082:	e00f      	b.n	80040a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	b2da      	uxtb	r2, r3
 8004094:	8979      	ldrh	r1, [r7, #10]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fa9a 	bl	80045d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d19a      	bne.n	8003fe4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f974 	bl	80043a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e01a      	b.n	80040f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2220      	movs	r2, #32
 80040c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_I2C_Mem_Read+0x230>)
 80040d6:	400b      	ands	r3, r1
 80040d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	80002400 	.word	0x80002400
 8004104:	fe00e800 	.word	0xfe00e800

08004108 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	4608      	mov	r0, r1
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	4603      	mov	r3, r0
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	460b      	mov	r3, r1
 800411c:	813b      	strh	r3, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	8979      	ldrh	r1, [r7, #10]
 8004128:	4b20      	ldr	r3, [pc, #128]	; (80041ac <I2C_RequestMemoryWrite+0xa4>)
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fa51 	bl	80045d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f8f0 	bl	8004320 <I2C_WaitOnTXISFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e02c      	b.n	80041a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d105      	bne.n	800415c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004150:	893b      	ldrh	r3, [r7, #8]
 8004152:	b2da      	uxtb	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	629a      	str	r2, [r3, #40]	; 0x28
 800415a:	e015      	b.n	8004188 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800415c:	893b      	ldrh	r3, [r7, #8]
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	b29b      	uxth	r3, r3
 8004162:	b2da      	uxtb	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	69b9      	ldr	r1, [r7, #24]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f8d6 	bl	8004320 <I2C_WaitOnTXISFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e012      	b.n	80041a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800417e:	893b      	ldrh	r3, [r7, #8]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2200      	movs	r2, #0
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f884 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	80002000 	.word	0x80002000

080041b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	817b      	strh	r3, [r7, #10]
 80041c2:	460b      	mov	r3, r1
 80041c4:	813b      	strh	r3, [r7, #8]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	8979      	ldrh	r1, [r7, #10]
 80041d0:	4b20      	ldr	r3, [pc, #128]	; (8004254 <I2C_RequestMemoryRead+0xa4>)
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2300      	movs	r3, #0
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f9fe 	bl	80045d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	69b9      	ldr	r1, [r7, #24]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f89d 	bl	8004320 <I2C_WaitOnTXISFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e02c      	b.n	800424a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d105      	bne.n	8004202 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041f6:	893b      	ldrh	r3, [r7, #8]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004200:	e015      	b.n	800422e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004202:	893b      	ldrh	r3, [r7, #8]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	b29b      	uxth	r3, r3
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	69b9      	ldr	r1, [r7, #24]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f883 	bl	8004320 <I2C_WaitOnTXISFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e012      	b.n	800424a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004224:	893b      	ldrh	r3, [r7, #8]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2200      	movs	r2, #0
 8004236:	2140      	movs	r1, #64	; 0x40
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f831 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	80002000 	.word	0x80002000

08004258 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b02      	cmp	r3, #2
 800426c:	d103      	bne.n	8004276 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b01      	cmp	r3, #1
 8004282:	d007      	beq.n	8004294 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	619a      	str	r2, [r3, #24]
  }
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b0:	e022      	b.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d01e      	beq.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ba:	f7fe fe81 	bl	8002fc0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d113      	bne.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	f043 0220 	orr.w	r2, r3, #32
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e00f      	b.n	8004318 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	429a      	cmp	r2, r3
 8004314:	d0cd      	beq.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800432c:	e02c      	b.n	8004388 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f870 	bl	8004418 <I2C_IsErrorOccurred>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e02a      	b.n	8004398 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d01e      	beq.n	8004388 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434a:	f7fe fe39 	bl	8002fc0 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d113      	bne.n	8004388 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e007      	b.n	8004398 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b02      	cmp	r3, #2
 8004394:	d1cb      	bne.n	800432e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043ac:	e028      	b.n	8004400 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f830 	bl	8004418 <I2C_IsErrorOccurred>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e026      	b.n	8004410 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fe fdfd 	bl	8002fc0 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d113      	bne.n	8004400 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	f043 0220 	orr.w	r2, r3, #32
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e007      	b.n	8004410 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b20      	cmp	r3, #32
 800440c:	d1cf      	bne.n	80043ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b00      	cmp	r3, #0
 8004442:	d068      	beq.n	8004516 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2210      	movs	r2, #16
 800444a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800444c:	e049      	b.n	80044e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d045      	beq.n	80044e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fe fdb3 	bl	8002fc0 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <I2C_IsErrorOccurred+0x54>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d13a      	bne.n	80044e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004476:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800447e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800448a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448e:	d121      	bne.n	80044d4 <I2C_IsErrorOccurred+0xbc>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004496:	d01d      	beq.n	80044d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b20      	cmp	r3, #32
 800449c:	d01a      	beq.n	80044d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044ae:	f7fe fd87 	bl	8002fc0 <HAL_GetTick>
 80044b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b4:	e00e      	b.n	80044d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044b6:	f7fe fd83 	bl	8002fc0 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b19      	cmp	r3, #25
 80044c2:	d907      	bls.n	80044d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	f043 0320 	orr.w	r3, r3, #32
 80044ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80044d2:	e006      	b.n	80044e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d1e9      	bne.n	80044b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d003      	beq.n	80044f8 <I2C_IsErrorOccurred+0xe0>
 80044f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0aa      	beq.n	800444e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2220      	movs	r2, #32
 8004506:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f043 0304 	orr.w	r3, r3, #4
 800450e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004538:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00b      	beq.n	8004562 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f043 0308 	orr.w	r3, r3, #8
 8004550:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800455a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	f043 0302 	orr.w	r3, r3, #2
 8004572:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800457c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01c      	beq.n	80045c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff fe63 	bl	8004258 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <I2C_IsErrorOccurred+0x1bc>)
 800459e:	400b      	ands	r3, r1
 80045a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80045c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	fe00e800 	.word	0xfe00e800

080045d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	607b      	str	r3, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	817b      	strh	r3, [r7, #10]
 80045e6:	4613      	mov	r3, r2
 80045e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ea:	897b      	ldrh	r3, [r7, #10]
 80045ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045f0:	7a7b      	ldrb	r3, [r7, #9]
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	4313      	orrs	r3, r2
 8004602:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004606:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	0d5b      	lsrs	r3, r3, #21
 8004612:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004616:	4b08      	ldr	r3, [pc, #32]	; (8004638 <I2C_TransferConfig+0x60>)
 8004618:	430b      	orrs	r3, r1
 800461a:	43db      	mvns	r3, r3
 800461c:	ea02 0103 	and.w	r1, r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	430a      	orrs	r2, r1
 8004628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	03ff63ff 	.word	0x03ff63ff

0800463c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	d138      	bne.n	80046c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800465c:	2302      	movs	r3, #2
 800465e:	e032      	b.n	80046c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2224      	movs	r2, #36	; 0x24
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800468e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	e000      	b.n	80046c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046c4:	2302      	movs	r3, #2
  }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d139      	bne.n	800475c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e033      	b.n	800475e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2224      	movs	r2, #36	; 0x24
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004724:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a04      	ldr	r2, [pc, #16]	; (8004788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477a:	6013      	str	r3, [r2, #0]
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40007000 	.word	0x40007000

0800478c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004796:	4b23      	ldr	r3, [pc, #140]	; (8004824 <HAL_PWREx_EnableOverDrive+0x98>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	4a22      	ldr	r2, [pc, #136]	; (8004824 <HAL_PWREx_EnableOverDrive+0x98>)
 800479c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6413      	str	r3, [r2, #64]	; 0x40
 80047a2:	4b20      	ldr	r3, [pc, #128]	; (8004824 <HAL_PWREx_EnableOverDrive+0x98>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80047ae:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047ba:	f7fe fc01 	bl	8002fc0 <HAL_GetTick>
 80047be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047c0:	e009      	b.n	80047d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047c2:	f7fe fbfd 	bl	8002fc0 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d0:	d901      	bls.n	80047d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e022      	b.n	800481c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e2:	d1ee      	bne.n	80047c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a0f      	ldr	r2, [pc, #60]	; (8004828 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047f0:	f7fe fbe6 	bl	8002fc0 <HAL_GetTick>
 80047f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047f6:	e009      	b.n	800480c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047f8:	f7fe fbe2 	bl	8002fc0 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004806:	d901      	bls.n	800480c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e007      	b.n	800481c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_PWREx_EnableOverDrive+0x9c>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004818:	d1ee      	bne.n	80047f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40023800 	.word	0x40023800
 8004828:	40007000 	.word	0x40007000

0800482c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004834:	2300      	movs	r3, #0
 8004836:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e29b      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8087 	beq.w	800495e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004850:	4b96      	ldr	r3, [pc, #600]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b04      	cmp	r3, #4
 800485a:	d00c      	beq.n	8004876 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485c:	4b93      	ldr	r3, [pc, #588]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 030c 	and.w	r3, r3, #12
 8004864:	2b08      	cmp	r3, #8
 8004866:	d112      	bne.n	800488e <HAL_RCC_OscConfig+0x62>
 8004868:	4b90      	ldr	r3, [pc, #576]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004874:	d10b      	bne.n	800488e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004876:	4b8d      	ldr	r3, [pc, #564]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d06c      	beq.n	800495c <HAL_RCC_OscConfig+0x130>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d168      	bne.n	800495c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e275      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004896:	d106      	bne.n	80048a6 <HAL_RCC_OscConfig+0x7a>
 8004898:	4b84      	ldr	r3, [pc, #528]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a83      	ldr	r2, [pc, #524]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800489e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	e02e      	b.n	8004904 <HAL_RCC_OscConfig+0xd8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x9c>
 80048ae:	4b7f      	ldr	r3, [pc, #508]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a7e      	ldr	r2, [pc, #504]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	4b7c      	ldr	r3, [pc, #496]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7b      	ldr	r2, [pc, #492]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e01d      	b.n	8004904 <HAL_RCC_OscConfig+0xd8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0xc0>
 80048d2:	4b76      	ldr	r3, [pc, #472]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a75      	ldr	r2, [pc, #468]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b73      	ldr	r3, [pc, #460]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a72      	ldr	r2, [pc, #456]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e00b      	b.n	8004904 <HAL_RCC_OscConfig+0xd8>
 80048ec:	4b6f      	ldr	r3, [pc, #444]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a6e      	ldr	r2, [pc, #440]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	4b6c      	ldr	r3, [pc, #432]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a6b      	ldr	r2, [pc, #428]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d013      	beq.n	8004934 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fe fb58 	bl	8002fc0 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004914:	f7fe fb54 	bl	8002fc0 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e229      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0xe8>
 8004932:	e014      	b.n	800495e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fe fb44 	bl	8002fc0 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fe fb40 	bl	8002fc0 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e215      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	4b57      	ldr	r3, [pc, #348]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x110>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d069      	beq.n	8004a3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800496a:	4b50      	ldr	r3, [pc, #320]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004976:	4b4d      	ldr	r3, [pc, #308]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b08      	cmp	r3, #8
 8004980:	d11c      	bne.n	80049bc <HAL_RCC_OscConfig+0x190>
 8004982:	4b4a      	ldr	r3, [pc, #296]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d116      	bne.n	80049bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_RCC_OscConfig+0x17a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e1e9      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a6:	4b41      	ldr	r3, [pc, #260]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	493d      	ldr	r1, [pc, #244]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	e040      	b.n	8004a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d023      	beq.n	8004a0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c4:	4b39      	ldr	r3, [pc, #228]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a38      	ldr	r2, [pc, #224]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fe faf6 	bl	8002fc0 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d8:	f7fe faf2 	bl	8002fc0 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e1c7      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ea:	4b30      	ldr	r3, [pc, #192]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f6:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4929      	ldr	r1, [pc, #164]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	600b      	str	r3, [r1, #0]
 8004a0a:	e018      	b.n	8004a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a0c:	4b27      	ldr	r3, [pc, #156]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a26      	ldr	r2, [pc, #152]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fe fad2 	bl	8002fc0 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fe face 	bl	8002fc0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e1a3      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a32:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d038      	beq.n	8004abc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d019      	beq.n	8004a86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a52:	4b16      	ldr	r3, [pc, #88]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a56:	4a15      	ldr	r2, [pc, #84]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fe faaf 	bl	8002fc0 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a66:	f7fe faab 	bl	8002fc0 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e180      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x23a>
 8004a84:	e01a      	b.n	8004abc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8a:	4a08      	ldr	r2, [pc, #32]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a92:	f7fe fa95 	bl	8002fc0 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9a:	f7fe fa91 	bl	8002fc0 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d903      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e166      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
 8004aac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	4b92      	ldr	r3, [pc, #584]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ee      	bne.n	8004a9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a4 	beq.w	8004c12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aca:	4b8c      	ldr	r3, [pc, #560]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10d      	bne.n	8004af2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4b89      	ldr	r3, [pc, #548]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	4a88      	ldr	r2, [pc, #544]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae2:	4b86      	ldr	r3, [pc, #536]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af2:	4b83      	ldr	r3, [pc, #524]	; (8004d00 <HAL_RCC_OscConfig+0x4d4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d118      	bne.n	8004b30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004afe:	4b80      	ldr	r3, [pc, #512]	; (8004d00 <HAL_RCC_OscConfig+0x4d4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7f      	ldr	r2, [pc, #508]	; (8004d00 <HAL_RCC_OscConfig+0x4d4>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0a:	f7fe fa59 	bl	8002fc0 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fe fa55 	bl	8002fc0 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b64      	cmp	r3, #100	; 0x64
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e12a      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b24:	4b76      	ldr	r3, [pc, #472]	; (8004d00 <HAL_RCC_OscConfig+0x4d4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x31a>
 8004b38:	4b70      	ldr	r3, [pc, #448]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	4a6f      	ldr	r2, [pc, #444]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6713      	str	r3, [r2, #112]	; 0x70
 8004b44:	e02d      	b.n	8004ba2 <HAL_RCC_OscConfig+0x376>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x33c>
 8004b4e:	4b6b      	ldr	r3, [pc, #428]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a6a      	ldr	r2, [pc, #424]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5a:	4b68      	ldr	r3, [pc, #416]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a67      	ldr	r2, [pc, #412]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
 8004b66:	e01c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x376>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b05      	cmp	r3, #5
 8004b6e:	d10c      	bne.n	8004b8a <HAL_RCC_OscConfig+0x35e>
 8004b70:	4b62      	ldr	r3, [pc, #392]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a61      	ldr	r2, [pc, #388]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b76:	f043 0304 	orr.w	r3, r3, #4
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7c:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4a5e      	ldr	r2, [pc, #376]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70
 8004b88:	e00b      	b.n	8004ba2 <HAL_RCC_OscConfig+0x376>
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	4a5b      	ldr	r2, [pc, #364]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	6713      	str	r3, [r2, #112]	; 0x70
 8004b96:	4b59      	ldr	r3, [pc, #356]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	4a58      	ldr	r2, [pc, #352]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b9c:	f023 0304 	bic.w	r3, r3, #4
 8004ba0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d015      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fe fa09 	bl	8002fc0 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fe fa05 	bl	8002fc0 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e0d8      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	4b4c      	ldr	r3, [pc, #304]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ee      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x386>
 8004bd4:	e014      	b.n	8004c00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd6:	f7fe f9f3 	bl	8002fc0 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bde:	f7fe f9ef 	bl	8002fc0 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e0c2      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf4:	4b41      	ldr	r3, [pc, #260]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ee      	bne.n	8004bde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c06:	4b3d      	ldr	r3, [pc, #244]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	4a3c      	ldr	r2, [pc, #240]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80ae 	beq.w	8004d78 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c1c:	4b37      	ldr	r3, [pc, #220]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d06d      	beq.n	8004d04 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d14b      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c30:	4b32      	ldr	r3, [pc, #200]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a31      	ldr	r2, [pc, #196]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fe f9c0 	bl	8002fc0 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fe f9bc 	bl	8002fc0 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e091      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c56:	4b29      	ldr	r3, [pc, #164]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	071b      	lsls	r3, r3, #28
 8004c8e:	491b      	ldr	r1, [pc, #108]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fe f98e 	bl	8002fc0 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca8:	f7fe f98a 	bl	8002fc0 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e05f      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x47c>
 8004cc6:	e057      	b.n	8004d78 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0b      	ldr	r2, [pc, #44]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fe f974 	bl	8002fc0 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fe f970 	bl	8002fc0 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e045      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x4b0>
 8004cfa:	e03d      	b.n	8004d78 <HAL_RCC_OscConfig+0x54c>
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d04:	4b1f      	ldr	r3, [pc, #124]	; (8004d84 <HAL_RCC_OscConfig+0x558>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d030      	beq.n	8004d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d129      	bne.n	8004d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d122      	bne.n	8004d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d34:	4013      	ands	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d119      	bne.n	8004d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d10f      	bne.n	8004d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800

08004d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0d0      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b6a      	ldr	r3, [pc, #424]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d910      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b67      	ldr	r3, [pc, #412]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 020f 	bic.w	r2, r3, #15
 8004db6:	4965      	ldr	r1, [pc, #404]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dbe:	4b63      	ldr	r3, [pc, #396]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d001      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0b8      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d020      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de8:	4b59      	ldr	r3, [pc, #356]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4a58      	ldr	r2, [pc, #352]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004df2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e00:	4b53      	ldr	r3, [pc, #332]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4a52      	ldr	r2, [pc, #328]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e0c:	4b50      	ldr	r3, [pc, #320]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	494d      	ldr	r1, [pc, #308]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d040      	beq.n	8004eac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d107      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e32:	4b47      	ldr	r3, [pc, #284]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d115      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e07f      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e073      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b3d      	ldr	r3, [pc, #244]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e06b      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4936      	ldr	r1, [pc, #216]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fe f8a0 	bl	8002fc0 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fe f89c 	bl	8002fc0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e053      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b2d      	ldr	r3, [pc, #180]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b27      	ldr	r3, [pc, #156]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d210      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 020f 	bic.w	r2, r3, #15
 8004ec2:	4922      	ldr	r1, [pc, #136]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eca:	4b20      	ldr	r3, [pc, #128]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e032      	b.n	8004f42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4916      	ldr	r1, [pc, #88]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d009      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	490e      	ldr	r1, [pc, #56]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f1a:	f000 f821 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	490a      	ldr	r1, [pc, #40]	; (8004f54 <HAL_RCC_ClockConfig+0x1cc>)
 8004f2c:	5ccb      	ldrb	r3, [r1, r3]
 8004f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f32:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <HAL_RCC_ClockConfig+0x1d0>)
 8004f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_RCC_ClockConfig+0x1d4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fd fffc 	bl	8002f38 <HAL_InitTick>

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40023c00 	.word	0x40023c00
 8004f50:	40023800 	.word	0x40023800
 8004f54:	08009388 	.word	0x08009388
 8004f58:	2000000c 	.word	0x2000000c
 8004f5c:	20000010 	.word	0x20000010

08004f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f64:	b094      	sub	sp, #80	; 0x50
 8004f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f70:	2300      	movs	r3, #0
 8004f72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f78:	4b79      	ldr	r3, [pc, #484]	; (8005160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 030c 	and.w	r3, r3, #12
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d00d      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	f200 80e1 	bhi.w	800514c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x34>
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d003      	beq.n	8004f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004f92:	e0db      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f94:	4b73      	ldr	r3, [pc, #460]	; (8005164 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f98:	e0db      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f9a:	4b73      	ldr	r3, [pc, #460]	; (8005168 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f9e:	e0d8      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa0:	4b6f      	ldr	r3, [pc, #444]	; (8005160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004faa:	4b6d      	ldr	r3, [pc, #436]	; (8005160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d063      	beq.n	800507e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb6:	4b6a      	ldr	r3, [pc, #424]	; (8005160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	099b      	lsrs	r3, r3, #6
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8004fca:	2300      	movs	r3, #0
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fd2:	4622      	mov	r2, r4
 8004fd4:	462b      	mov	r3, r5
 8004fd6:	f04f 0000 	mov.w	r0, #0
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	0159      	lsls	r1, r3, #5
 8004fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe4:	0150      	lsls	r0, r2, #5
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4621      	mov	r1, r4
 8004fec:	1a51      	subs	r1, r2, r1
 8004fee:	6139      	str	r1, [r7, #16]
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005004:	4659      	mov	r1, fp
 8005006:	018b      	lsls	r3, r1, #6
 8005008:	4651      	mov	r1, sl
 800500a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800500e:	4651      	mov	r1, sl
 8005010:	018a      	lsls	r2, r1, #6
 8005012:	4651      	mov	r1, sl
 8005014:	ebb2 0801 	subs.w	r8, r2, r1
 8005018:	4659      	mov	r1, fp
 800501a:	eb63 0901 	sbc.w	r9, r3, r1
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800502a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800502e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005032:	4690      	mov	r8, r2
 8005034:	4699      	mov	r9, r3
 8005036:	4623      	mov	r3, r4
 8005038:	eb18 0303 	adds.w	r3, r8, r3
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	462b      	mov	r3, r5
 8005040:	eb49 0303 	adc.w	r3, r9, r3
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005052:	4629      	mov	r1, r5
 8005054:	024b      	lsls	r3, r1, #9
 8005056:	4621      	mov	r1, r4
 8005058:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800505c:	4621      	mov	r1, r4
 800505e:	024a      	lsls	r2, r1, #9
 8005060:	4610      	mov	r0, r2
 8005062:	4619      	mov	r1, r3
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	2200      	movs	r2, #0
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
 800506a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800506c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005070:	f7fb f936 	bl	80002e0 <__aeabi_uldivmod>
 8005074:	4602      	mov	r2, r0
 8005076:	460b      	mov	r3, r1
 8005078:	4613      	mov	r3, r2
 800507a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800507c:	e058      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800507e:	4b38      	ldr	r3, [pc, #224]	; (8005160 <HAL_RCC_GetSysClockFreq+0x200>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	099b      	lsrs	r3, r3, #6
 8005084:	2200      	movs	r2, #0
 8005086:	4618      	mov	r0, r3
 8005088:	4611      	mov	r1, r2
 800508a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800508e:	623b      	str	r3, [r7, #32]
 8005090:	2300      	movs	r3, #0
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
 8005094:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005098:	4642      	mov	r2, r8
 800509a:	464b      	mov	r3, r9
 800509c:	f04f 0000 	mov.w	r0, #0
 80050a0:	f04f 0100 	mov.w	r1, #0
 80050a4:	0159      	lsls	r1, r3, #5
 80050a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050aa:	0150      	lsls	r0, r2, #5
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4641      	mov	r1, r8
 80050b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80050b6:	4649      	mov	r1, r9
 80050b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050d0:	ebb2 040a 	subs.w	r4, r2, sl
 80050d4:	eb63 050b 	sbc.w	r5, r3, fp
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	00eb      	lsls	r3, r5, #3
 80050e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e6:	00e2      	lsls	r2, r4, #3
 80050e8:	4614      	mov	r4, r2
 80050ea:	461d      	mov	r5, r3
 80050ec:	4643      	mov	r3, r8
 80050ee:	18e3      	adds	r3, r4, r3
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	464b      	mov	r3, r9
 80050f4:	eb45 0303 	adc.w	r3, r5, r3
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005106:	4629      	mov	r1, r5
 8005108:	028b      	lsls	r3, r1, #10
 800510a:	4621      	mov	r1, r4
 800510c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005110:	4621      	mov	r1, r4
 8005112:	028a      	lsls	r2, r1, #10
 8005114:	4610      	mov	r0, r2
 8005116:	4619      	mov	r1, r3
 8005118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511a:	2200      	movs	r2, #0
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	61fa      	str	r2, [r7, #28]
 8005120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005124:	f7fb f8dc 	bl	80002e0 <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4613      	mov	r3, r2
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_GetSysClockFreq+0x200>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	3301      	adds	r3, #1
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800514a:	e002      	b.n	8005152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800514c:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_RCC_GetSysClockFreq+0x204>)
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005154:	4618      	mov	r0, r3
 8005156:	3750      	adds	r7, #80	; 0x50
 8005158:	46bd      	mov	sp, r7
 800515a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800515e:	bf00      	nop
 8005160:	40023800 	.word	0x40023800
 8005164:	00f42400 	.word	0x00f42400
 8005168:	007a1200 	.word	0x007a1200

0800516c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005170:	4b03      	ldr	r3, [pc, #12]	; (8005180 <HAL_RCC_GetHCLKFreq+0x14>)
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	2000000c 	.word	0x2000000c

08005184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005188:	f7ff fff0 	bl	800516c <HAL_RCC_GetHCLKFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0a9b      	lsrs	r3, r3, #10
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	4903      	ldr	r1, [pc, #12]	; (80051a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40023800 	.word	0x40023800
 80051a8:	08009398 	.word	0x08009398

080051ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051b0:	f7ff ffdc 	bl	800516c <HAL_RCC_GetHCLKFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0b5b      	lsrs	r3, r3, #13
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4903      	ldr	r1, [pc, #12]	; (80051d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800
 80051d0:	08009398 	.word	0x08009398

080051d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051fc:	4b69      	ldr	r3, [pc, #420]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4a68      	ldr	r2, [pc, #416]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005202:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005206:	6093      	str	r3, [r2, #8]
 8005208:	4b66      	ldr	r3, [pc, #408]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005210:	4964      	ldr	r1, [pc, #400]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800521e:	2301      	movs	r3, #1
 8005220:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d017      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800522e:	4b5d      	ldr	r3, [pc, #372]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	4959      	ldr	r1, [pc, #356]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524c:	d101      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800524e:	2301      	movs	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800525a:	2301      	movs	r3, #1
 800525c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d017      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800526a:	4b4e      	ldr	r3, [pc, #312]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	494a      	ldr	r1, [pc, #296]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005288:	d101      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800528a:	2301      	movs	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80052a6:	2301      	movs	r3, #1
 80052a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 808b 	beq.w	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052b8:	4b3a      	ldr	r3, [pc, #232]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	4a39      	ldr	r2, [pc, #228]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c2:	6413      	str	r3, [r2, #64]	; 0x40
 80052c4:	4b37      	ldr	r3, [pc, #220]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052d0:	4b35      	ldr	r3, [pc, #212]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a34      	ldr	r2, [pc, #208]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052dc:	f7fd fe70 	bl	8002fc0 <HAL_GetTick>
 80052e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e4:	f7fd fe6c 	bl	8002fc0 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e38f      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052f6:	4b2c      	ldr	r3, [pc, #176]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005302:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d035      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	429a      	cmp	r2, r3
 800531e:	d02e      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005320:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005328:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800532a:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005334:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005336:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005340:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005342:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005348:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d114      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fd fe34 	bl	8002fc0 <HAL_GetTick>
 8005358:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535a:	e00a      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fd fe30 	bl	8002fc0 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	; 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e351      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0ee      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800538a:	d111      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800539a:	400b      	ands	r3, r1
 800539c:	4901      	ldr	r1, [pc, #4]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
 80053a2:	e00b      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40007000 	.word	0x40007000
 80053ac:	0ffffcff 	.word	0x0ffffcff
 80053b0:	4bac      	ldr	r3, [pc, #688]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4aab      	ldr	r2, [pc, #684]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053ba:	6093      	str	r3, [r2, #8]
 80053bc:	4ba9      	ldr	r3, [pc, #676]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c8:	49a6      	ldr	r1, [pc, #664]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053da:	4ba2      	ldr	r3, [pc, #648]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e0:	4aa0      	ldr	r2, [pc, #640]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053ea:	4b9e      	ldr	r3, [pc, #632]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	499b      	ldr	r1, [pc, #620]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005408:	4b96      	ldr	r3, [pc, #600]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005416:	4993      	ldr	r1, [pc, #588]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800542a:	4b8e      	ldr	r3, [pc, #568]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005438:	498a      	ldr	r1, [pc, #552]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800544c:	4b85      	ldr	r3, [pc, #532]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800545a:	4982      	ldr	r1, [pc, #520]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800546e:	4b7d      	ldr	r3, [pc, #500]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	4979      	ldr	r1, [pc, #484]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005490:	4b74      	ldr	r3, [pc, #464]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005496:	f023 0203 	bic.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	4971      	ldr	r1, [pc, #452]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054b2:	4b6c      	ldr	r3, [pc, #432]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b8:	f023 020c 	bic.w	r2, r3, #12
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c0:	4968      	ldr	r1, [pc, #416]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054d4:	4b63      	ldr	r3, [pc, #396]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e2:	4960      	ldr	r1, [pc, #384]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054f6:	4b5b      	ldr	r3, [pc, #364]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005504:	4957      	ldr	r1, [pc, #348]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005518:	4b52      	ldr	r3, [pc, #328]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005526:	494f      	ldr	r1, [pc, #316]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800553a:	4b4a      	ldr	r3, [pc, #296]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005540:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005548:	4946      	ldr	r1, [pc, #280]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800555c:	4b41      	ldr	r3, [pc, #260]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556a:	493e      	ldr	r1, [pc, #248]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800557e:	4b39      	ldr	r3, [pc, #228]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005584:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	4935      	ldr	r1, [pc, #212]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055a0:	4b30      	ldr	r3, [pc, #192]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ae:	492d      	ldr	r1, [pc, #180]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d011      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055c2:	4b28      	ldr	r3, [pc, #160]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d0:	4924      	ldr	r1, [pc, #144]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055e0:	d101      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80055f2:	2301      	movs	r3, #1
 80055f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005602:	4b18      	ldr	r3, [pc, #96]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005610:	4914      	ldr	r1, [pc, #80]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005624:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005634:	490b      	ldr	r1, [pc, #44]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00f      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005658:	4902      	ldr	r1, [pc, #8]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005660:	e002      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005662:	bf00      	nop
 8005664:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005674:	4b8a      	ldr	r3, [pc, #552]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800567a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005684:	4986      	ldr	r1, [pc, #536]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00b      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005698:	4b81      	ldr	r3, [pc, #516]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800569a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800569e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a8:	497d      	ldr	r1, [pc, #500]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d006      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80d6 	beq.w	8005870 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056c4:	4b76      	ldr	r3, [pc, #472]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a75      	ldr	r2, [pc, #468]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d0:	f7fd fc76 	bl	8002fc0 <HAL_GetTick>
 80056d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056d8:	f7fd fc72 	bl	8002fc0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	; 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e195      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056ea:	4b6d      	ldr	r3, [pc, #436]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d021      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	2b00      	cmp	r3, #0
 8005708:	d11d      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800570a:	4b65      	ldr	r3, [pc, #404]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800570c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005710:	0c1b      	lsrs	r3, r3, #16
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005718:	4b61      	ldr	r3, [pc, #388]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800571a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571e:	0e1b      	lsrs	r3, r3, #24
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	019a      	lsls	r2, r3, #6
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	041b      	lsls	r3, r3, #16
 8005730:	431a      	orrs	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	061b      	lsls	r3, r3, #24
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	071b      	lsls	r3, r3, #28
 800573e:	4958      	ldr	r1, [pc, #352]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d004      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005764:	2b00      	cmp	r3, #0
 8005766:	d02e      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005770:	d129      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005772:	4b4b      	ldr	r3, [pc, #300]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005780:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005786:	0f1b      	lsrs	r3, r3, #28
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	019a      	lsls	r2, r3, #6
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	041b      	lsls	r3, r3, #16
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	061b      	lsls	r3, r3, #24
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	071b      	lsls	r3, r3, #28
 80057a6:	493e      	ldr	r1, [pc, #248]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057ae:	4b3c      	ldr	r3, [pc, #240]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b4:	f023 021f 	bic.w	r2, r3, #31
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	3b01      	subs	r3, #1
 80057be:	4938      	ldr	r1, [pc, #224]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01d      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80057d2:	4b33      	ldr	r3, [pc, #204]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d8:	0e1b      	lsrs	r3, r3, #24
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057e0:	4b2f      	ldr	r3, [pc, #188]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e6:	0f1b      	lsrs	r3, r3, #28
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	019a      	lsls	r2, r3, #6
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	041b      	lsls	r3, r3, #16
 80057fa:	431a      	orrs	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	061b      	lsls	r3, r3, #24
 8005800:	431a      	orrs	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	071b      	lsls	r3, r3, #28
 8005806:	4926      	ldr	r1, [pc, #152]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d011      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	019a      	lsls	r2, r3, #6
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	041b      	lsls	r3, r3, #16
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	061b      	lsls	r3, r3, #24
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	071b      	lsls	r3, r3, #28
 8005836:	491a      	ldr	r1, [pc, #104]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584a:	f7fd fbb9 	bl	8002fc0 <HAL_GetTick>
 800584e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005852:	f7fd fbb5 	bl	8002fc0 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b64      	cmp	r3, #100	; 0x64
 800585e:	d901      	bls.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e0d8      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005864:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2b01      	cmp	r3, #1
 8005874:	f040 80ce 	bne.w	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005878:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800587e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005884:	f7fd fb9c 	bl	8002fc0 <HAL_GetTick>
 8005888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800588a:	e00b      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800588c:	f7fd fb98 	bl	8002fc0 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	; 0x64
 8005898:	d904      	bls.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e0bb      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058a4:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058b0:	d0ec      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d02e      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d12a      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058da:	4b51      	ldr	r3, [pc, #324]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058e8:	4b4d      	ldr	r3, [pc, #308]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	0f1b      	lsrs	r3, r3, #28
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	019a      	lsls	r2, r3, #6
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	061b      	lsls	r3, r3, #24
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	071b      	lsls	r3, r3, #28
 800590e:	4944      	ldr	r1, [pc, #272]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005916:	4b42      	ldr	r3, [pc, #264]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800591c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	3b01      	subs	r3, #1
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	493d      	ldr	r1, [pc, #244]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d022      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005944:	d11d      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005946:	4b36      	ldr	r3, [pc, #216]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	0e1b      	lsrs	r3, r3, #24
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005954:	4b32      	ldr	r3, [pc, #200]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595a:	0f1b      	lsrs	r3, r3, #28
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	019a      	lsls	r2, r3, #6
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	041b      	lsls	r3, r3, #16
 800596e:	431a      	orrs	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	061b      	lsls	r3, r3, #24
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	071b      	lsls	r3, r3, #28
 800597a:	4929      	ldr	r1, [pc, #164]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d028      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800598e:	4b24      	ldr	r3, [pc, #144]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	0e1b      	lsrs	r3, r3, #24
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800599c:	4b20      	ldr	r3, [pc, #128]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	0c1b      	lsrs	r3, r3, #16
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	019a      	lsls	r2, r3, #6
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	431a      	orrs	r2, r3
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	061b      	lsls	r3, r3, #24
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	071b      	lsls	r3, r3, #28
 80059c2:	4917      	ldr	r1, [pc, #92]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80059ca:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	4911      	ldr	r1, [pc, #68]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059e0:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a0e      	ldr	r2, [pc, #56]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ec:	f7fd fae8 	bl	8002fc0 <HAL_GetTick>
 80059f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059f2:	e008      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059f4:	f7fd fae4 	bl	8002fc0 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b64      	cmp	r3, #100	; 0x64
 8005a00:	d901      	bls.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e007      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a12:	d1ef      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40023800 	.word	0x40023800

08005a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e09d      	b.n	8005b72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d108      	bne.n	8005a50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a46:	d009      	beq.n	8005a5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	61da      	str	r2, [r3, #28]
 8005a4e:	e005      	b.n	8005a5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fc fd02 	bl	8002480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a9c:	d902      	bls.n	8005aa4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e002      	b.n	8005aaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aa8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ab2:	d007      	beq.n	8005ac4 <HAL_SPI_Init+0xa0>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005abc:	d002      	beq.n	8005ac4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	ea42 0103 	orr.w	r1, r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	0c1b      	lsrs	r3, r3, #16
 8005b20:	f003 0204 	and.w	r2, r3, #4
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b40:	ea42 0103 	orr.w	r1, r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e049      	b.n	8005c20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fc fced 	bl	8002580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f001 f831 	bl	8006c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d001      	beq.n	8005c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e054      	b.n	8005cea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a26      	ldr	r2, [pc, #152]	; (8005cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d022      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0x80>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6a:	d01d      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0x80>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a22      	ldr	r2, [pc, #136]	; (8005cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d018      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0x80>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a21      	ldr	r2, [pc, #132]	; (8005d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d013      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0x80>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00e      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0x80>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1e      	ldr	r2, [pc, #120]	; (8005d08 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d009      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0x80>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_TIM_Base_Start_IT+0xe4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0x80>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d115      	bne.n	8005cd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <HAL_TIM_Base_Start_IT+0xec>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b06      	cmp	r3, #6
 8005cb8:	d015      	beq.n	8005ce6 <HAL_TIM_Base_Start_IT+0xbe>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc0:	d011      	beq.n	8005ce6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f042 0201 	orr.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd2:	e008      	b.n	8005ce6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e000      	b.n	8005ce8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800
 8005d04:	40000c00 	.word	0x40000c00
 8005d08:	40010400 	.word	0x40010400
 8005d0c:	40014000 	.word	0x40014000
 8005d10:	40001800 	.word	0x40001800
 8005d14:	00010007 	.word	0x00010007

08005d18 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e049      	b.n	8005dbe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f841 	bl	8005dc6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f000 ff62 	bl	8006c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e049      	b.n	8005e80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fc fccd 	bl	80027a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f000 ff01 	bl	8006c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <HAL_TIM_PWM_Start+0x24>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	e03c      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d109      	bne.n	8005ec6 <HAL_TIM_PWM_Start+0x3e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	bf14      	ite	ne
 8005ebe:	2301      	movne	r3, #1
 8005ec0:	2300      	moveq	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e02f      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d109      	bne.n	8005ee0 <HAL_TIM_PWM_Start+0x58>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	bf14      	ite	ne
 8005ed8:	2301      	movne	r3, #1
 8005eda:	2300      	moveq	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	e022      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d109      	bne.n	8005efa <HAL_TIM_PWM_Start+0x72>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	bf14      	ite	ne
 8005ef2:	2301      	movne	r3, #1
 8005ef4:	2300      	moveq	r3, #0
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	e015      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d109      	bne.n	8005f14 <HAL_TIM_PWM_Start+0x8c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	bf14      	ite	ne
 8005f0c:	2301      	movne	r3, #1
 8005f0e:	2300      	moveq	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	e008      	b.n	8005f26 <HAL_TIM_PWM_Start+0x9e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e092      	b.n	8006054 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <HAL_TIM_PWM_Start+0xb6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f3c:	e023      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d104      	bne.n	8005f4e <HAL_TIM_PWM_Start+0xc6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4c:	e01b      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d104      	bne.n	8005f5e <HAL_TIM_PWM_Start+0xd6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f5c:	e013      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b0c      	cmp	r3, #12
 8005f62:	d104      	bne.n	8005f6e <HAL_TIM_PWM_Start+0xe6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f6c:	e00b      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_PWM_Start+0xf6>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f7c:	e003      	b.n	8005f86 <HAL_TIM_PWM_Start+0xfe>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fb08 	bl	80075a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a30      	ldr	r2, [pc, #192]	; (800605c <HAL_TIM_PWM_Start+0x1d4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIM_PWM_Start+0x120>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2f      	ldr	r2, [pc, #188]	; (8006060 <HAL_TIM_PWM_Start+0x1d8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d101      	bne.n	8005fac <HAL_TIM_PWM_Start+0x124>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <HAL_TIM_PWM_Start+0x126>
 8005fac:	2300      	movs	r3, #0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a25      	ldr	r2, [pc, #148]	; (800605c <HAL_TIM_PWM_Start+0x1d4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d022      	beq.n	8006012 <HAL_TIM_PWM_Start+0x18a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d01d      	beq.n	8006012 <HAL_TIM_PWM_Start+0x18a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a22      	ldr	r2, [pc, #136]	; (8006064 <HAL_TIM_PWM_Start+0x1dc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d018      	beq.n	8006012 <HAL_TIM_PWM_Start+0x18a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a20      	ldr	r2, [pc, #128]	; (8006068 <HAL_TIM_PWM_Start+0x1e0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_TIM_PWM_Start+0x18a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1f      	ldr	r2, [pc, #124]	; (800606c <HAL_TIM_PWM_Start+0x1e4>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIM_PWM_Start+0x18a>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a19      	ldr	r2, [pc, #100]	; (8006060 <HAL_TIM_PWM_Start+0x1d8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIM_PWM_Start+0x18a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1b      	ldr	r2, [pc, #108]	; (8006070 <HAL_TIM_PWM_Start+0x1e8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIM_PWM_Start+0x18a>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_TIM_PWM_Start+0x1ec>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d115      	bne.n	800603e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	4b17      	ldr	r3, [pc, #92]	; (8006078 <HAL_TIM_PWM_Start+0x1f0>)
 800601a:	4013      	ands	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b06      	cmp	r3, #6
 8006022:	d015      	beq.n	8006050 <HAL_TIM_PWM_Start+0x1c8>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602a:	d011      	beq.n	8006050 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603c:	e008      	b.n	8006050 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e000      	b.n	8006052 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006050:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40010000 	.word	0x40010000
 8006060:	40010400 	.word	0x40010400
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40014000 	.word	0x40014000
 8006074:	40001800 	.word	0x40001800
 8006078:	00010007 	.word	0x00010007

0800607c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e049      	b.n	8006122 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f841 	bl	800612a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f000 fdb0 	bl	8006c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e08f      	b.n	8006274 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d106      	bne.n	800616e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fc faa3 	bl	80026b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6899      	ldr	r1, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	4b3e      	ldr	r3, [pc, #248]	; (800627c <HAL_TIM_Encoder_Init+0x13c>)
 8006182:	400b      	ands	r3, r1
 8006184:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3304      	adds	r3, #4
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f000 fd45 	bl	8006c20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4b31      	ldr	r3, [pc, #196]	; (8006280 <HAL_TIM_Encoder_Init+0x140>)
 80061bc:	4013      	ands	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	4313      	orrs	r3, r2
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <HAL_TIM_Encoder_Init+0x144>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4b2a      	ldr	r3, [pc, #168]	; (8006288 <HAL_TIM_Encoder_Init+0x148>)
 80061de:	4013      	ands	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	4313      	orrs	r3, r2
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	011a      	lsls	r2, r3, #4
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	031b      	lsls	r3, r3, #12
 8006200:	4313      	orrs	r3, r2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	4313      	orrs	r3, r2
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	fffebff8 	.word	0xfffebff8
 8006280:	fffffcfc 	.word	0xfffffcfc
 8006284:	fffff3f3 	.word	0xfffff3f3
 8006288:	ffff0f0f 	.word	0xffff0f0f

0800628c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800629c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d110      	bne.n	80062de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d102      	bne.n	80062c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80062c2:	7b7b      	ldrb	r3, [r7, #13]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d001      	beq.n	80062cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e069      	b.n	80063a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062dc:	e031      	b.n	8006342 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d110      	bne.n	8006306 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d102      	bne.n	80062f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062ea:	7b3b      	ldrb	r3, [r7, #12]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d001      	beq.n	80062f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e055      	b.n	80063a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006304:	e01d      	b.n	8006342 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d108      	bne.n	800631e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d105      	bne.n	800631e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006312:	7b7b      	ldrb	r3, [r7, #13]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d102      	bne.n	800631e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006318:	7b3b      	ldrb	r3, [r7, #12]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d001      	beq.n	8006322 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e03e      	b.n	80063a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2202      	movs	r2, #2
 800632e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2202      	movs	r2, #2
 800633e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_TIM_Encoder_Start+0xc4>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b04      	cmp	r3, #4
 800634c:	d008      	beq.n	8006360 <HAL_TIM_Encoder_Start+0xd4>
 800634e:	e00f      	b.n	8006370 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2201      	movs	r2, #1
 8006356:	2100      	movs	r1, #0
 8006358:	4618      	mov	r0, r3
 800635a:	f001 f923 	bl	80075a4 <TIM_CCxChannelCmd>
      break;
 800635e:	e016      	b.n	800638e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2201      	movs	r2, #1
 8006366:	2104      	movs	r1, #4
 8006368:	4618      	mov	r0, r3
 800636a:	f001 f91b 	bl	80075a4 <TIM_CCxChannelCmd>
      break;
 800636e:	e00e      	b.n	800638e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2201      	movs	r2, #1
 8006376:	2100      	movs	r1, #0
 8006378:	4618      	mov	r0, r3
 800637a:	f001 f913 	bl	80075a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2201      	movs	r2, #1
 8006384:	2104      	movs	r1, #4
 8006386:	4618      	mov	r0, r3
 8006388:	f001 f90c 	bl	80075a4 <TIM_CCxChannelCmd>
      break;
 800638c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d122      	bne.n	8006404 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d11b      	bne.n	8006404 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0202 	mvn.w	r2, #2
 80063d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fbfa 	bl	8006be4 <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fbec 	bl	8006bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fbfd 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b04      	cmp	r3, #4
 8006410:	d122      	bne.n	8006458 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b04      	cmp	r3, #4
 800641e:	d11b      	bne.n	8006458 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0204 	mvn.w	r2, #4
 8006428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fbd0 	bl	8006be4 <HAL_TIM_IC_CaptureCallback>
 8006444:	e005      	b.n	8006452 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fbc2 	bl	8006bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fbd3 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b08      	cmp	r3, #8
 8006464:	d122      	bne.n	80064ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 0308 	and.w	r3, r3, #8
 8006470:	2b08      	cmp	r3, #8
 8006472:	d11b      	bne.n	80064ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0208 	mvn.w	r2, #8
 800647c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2204      	movs	r2, #4
 8006482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fba6 	bl	8006be4 <HAL_TIM_IC_CaptureCallback>
 8006498:	e005      	b.n	80064a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fb98 	bl	8006bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fba9 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b10      	cmp	r3, #16
 80064b8:	d122      	bne.n	8006500 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d11b      	bne.n	8006500 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0210 	mvn.w	r2, #16
 80064d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2208      	movs	r2, #8
 80064d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fb7c 	bl	8006be4 <HAL_TIM_IC_CaptureCallback>
 80064ec:	e005      	b.n	80064fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fb6e 	bl	8006bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fb7f 	bl	8006bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b01      	cmp	r3, #1
 800650c:	d10e      	bne.n	800652c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d107      	bne.n	800652c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0201 	mvn.w	r2, #1
 8006524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fa faa6 	bl	8000a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006536:	2b80      	cmp	r3, #128	; 0x80
 8006538:	d10e      	bne.n	8006558 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006544:	2b80      	cmp	r3, #128	; 0x80
 8006546:	d107      	bne.n	8006558 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 f962 	bl	800781c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006566:	d10e      	bne.n	8006586 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d107      	bne.n	8006586 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800657e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 f955 	bl	8007830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	d10e      	bne.n	80065b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d107      	bne.n	80065b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fb2d 	bl	8006c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d10e      	bne.n	80065de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d107      	bne.n	80065de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f06f 0220 	mvn.w	r2, #32
 80065d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f915 	bl	8007808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006602:	2302      	movs	r3, #2
 8006604:	e066      	b.n	80066d4 <HAL_TIM_OC_ConfigChannel+0xec>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b14      	cmp	r3, #20
 8006612:	d857      	bhi.n	80066c4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006671 	.word	0x08006671
 8006620:	080066c5 	.word	0x080066c5
 8006624:	080066c5 	.word	0x080066c5
 8006628:	080066c5 	.word	0x080066c5
 800662c:	0800667f 	.word	0x0800667f
 8006630:	080066c5 	.word	0x080066c5
 8006634:	080066c5 	.word	0x080066c5
 8006638:	080066c5 	.word	0x080066c5
 800663c:	0800668d 	.word	0x0800668d
 8006640:	080066c5 	.word	0x080066c5
 8006644:	080066c5 	.word	0x080066c5
 8006648:	080066c5 	.word	0x080066c5
 800664c:	0800669b 	.word	0x0800669b
 8006650:	080066c5 	.word	0x080066c5
 8006654:	080066c5 	.word	0x080066c5
 8006658:	080066c5 	.word	0x080066c5
 800665c:	080066a9 	.word	0x080066a9
 8006660:	080066c5 	.word	0x080066c5
 8006664:	080066c5 	.word	0x080066c5
 8006668:	080066c5 	.word	0x080066c5
 800666c:	080066b7 	.word	0x080066b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fb72 	bl	8006d60 <TIM_OC1_SetConfig>
      break;
 800667c:	e025      	b.n	80066ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fbdd 	bl	8006e44 <TIM_OC2_SetConfig>
      break;
 800668a:	e01e      	b.n	80066ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fc4e 	bl	8006f34 <TIM_OC3_SetConfig>
      break;
 8006698:	e017      	b.n	80066ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fcbd 	bl	8007020 <TIM_OC4_SetConfig>
      break;
 80066a6:	e010      	b.n	80066ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fd0e 	bl	80070d0 <TIM_OC5_SetConfig>
      break;
 80066b4:	e009      	b.n	80066ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fd59 	bl	8007174 <TIM_OC6_SetConfig>
      break;
 80066c2:	e002      	b.n	80066ca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
      break;
 80066c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_TIM_IC_ConfigChannel+0x1e>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e088      	b.n	800680c <HAL_TIM_IC_ConfigChannel+0x130>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d11b      	bne.n	8006740 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6818      	ldr	r0, [r3, #0]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	6819      	ldr	r1, [r3, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f000 fd80 	bl	800721c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699a      	ldr	r2, [r3, #24]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 020c 	bic.w	r2, r2, #12
 800672a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6999      	ldr	r1, [r3, #24]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	619a      	str	r2, [r3, #24]
 800673e:	e060      	b.n	8006802 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b04      	cmp	r3, #4
 8006744:	d11c      	bne.n	8006780 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	6819      	ldr	r1, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f000 fe04 	bl	8007362 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006768:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6999      	ldr	r1, [r3, #24]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	021a      	lsls	r2, r3, #8
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	619a      	str	r2, [r3, #24]
 800677e:	e040      	b.n	8006802 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b08      	cmp	r3, #8
 8006784:	d11b      	bne.n	80067be <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6819      	ldr	r1, [r3, #0]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f000 fe51 	bl	800743c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69da      	ldr	r2, [r3, #28]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 020c 	bic.w	r2, r2, #12
 80067a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69d9      	ldr	r1, [r3, #28]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	61da      	str	r2, [r3, #28]
 80067bc:	e021      	b.n	8006802 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d11c      	bne.n	80067fe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6819      	ldr	r1, [r3, #0]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f000 fe6e 	bl	80074b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69da      	ldr	r2, [r3, #28]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067e6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69d9      	ldr	r1, [r3, #28]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	61da      	str	r2, [r3, #28]
 80067fc:	e001      	b.n	8006802 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800682e:	2302      	movs	r3, #2
 8006830:	e0ff      	b.n	8006a32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b14      	cmp	r3, #20
 800683e:	f200 80f0 	bhi.w	8006a22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	0800689d 	.word	0x0800689d
 800684c:	08006a23 	.word	0x08006a23
 8006850:	08006a23 	.word	0x08006a23
 8006854:	08006a23 	.word	0x08006a23
 8006858:	080068dd 	.word	0x080068dd
 800685c:	08006a23 	.word	0x08006a23
 8006860:	08006a23 	.word	0x08006a23
 8006864:	08006a23 	.word	0x08006a23
 8006868:	0800691f 	.word	0x0800691f
 800686c:	08006a23 	.word	0x08006a23
 8006870:	08006a23 	.word	0x08006a23
 8006874:	08006a23 	.word	0x08006a23
 8006878:	0800695f 	.word	0x0800695f
 800687c:	08006a23 	.word	0x08006a23
 8006880:	08006a23 	.word	0x08006a23
 8006884:	08006a23 	.word	0x08006a23
 8006888:	080069a1 	.word	0x080069a1
 800688c:	08006a23 	.word	0x08006a23
 8006890:	08006a23 	.word	0x08006a23
 8006894:	08006a23 	.word	0x08006a23
 8006898:	080069e1 	.word	0x080069e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fa5c 	bl	8006d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0208 	orr.w	r2, r2, #8
 80068b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0204 	bic.w	r2, r2, #4
 80068c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6999      	ldr	r1, [r3, #24]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	691a      	ldr	r2, [r3, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	619a      	str	r2, [r3, #24]
      break;
 80068da:	e0a5      	b.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 faae 	bl	8006e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6999      	ldr	r1, [r3, #24]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	021a      	lsls	r2, r3, #8
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	619a      	str	r2, [r3, #24]
      break;
 800691c:	e084      	b.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fb05 	bl	8006f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0208 	orr.w	r2, r2, #8
 8006938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0204 	bic.w	r2, r2, #4
 8006948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69d9      	ldr	r1, [r3, #28]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	61da      	str	r2, [r3, #28]
      break;
 800695c:	e064      	b.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fb5b 	bl	8007020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69d9      	ldr	r1, [r3, #28]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	021a      	lsls	r2, r3, #8
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	61da      	str	r2, [r3, #28]
      break;
 800699e:	e043      	b.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fb92 	bl	80070d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0208 	orr.w	r2, r2, #8
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0204 	bic.w	r2, r2, #4
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069de:	e023      	b.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fbc4 	bl	8007174 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	021a      	lsls	r2, r3, #8
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a20:	e002      	b.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
      break;
 8006a26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop

08006a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d101      	bne.n	8006a58 <HAL_TIM_ConfigClockSource+0x1c>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e0b4      	b.n	8006bc2 <HAL_TIM_ConfigClockSource+0x186>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	4b56      	ldr	r3, [pc, #344]	; (8006bcc <HAL_TIM_ConfigClockSource+0x190>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a90:	d03e      	beq.n	8006b10 <HAL_TIM_ConfigClockSource+0xd4>
 8006a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a96:	f200 8087 	bhi.w	8006ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9e:	f000 8086 	beq.w	8006bae <HAL_TIM_ConfigClockSource+0x172>
 8006aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa6:	d87f      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa8:	2b70      	cmp	r3, #112	; 0x70
 8006aaa:	d01a      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0xa6>
 8006aac:	2b70      	cmp	r3, #112	; 0x70
 8006aae:	d87b      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab0:	2b60      	cmp	r3, #96	; 0x60
 8006ab2:	d050      	beq.n	8006b56 <HAL_TIM_ConfigClockSource+0x11a>
 8006ab4:	2b60      	cmp	r3, #96	; 0x60
 8006ab6:	d877      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab8:	2b50      	cmp	r3, #80	; 0x50
 8006aba:	d03c      	beq.n	8006b36 <HAL_TIM_ConfigClockSource+0xfa>
 8006abc:	2b50      	cmp	r3, #80	; 0x50
 8006abe:	d873      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d058      	beq.n	8006b76 <HAL_TIM_ConfigClockSource+0x13a>
 8006ac4:	2b40      	cmp	r3, #64	; 0x40
 8006ac6:	d86f      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac8:	2b30      	cmp	r3, #48	; 0x30
 8006aca:	d064      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x15a>
 8006acc:	2b30      	cmp	r3, #48	; 0x30
 8006ace:	d86b      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d060      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x15a>
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	d867      	bhi.n	8006ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d05c      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x15a>
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	d05a      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x15a>
 8006ae0:	e062      	b.n	8006ba8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6899      	ldr	r1, [r3, #8]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f000 fd37 	bl	8007564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	609a      	str	r2, [r3, #8]
      break;
 8006b0e:	e04f      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	6899      	ldr	r1, [r3, #8]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f000 fd20 	bl	8007564 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689a      	ldr	r2, [r3, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b32:	609a      	str	r2, [r3, #8]
      break;
 8006b34:	e03c      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	6859      	ldr	r1, [r3, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f000 fbde 	bl	8007304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2150      	movs	r1, #80	; 0x50
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fced 	bl	800752e <TIM_ITRx_SetConfig>
      break;
 8006b54:	e02c      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6859      	ldr	r1, [r3, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	461a      	mov	r2, r3
 8006b64:	f000 fc3a 	bl	80073dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2160      	movs	r1, #96	; 0x60
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fcdd 	bl	800752e <TIM_ITRx_SetConfig>
      break;
 8006b74:	e01c      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6859      	ldr	r1, [r3, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	461a      	mov	r2, r3
 8006b84:	f000 fbbe 	bl	8007304 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2140      	movs	r1, #64	; 0x40
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fccd 	bl	800752e <TIM_ITRx_SetConfig>
      break;
 8006b94:	e00c      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f000 fcc4 	bl	800752e <TIM_ITRx_SetConfig>
      break;
 8006ba6:	e003      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]
      break;
 8006bac:	e000      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	fffeff88 	.word	0xfffeff88

08006bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a40      	ldr	r2, [pc, #256]	; (8006d34 <TIM_Base_SetConfig+0x114>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d013      	beq.n	8006c60 <TIM_Base_SetConfig+0x40>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3e:	d00f      	beq.n	8006c60 <TIM_Base_SetConfig+0x40>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a3d      	ldr	r2, [pc, #244]	; (8006d38 <TIM_Base_SetConfig+0x118>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00b      	beq.n	8006c60 <TIM_Base_SetConfig+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a3c      	ldr	r2, [pc, #240]	; (8006d3c <TIM_Base_SetConfig+0x11c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d007      	beq.n	8006c60 <TIM_Base_SetConfig+0x40>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a3b      	ldr	r2, [pc, #236]	; (8006d40 <TIM_Base_SetConfig+0x120>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d003      	beq.n	8006c60 <TIM_Base_SetConfig+0x40>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a3a      	ldr	r2, [pc, #232]	; (8006d44 <TIM_Base_SetConfig+0x124>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d108      	bne.n	8006c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a2f      	ldr	r2, [pc, #188]	; (8006d34 <TIM_Base_SetConfig+0x114>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d02b      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c80:	d027      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a2c      	ldr	r2, [pc, #176]	; (8006d38 <TIM_Base_SetConfig+0x118>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d023      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a2b      	ldr	r2, [pc, #172]	; (8006d3c <TIM_Base_SetConfig+0x11c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d01f      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a2a      	ldr	r2, [pc, #168]	; (8006d40 <TIM_Base_SetConfig+0x120>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01b      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a29      	ldr	r2, [pc, #164]	; (8006d44 <TIM_Base_SetConfig+0x124>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d017      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a28      	ldr	r2, [pc, #160]	; (8006d48 <TIM_Base_SetConfig+0x128>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a27      	ldr	r2, [pc, #156]	; (8006d4c <TIM_Base_SetConfig+0x12c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00f      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a26      	ldr	r2, [pc, #152]	; (8006d50 <TIM_Base_SetConfig+0x130>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00b      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a25      	ldr	r2, [pc, #148]	; (8006d54 <TIM_Base_SetConfig+0x134>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d007      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a24      	ldr	r2, [pc, #144]	; (8006d58 <TIM_Base_SetConfig+0x138>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d003      	beq.n	8006cd2 <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a23      	ldr	r2, [pc, #140]	; (8006d5c <TIM_Base_SetConfig+0x13c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d108      	bne.n	8006ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a0a      	ldr	r2, [pc, #40]	; (8006d34 <TIM_Base_SetConfig+0x114>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <TIM_Base_SetConfig+0xf8>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a0c      	ldr	r2, [pc, #48]	; (8006d44 <TIM_Base_SetConfig+0x124>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d103      	bne.n	8006d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	615a      	str	r2, [r3, #20]
}
 8006d26:	bf00      	nop
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40000400 	.word	0x40000400
 8006d3c:	40000800 	.word	0x40000800
 8006d40:	40000c00 	.word	0x40000c00
 8006d44:	40010400 	.word	0x40010400
 8006d48:	40014000 	.word	0x40014000
 8006d4c:	40014400 	.word	0x40014400
 8006d50:	40014800 	.word	0x40014800
 8006d54:	40001800 	.word	0x40001800
 8006d58:	40001c00 	.word	0x40001c00
 8006d5c:	40002000 	.word	0x40002000

08006d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f023 0201 	bic.w	r2, r3, #1
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <TIM_OC1_SetConfig+0xd8>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f023 0302 	bic.w	r3, r3, #2
 8006da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a21      	ldr	r2, [pc, #132]	; (8006e3c <TIM_OC1_SetConfig+0xdc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d003      	beq.n	8006dc4 <TIM_OC1_SetConfig+0x64>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a20      	ldr	r2, [pc, #128]	; (8006e40 <TIM_OC1_SetConfig+0xe0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d10c      	bne.n	8006dde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f023 0308 	bic.w	r3, r3, #8
 8006dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 0304 	bic.w	r3, r3, #4
 8006ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a16      	ldr	r2, [pc, #88]	; (8006e3c <TIM_OC1_SetConfig+0xdc>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <TIM_OC1_SetConfig+0x8e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <TIM_OC1_SetConfig+0xe0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d111      	bne.n	8006e12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	621a      	str	r2, [r3, #32]
}
 8006e2c:	bf00      	nop
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	fffeff8f 	.word	0xfffeff8f
 8006e3c:	40010000 	.word	0x40010000
 8006e40:	40010400 	.word	0x40010400

08006e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0210 	bic.w	r2, r3, #16
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4b2e      	ldr	r3, [pc, #184]	; (8006f28 <TIM_OC2_SetConfig+0xe4>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f023 0320 	bic.w	r3, r3, #32
 8006e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a23      	ldr	r2, [pc, #140]	; (8006f2c <TIM_OC2_SetConfig+0xe8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <TIM_OC2_SetConfig+0x68>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a22      	ldr	r2, [pc, #136]	; (8006f30 <TIM_OC2_SetConfig+0xec>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d10d      	bne.n	8006ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a18      	ldr	r2, [pc, #96]	; (8006f2c <TIM_OC2_SetConfig+0xe8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC2_SetConfig+0x94>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a17      	ldr	r2, [pc, #92]	; (8006f30 <TIM_OC2_SetConfig+0xec>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d113      	bne.n	8006f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	621a      	str	r2, [r3, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	feff8fff 	.word	0xfeff8fff
 8006f2c:	40010000 	.word	0x40010000
 8006f30:	40010400 	.word	0x40010400

08006f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4b2d      	ldr	r3, [pc, #180]	; (8007014 <TIM_OC3_SetConfig+0xe0>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0303 	bic.w	r3, r3, #3
 8006f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	021b      	lsls	r3, r3, #8
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a22      	ldr	r2, [pc, #136]	; (8007018 <TIM_OC3_SetConfig+0xe4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_OC3_SetConfig+0x66>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a21      	ldr	r2, [pc, #132]	; (800701c <TIM_OC3_SetConfig+0xe8>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d10d      	bne.n	8006fb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a17      	ldr	r2, [pc, #92]	; (8007018 <TIM_OC3_SetConfig+0xe4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d003      	beq.n	8006fc6 <TIM_OC3_SetConfig+0x92>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a16      	ldr	r2, [pc, #88]	; (800701c <TIM_OC3_SetConfig+0xe8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d113      	bne.n	8006fee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	621a      	str	r2, [r3, #32]
}
 8007008:	bf00      	nop
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	fffeff8f 	.word	0xfffeff8f
 8007018:	40010000 	.word	0x40010000
 800701c:	40010400 	.word	0x40010400

08007020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4b1e      	ldr	r3, [pc, #120]	; (80070c4 <TIM_OC4_SetConfig+0xa4>)
 800704c:	4013      	ands	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800706a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	031b      	lsls	r3, r3, #12
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <TIM_OC4_SetConfig+0xa8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_OC4_SetConfig+0x68>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a12      	ldr	r2, [pc, #72]	; (80070cc <TIM_OC4_SetConfig+0xac>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d109      	bne.n	800709c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800708e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	019b      	lsls	r3, r3, #6
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	621a      	str	r2, [r3, #32]
}
 80070b6:	bf00      	nop
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	feff8fff 	.word	0xfeff8fff
 80070c8:	40010000 	.word	0x40010000
 80070cc:	40010400 	.word	0x40010400

080070d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4b1b      	ldr	r3, [pc, #108]	; (8007168 <TIM_OC5_SetConfig+0x98>)
 80070fc:	4013      	ands	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a12      	ldr	r2, [pc, #72]	; (800716c <TIM_OC5_SetConfig+0x9c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d003      	beq.n	800712e <TIM_OC5_SetConfig+0x5e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a11      	ldr	r2, [pc, #68]	; (8007170 <TIM_OC5_SetConfig+0xa0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d109      	bne.n	8007142 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007134:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	021b      	lsls	r3, r3, #8
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	621a      	str	r2, [r3, #32]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	fffeff8f 	.word	0xfffeff8f
 800716c:	40010000 	.word	0x40010000
 8007170:	40010400 	.word	0x40010400

08007174 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4b1c      	ldr	r3, [pc, #112]	; (8007210 <TIM_OC6_SetConfig+0x9c>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	051b      	lsls	r3, r3, #20
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a13      	ldr	r2, [pc, #76]	; (8007214 <TIM_OC6_SetConfig+0xa0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_OC6_SetConfig+0x60>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a12      	ldr	r2, [pc, #72]	; (8007218 <TIM_OC6_SetConfig+0xa4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d109      	bne.n	80071e8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	029b      	lsls	r3, r3, #10
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	feff8fff 	.word	0xfeff8fff
 8007214:	40010000 	.word	0x40010000
 8007218:	40010400 	.word	0x40010400

0800721c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0201 	bic.w	r2, r3, #1
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4a28      	ldr	r2, [pc, #160]	; (80072e8 <TIM_TI1_SetConfig+0xcc>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01b      	beq.n	8007282 <TIM_TI1_SetConfig+0x66>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007250:	d017      	beq.n	8007282 <TIM_TI1_SetConfig+0x66>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4a25      	ldr	r2, [pc, #148]	; (80072ec <TIM_TI1_SetConfig+0xd0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <TIM_TI1_SetConfig+0x66>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4a24      	ldr	r2, [pc, #144]	; (80072f0 <TIM_TI1_SetConfig+0xd4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00f      	beq.n	8007282 <TIM_TI1_SetConfig+0x66>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4a23      	ldr	r2, [pc, #140]	; (80072f4 <TIM_TI1_SetConfig+0xd8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00b      	beq.n	8007282 <TIM_TI1_SetConfig+0x66>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a22      	ldr	r2, [pc, #136]	; (80072f8 <TIM_TI1_SetConfig+0xdc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <TIM_TI1_SetConfig+0x66>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a21      	ldr	r2, [pc, #132]	; (80072fc <TIM_TI1_SetConfig+0xe0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_TI1_SetConfig+0x66>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a20      	ldr	r2, [pc, #128]	; (8007300 <TIM_TI1_SetConfig+0xe4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d101      	bne.n	8007286 <TIM_TI1_SetConfig+0x6a>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <TIM_TI1_SetConfig+0x6c>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d008      	beq.n	800729e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	e003      	b.n	80072a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f023 030a 	bic.w	r3, r3, #10
 80072c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f003 030a 	and.w	r3, r3, #10
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40000800 	.word	0x40000800
 80072f4:	40000c00 	.word	0x40000c00
 80072f8:	40010400 	.word	0x40010400
 80072fc:	40014000 	.word	0x40014000
 8007300:	40001800 	.word	0x40001800

08007304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	f023 0201 	bic.w	r2, r3, #1
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800732e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f023 030a 	bic.w	r3, r3, #10
 8007340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007362:	b480      	push	{r7}
 8007364:	b087      	sub	sp, #28
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	607a      	str	r2, [r7, #4]
 800736e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f023 0210 	bic.w	r2, r3, #16
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	031b      	lsls	r3, r3, #12
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	621a      	str	r2, [r3, #32]
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f023 0210 	bic.w	r2, r3, #16
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007406:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	031b      	lsls	r3, r3, #12
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007418:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	621a      	str	r2, [r3, #32]
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f023 0303 	bic.w	r3, r3, #3
 8007468:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007478:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	b2db      	uxtb	r3, r3
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800748c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	621a      	str	r2, [r3, #32]
}
 80074a8:	bf00      	nop
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	031b      	lsls	r3, r3, #12
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007506:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	031b      	lsls	r3, r3, #12
 800750c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	f043 0307 	orr.w	r3, r3, #7
 8007550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	609a      	str	r2, [r3, #8]
}
 8007558:	bf00      	nop
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800757e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	021a      	lsls	r2, r3, #8
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	431a      	orrs	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4313      	orrs	r3, r2
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	609a      	str	r2, [r3, #8]
}
 8007598:	bf00      	nop
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2201      	movs	r2, #1
 80075b8:	fa02 f303 	lsl.w	r3, r2, r3
 80075bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	43db      	mvns	r3, r3
 80075c6:	401a      	ands	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a1a      	ldr	r2, [r3, #32]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f003 031f 	and.w	r3, r3, #31
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	fa01 f303 	lsl.w	r3, r1, r3
 80075dc:	431a      	orrs	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	621a      	str	r2, [r3, #32]
}
 80075e2:	bf00      	nop
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007604:	2302      	movs	r3, #2
 8007606:	e06d      	b.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a30      	ldr	r2, [pc, #192]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d004      	beq.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a2f      	ldr	r2, [pc, #188]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d108      	bne.n	800764e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4313      	orrs	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a20      	ldr	r2, [pc, #128]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d022      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767a:	d01d      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d018      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a1c      	ldr	r2, [pc, #112]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d013      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1a      	ldr	r2, [pc, #104]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00e      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a15      	ldr	r2, [pc, #84]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d009      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a16      	ldr	r2, [pc, #88]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a15      	ldr	r2, [pc, #84]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d10c      	bne.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	40010000 	.word	0x40010000
 80076f4:	40010400 	.word	0x40010400
 80076f8:	40000400 	.word	0x40000400
 80076fc:	40000800 	.word	0x40000800
 8007700:	40000c00 	.word	0x40000c00
 8007704:	40014000 	.word	0x40014000
 8007708:	40001800 	.word	0x40001800

0800770c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007724:	2302      	movs	r3, #2
 8007726:	e065      	b.n	80077f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	041b      	lsls	r3, r3, #16
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a16      	ldr	r2, [pc, #88]	; (8007800 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a14      	ldr	r2, [pc, #80]	; (8007804 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d115      	bne.n	80077e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	051b      	lsls	r3, r3, #20
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	40010000 	.word	0x40010000
 8007804:	40010400 	.word	0x40010400

08007808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e040      	b.n	80078d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fb f886 	bl	8002978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f974 	bl	8007b70 <UART_SetConfig>
 8007888:	4603      	mov	r3, r0
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e022      	b.n	80078d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fbcc 	bl	8008038 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fc53 	bl	800817c <UART_CheckIdleState>
 80078d6:	4603      	mov	r3, r0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d171      	bne.n	80079dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_UART_Transmit+0x24>
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e06a      	b.n	80079de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2221      	movs	r2, #33	; 0x21
 8007914:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007916:	f7fb fb53 	bl	8002fc0 <HAL_GetTick>
 800791a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007934:	d108      	bne.n	8007948 <HAL_UART_Transmit+0x68>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d104      	bne.n	8007948 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800793e:	2300      	movs	r3, #0
 8007940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	61bb      	str	r3, [r7, #24]
 8007946:	e003      	b.n	8007950 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800794c:	2300      	movs	r3, #0
 800794e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007950:	e02c      	b.n	80079ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2200      	movs	r2, #0
 800795a:	2180      	movs	r1, #128	; 0x80
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fc5a 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e038      	b.n	80079de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007980:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	3302      	adds	r3, #2
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	e007      	b.n	800799a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	3301      	adds	r3, #1
 8007998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1cc      	bne.n	8007952 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2200      	movs	r2, #0
 80079c0:	2140      	movs	r1, #64	; 0x40
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 fc27 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e005      	b.n	80079de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	e000      	b.n	80079de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80079dc:	2302      	movs	r3, #2
  }
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b08a      	sub	sp, #40	; 0x28
 80079ea:	af02      	add	r7, sp, #8
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	603b      	str	r3, [r7, #0]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	f040 80b1 	bne.w	8007b64 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_UART_Receive+0x28>
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e0a9      	b.n	8007b66 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2222      	movs	r2, #34	; 0x22
 8007a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a28:	f7fb faca 	bl	8002fc0 <HAL_GetTick>
 8007a2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	88fa      	ldrh	r2, [r7, #6]
 8007a32:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	88fa      	ldrh	r2, [r7, #6]
 8007a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a46:	d10e      	bne.n	8007a66 <HAL_UART_Receive+0x80>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <HAL_UART_Receive+0x76>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a5a:	e02d      	b.n	8007ab8 <HAL_UART_Receive+0xd2>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	22ff      	movs	r2, #255	; 0xff
 8007a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a64:	e028      	b.n	8007ab8 <HAL_UART_Receive+0xd2>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10d      	bne.n	8007a8a <HAL_UART_Receive+0xa4>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <HAL_UART_Receive+0x9a>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	22ff      	movs	r2, #255	; 0xff
 8007a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a7e:	e01b      	b.n	8007ab8 <HAL_UART_Receive+0xd2>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	227f      	movs	r2, #127	; 0x7f
 8007a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a88:	e016      	b.n	8007ab8 <HAL_UART_Receive+0xd2>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a92:	d10d      	bne.n	8007ab0 <HAL_UART_Receive+0xca>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <HAL_UART_Receive+0xc0>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	227f      	movs	r2, #127	; 0x7f
 8007aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aa4:	e008      	b.n	8007ab8 <HAL_UART_Receive+0xd2>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	223f      	movs	r2, #63	; 0x3f
 8007aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aae:	e003      	b.n	8007ab8 <HAL_UART_Receive+0xd2>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007abe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ac8:	d108      	bne.n	8007adc <HAL_UART_Receive+0xf6>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d104      	bne.n	8007adc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	e003      	b.n	8007ae4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007ae4:	e032      	b.n	8007b4c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2200      	movs	r2, #0
 8007aee:	2120      	movs	r1, #32
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fb90 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e032      	b.n	8007b66 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10c      	bne.n	8007b20 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	8a7b      	ldrh	r3, [r7, #18]
 8007b10:	4013      	ands	r3, r2
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	3302      	adds	r3, #2
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	e00c      	b.n	8007b3a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	8a7b      	ldrh	r3, [r7, #18]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	3301      	adds	r3, #1
 8007b38:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1c6      	bne.n	8007ae6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	e000      	b.n	8007b66 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007b64:	2302      	movs	r3, #2
  }
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3720      	adds	r7, #32
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	431a      	orrs	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4ba6      	ldr	r3, [pc, #664]	; (8007e34 <UART_SetConfig+0x2c4>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	6979      	ldr	r1, [r7, #20]
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a94      	ldr	r2, [pc, #592]	; (8007e38 <UART_SetConfig+0x2c8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d120      	bne.n	8007c2e <UART_SetConfig+0xbe>
 8007bec:	4b93      	ldr	r3, [pc, #588]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d816      	bhi.n	8007c28 <UART_SetConfig+0xb8>
 8007bfa:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <UART_SetConfig+0x90>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c11 	.word	0x08007c11
 8007c04:	08007c1d 	.word	0x08007c1d
 8007c08:	08007c17 	.word	0x08007c17
 8007c0c:	08007c23 	.word	0x08007c23
 8007c10:	2301      	movs	r3, #1
 8007c12:	77fb      	strb	r3, [r7, #31]
 8007c14:	e150      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c16:	2302      	movs	r3, #2
 8007c18:	77fb      	strb	r3, [r7, #31]
 8007c1a:	e14d      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	77fb      	strb	r3, [r7, #31]
 8007c20:	e14a      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c22:	2308      	movs	r3, #8
 8007c24:	77fb      	strb	r3, [r7, #31]
 8007c26:	e147      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c28:	2310      	movs	r3, #16
 8007c2a:	77fb      	strb	r3, [r7, #31]
 8007c2c:	e144      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a83      	ldr	r2, [pc, #524]	; (8007e40 <UART_SetConfig+0x2d0>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d132      	bne.n	8007c9e <UART_SetConfig+0x12e>
 8007c38:	4b80      	ldr	r3, [pc, #512]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	f003 030c 	and.w	r3, r3, #12
 8007c42:	2b0c      	cmp	r3, #12
 8007c44:	d828      	bhi.n	8007c98 <UART_SetConfig+0x128>
 8007c46:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <UART_SetConfig+0xdc>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007c81 	.word	0x08007c81
 8007c50:	08007c99 	.word	0x08007c99
 8007c54:	08007c99 	.word	0x08007c99
 8007c58:	08007c99 	.word	0x08007c99
 8007c5c:	08007c8d 	.word	0x08007c8d
 8007c60:	08007c99 	.word	0x08007c99
 8007c64:	08007c99 	.word	0x08007c99
 8007c68:	08007c99 	.word	0x08007c99
 8007c6c:	08007c87 	.word	0x08007c87
 8007c70:	08007c99 	.word	0x08007c99
 8007c74:	08007c99 	.word	0x08007c99
 8007c78:	08007c99 	.word	0x08007c99
 8007c7c:	08007c93 	.word	0x08007c93
 8007c80:	2300      	movs	r3, #0
 8007c82:	77fb      	strb	r3, [r7, #31]
 8007c84:	e118      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c86:	2302      	movs	r3, #2
 8007c88:	77fb      	strb	r3, [r7, #31]
 8007c8a:	e115      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	77fb      	strb	r3, [r7, #31]
 8007c90:	e112      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c92:	2308      	movs	r3, #8
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e10f      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e10c      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a68      	ldr	r2, [pc, #416]	; (8007e44 <UART_SetConfig+0x2d4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d120      	bne.n	8007cea <UART_SetConfig+0x17a>
 8007ca8:	4b64      	ldr	r3, [pc, #400]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cb2:	2b30      	cmp	r3, #48	; 0x30
 8007cb4:	d013      	beq.n	8007cde <UART_SetConfig+0x16e>
 8007cb6:	2b30      	cmp	r3, #48	; 0x30
 8007cb8:	d814      	bhi.n	8007ce4 <UART_SetConfig+0x174>
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d009      	beq.n	8007cd2 <UART_SetConfig+0x162>
 8007cbe:	2b20      	cmp	r3, #32
 8007cc0:	d810      	bhi.n	8007ce4 <UART_SetConfig+0x174>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <UART_SetConfig+0x15c>
 8007cc6:	2b10      	cmp	r3, #16
 8007cc8:	d006      	beq.n	8007cd8 <UART_SetConfig+0x168>
 8007cca:	e00b      	b.n	8007ce4 <UART_SetConfig+0x174>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	77fb      	strb	r3, [r7, #31]
 8007cd0:	e0f2      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	77fb      	strb	r3, [r7, #31]
 8007cd6:	e0ef      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007cd8:	2304      	movs	r3, #4
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e0ec      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007cde:	2308      	movs	r3, #8
 8007ce0:	77fb      	strb	r3, [r7, #31]
 8007ce2:	e0e9      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	77fb      	strb	r3, [r7, #31]
 8007ce8:	e0e6      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a56      	ldr	r2, [pc, #344]	; (8007e48 <UART_SetConfig+0x2d8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d120      	bne.n	8007d36 <UART_SetConfig+0x1c6>
 8007cf4:	4b51      	ldr	r3, [pc, #324]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8007d00:	d013      	beq.n	8007d2a <UART_SetConfig+0x1ba>
 8007d02:	2bc0      	cmp	r3, #192	; 0xc0
 8007d04:	d814      	bhi.n	8007d30 <UART_SetConfig+0x1c0>
 8007d06:	2b80      	cmp	r3, #128	; 0x80
 8007d08:	d009      	beq.n	8007d1e <UART_SetConfig+0x1ae>
 8007d0a:	2b80      	cmp	r3, #128	; 0x80
 8007d0c:	d810      	bhi.n	8007d30 <UART_SetConfig+0x1c0>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <UART_SetConfig+0x1a8>
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d006      	beq.n	8007d24 <UART_SetConfig+0x1b4>
 8007d16:	e00b      	b.n	8007d30 <UART_SetConfig+0x1c0>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	77fb      	strb	r3, [r7, #31]
 8007d1c:	e0cc      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	77fb      	strb	r3, [r7, #31]
 8007d22:	e0c9      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d24:	2304      	movs	r3, #4
 8007d26:	77fb      	strb	r3, [r7, #31]
 8007d28:	e0c6      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d2a:	2308      	movs	r3, #8
 8007d2c:	77fb      	strb	r3, [r7, #31]
 8007d2e:	e0c3      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d30:	2310      	movs	r3, #16
 8007d32:	77fb      	strb	r3, [r7, #31]
 8007d34:	e0c0      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a44      	ldr	r2, [pc, #272]	; (8007e4c <UART_SetConfig+0x2dc>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d125      	bne.n	8007d8c <UART_SetConfig+0x21c>
 8007d40:	4b3e      	ldr	r3, [pc, #248]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d4e:	d017      	beq.n	8007d80 <UART_SetConfig+0x210>
 8007d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d54:	d817      	bhi.n	8007d86 <UART_SetConfig+0x216>
 8007d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d5a:	d00b      	beq.n	8007d74 <UART_SetConfig+0x204>
 8007d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d60:	d811      	bhi.n	8007d86 <UART_SetConfig+0x216>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <UART_SetConfig+0x1fe>
 8007d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6a:	d006      	beq.n	8007d7a <UART_SetConfig+0x20a>
 8007d6c:	e00b      	b.n	8007d86 <UART_SetConfig+0x216>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	77fb      	strb	r3, [r7, #31]
 8007d72:	e0a1      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d74:	2302      	movs	r3, #2
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e09e      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d7a:	2304      	movs	r3, #4
 8007d7c:	77fb      	strb	r3, [r7, #31]
 8007d7e:	e09b      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d80:	2308      	movs	r3, #8
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e098      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d86:	2310      	movs	r3, #16
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	e095      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a2f      	ldr	r2, [pc, #188]	; (8007e50 <UART_SetConfig+0x2e0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d125      	bne.n	8007de2 <UART_SetConfig+0x272>
 8007d96:	4b29      	ldr	r3, [pc, #164]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007da4:	d017      	beq.n	8007dd6 <UART_SetConfig+0x266>
 8007da6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007daa:	d817      	bhi.n	8007ddc <UART_SetConfig+0x26c>
 8007dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db0:	d00b      	beq.n	8007dca <UART_SetConfig+0x25a>
 8007db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007db6:	d811      	bhi.n	8007ddc <UART_SetConfig+0x26c>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <UART_SetConfig+0x254>
 8007dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc0:	d006      	beq.n	8007dd0 <UART_SetConfig+0x260>
 8007dc2:	e00b      	b.n	8007ddc <UART_SetConfig+0x26c>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	77fb      	strb	r3, [r7, #31]
 8007dc8:	e076      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	77fb      	strb	r3, [r7, #31]
 8007dce:	e073      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	77fb      	strb	r3, [r7, #31]
 8007dd4:	e070      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007dd6:	2308      	movs	r3, #8
 8007dd8:	77fb      	strb	r3, [r7, #31]
 8007dda:	e06d      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	77fb      	strb	r3, [r7, #31]
 8007de0:	e06a      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a1b      	ldr	r2, [pc, #108]	; (8007e54 <UART_SetConfig+0x2e4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d138      	bne.n	8007e5e <UART_SetConfig+0x2ee>
 8007dec:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <UART_SetConfig+0x2cc>)
 8007dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007df6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dfa:	d017      	beq.n	8007e2c <UART_SetConfig+0x2bc>
 8007dfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e00:	d82a      	bhi.n	8007e58 <UART_SetConfig+0x2e8>
 8007e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e06:	d00b      	beq.n	8007e20 <UART_SetConfig+0x2b0>
 8007e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e0c:	d824      	bhi.n	8007e58 <UART_SetConfig+0x2e8>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <UART_SetConfig+0x2aa>
 8007e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e16:	d006      	beq.n	8007e26 <UART_SetConfig+0x2b6>
 8007e18:	e01e      	b.n	8007e58 <UART_SetConfig+0x2e8>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	77fb      	strb	r3, [r7, #31]
 8007e1e:	e04b      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e20:	2302      	movs	r3, #2
 8007e22:	77fb      	strb	r3, [r7, #31]
 8007e24:	e048      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e26:	2304      	movs	r3, #4
 8007e28:	77fb      	strb	r3, [r7, #31]
 8007e2a:	e045      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e2c:	2308      	movs	r3, #8
 8007e2e:	77fb      	strb	r3, [r7, #31]
 8007e30:	e042      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e32:	bf00      	nop
 8007e34:	efff69f3 	.word	0xefff69f3
 8007e38:	40011000 	.word	0x40011000
 8007e3c:	40023800 	.word	0x40023800
 8007e40:	40004400 	.word	0x40004400
 8007e44:	40004800 	.word	0x40004800
 8007e48:	40004c00 	.word	0x40004c00
 8007e4c:	40005000 	.word	0x40005000
 8007e50:	40011400 	.word	0x40011400
 8007e54:	40007800 	.word	0x40007800
 8007e58:	2310      	movs	r3, #16
 8007e5a:	77fb      	strb	r3, [r7, #31]
 8007e5c:	e02c      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a72      	ldr	r2, [pc, #456]	; (800802c <UART_SetConfig+0x4bc>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d125      	bne.n	8007eb4 <UART_SetConfig+0x344>
 8007e68:	4b71      	ldr	r3, [pc, #452]	; (8008030 <UART_SetConfig+0x4c0>)
 8007e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e76:	d017      	beq.n	8007ea8 <UART_SetConfig+0x338>
 8007e78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e7c:	d817      	bhi.n	8007eae <UART_SetConfig+0x33e>
 8007e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e82:	d00b      	beq.n	8007e9c <UART_SetConfig+0x32c>
 8007e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e88:	d811      	bhi.n	8007eae <UART_SetConfig+0x33e>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <UART_SetConfig+0x326>
 8007e8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e92:	d006      	beq.n	8007ea2 <UART_SetConfig+0x332>
 8007e94:	e00b      	b.n	8007eae <UART_SetConfig+0x33e>
 8007e96:	2300      	movs	r3, #0
 8007e98:	77fb      	strb	r3, [r7, #31]
 8007e9a:	e00d      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	77fb      	strb	r3, [r7, #31]
 8007ea0:	e00a      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007ea2:	2304      	movs	r3, #4
 8007ea4:	77fb      	strb	r3, [r7, #31]
 8007ea6:	e007      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	77fb      	strb	r3, [r7, #31]
 8007eac:	e004      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007eae:	2310      	movs	r3, #16
 8007eb0:	77fb      	strb	r3, [r7, #31]
 8007eb2:	e001      	b.n	8007eb8 <UART_SetConfig+0x348>
 8007eb4:	2310      	movs	r3, #16
 8007eb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec0:	d15b      	bne.n	8007f7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ec2:	7ffb      	ldrb	r3, [r7, #31]
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d828      	bhi.n	8007f1a <UART_SetConfig+0x3aa>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0x360>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ef5 	.word	0x08007ef5
 8007ed4:	08007efd 	.word	0x08007efd
 8007ed8:	08007f05 	.word	0x08007f05
 8007edc:	08007f1b 	.word	0x08007f1b
 8007ee0:	08007f0b 	.word	0x08007f0b
 8007ee4:	08007f1b 	.word	0x08007f1b
 8007ee8:	08007f1b 	.word	0x08007f1b
 8007eec:	08007f1b 	.word	0x08007f1b
 8007ef0:	08007f13 	.word	0x08007f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ef4:	f7fd f946 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 8007ef8:	61b8      	str	r0, [r7, #24]
        break;
 8007efa:	e013      	b.n	8007f24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007efc:	f7fd f956 	bl	80051ac <HAL_RCC_GetPCLK2Freq>
 8007f00:	61b8      	str	r0, [r7, #24]
        break;
 8007f02:	e00f      	b.n	8007f24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f04:	4b4b      	ldr	r3, [pc, #300]	; (8008034 <UART_SetConfig+0x4c4>)
 8007f06:	61bb      	str	r3, [r7, #24]
        break;
 8007f08:	e00c      	b.n	8007f24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f0a:	f7fd f829 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8007f0e:	61b8      	str	r0, [r7, #24]
        break;
 8007f10:	e008      	b.n	8007f24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f16:	61bb      	str	r3, [r7, #24]
        break;
 8007f18:	e004      	b.n	8007f24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	77bb      	strb	r3, [r7, #30]
        break;
 8007f22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d074      	beq.n	8008014 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	005a      	lsls	r2, r3, #1
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	085b      	lsrs	r3, r3, #1
 8007f34:	441a      	add	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b0f      	cmp	r3, #15
 8007f44:	d916      	bls.n	8007f74 <UART_SetConfig+0x404>
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f4c:	d212      	bcs.n	8007f74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f023 030f 	bic.w	r3, r3, #15
 8007f56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	085b      	lsrs	r3, r3, #1
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	89fb      	ldrh	r3, [r7, #14]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	89fa      	ldrh	r2, [r7, #14]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	e04f      	b.n	8008014 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	77bb      	strb	r3, [r7, #30]
 8007f78:	e04c      	b.n	8008014 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f7a:	7ffb      	ldrb	r3, [r7, #31]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d828      	bhi.n	8007fd2 <UART_SetConfig+0x462>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x418>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	08007fd3 	.word	0x08007fd3
 8007f98:	08007fc3 	.word	0x08007fc3
 8007f9c:	08007fd3 	.word	0x08007fd3
 8007fa0:	08007fd3 	.word	0x08007fd3
 8007fa4:	08007fd3 	.word	0x08007fd3
 8007fa8:	08007fcb 	.word	0x08007fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fac:	f7fd f8ea 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 8007fb0:	61b8      	str	r0, [r7, #24]
        break;
 8007fb2:	e013      	b.n	8007fdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb4:	f7fd f8fa 	bl	80051ac <HAL_RCC_GetPCLK2Freq>
 8007fb8:	61b8      	str	r0, [r7, #24]
        break;
 8007fba:	e00f      	b.n	8007fdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fbc:	4b1d      	ldr	r3, [pc, #116]	; (8008034 <UART_SetConfig+0x4c4>)
 8007fbe:	61bb      	str	r3, [r7, #24]
        break;
 8007fc0:	e00c      	b.n	8007fdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fc2:	f7fc ffcd 	bl	8004f60 <HAL_RCC_GetSysClockFreq>
 8007fc6:	61b8      	str	r0, [r7, #24]
        break;
 8007fc8:	e008      	b.n	8007fdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fce:	61bb      	str	r3, [r7, #24]
        break;
 8007fd0:	e004      	b.n	8007fdc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	77bb      	strb	r3, [r7, #30]
        break;
 8007fda:	bf00      	nop
    }

    if (pclk != 0U)
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d018      	beq.n	8008014 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	085a      	lsrs	r2, r3, #1
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	441a      	add	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	2b0f      	cmp	r3, #15
 8007ffa:	d909      	bls.n	8008010 <UART_SetConfig+0x4a0>
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008002:	d205      	bcs.n	8008010 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60da      	str	r2, [r3, #12]
 800800e:	e001      	b.n	8008014 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008020:	7fbb      	ldrb	r3, [r7, #30]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3720      	adds	r7, #32
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	40007c00 	.word	0x40007c00
 8008030:	40023800 	.word	0x40023800
 8008034:	00f42400 	.word	0x00f42400

08008038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	f003 0310 	and.w	r3, r3, #16
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00a      	beq.n	80080ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01a      	beq.n	800814e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008136:	d10a      	bne.n	800814e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	605a      	str	r2, [r3, #4]
  }
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af02      	add	r7, sp, #8
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800818c:	f7fa ff18 	bl	8002fc0 <HAL_GetTick>
 8008190:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b08      	cmp	r3, #8
 800819e:	d10e      	bne.n	80081be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f831 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e027      	b.n	800820e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0304 	and.w	r3, r3, #4
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d10e      	bne.n	80081ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f81b 	bl	8008216 <UART_WaitOnFlagUntilTimeout>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e011      	b.n	800820e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b09c      	sub	sp, #112	; 0x70
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	603b      	str	r3, [r7, #0]
 8008222:	4613      	mov	r3, r2
 8008224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008226:	e0a7      	b.n	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800822a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822e:	f000 80a3 	beq.w	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008232:	f7fa fec5 	bl	8002fc0 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800823e:	429a      	cmp	r2, r3
 8008240:	d302      	bcc.n	8008248 <UART_WaitOnFlagUntilTimeout+0x32>
 8008242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008244:	2b00      	cmp	r3, #0
 8008246:	d13f      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008258:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800825c:	667b      	str	r3, [r7, #100]	; 0x64
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008268:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800826c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e6      	bne.n	8008248 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800828a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	663b      	str	r3, [r7, #96]	; 0x60
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800829a:	64ba      	str	r2, [r7, #72]	; 0x48
 800829c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e5      	bne.n	800827a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e068      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d050      	beq.n	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e4:	d148      	bne.n	8008378 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008304:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
 8008310:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e6      	bne.n	80082f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	613b      	str	r3, [r7, #16]
   return(result);
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	66bb      	str	r3, [r7, #104]	; 0x68
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008342:	623a      	str	r2, [r7, #32]
 8008344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	69f9      	ldr	r1, [r7, #28]
 8008348:	6a3a      	ldr	r2, [r7, #32]
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e5      	bne.n	8008322 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2220      	movs	r2, #32
 800835a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e010      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69da      	ldr	r2, [r3, #28]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	4013      	ands	r3, r2
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	429a      	cmp	r2, r3
 8008386:	bf0c      	ite	eq
 8008388:	2301      	moveq	r3, #1
 800838a:	2300      	movne	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	429a      	cmp	r2, r3
 8008394:	f43f af48 	beq.w	8008228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3770      	adds	r7, #112	; 0x70
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <__errno>:
 80083a4:	4b01      	ldr	r3, [pc, #4]	; (80083ac <__errno+0x8>)
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	20000018 	.word	0x20000018

080083b0 <__libc_init_array>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	4d0d      	ldr	r5, [pc, #52]	; (80083e8 <__libc_init_array+0x38>)
 80083b4:	4c0d      	ldr	r4, [pc, #52]	; (80083ec <__libc_init_array+0x3c>)
 80083b6:	1b64      	subs	r4, r4, r5
 80083b8:	10a4      	asrs	r4, r4, #2
 80083ba:	2600      	movs	r6, #0
 80083bc:	42a6      	cmp	r6, r4
 80083be:	d109      	bne.n	80083d4 <__libc_init_array+0x24>
 80083c0:	4d0b      	ldr	r5, [pc, #44]	; (80083f0 <__libc_init_array+0x40>)
 80083c2:	4c0c      	ldr	r4, [pc, #48]	; (80083f4 <__libc_init_array+0x44>)
 80083c4:	f000 ffbc 	bl	8009340 <_init>
 80083c8:	1b64      	subs	r4, r4, r5
 80083ca:	10a4      	asrs	r4, r4, #2
 80083cc:	2600      	movs	r6, #0
 80083ce:	42a6      	cmp	r6, r4
 80083d0:	d105      	bne.n	80083de <__libc_init_array+0x2e>
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d8:	4798      	blx	r3
 80083da:	3601      	adds	r6, #1
 80083dc:	e7ee      	b.n	80083bc <__libc_init_array+0xc>
 80083de:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e2:	4798      	blx	r3
 80083e4:	3601      	adds	r6, #1
 80083e6:	e7f2      	b.n	80083ce <__libc_init_array+0x1e>
 80083e8:	08009440 	.word	0x08009440
 80083ec:	08009440 	.word	0x08009440
 80083f0:	08009440 	.word	0x08009440
 80083f4:	08009444 	.word	0x08009444

080083f8 <memcpy>:
 80083f8:	440a      	add	r2, r1
 80083fa:	4291      	cmp	r1, r2
 80083fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008400:	d100      	bne.n	8008404 <memcpy+0xc>
 8008402:	4770      	bx	lr
 8008404:	b510      	push	{r4, lr}
 8008406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800840e:	4291      	cmp	r1, r2
 8008410:	d1f9      	bne.n	8008406 <memcpy+0xe>
 8008412:	bd10      	pop	{r4, pc}

08008414 <memset>:
 8008414:	4402      	add	r2, r0
 8008416:	4603      	mov	r3, r0
 8008418:	4293      	cmp	r3, r2
 800841a:	d100      	bne.n	800841e <memset+0xa>
 800841c:	4770      	bx	lr
 800841e:	f803 1b01 	strb.w	r1, [r3], #1
 8008422:	e7f9      	b.n	8008418 <memset+0x4>

08008424 <iprintf>:
 8008424:	b40f      	push	{r0, r1, r2, r3}
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <iprintf+0x2c>)
 8008428:	b513      	push	{r0, r1, r4, lr}
 800842a:	681c      	ldr	r4, [r3, #0]
 800842c:	b124      	cbz	r4, 8008438 <iprintf+0x14>
 800842e:	69a3      	ldr	r3, [r4, #24]
 8008430:	b913      	cbnz	r3, 8008438 <iprintf+0x14>
 8008432:	4620      	mov	r0, r4
 8008434:	f000 f866 	bl	8008504 <__sinit>
 8008438:	ab05      	add	r3, sp, #20
 800843a:	9a04      	ldr	r2, [sp, #16]
 800843c:	68a1      	ldr	r1, [r4, #8]
 800843e:	9301      	str	r3, [sp, #4]
 8008440:	4620      	mov	r0, r4
 8008442:	f000 f9bd 	bl	80087c0 <_vfiprintf_r>
 8008446:	b002      	add	sp, #8
 8008448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800844c:	b004      	add	sp, #16
 800844e:	4770      	bx	lr
 8008450:	20000018 	.word	0x20000018

08008454 <std>:
 8008454:	2300      	movs	r3, #0
 8008456:	b510      	push	{r4, lr}
 8008458:	4604      	mov	r4, r0
 800845a:	e9c0 3300 	strd	r3, r3, [r0]
 800845e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008462:	6083      	str	r3, [r0, #8]
 8008464:	8181      	strh	r1, [r0, #12]
 8008466:	6643      	str	r3, [r0, #100]	; 0x64
 8008468:	81c2      	strh	r2, [r0, #14]
 800846a:	6183      	str	r3, [r0, #24]
 800846c:	4619      	mov	r1, r3
 800846e:	2208      	movs	r2, #8
 8008470:	305c      	adds	r0, #92	; 0x5c
 8008472:	f7ff ffcf 	bl	8008414 <memset>
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <std+0x38>)
 8008478:	6263      	str	r3, [r4, #36]	; 0x24
 800847a:	4b05      	ldr	r3, [pc, #20]	; (8008490 <std+0x3c>)
 800847c:	62a3      	str	r3, [r4, #40]	; 0x28
 800847e:	4b05      	ldr	r3, [pc, #20]	; (8008494 <std+0x40>)
 8008480:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008482:	4b05      	ldr	r3, [pc, #20]	; (8008498 <std+0x44>)
 8008484:	6224      	str	r4, [r4, #32]
 8008486:	6323      	str	r3, [r4, #48]	; 0x30
 8008488:	bd10      	pop	{r4, pc}
 800848a:	bf00      	nop
 800848c:	08008d69 	.word	0x08008d69
 8008490:	08008d8b 	.word	0x08008d8b
 8008494:	08008dc3 	.word	0x08008dc3
 8008498:	08008de7 	.word	0x08008de7

0800849c <_cleanup_r>:
 800849c:	4901      	ldr	r1, [pc, #4]	; (80084a4 <_cleanup_r+0x8>)
 800849e:	f000 b8af 	b.w	8008600 <_fwalk_reent>
 80084a2:	bf00      	nop
 80084a4:	080090c1 	.word	0x080090c1

080084a8 <__sfmoreglue>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	2268      	movs	r2, #104	; 0x68
 80084ac:	1e4d      	subs	r5, r1, #1
 80084ae:	4355      	muls	r5, r2
 80084b0:	460e      	mov	r6, r1
 80084b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084b6:	f000 f8e5 	bl	8008684 <_malloc_r>
 80084ba:	4604      	mov	r4, r0
 80084bc:	b140      	cbz	r0, 80084d0 <__sfmoreglue+0x28>
 80084be:	2100      	movs	r1, #0
 80084c0:	e9c0 1600 	strd	r1, r6, [r0]
 80084c4:	300c      	adds	r0, #12
 80084c6:	60a0      	str	r0, [r4, #8]
 80084c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084cc:	f7ff ffa2 	bl	8008414 <memset>
 80084d0:	4620      	mov	r0, r4
 80084d2:	bd70      	pop	{r4, r5, r6, pc}

080084d4 <__sfp_lock_acquire>:
 80084d4:	4801      	ldr	r0, [pc, #4]	; (80084dc <__sfp_lock_acquire+0x8>)
 80084d6:	f000 b8b3 	b.w	8008640 <__retarget_lock_acquire_recursive>
 80084da:	bf00      	nop
 80084dc:	2000082d 	.word	0x2000082d

080084e0 <__sfp_lock_release>:
 80084e0:	4801      	ldr	r0, [pc, #4]	; (80084e8 <__sfp_lock_release+0x8>)
 80084e2:	f000 b8ae 	b.w	8008642 <__retarget_lock_release_recursive>
 80084e6:	bf00      	nop
 80084e8:	2000082d 	.word	0x2000082d

080084ec <__sinit_lock_acquire>:
 80084ec:	4801      	ldr	r0, [pc, #4]	; (80084f4 <__sinit_lock_acquire+0x8>)
 80084ee:	f000 b8a7 	b.w	8008640 <__retarget_lock_acquire_recursive>
 80084f2:	bf00      	nop
 80084f4:	2000082e 	.word	0x2000082e

080084f8 <__sinit_lock_release>:
 80084f8:	4801      	ldr	r0, [pc, #4]	; (8008500 <__sinit_lock_release+0x8>)
 80084fa:	f000 b8a2 	b.w	8008642 <__retarget_lock_release_recursive>
 80084fe:	bf00      	nop
 8008500:	2000082e 	.word	0x2000082e

08008504 <__sinit>:
 8008504:	b510      	push	{r4, lr}
 8008506:	4604      	mov	r4, r0
 8008508:	f7ff fff0 	bl	80084ec <__sinit_lock_acquire>
 800850c:	69a3      	ldr	r3, [r4, #24]
 800850e:	b11b      	cbz	r3, 8008518 <__sinit+0x14>
 8008510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008514:	f7ff bff0 	b.w	80084f8 <__sinit_lock_release>
 8008518:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800851c:	6523      	str	r3, [r4, #80]	; 0x50
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <__sinit+0x68>)
 8008520:	4a13      	ldr	r2, [pc, #76]	; (8008570 <__sinit+0x6c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	62a2      	str	r2, [r4, #40]	; 0x28
 8008526:	42a3      	cmp	r3, r4
 8008528:	bf04      	itt	eq
 800852a:	2301      	moveq	r3, #1
 800852c:	61a3      	streq	r3, [r4, #24]
 800852e:	4620      	mov	r0, r4
 8008530:	f000 f820 	bl	8008574 <__sfp>
 8008534:	6060      	str	r0, [r4, #4]
 8008536:	4620      	mov	r0, r4
 8008538:	f000 f81c 	bl	8008574 <__sfp>
 800853c:	60a0      	str	r0, [r4, #8]
 800853e:	4620      	mov	r0, r4
 8008540:	f000 f818 	bl	8008574 <__sfp>
 8008544:	2200      	movs	r2, #0
 8008546:	60e0      	str	r0, [r4, #12]
 8008548:	2104      	movs	r1, #4
 800854a:	6860      	ldr	r0, [r4, #4]
 800854c:	f7ff ff82 	bl	8008454 <std>
 8008550:	68a0      	ldr	r0, [r4, #8]
 8008552:	2201      	movs	r2, #1
 8008554:	2109      	movs	r1, #9
 8008556:	f7ff ff7d 	bl	8008454 <std>
 800855a:	68e0      	ldr	r0, [r4, #12]
 800855c:	2202      	movs	r2, #2
 800855e:	2112      	movs	r1, #18
 8008560:	f7ff ff78 	bl	8008454 <std>
 8008564:	2301      	movs	r3, #1
 8008566:	61a3      	str	r3, [r4, #24]
 8008568:	e7d2      	b.n	8008510 <__sinit+0xc>
 800856a:	bf00      	nop
 800856c:	080093a0 	.word	0x080093a0
 8008570:	0800849d 	.word	0x0800849d

08008574 <__sfp>:
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008576:	4607      	mov	r7, r0
 8008578:	f7ff ffac 	bl	80084d4 <__sfp_lock_acquire>
 800857c:	4b1e      	ldr	r3, [pc, #120]	; (80085f8 <__sfp+0x84>)
 800857e:	681e      	ldr	r6, [r3, #0]
 8008580:	69b3      	ldr	r3, [r6, #24]
 8008582:	b913      	cbnz	r3, 800858a <__sfp+0x16>
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff ffbd 	bl	8008504 <__sinit>
 800858a:	3648      	adds	r6, #72	; 0x48
 800858c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008590:	3b01      	subs	r3, #1
 8008592:	d503      	bpl.n	800859c <__sfp+0x28>
 8008594:	6833      	ldr	r3, [r6, #0]
 8008596:	b30b      	cbz	r3, 80085dc <__sfp+0x68>
 8008598:	6836      	ldr	r6, [r6, #0]
 800859a:	e7f7      	b.n	800858c <__sfp+0x18>
 800859c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085a0:	b9d5      	cbnz	r5, 80085d8 <__sfp+0x64>
 80085a2:	4b16      	ldr	r3, [pc, #88]	; (80085fc <__sfp+0x88>)
 80085a4:	60e3      	str	r3, [r4, #12]
 80085a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085aa:	6665      	str	r5, [r4, #100]	; 0x64
 80085ac:	f000 f847 	bl	800863e <__retarget_lock_init_recursive>
 80085b0:	f7ff ff96 	bl	80084e0 <__sfp_lock_release>
 80085b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085bc:	6025      	str	r5, [r4, #0]
 80085be:	61a5      	str	r5, [r4, #24]
 80085c0:	2208      	movs	r2, #8
 80085c2:	4629      	mov	r1, r5
 80085c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085c8:	f7ff ff24 	bl	8008414 <memset>
 80085cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085d4:	4620      	mov	r0, r4
 80085d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085d8:	3468      	adds	r4, #104	; 0x68
 80085da:	e7d9      	b.n	8008590 <__sfp+0x1c>
 80085dc:	2104      	movs	r1, #4
 80085de:	4638      	mov	r0, r7
 80085e0:	f7ff ff62 	bl	80084a8 <__sfmoreglue>
 80085e4:	4604      	mov	r4, r0
 80085e6:	6030      	str	r0, [r6, #0]
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d1d5      	bne.n	8008598 <__sfp+0x24>
 80085ec:	f7ff ff78 	bl	80084e0 <__sfp_lock_release>
 80085f0:	230c      	movs	r3, #12
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	e7ee      	b.n	80085d4 <__sfp+0x60>
 80085f6:	bf00      	nop
 80085f8:	080093a0 	.word	0x080093a0
 80085fc:	ffff0001 	.word	0xffff0001

08008600 <_fwalk_reent>:
 8008600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008604:	4606      	mov	r6, r0
 8008606:	4688      	mov	r8, r1
 8008608:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800860c:	2700      	movs	r7, #0
 800860e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008612:	f1b9 0901 	subs.w	r9, r9, #1
 8008616:	d505      	bpl.n	8008624 <_fwalk_reent+0x24>
 8008618:	6824      	ldr	r4, [r4, #0]
 800861a:	2c00      	cmp	r4, #0
 800861c:	d1f7      	bne.n	800860e <_fwalk_reent+0xe>
 800861e:	4638      	mov	r0, r7
 8008620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008624:	89ab      	ldrh	r3, [r5, #12]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d907      	bls.n	800863a <_fwalk_reent+0x3a>
 800862a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800862e:	3301      	adds	r3, #1
 8008630:	d003      	beq.n	800863a <_fwalk_reent+0x3a>
 8008632:	4629      	mov	r1, r5
 8008634:	4630      	mov	r0, r6
 8008636:	47c0      	blx	r8
 8008638:	4307      	orrs	r7, r0
 800863a:	3568      	adds	r5, #104	; 0x68
 800863c:	e7e9      	b.n	8008612 <_fwalk_reent+0x12>

0800863e <__retarget_lock_init_recursive>:
 800863e:	4770      	bx	lr

08008640 <__retarget_lock_acquire_recursive>:
 8008640:	4770      	bx	lr

08008642 <__retarget_lock_release_recursive>:
 8008642:	4770      	bx	lr

08008644 <sbrk_aligned>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	4e0e      	ldr	r6, [pc, #56]	; (8008680 <sbrk_aligned+0x3c>)
 8008648:	460c      	mov	r4, r1
 800864a:	6831      	ldr	r1, [r6, #0]
 800864c:	4605      	mov	r5, r0
 800864e:	b911      	cbnz	r1, 8008656 <sbrk_aligned+0x12>
 8008650:	f000 fb7a 	bl	8008d48 <_sbrk_r>
 8008654:	6030      	str	r0, [r6, #0]
 8008656:	4621      	mov	r1, r4
 8008658:	4628      	mov	r0, r5
 800865a:	f000 fb75 	bl	8008d48 <_sbrk_r>
 800865e:	1c43      	adds	r3, r0, #1
 8008660:	d00a      	beq.n	8008678 <sbrk_aligned+0x34>
 8008662:	1cc4      	adds	r4, r0, #3
 8008664:	f024 0403 	bic.w	r4, r4, #3
 8008668:	42a0      	cmp	r0, r4
 800866a:	d007      	beq.n	800867c <sbrk_aligned+0x38>
 800866c:	1a21      	subs	r1, r4, r0
 800866e:	4628      	mov	r0, r5
 8008670:	f000 fb6a 	bl	8008d48 <_sbrk_r>
 8008674:	3001      	adds	r0, #1
 8008676:	d101      	bne.n	800867c <sbrk_aligned+0x38>
 8008678:	f04f 34ff 	mov.w	r4, #4294967295
 800867c:	4620      	mov	r0, r4
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	20000834 	.word	0x20000834

08008684 <_malloc_r>:
 8008684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008688:	1ccd      	adds	r5, r1, #3
 800868a:	f025 0503 	bic.w	r5, r5, #3
 800868e:	3508      	adds	r5, #8
 8008690:	2d0c      	cmp	r5, #12
 8008692:	bf38      	it	cc
 8008694:	250c      	movcc	r5, #12
 8008696:	2d00      	cmp	r5, #0
 8008698:	4607      	mov	r7, r0
 800869a:	db01      	blt.n	80086a0 <_malloc_r+0x1c>
 800869c:	42a9      	cmp	r1, r5
 800869e:	d905      	bls.n	80086ac <_malloc_r+0x28>
 80086a0:	230c      	movs	r3, #12
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	2600      	movs	r6, #0
 80086a6:	4630      	mov	r0, r6
 80086a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ac:	4e2e      	ldr	r6, [pc, #184]	; (8008768 <_malloc_r+0xe4>)
 80086ae:	f000 fdbb 	bl	8009228 <__malloc_lock>
 80086b2:	6833      	ldr	r3, [r6, #0]
 80086b4:	461c      	mov	r4, r3
 80086b6:	bb34      	cbnz	r4, 8008706 <_malloc_r+0x82>
 80086b8:	4629      	mov	r1, r5
 80086ba:	4638      	mov	r0, r7
 80086bc:	f7ff ffc2 	bl	8008644 <sbrk_aligned>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	4604      	mov	r4, r0
 80086c4:	d14d      	bne.n	8008762 <_malloc_r+0xde>
 80086c6:	6834      	ldr	r4, [r6, #0]
 80086c8:	4626      	mov	r6, r4
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	d140      	bne.n	8008750 <_malloc_r+0xcc>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	4631      	mov	r1, r6
 80086d2:	4638      	mov	r0, r7
 80086d4:	eb04 0803 	add.w	r8, r4, r3
 80086d8:	f000 fb36 	bl	8008d48 <_sbrk_r>
 80086dc:	4580      	cmp	r8, r0
 80086de:	d13a      	bne.n	8008756 <_malloc_r+0xd2>
 80086e0:	6821      	ldr	r1, [r4, #0]
 80086e2:	3503      	adds	r5, #3
 80086e4:	1a6d      	subs	r5, r5, r1
 80086e6:	f025 0503 	bic.w	r5, r5, #3
 80086ea:	3508      	adds	r5, #8
 80086ec:	2d0c      	cmp	r5, #12
 80086ee:	bf38      	it	cc
 80086f0:	250c      	movcc	r5, #12
 80086f2:	4629      	mov	r1, r5
 80086f4:	4638      	mov	r0, r7
 80086f6:	f7ff ffa5 	bl	8008644 <sbrk_aligned>
 80086fa:	3001      	adds	r0, #1
 80086fc:	d02b      	beq.n	8008756 <_malloc_r+0xd2>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	442b      	add	r3, r5
 8008702:	6023      	str	r3, [r4, #0]
 8008704:	e00e      	b.n	8008724 <_malloc_r+0xa0>
 8008706:	6822      	ldr	r2, [r4, #0]
 8008708:	1b52      	subs	r2, r2, r5
 800870a:	d41e      	bmi.n	800874a <_malloc_r+0xc6>
 800870c:	2a0b      	cmp	r2, #11
 800870e:	d916      	bls.n	800873e <_malloc_r+0xba>
 8008710:	1961      	adds	r1, r4, r5
 8008712:	42a3      	cmp	r3, r4
 8008714:	6025      	str	r5, [r4, #0]
 8008716:	bf18      	it	ne
 8008718:	6059      	strne	r1, [r3, #4]
 800871a:	6863      	ldr	r3, [r4, #4]
 800871c:	bf08      	it	eq
 800871e:	6031      	streq	r1, [r6, #0]
 8008720:	5162      	str	r2, [r4, r5]
 8008722:	604b      	str	r3, [r1, #4]
 8008724:	4638      	mov	r0, r7
 8008726:	f104 060b 	add.w	r6, r4, #11
 800872a:	f000 fd83 	bl	8009234 <__malloc_unlock>
 800872e:	f026 0607 	bic.w	r6, r6, #7
 8008732:	1d23      	adds	r3, r4, #4
 8008734:	1af2      	subs	r2, r6, r3
 8008736:	d0b6      	beq.n	80086a6 <_malloc_r+0x22>
 8008738:	1b9b      	subs	r3, r3, r6
 800873a:	50a3      	str	r3, [r4, r2]
 800873c:	e7b3      	b.n	80086a6 <_malloc_r+0x22>
 800873e:	6862      	ldr	r2, [r4, #4]
 8008740:	42a3      	cmp	r3, r4
 8008742:	bf0c      	ite	eq
 8008744:	6032      	streq	r2, [r6, #0]
 8008746:	605a      	strne	r2, [r3, #4]
 8008748:	e7ec      	b.n	8008724 <_malloc_r+0xa0>
 800874a:	4623      	mov	r3, r4
 800874c:	6864      	ldr	r4, [r4, #4]
 800874e:	e7b2      	b.n	80086b6 <_malloc_r+0x32>
 8008750:	4634      	mov	r4, r6
 8008752:	6876      	ldr	r6, [r6, #4]
 8008754:	e7b9      	b.n	80086ca <_malloc_r+0x46>
 8008756:	230c      	movs	r3, #12
 8008758:	603b      	str	r3, [r7, #0]
 800875a:	4638      	mov	r0, r7
 800875c:	f000 fd6a 	bl	8009234 <__malloc_unlock>
 8008760:	e7a1      	b.n	80086a6 <_malloc_r+0x22>
 8008762:	6025      	str	r5, [r4, #0]
 8008764:	e7de      	b.n	8008724 <_malloc_r+0xa0>
 8008766:	bf00      	nop
 8008768:	20000830 	.word	0x20000830

0800876c <__sfputc_r>:
 800876c:	6893      	ldr	r3, [r2, #8]
 800876e:	3b01      	subs	r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	b410      	push	{r4}
 8008774:	6093      	str	r3, [r2, #8]
 8008776:	da08      	bge.n	800878a <__sfputc_r+0x1e>
 8008778:	6994      	ldr	r4, [r2, #24]
 800877a:	42a3      	cmp	r3, r4
 800877c:	db01      	blt.n	8008782 <__sfputc_r+0x16>
 800877e:	290a      	cmp	r1, #10
 8008780:	d103      	bne.n	800878a <__sfputc_r+0x1e>
 8008782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008786:	f000 bb33 	b.w	8008df0 <__swbuf_r>
 800878a:	6813      	ldr	r3, [r2, #0]
 800878c:	1c58      	adds	r0, r3, #1
 800878e:	6010      	str	r0, [r2, #0]
 8008790:	7019      	strb	r1, [r3, #0]
 8008792:	4608      	mov	r0, r1
 8008794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008798:	4770      	bx	lr

0800879a <__sfputs_r>:
 800879a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879c:	4606      	mov	r6, r0
 800879e:	460f      	mov	r7, r1
 80087a0:	4614      	mov	r4, r2
 80087a2:	18d5      	adds	r5, r2, r3
 80087a4:	42ac      	cmp	r4, r5
 80087a6:	d101      	bne.n	80087ac <__sfputs_r+0x12>
 80087a8:	2000      	movs	r0, #0
 80087aa:	e007      	b.n	80087bc <__sfputs_r+0x22>
 80087ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b0:	463a      	mov	r2, r7
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff ffda 	bl	800876c <__sfputc_r>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d1f3      	bne.n	80087a4 <__sfputs_r+0xa>
 80087bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087c0 <_vfiprintf_r>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	460d      	mov	r5, r1
 80087c6:	b09d      	sub	sp, #116	; 0x74
 80087c8:	4614      	mov	r4, r2
 80087ca:	4698      	mov	r8, r3
 80087cc:	4606      	mov	r6, r0
 80087ce:	b118      	cbz	r0, 80087d8 <_vfiprintf_r+0x18>
 80087d0:	6983      	ldr	r3, [r0, #24]
 80087d2:	b90b      	cbnz	r3, 80087d8 <_vfiprintf_r+0x18>
 80087d4:	f7ff fe96 	bl	8008504 <__sinit>
 80087d8:	4b89      	ldr	r3, [pc, #548]	; (8008a00 <_vfiprintf_r+0x240>)
 80087da:	429d      	cmp	r5, r3
 80087dc:	d11b      	bne.n	8008816 <_vfiprintf_r+0x56>
 80087de:	6875      	ldr	r5, [r6, #4]
 80087e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087e2:	07d9      	lsls	r1, r3, #31
 80087e4:	d405      	bmi.n	80087f2 <_vfiprintf_r+0x32>
 80087e6:	89ab      	ldrh	r3, [r5, #12]
 80087e8:	059a      	lsls	r2, r3, #22
 80087ea:	d402      	bmi.n	80087f2 <_vfiprintf_r+0x32>
 80087ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ee:	f7ff ff27 	bl	8008640 <__retarget_lock_acquire_recursive>
 80087f2:	89ab      	ldrh	r3, [r5, #12]
 80087f4:	071b      	lsls	r3, r3, #28
 80087f6:	d501      	bpl.n	80087fc <_vfiprintf_r+0x3c>
 80087f8:	692b      	ldr	r3, [r5, #16]
 80087fa:	b9eb      	cbnz	r3, 8008838 <_vfiprintf_r+0x78>
 80087fc:	4629      	mov	r1, r5
 80087fe:	4630      	mov	r0, r6
 8008800:	f000 fb5a 	bl	8008eb8 <__swsetup_r>
 8008804:	b1c0      	cbz	r0, 8008838 <_vfiprintf_r+0x78>
 8008806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008808:	07dc      	lsls	r4, r3, #31
 800880a:	d50e      	bpl.n	800882a <_vfiprintf_r+0x6a>
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	b01d      	add	sp, #116	; 0x74
 8008812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008816:	4b7b      	ldr	r3, [pc, #492]	; (8008a04 <_vfiprintf_r+0x244>)
 8008818:	429d      	cmp	r5, r3
 800881a:	d101      	bne.n	8008820 <_vfiprintf_r+0x60>
 800881c:	68b5      	ldr	r5, [r6, #8]
 800881e:	e7df      	b.n	80087e0 <_vfiprintf_r+0x20>
 8008820:	4b79      	ldr	r3, [pc, #484]	; (8008a08 <_vfiprintf_r+0x248>)
 8008822:	429d      	cmp	r5, r3
 8008824:	bf08      	it	eq
 8008826:	68f5      	ldreq	r5, [r6, #12]
 8008828:	e7da      	b.n	80087e0 <_vfiprintf_r+0x20>
 800882a:	89ab      	ldrh	r3, [r5, #12]
 800882c:	0598      	lsls	r0, r3, #22
 800882e:	d4ed      	bmi.n	800880c <_vfiprintf_r+0x4c>
 8008830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008832:	f7ff ff06 	bl	8008642 <__retarget_lock_release_recursive>
 8008836:	e7e9      	b.n	800880c <_vfiprintf_r+0x4c>
 8008838:	2300      	movs	r3, #0
 800883a:	9309      	str	r3, [sp, #36]	; 0x24
 800883c:	2320      	movs	r3, #32
 800883e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008842:	f8cd 800c 	str.w	r8, [sp, #12]
 8008846:	2330      	movs	r3, #48	; 0x30
 8008848:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a0c <_vfiprintf_r+0x24c>
 800884c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008850:	f04f 0901 	mov.w	r9, #1
 8008854:	4623      	mov	r3, r4
 8008856:	469a      	mov	sl, r3
 8008858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800885c:	b10a      	cbz	r2, 8008862 <_vfiprintf_r+0xa2>
 800885e:	2a25      	cmp	r2, #37	; 0x25
 8008860:	d1f9      	bne.n	8008856 <_vfiprintf_r+0x96>
 8008862:	ebba 0b04 	subs.w	fp, sl, r4
 8008866:	d00b      	beq.n	8008880 <_vfiprintf_r+0xc0>
 8008868:	465b      	mov	r3, fp
 800886a:	4622      	mov	r2, r4
 800886c:	4629      	mov	r1, r5
 800886e:	4630      	mov	r0, r6
 8008870:	f7ff ff93 	bl	800879a <__sfputs_r>
 8008874:	3001      	adds	r0, #1
 8008876:	f000 80aa 	beq.w	80089ce <_vfiprintf_r+0x20e>
 800887a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800887c:	445a      	add	r2, fp
 800887e:	9209      	str	r2, [sp, #36]	; 0x24
 8008880:	f89a 3000 	ldrb.w	r3, [sl]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 80a2 	beq.w	80089ce <_vfiprintf_r+0x20e>
 800888a:	2300      	movs	r3, #0
 800888c:	f04f 32ff 	mov.w	r2, #4294967295
 8008890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008894:	f10a 0a01 	add.w	sl, sl, #1
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	9307      	str	r3, [sp, #28]
 800889c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088a0:	931a      	str	r3, [sp, #104]	; 0x68
 80088a2:	4654      	mov	r4, sl
 80088a4:	2205      	movs	r2, #5
 80088a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088aa:	4858      	ldr	r0, [pc, #352]	; (8008a0c <_vfiprintf_r+0x24c>)
 80088ac:	f7f7 fcc8 	bl	8000240 <memchr>
 80088b0:	9a04      	ldr	r2, [sp, #16]
 80088b2:	b9d8      	cbnz	r0, 80088ec <_vfiprintf_r+0x12c>
 80088b4:	06d1      	lsls	r1, r2, #27
 80088b6:	bf44      	itt	mi
 80088b8:	2320      	movmi	r3, #32
 80088ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088be:	0713      	lsls	r3, r2, #28
 80088c0:	bf44      	itt	mi
 80088c2:	232b      	movmi	r3, #43	; 0x2b
 80088c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c8:	f89a 3000 	ldrb.w	r3, [sl]
 80088cc:	2b2a      	cmp	r3, #42	; 0x2a
 80088ce:	d015      	beq.n	80088fc <_vfiprintf_r+0x13c>
 80088d0:	9a07      	ldr	r2, [sp, #28]
 80088d2:	4654      	mov	r4, sl
 80088d4:	2000      	movs	r0, #0
 80088d6:	f04f 0c0a 	mov.w	ip, #10
 80088da:	4621      	mov	r1, r4
 80088dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088e0:	3b30      	subs	r3, #48	; 0x30
 80088e2:	2b09      	cmp	r3, #9
 80088e4:	d94e      	bls.n	8008984 <_vfiprintf_r+0x1c4>
 80088e6:	b1b0      	cbz	r0, 8008916 <_vfiprintf_r+0x156>
 80088e8:	9207      	str	r2, [sp, #28]
 80088ea:	e014      	b.n	8008916 <_vfiprintf_r+0x156>
 80088ec:	eba0 0308 	sub.w	r3, r0, r8
 80088f0:	fa09 f303 	lsl.w	r3, r9, r3
 80088f4:	4313      	orrs	r3, r2
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	46a2      	mov	sl, r4
 80088fa:	e7d2      	b.n	80088a2 <_vfiprintf_r+0xe2>
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	1d19      	adds	r1, r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	9103      	str	r1, [sp, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	bfbb      	ittet	lt
 8008908:	425b      	neglt	r3, r3
 800890a:	f042 0202 	orrlt.w	r2, r2, #2
 800890e:	9307      	strge	r3, [sp, #28]
 8008910:	9307      	strlt	r3, [sp, #28]
 8008912:	bfb8      	it	lt
 8008914:	9204      	strlt	r2, [sp, #16]
 8008916:	7823      	ldrb	r3, [r4, #0]
 8008918:	2b2e      	cmp	r3, #46	; 0x2e
 800891a:	d10c      	bne.n	8008936 <_vfiprintf_r+0x176>
 800891c:	7863      	ldrb	r3, [r4, #1]
 800891e:	2b2a      	cmp	r3, #42	; 0x2a
 8008920:	d135      	bne.n	800898e <_vfiprintf_r+0x1ce>
 8008922:	9b03      	ldr	r3, [sp, #12]
 8008924:	1d1a      	adds	r2, r3, #4
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	9203      	str	r2, [sp, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	bfb8      	it	lt
 800892e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008932:	3402      	adds	r4, #2
 8008934:	9305      	str	r3, [sp, #20]
 8008936:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a1c <_vfiprintf_r+0x25c>
 800893a:	7821      	ldrb	r1, [r4, #0]
 800893c:	2203      	movs	r2, #3
 800893e:	4650      	mov	r0, sl
 8008940:	f7f7 fc7e 	bl	8000240 <memchr>
 8008944:	b140      	cbz	r0, 8008958 <_vfiprintf_r+0x198>
 8008946:	2340      	movs	r3, #64	; 0x40
 8008948:	eba0 000a 	sub.w	r0, r0, sl
 800894c:	fa03 f000 	lsl.w	r0, r3, r0
 8008950:	9b04      	ldr	r3, [sp, #16]
 8008952:	4303      	orrs	r3, r0
 8008954:	3401      	adds	r4, #1
 8008956:	9304      	str	r3, [sp, #16]
 8008958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800895c:	482c      	ldr	r0, [pc, #176]	; (8008a10 <_vfiprintf_r+0x250>)
 800895e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008962:	2206      	movs	r2, #6
 8008964:	f7f7 fc6c 	bl	8000240 <memchr>
 8008968:	2800      	cmp	r0, #0
 800896a:	d03f      	beq.n	80089ec <_vfiprintf_r+0x22c>
 800896c:	4b29      	ldr	r3, [pc, #164]	; (8008a14 <_vfiprintf_r+0x254>)
 800896e:	bb1b      	cbnz	r3, 80089b8 <_vfiprintf_r+0x1f8>
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	3307      	adds	r3, #7
 8008974:	f023 0307 	bic.w	r3, r3, #7
 8008978:	3308      	adds	r3, #8
 800897a:	9303      	str	r3, [sp, #12]
 800897c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897e:	443b      	add	r3, r7
 8008980:	9309      	str	r3, [sp, #36]	; 0x24
 8008982:	e767      	b.n	8008854 <_vfiprintf_r+0x94>
 8008984:	fb0c 3202 	mla	r2, ip, r2, r3
 8008988:	460c      	mov	r4, r1
 800898a:	2001      	movs	r0, #1
 800898c:	e7a5      	b.n	80088da <_vfiprintf_r+0x11a>
 800898e:	2300      	movs	r3, #0
 8008990:	3401      	adds	r4, #1
 8008992:	9305      	str	r3, [sp, #20]
 8008994:	4619      	mov	r1, r3
 8008996:	f04f 0c0a 	mov.w	ip, #10
 800899a:	4620      	mov	r0, r4
 800899c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089a0:	3a30      	subs	r2, #48	; 0x30
 80089a2:	2a09      	cmp	r2, #9
 80089a4:	d903      	bls.n	80089ae <_vfiprintf_r+0x1ee>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0c5      	beq.n	8008936 <_vfiprintf_r+0x176>
 80089aa:	9105      	str	r1, [sp, #20]
 80089ac:	e7c3      	b.n	8008936 <_vfiprintf_r+0x176>
 80089ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80089b2:	4604      	mov	r4, r0
 80089b4:	2301      	movs	r3, #1
 80089b6:	e7f0      	b.n	800899a <_vfiprintf_r+0x1da>
 80089b8:	ab03      	add	r3, sp, #12
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	462a      	mov	r2, r5
 80089be:	4b16      	ldr	r3, [pc, #88]	; (8008a18 <_vfiprintf_r+0x258>)
 80089c0:	a904      	add	r1, sp, #16
 80089c2:	4630      	mov	r0, r6
 80089c4:	f3af 8000 	nop.w
 80089c8:	4607      	mov	r7, r0
 80089ca:	1c78      	adds	r0, r7, #1
 80089cc:	d1d6      	bne.n	800897c <_vfiprintf_r+0x1bc>
 80089ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089d0:	07d9      	lsls	r1, r3, #31
 80089d2:	d405      	bmi.n	80089e0 <_vfiprintf_r+0x220>
 80089d4:	89ab      	ldrh	r3, [r5, #12]
 80089d6:	059a      	lsls	r2, r3, #22
 80089d8:	d402      	bmi.n	80089e0 <_vfiprintf_r+0x220>
 80089da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089dc:	f7ff fe31 	bl	8008642 <__retarget_lock_release_recursive>
 80089e0:	89ab      	ldrh	r3, [r5, #12]
 80089e2:	065b      	lsls	r3, r3, #25
 80089e4:	f53f af12 	bmi.w	800880c <_vfiprintf_r+0x4c>
 80089e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089ea:	e711      	b.n	8008810 <_vfiprintf_r+0x50>
 80089ec:	ab03      	add	r3, sp, #12
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	462a      	mov	r2, r5
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <_vfiprintf_r+0x258>)
 80089f4:	a904      	add	r1, sp, #16
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 f880 	bl	8008afc <_printf_i>
 80089fc:	e7e4      	b.n	80089c8 <_vfiprintf_r+0x208>
 80089fe:	bf00      	nop
 8008a00:	080093c4 	.word	0x080093c4
 8008a04:	080093e4 	.word	0x080093e4
 8008a08:	080093a4 	.word	0x080093a4
 8008a0c:	08009404 	.word	0x08009404
 8008a10:	0800940e 	.word	0x0800940e
 8008a14:	00000000 	.word	0x00000000
 8008a18:	0800879b 	.word	0x0800879b
 8008a1c:	0800940a 	.word	0x0800940a

08008a20 <_printf_common>:
 8008a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a24:	4616      	mov	r6, r2
 8008a26:	4699      	mov	r9, r3
 8008a28:	688a      	ldr	r2, [r1, #8]
 8008a2a:	690b      	ldr	r3, [r1, #16]
 8008a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a30:	4293      	cmp	r3, r2
 8008a32:	bfb8      	it	lt
 8008a34:	4613      	movlt	r3, r2
 8008a36:	6033      	str	r3, [r6, #0]
 8008a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a3c:	4607      	mov	r7, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	b10a      	cbz	r2, 8008a46 <_printf_common+0x26>
 8008a42:	3301      	adds	r3, #1
 8008a44:	6033      	str	r3, [r6, #0]
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	0699      	lsls	r1, r3, #26
 8008a4a:	bf42      	ittt	mi
 8008a4c:	6833      	ldrmi	r3, [r6, #0]
 8008a4e:	3302      	addmi	r3, #2
 8008a50:	6033      	strmi	r3, [r6, #0]
 8008a52:	6825      	ldr	r5, [r4, #0]
 8008a54:	f015 0506 	ands.w	r5, r5, #6
 8008a58:	d106      	bne.n	8008a68 <_printf_common+0x48>
 8008a5a:	f104 0a19 	add.w	sl, r4, #25
 8008a5e:	68e3      	ldr	r3, [r4, #12]
 8008a60:	6832      	ldr	r2, [r6, #0]
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	42ab      	cmp	r3, r5
 8008a66:	dc26      	bgt.n	8008ab6 <_printf_common+0x96>
 8008a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a6c:	1e13      	subs	r3, r2, #0
 8008a6e:	6822      	ldr	r2, [r4, #0]
 8008a70:	bf18      	it	ne
 8008a72:	2301      	movne	r3, #1
 8008a74:	0692      	lsls	r2, r2, #26
 8008a76:	d42b      	bmi.n	8008ad0 <_printf_common+0xb0>
 8008a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	4638      	mov	r0, r7
 8008a80:	47c0      	blx	r8
 8008a82:	3001      	adds	r0, #1
 8008a84:	d01e      	beq.n	8008ac4 <_printf_common+0xa4>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	68e5      	ldr	r5, [r4, #12]
 8008a8a:	6832      	ldr	r2, [r6, #0]
 8008a8c:	f003 0306 	and.w	r3, r3, #6
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	bf08      	it	eq
 8008a94:	1aad      	subeq	r5, r5, r2
 8008a96:	68a3      	ldr	r3, [r4, #8]
 8008a98:	6922      	ldr	r2, [r4, #16]
 8008a9a:	bf0c      	ite	eq
 8008a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aa0:	2500      	movne	r5, #0
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	bfc4      	itt	gt
 8008aa6:	1a9b      	subgt	r3, r3, r2
 8008aa8:	18ed      	addgt	r5, r5, r3
 8008aaa:	2600      	movs	r6, #0
 8008aac:	341a      	adds	r4, #26
 8008aae:	42b5      	cmp	r5, r6
 8008ab0:	d11a      	bne.n	8008ae8 <_printf_common+0xc8>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e008      	b.n	8008ac8 <_printf_common+0xa8>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4652      	mov	r2, sl
 8008aba:	4649      	mov	r1, r9
 8008abc:	4638      	mov	r0, r7
 8008abe:	47c0      	blx	r8
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d103      	bne.n	8008acc <_printf_common+0xac>
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008acc:	3501      	adds	r5, #1
 8008ace:	e7c6      	b.n	8008a5e <_printf_common+0x3e>
 8008ad0:	18e1      	adds	r1, r4, r3
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	2030      	movs	r0, #48	; 0x30
 8008ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ada:	4422      	add	r2, r4
 8008adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ae4:	3302      	adds	r3, #2
 8008ae6:	e7c7      	b.n	8008a78 <_printf_common+0x58>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	4622      	mov	r2, r4
 8008aec:	4649      	mov	r1, r9
 8008aee:	4638      	mov	r0, r7
 8008af0:	47c0      	blx	r8
 8008af2:	3001      	adds	r0, #1
 8008af4:	d0e6      	beq.n	8008ac4 <_printf_common+0xa4>
 8008af6:	3601      	adds	r6, #1
 8008af8:	e7d9      	b.n	8008aae <_printf_common+0x8e>
	...

08008afc <_printf_i>:
 8008afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b00:	7e0f      	ldrb	r7, [r1, #24]
 8008b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b04:	2f78      	cmp	r7, #120	; 0x78
 8008b06:	4691      	mov	r9, r2
 8008b08:	4680      	mov	r8, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	469a      	mov	sl, r3
 8008b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b12:	d807      	bhi.n	8008b24 <_printf_i+0x28>
 8008b14:	2f62      	cmp	r7, #98	; 0x62
 8008b16:	d80a      	bhi.n	8008b2e <_printf_i+0x32>
 8008b18:	2f00      	cmp	r7, #0
 8008b1a:	f000 80d8 	beq.w	8008cce <_printf_i+0x1d2>
 8008b1e:	2f58      	cmp	r7, #88	; 0x58
 8008b20:	f000 80a3 	beq.w	8008c6a <_printf_i+0x16e>
 8008b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b2c:	e03a      	b.n	8008ba4 <_printf_i+0xa8>
 8008b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b32:	2b15      	cmp	r3, #21
 8008b34:	d8f6      	bhi.n	8008b24 <_printf_i+0x28>
 8008b36:	a101      	add	r1, pc, #4	; (adr r1, 8008b3c <_printf_i+0x40>)
 8008b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b3c:	08008b95 	.word	0x08008b95
 8008b40:	08008ba9 	.word	0x08008ba9
 8008b44:	08008b25 	.word	0x08008b25
 8008b48:	08008b25 	.word	0x08008b25
 8008b4c:	08008b25 	.word	0x08008b25
 8008b50:	08008b25 	.word	0x08008b25
 8008b54:	08008ba9 	.word	0x08008ba9
 8008b58:	08008b25 	.word	0x08008b25
 8008b5c:	08008b25 	.word	0x08008b25
 8008b60:	08008b25 	.word	0x08008b25
 8008b64:	08008b25 	.word	0x08008b25
 8008b68:	08008cb5 	.word	0x08008cb5
 8008b6c:	08008bd9 	.word	0x08008bd9
 8008b70:	08008c97 	.word	0x08008c97
 8008b74:	08008b25 	.word	0x08008b25
 8008b78:	08008b25 	.word	0x08008b25
 8008b7c:	08008cd7 	.word	0x08008cd7
 8008b80:	08008b25 	.word	0x08008b25
 8008b84:	08008bd9 	.word	0x08008bd9
 8008b88:	08008b25 	.word	0x08008b25
 8008b8c:	08008b25 	.word	0x08008b25
 8008b90:	08008c9f 	.word	0x08008c9f
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	1d1a      	adds	r2, r3, #4
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	602a      	str	r2, [r5, #0]
 8008b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e0a3      	b.n	8008cf0 <_printf_i+0x1f4>
 8008ba8:	6820      	ldr	r0, [r4, #0]
 8008baa:	6829      	ldr	r1, [r5, #0]
 8008bac:	0606      	lsls	r6, r0, #24
 8008bae:	f101 0304 	add.w	r3, r1, #4
 8008bb2:	d50a      	bpl.n	8008bca <_printf_i+0xce>
 8008bb4:	680e      	ldr	r6, [r1, #0]
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	2e00      	cmp	r6, #0
 8008bba:	da03      	bge.n	8008bc4 <_printf_i+0xc8>
 8008bbc:	232d      	movs	r3, #45	; 0x2d
 8008bbe:	4276      	negs	r6, r6
 8008bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc4:	485e      	ldr	r0, [pc, #376]	; (8008d40 <_printf_i+0x244>)
 8008bc6:	230a      	movs	r3, #10
 8008bc8:	e019      	b.n	8008bfe <_printf_i+0x102>
 8008bca:	680e      	ldr	r6, [r1, #0]
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bd2:	bf18      	it	ne
 8008bd4:	b236      	sxthne	r6, r6
 8008bd6:	e7ef      	b.n	8008bb8 <_printf_i+0xbc>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	6820      	ldr	r0, [r4, #0]
 8008bdc:	1d19      	adds	r1, r3, #4
 8008bde:	6029      	str	r1, [r5, #0]
 8008be0:	0601      	lsls	r1, r0, #24
 8008be2:	d501      	bpl.n	8008be8 <_printf_i+0xec>
 8008be4:	681e      	ldr	r6, [r3, #0]
 8008be6:	e002      	b.n	8008bee <_printf_i+0xf2>
 8008be8:	0646      	lsls	r6, r0, #25
 8008bea:	d5fb      	bpl.n	8008be4 <_printf_i+0xe8>
 8008bec:	881e      	ldrh	r6, [r3, #0]
 8008bee:	4854      	ldr	r0, [pc, #336]	; (8008d40 <_printf_i+0x244>)
 8008bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8008bf2:	bf0c      	ite	eq
 8008bf4:	2308      	moveq	r3, #8
 8008bf6:	230a      	movne	r3, #10
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bfe:	6865      	ldr	r5, [r4, #4]
 8008c00:	60a5      	str	r5, [r4, #8]
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	bfa2      	ittt	ge
 8008c06:	6821      	ldrge	r1, [r4, #0]
 8008c08:	f021 0104 	bicge.w	r1, r1, #4
 8008c0c:	6021      	strge	r1, [r4, #0]
 8008c0e:	b90e      	cbnz	r6, 8008c14 <_printf_i+0x118>
 8008c10:	2d00      	cmp	r5, #0
 8008c12:	d04d      	beq.n	8008cb0 <_printf_i+0x1b4>
 8008c14:	4615      	mov	r5, r2
 8008c16:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c1a:	fb03 6711 	mls	r7, r3, r1, r6
 8008c1e:	5dc7      	ldrb	r7, [r0, r7]
 8008c20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c24:	4637      	mov	r7, r6
 8008c26:	42bb      	cmp	r3, r7
 8008c28:	460e      	mov	r6, r1
 8008c2a:	d9f4      	bls.n	8008c16 <_printf_i+0x11a>
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	d10b      	bne.n	8008c48 <_printf_i+0x14c>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	07de      	lsls	r6, r3, #31
 8008c34:	d508      	bpl.n	8008c48 <_printf_i+0x14c>
 8008c36:	6923      	ldr	r3, [r4, #16]
 8008c38:	6861      	ldr	r1, [r4, #4]
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	bfde      	ittt	le
 8008c3e:	2330      	movle	r3, #48	; 0x30
 8008c40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c48:	1b52      	subs	r2, r2, r5
 8008c4a:	6122      	str	r2, [r4, #16]
 8008c4c:	f8cd a000 	str.w	sl, [sp]
 8008c50:	464b      	mov	r3, r9
 8008c52:	aa03      	add	r2, sp, #12
 8008c54:	4621      	mov	r1, r4
 8008c56:	4640      	mov	r0, r8
 8008c58:	f7ff fee2 	bl	8008a20 <_printf_common>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d14c      	bne.n	8008cfa <_printf_i+0x1fe>
 8008c60:	f04f 30ff 	mov.w	r0, #4294967295
 8008c64:	b004      	add	sp, #16
 8008c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6a:	4835      	ldr	r0, [pc, #212]	; (8008d40 <_printf_i+0x244>)
 8008c6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c70:	6829      	ldr	r1, [r5, #0]
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c78:	6029      	str	r1, [r5, #0]
 8008c7a:	061d      	lsls	r5, r3, #24
 8008c7c:	d514      	bpl.n	8008ca8 <_printf_i+0x1ac>
 8008c7e:	07df      	lsls	r7, r3, #31
 8008c80:	bf44      	itt	mi
 8008c82:	f043 0320 	orrmi.w	r3, r3, #32
 8008c86:	6023      	strmi	r3, [r4, #0]
 8008c88:	b91e      	cbnz	r6, 8008c92 <_printf_i+0x196>
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	f023 0320 	bic.w	r3, r3, #32
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	2310      	movs	r3, #16
 8008c94:	e7b0      	b.n	8008bf8 <_printf_i+0xfc>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	f043 0320 	orr.w	r3, r3, #32
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	2378      	movs	r3, #120	; 0x78
 8008ca0:	4828      	ldr	r0, [pc, #160]	; (8008d44 <_printf_i+0x248>)
 8008ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ca6:	e7e3      	b.n	8008c70 <_printf_i+0x174>
 8008ca8:	0659      	lsls	r1, r3, #25
 8008caa:	bf48      	it	mi
 8008cac:	b2b6      	uxthmi	r6, r6
 8008cae:	e7e6      	b.n	8008c7e <_printf_i+0x182>
 8008cb0:	4615      	mov	r5, r2
 8008cb2:	e7bb      	b.n	8008c2c <_printf_i+0x130>
 8008cb4:	682b      	ldr	r3, [r5, #0]
 8008cb6:	6826      	ldr	r6, [r4, #0]
 8008cb8:	6961      	ldr	r1, [r4, #20]
 8008cba:	1d18      	adds	r0, r3, #4
 8008cbc:	6028      	str	r0, [r5, #0]
 8008cbe:	0635      	lsls	r5, r6, #24
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	d501      	bpl.n	8008cc8 <_printf_i+0x1cc>
 8008cc4:	6019      	str	r1, [r3, #0]
 8008cc6:	e002      	b.n	8008cce <_printf_i+0x1d2>
 8008cc8:	0670      	lsls	r0, r6, #25
 8008cca:	d5fb      	bpl.n	8008cc4 <_printf_i+0x1c8>
 8008ccc:	8019      	strh	r1, [r3, #0]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	4615      	mov	r5, r2
 8008cd4:	e7ba      	b.n	8008c4c <_printf_i+0x150>
 8008cd6:	682b      	ldr	r3, [r5, #0]
 8008cd8:	1d1a      	adds	r2, r3, #4
 8008cda:	602a      	str	r2, [r5, #0]
 8008cdc:	681d      	ldr	r5, [r3, #0]
 8008cde:	6862      	ldr	r2, [r4, #4]
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f7f7 faac 	bl	8000240 <memchr>
 8008ce8:	b108      	cbz	r0, 8008cee <_printf_i+0x1f2>
 8008cea:	1b40      	subs	r0, r0, r5
 8008cec:	6060      	str	r0, [r4, #4]
 8008cee:	6863      	ldr	r3, [r4, #4]
 8008cf0:	6123      	str	r3, [r4, #16]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf8:	e7a8      	b.n	8008c4c <_printf_i+0x150>
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	462a      	mov	r2, r5
 8008cfe:	4649      	mov	r1, r9
 8008d00:	4640      	mov	r0, r8
 8008d02:	47d0      	blx	sl
 8008d04:	3001      	adds	r0, #1
 8008d06:	d0ab      	beq.n	8008c60 <_printf_i+0x164>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	079b      	lsls	r3, r3, #30
 8008d0c:	d413      	bmi.n	8008d36 <_printf_i+0x23a>
 8008d0e:	68e0      	ldr	r0, [r4, #12]
 8008d10:	9b03      	ldr	r3, [sp, #12]
 8008d12:	4298      	cmp	r0, r3
 8008d14:	bfb8      	it	lt
 8008d16:	4618      	movlt	r0, r3
 8008d18:	e7a4      	b.n	8008c64 <_printf_i+0x168>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	4649      	mov	r1, r9
 8008d20:	4640      	mov	r0, r8
 8008d22:	47d0      	blx	sl
 8008d24:	3001      	adds	r0, #1
 8008d26:	d09b      	beq.n	8008c60 <_printf_i+0x164>
 8008d28:	3501      	adds	r5, #1
 8008d2a:	68e3      	ldr	r3, [r4, #12]
 8008d2c:	9903      	ldr	r1, [sp, #12]
 8008d2e:	1a5b      	subs	r3, r3, r1
 8008d30:	42ab      	cmp	r3, r5
 8008d32:	dcf2      	bgt.n	8008d1a <_printf_i+0x21e>
 8008d34:	e7eb      	b.n	8008d0e <_printf_i+0x212>
 8008d36:	2500      	movs	r5, #0
 8008d38:	f104 0619 	add.w	r6, r4, #25
 8008d3c:	e7f5      	b.n	8008d2a <_printf_i+0x22e>
 8008d3e:	bf00      	nop
 8008d40:	08009415 	.word	0x08009415
 8008d44:	08009426 	.word	0x08009426

08008d48 <_sbrk_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d06      	ldr	r5, [pc, #24]	; (8008d64 <_sbrk_r+0x1c>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	f7fa f86e 	bl	8002e34 <_sbrk>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_sbrk_r+0x1a>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_sbrk_r+0x1a>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000838 	.word	0x20000838

08008d68 <__sread>:
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d70:	f000 fab2 	bl	80092d8 <_read_r>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	bfab      	itete	ge
 8008d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d7c:	181b      	addge	r3, r3, r0
 8008d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d82:	bfac      	ite	ge
 8008d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d86:	81a3      	strhlt	r3, [r4, #12]
 8008d88:	bd10      	pop	{r4, pc}

08008d8a <__swrite>:
 8008d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8e:	461f      	mov	r7, r3
 8008d90:	898b      	ldrh	r3, [r1, #12]
 8008d92:	05db      	lsls	r3, r3, #23
 8008d94:	4605      	mov	r5, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	4616      	mov	r6, r2
 8008d9a:	d505      	bpl.n	8008da8 <__swrite+0x1e>
 8008d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da0:	2302      	movs	r3, #2
 8008da2:	2200      	movs	r2, #0
 8008da4:	f000 f9c8 	bl	8009138 <_lseek_r>
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008db2:	81a3      	strh	r3, [r4, #12]
 8008db4:	4632      	mov	r2, r6
 8008db6:	463b      	mov	r3, r7
 8008db8:	4628      	mov	r0, r5
 8008dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbe:	f000 b869 	b.w	8008e94 <_write_r>

08008dc2 <__sseek>:
 8008dc2:	b510      	push	{r4, lr}
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dca:	f000 f9b5 	bl	8009138 <_lseek_r>
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	89a3      	ldrh	r3, [r4, #12]
 8008dd2:	bf15      	itete	ne
 8008dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dde:	81a3      	strheq	r3, [r4, #12]
 8008de0:	bf18      	it	ne
 8008de2:	81a3      	strhne	r3, [r4, #12]
 8008de4:	bd10      	pop	{r4, pc}

08008de6 <__sclose>:
 8008de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dea:	f000 b8d3 	b.w	8008f94 <_close_r>
	...

08008df0 <__swbuf_r>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	460e      	mov	r6, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	4605      	mov	r5, r0
 8008df8:	b118      	cbz	r0, 8008e02 <__swbuf_r+0x12>
 8008dfa:	6983      	ldr	r3, [r0, #24]
 8008dfc:	b90b      	cbnz	r3, 8008e02 <__swbuf_r+0x12>
 8008dfe:	f7ff fb81 	bl	8008504 <__sinit>
 8008e02:	4b21      	ldr	r3, [pc, #132]	; (8008e88 <__swbuf_r+0x98>)
 8008e04:	429c      	cmp	r4, r3
 8008e06:	d12b      	bne.n	8008e60 <__swbuf_r+0x70>
 8008e08:	686c      	ldr	r4, [r5, #4]
 8008e0a:	69a3      	ldr	r3, [r4, #24]
 8008e0c:	60a3      	str	r3, [r4, #8]
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	071a      	lsls	r2, r3, #28
 8008e12:	d52f      	bpl.n	8008e74 <__swbuf_r+0x84>
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	b36b      	cbz	r3, 8008e74 <__swbuf_r+0x84>
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	6820      	ldr	r0, [r4, #0]
 8008e1c:	1ac0      	subs	r0, r0, r3
 8008e1e:	6963      	ldr	r3, [r4, #20]
 8008e20:	b2f6      	uxtb	r6, r6
 8008e22:	4283      	cmp	r3, r0
 8008e24:	4637      	mov	r7, r6
 8008e26:	dc04      	bgt.n	8008e32 <__swbuf_r+0x42>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f948 	bl	80090c0 <_fflush_r>
 8008e30:	bb30      	cbnz	r0, 8008e80 <__swbuf_r+0x90>
 8008e32:	68a3      	ldr	r3, [r4, #8]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	1c5a      	adds	r2, r3, #1
 8008e3c:	6022      	str	r2, [r4, #0]
 8008e3e:	701e      	strb	r6, [r3, #0]
 8008e40:	6963      	ldr	r3, [r4, #20]
 8008e42:	3001      	adds	r0, #1
 8008e44:	4283      	cmp	r3, r0
 8008e46:	d004      	beq.n	8008e52 <__swbuf_r+0x62>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	07db      	lsls	r3, r3, #31
 8008e4c:	d506      	bpl.n	8008e5c <__swbuf_r+0x6c>
 8008e4e:	2e0a      	cmp	r6, #10
 8008e50:	d104      	bne.n	8008e5c <__swbuf_r+0x6c>
 8008e52:	4621      	mov	r1, r4
 8008e54:	4628      	mov	r0, r5
 8008e56:	f000 f933 	bl	80090c0 <_fflush_r>
 8008e5a:	b988      	cbnz	r0, 8008e80 <__swbuf_r+0x90>
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e60:	4b0a      	ldr	r3, [pc, #40]	; (8008e8c <__swbuf_r+0x9c>)
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d101      	bne.n	8008e6a <__swbuf_r+0x7a>
 8008e66:	68ac      	ldr	r4, [r5, #8]
 8008e68:	e7cf      	b.n	8008e0a <__swbuf_r+0x1a>
 8008e6a:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <__swbuf_r+0xa0>)
 8008e6c:	429c      	cmp	r4, r3
 8008e6e:	bf08      	it	eq
 8008e70:	68ec      	ldreq	r4, [r5, #12]
 8008e72:	e7ca      	b.n	8008e0a <__swbuf_r+0x1a>
 8008e74:	4621      	mov	r1, r4
 8008e76:	4628      	mov	r0, r5
 8008e78:	f000 f81e 	bl	8008eb8 <__swsetup_r>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d0cb      	beq.n	8008e18 <__swbuf_r+0x28>
 8008e80:	f04f 37ff 	mov.w	r7, #4294967295
 8008e84:	e7ea      	b.n	8008e5c <__swbuf_r+0x6c>
 8008e86:	bf00      	nop
 8008e88:	080093c4 	.word	0x080093c4
 8008e8c:	080093e4 	.word	0x080093e4
 8008e90:	080093a4 	.word	0x080093a4

08008e94 <_write_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d07      	ldr	r5, [pc, #28]	; (8008eb4 <_write_r+0x20>)
 8008e98:	4604      	mov	r4, r0
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	602a      	str	r2, [r5, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f7f9 ff75 	bl	8002d92 <_write>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d102      	bne.n	8008eb2 <_write_r+0x1e>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	b103      	cbz	r3, 8008eb2 <_write_r+0x1e>
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	bd38      	pop	{r3, r4, r5, pc}
 8008eb4:	20000838 	.word	0x20000838

08008eb8 <__swsetup_r>:
 8008eb8:	4b32      	ldr	r3, [pc, #200]	; (8008f84 <__swsetup_r+0xcc>)
 8008eba:	b570      	push	{r4, r5, r6, lr}
 8008ebc:	681d      	ldr	r5, [r3, #0]
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	b125      	cbz	r5, 8008ece <__swsetup_r+0x16>
 8008ec4:	69ab      	ldr	r3, [r5, #24]
 8008ec6:	b913      	cbnz	r3, 8008ece <__swsetup_r+0x16>
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f7ff fb1b 	bl	8008504 <__sinit>
 8008ece:	4b2e      	ldr	r3, [pc, #184]	; (8008f88 <__swsetup_r+0xd0>)
 8008ed0:	429c      	cmp	r4, r3
 8008ed2:	d10f      	bne.n	8008ef4 <__swsetup_r+0x3c>
 8008ed4:	686c      	ldr	r4, [r5, #4]
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008edc:	0719      	lsls	r1, r3, #28
 8008ede:	d42c      	bmi.n	8008f3a <__swsetup_r+0x82>
 8008ee0:	06dd      	lsls	r5, r3, #27
 8008ee2:	d411      	bmi.n	8008f08 <__swsetup_r+0x50>
 8008ee4:	2309      	movs	r3, #9
 8008ee6:	6033      	str	r3, [r6, #0]
 8008ee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef2:	e03e      	b.n	8008f72 <__swsetup_r+0xba>
 8008ef4:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <__swsetup_r+0xd4>)
 8008ef6:	429c      	cmp	r4, r3
 8008ef8:	d101      	bne.n	8008efe <__swsetup_r+0x46>
 8008efa:	68ac      	ldr	r4, [r5, #8]
 8008efc:	e7eb      	b.n	8008ed6 <__swsetup_r+0x1e>
 8008efe:	4b24      	ldr	r3, [pc, #144]	; (8008f90 <__swsetup_r+0xd8>)
 8008f00:	429c      	cmp	r4, r3
 8008f02:	bf08      	it	eq
 8008f04:	68ec      	ldreq	r4, [r5, #12]
 8008f06:	e7e6      	b.n	8008ed6 <__swsetup_r+0x1e>
 8008f08:	0758      	lsls	r0, r3, #29
 8008f0a:	d512      	bpl.n	8008f32 <__swsetup_r+0x7a>
 8008f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f0e:	b141      	cbz	r1, 8008f22 <__swsetup_r+0x6a>
 8008f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f14:	4299      	cmp	r1, r3
 8008f16:	d002      	beq.n	8008f1e <__swsetup_r+0x66>
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 f991 	bl	8009240 <_free_r>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	6363      	str	r3, [r4, #52]	; 0x34
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f28:	81a3      	strh	r3, [r4, #12]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6063      	str	r3, [r4, #4]
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f043 0308 	orr.w	r3, r3, #8
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	b94b      	cbnz	r3, 8008f52 <__swsetup_r+0x9a>
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f48:	d003      	beq.n	8008f52 <__swsetup_r+0x9a>
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 f92b 	bl	80091a8 <__smakebuf_r>
 8008f52:	89a0      	ldrh	r0, [r4, #12]
 8008f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f58:	f010 0301 	ands.w	r3, r0, #1
 8008f5c:	d00a      	beq.n	8008f74 <__swsetup_r+0xbc>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60a3      	str	r3, [r4, #8]
 8008f62:	6963      	ldr	r3, [r4, #20]
 8008f64:	425b      	negs	r3, r3
 8008f66:	61a3      	str	r3, [r4, #24]
 8008f68:	6923      	ldr	r3, [r4, #16]
 8008f6a:	b943      	cbnz	r3, 8008f7e <__swsetup_r+0xc6>
 8008f6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f70:	d1ba      	bne.n	8008ee8 <__swsetup_r+0x30>
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	0781      	lsls	r1, r0, #30
 8008f76:	bf58      	it	pl
 8008f78:	6963      	ldrpl	r3, [r4, #20]
 8008f7a:	60a3      	str	r3, [r4, #8]
 8008f7c:	e7f4      	b.n	8008f68 <__swsetup_r+0xb0>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e7f7      	b.n	8008f72 <__swsetup_r+0xba>
 8008f82:	bf00      	nop
 8008f84:	20000018 	.word	0x20000018
 8008f88:	080093c4 	.word	0x080093c4
 8008f8c:	080093e4 	.word	0x080093e4
 8008f90:	080093a4 	.word	0x080093a4

08008f94 <_close_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d06      	ldr	r5, [pc, #24]	; (8008fb0 <_close_r+0x1c>)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	602b      	str	r3, [r5, #0]
 8008fa0:	f7f9 ff13 	bl	8002dca <_close>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d102      	bne.n	8008fae <_close_r+0x1a>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	b103      	cbz	r3, 8008fae <_close_r+0x1a>
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	bd38      	pop	{r3, r4, r5, pc}
 8008fb0:	20000838 	.word	0x20000838

08008fb4 <__sflush_r>:
 8008fb4:	898a      	ldrh	r2, [r1, #12]
 8008fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fba:	4605      	mov	r5, r0
 8008fbc:	0710      	lsls	r0, r2, #28
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	d458      	bmi.n	8009074 <__sflush_r+0xc0>
 8008fc2:	684b      	ldr	r3, [r1, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	dc05      	bgt.n	8008fd4 <__sflush_r+0x20>
 8008fc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	dc02      	bgt.n	8008fd4 <__sflush_r+0x20>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fd6:	2e00      	cmp	r6, #0
 8008fd8:	d0f9      	beq.n	8008fce <__sflush_r+0x1a>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fe0:	682f      	ldr	r7, [r5, #0]
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	d032      	beq.n	800904c <__sflush_r+0x98>
 8008fe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	075a      	lsls	r2, r3, #29
 8008fec:	d505      	bpl.n	8008ffa <__sflush_r+0x46>
 8008fee:	6863      	ldr	r3, [r4, #4]
 8008ff0:	1ac0      	subs	r0, r0, r3
 8008ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ff4:	b10b      	cbz	r3, 8008ffa <__sflush_r+0x46>
 8008ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ff8:	1ac0      	subs	r0, r0, r3
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009000:	6a21      	ldr	r1, [r4, #32]
 8009002:	4628      	mov	r0, r5
 8009004:	47b0      	blx	r6
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	d106      	bne.n	800901a <__sflush_r+0x66>
 800900c:	6829      	ldr	r1, [r5, #0]
 800900e:	291d      	cmp	r1, #29
 8009010:	d82c      	bhi.n	800906c <__sflush_r+0xb8>
 8009012:	4a2a      	ldr	r2, [pc, #168]	; (80090bc <__sflush_r+0x108>)
 8009014:	40ca      	lsrs	r2, r1
 8009016:	07d6      	lsls	r6, r2, #31
 8009018:	d528      	bpl.n	800906c <__sflush_r+0xb8>
 800901a:	2200      	movs	r2, #0
 800901c:	6062      	str	r2, [r4, #4]
 800901e:	04d9      	lsls	r1, r3, #19
 8009020:	6922      	ldr	r2, [r4, #16]
 8009022:	6022      	str	r2, [r4, #0]
 8009024:	d504      	bpl.n	8009030 <__sflush_r+0x7c>
 8009026:	1c42      	adds	r2, r0, #1
 8009028:	d101      	bne.n	800902e <__sflush_r+0x7a>
 800902a:	682b      	ldr	r3, [r5, #0]
 800902c:	b903      	cbnz	r3, 8009030 <__sflush_r+0x7c>
 800902e:	6560      	str	r0, [r4, #84]	; 0x54
 8009030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009032:	602f      	str	r7, [r5, #0]
 8009034:	2900      	cmp	r1, #0
 8009036:	d0ca      	beq.n	8008fce <__sflush_r+0x1a>
 8009038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800903c:	4299      	cmp	r1, r3
 800903e:	d002      	beq.n	8009046 <__sflush_r+0x92>
 8009040:	4628      	mov	r0, r5
 8009042:	f000 f8fd 	bl	8009240 <_free_r>
 8009046:	2000      	movs	r0, #0
 8009048:	6360      	str	r0, [r4, #52]	; 0x34
 800904a:	e7c1      	b.n	8008fd0 <__sflush_r+0x1c>
 800904c:	6a21      	ldr	r1, [r4, #32]
 800904e:	2301      	movs	r3, #1
 8009050:	4628      	mov	r0, r5
 8009052:	47b0      	blx	r6
 8009054:	1c41      	adds	r1, r0, #1
 8009056:	d1c7      	bne.n	8008fe8 <__sflush_r+0x34>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0c4      	beq.n	8008fe8 <__sflush_r+0x34>
 800905e:	2b1d      	cmp	r3, #29
 8009060:	d001      	beq.n	8009066 <__sflush_r+0xb2>
 8009062:	2b16      	cmp	r3, #22
 8009064:	d101      	bne.n	800906a <__sflush_r+0xb6>
 8009066:	602f      	str	r7, [r5, #0]
 8009068:	e7b1      	b.n	8008fce <__sflush_r+0x1a>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	e7ad      	b.n	8008fd0 <__sflush_r+0x1c>
 8009074:	690f      	ldr	r7, [r1, #16]
 8009076:	2f00      	cmp	r7, #0
 8009078:	d0a9      	beq.n	8008fce <__sflush_r+0x1a>
 800907a:	0793      	lsls	r3, r2, #30
 800907c:	680e      	ldr	r6, [r1, #0]
 800907e:	bf08      	it	eq
 8009080:	694b      	ldreq	r3, [r1, #20]
 8009082:	600f      	str	r7, [r1, #0]
 8009084:	bf18      	it	ne
 8009086:	2300      	movne	r3, #0
 8009088:	eba6 0807 	sub.w	r8, r6, r7
 800908c:	608b      	str	r3, [r1, #8]
 800908e:	f1b8 0f00 	cmp.w	r8, #0
 8009092:	dd9c      	ble.n	8008fce <__sflush_r+0x1a>
 8009094:	6a21      	ldr	r1, [r4, #32]
 8009096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009098:	4643      	mov	r3, r8
 800909a:	463a      	mov	r2, r7
 800909c:	4628      	mov	r0, r5
 800909e:	47b0      	blx	r6
 80090a0:	2800      	cmp	r0, #0
 80090a2:	dc06      	bgt.n	80090b2 <__sflush_r+0xfe>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090aa:	81a3      	strh	r3, [r4, #12]
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295
 80090b0:	e78e      	b.n	8008fd0 <__sflush_r+0x1c>
 80090b2:	4407      	add	r7, r0
 80090b4:	eba8 0800 	sub.w	r8, r8, r0
 80090b8:	e7e9      	b.n	800908e <__sflush_r+0xda>
 80090ba:	bf00      	nop
 80090bc:	20400001 	.word	0x20400001

080090c0 <_fflush_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	690b      	ldr	r3, [r1, #16]
 80090c4:	4605      	mov	r5, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	b913      	cbnz	r3, 80090d0 <_fflush_r+0x10>
 80090ca:	2500      	movs	r5, #0
 80090cc:	4628      	mov	r0, r5
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	b118      	cbz	r0, 80090da <_fflush_r+0x1a>
 80090d2:	6983      	ldr	r3, [r0, #24]
 80090d4:	b90b      	cbnz	r3, 80090da <_fflush_r+0x1a>
 80090d6:	f7ff fa15 	bl	8008504 <__sinit>
 80090da:	4b14      	ldr	r3, [pc, #80]	; (800912c <_fflush_r+0x6c>)
 80090dc:	429c      	cmp	r4, r3
 80090de:	d11b      	bne.n	8009118 <_fflush_r+0x58>
 80090e0:	686c      	ldr	r4, [r5, #4]
 80090e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0ef      	beq.n	80090ca <_fflush_r+0xa>
 80090ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090ec:	07d0      	lsls	r0, r2, #31
 80090ee:	d404      	bmi.n	80090fa <_fflush_r+0x3a>
 80090f0:	0599      	lsls	r1, r3, #22
 80090f2:	d402      	bmi.n	80090fa <_fflush_r+0x3a>
 80090f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090f6:	f7ff faa3 	bl	8008640 <__retarget_lock_acquire_recursive>
 80090fa:	4628      	mov	r0, r5
 80090fc:	4621      	mov	r1, r4
 80090fe:	f7ff ff59 	bl	8008fb4 <__sflush_r>
 8009102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009104:	07da      	lsls	r2, r3, #31
 8009106:	4605      	mov	r5, r0
 8009108:	d4e0      	bmi.n	80090cc <_fflush_r+0xc>
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	059b      	lsls	r3, r3, #22
 800910e:	d4dd      	bmi.n	80090cc <_fflush_r+0xc>
 8009110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009112:	f7ff fa96 	bl	8008642 <__retarget_lock_release_recursive>
 8009116:	e7d9      	b.n	80090cc <_fflush_r+0xc>
 8009118:	4b05      	ldr	r3, [pc, #20]	; (8009130 <_fflush_r+0x70>)
 800911a:	429c      	cmp	r4, r3
 800911c:	d101      	bne.n	8009122 <_fflush_r+0x62>
 800911e:	68ac      	ldr	r4, [r5, #8]
 8009120:	e7df      	b.n	80090e2 <_fflush_r+0x22>
 8009122:	4b04      	ldr	r3, [pc, #16]	; (8009134 <_fflush_r+0x74>)
 8009124:	429c      	cmp	r4, r3
 8009126:	bf08      	it	eq
 8009128:	68ec      	ldreq	r4, [r5, #12]
 800912a:	e7da      	b.n	80090e2 <_fflush_r+0x22>
 800912c:	080093c4 	.word	0x080093c4
 8009130:	080093e4 	.word	0x080093e4
 8009134:	080093a4 	.word	0x080093a4

08009138 <_lseek_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4d07      	ldr	r5, [pc, #28]	; (8009158 <_lseek_r+0x20>)
 800913c:	4604      	mov	r4, r0
 800913e:	4608      	mov	r0, r1
 8009140:	4611      	mov	r1, r2
 8009142:	2200      	movs	r2, #0
 8009144:	602a      	str	r2, [r5, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	f7f9 fe66 	bl	8002e18 <_lseek>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	d102      	bne.n	8009156 <_lseek_r+0x1e>
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	b103      	cbz	r3, 8009156 <_lseek_r+0x1e>
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	20000838 	.word	0x20000838

0800915c <__swhatbuf_r>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	460e      	mov	r6, r1
 8009160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009164:	2900      	cmp	r1, #0
 8009166:	b096      	sub	sp, #88	; 0x58
 8009168:	4614      	mov	r4, r2
 800916a:	461d      	mov	r5, r3
 800916c:	da08      	bge.n	8009180 <__swhatbuf_r+0x24>
 800916e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	602a      	str	r2, [r5, #0]
 8009176:	061a      	lsls	r2, r3, #24
 8009178:	d410      	bmi.n	800919c <__swhatbuf_r+0x40>
 800917a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800917e:	e00e      	b.n	800919e <__swhatbuf_r+0x42>
 8009180:	466a      	mov	r2, sp
 8009182:	f000 f8bb 	bl	80092fc <_fstat_r>
 8009186:	2800      	cmp	r0, #0
 8009188:	dbf1      	blt.n	800916e <__swhatbuf_r+0x12>
 800918a:	9a01      	ldr	r2, [sp, #4]
 800918c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009190:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009194:	425a      	negs	r2, r3
 8009196:	415a      	adcs	r2, r3
 8009198:	602a      	str	r2, [r5, #0]
 800919a:	e7ee      	b.n	800917a <__swhatbuf_r+0x1e>
 800919c:	2340      	movs	r3, #64	; 0x40
 800919e:	2000      	movs	r0, #0
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	b016      	add	sp, #88	; 0x58
 80091a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080091a8 <__smakebuf_r>:
 80091a8:	898b      	ldrh	r3, [r1, #12]
 80091aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091ac:	079d      	lsls	r5, r3, #30
 80091ae:	4606      	mov	r6, r0
 80091b0:	460c      	mov	r4, r1
 80091b2:	d507      	bpl.n	80091c4 <__smakebuf_r+0x1c>
 80091b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	6123      	str	r3, [r4, #16]
 80091bc:	2301      	movs	r3, #1
 80091be:	6163      	str	r3, [r4, #20]
 80091c0:	b002      	add	sp, #8
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	ab01      	add	r3, sp, #4
 80091c6:	466a      	mov	r2, sp
 80091c8:	f7ff ffc8 	bl	800915c <__swhatbuf_r>
 80091cc:	9900      	ldr	r1, [sp, #0]
 80091ce:	4605      	mov	r5, r0
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7ff fa57 	bl	8008684 <_malloc_r>
 80091d6:	b948      	cbnz	r0, 80091ec <__smakebuf_r+0x44>
 80091d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091dc:	059a      	lsls	r2, r3, #22
 80091de:	d4ef      	bmi.n	80091c0 <__smakebuf_r+0x18>
 80091e0:	f023 0303 	bic.w	r3, r3, #3
 80091e4:	f043 0302 	orr.w	r3, r3, #2
 80091e8:	81a3      	strh	r3, [r4, #12]
 80091ea:	e7e3      	b.n	80091b4 <__smakebuf_r+0xc>
 80091ec:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <__smakebuf_r+0x7c>)
 80091ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	6020      	str	r0, [r4, #0]
 80091f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f8:	81a3      	strh	r3, [r4, #12]
 80091fa:	9b00      	ldr	r3, [sp, #0]
 80091fc:	6163      	str	r3, [r4, #20]
 80091fe:	9b01      	ldr	r3, [sp, #4]
 8009200:	6120      	str	r0, [r4, #16]
 8009202:	b15b      	cbz	r3, 800921c <__smakebuf_r+0x74>
 8009204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009208:	4630      	mov	r0, r6
 800920a:	f000 f889 	bl	8009320 <_isatty_r>
 800920e:	b128      	cbz	r0, 800921c <__smakebuf_r+0x74>
 8009210:	89a3      	ldrh	r3, [r4, #12]
 8009212:	f023 0303 	bic.w	r3, r3, #3
 8009216:	f043 0301 	orr.w	r3, r3, #1
 800921a:	81a3      	strh	r3, [r4, #12]
 800921c:	89a0      	ldrh	r0, [r4, #12]
 800921e:	4305      	orrs	r5, r0
 8009220:	81a5      	strh	r5, [r4, #12]
 8009222:	e7cd      	b.n	80091c0 <__smakebuf_r+0x18>
 8009224:	0800849d 	.word	0x0800849d

08009228 <__malloc_lock>:
 8009228:	4801      	ldr	r0, [pc, #4]	; (8009230 <__malloc_lock+0x8>)
 800922a:	f7ff ba09 	b.w	8008640 <__retarget_lock_acquire_recursive>
 800922e:	bf00      	nop
 8009230:	2000082c 	.word	0x2000082c

08009234 <__malloc_unlock>:
 8009234:	4801      	ldr	r0, [pc, #4]	; (800923c <__malloc_unlock+0x8>)
 8009236:	f7ff ba04 	b.w	8008642 <__retarget_lock_release_recursive>
 800923a:	bf00      	nop
 800923c:	2000082c 	.word	0x2000082c

08009240 <_free_r>:
 8009240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009242:	2900      	cmp	r1, #0
 8009244:	d044      	beq.n	80092d0 <_free_r+0x90>
 8009246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800924a:	9001      	str	r0, [sp, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	f1a1 0404 	sub.w	r4, r1, #4
 8009252:	bfb8      	it	lt
 8009254:	18e4      	addlt	r4, r4, r3
 8009256:	f7ff ffe7 	bl	8009228 <__malloc_lock>
 800925a:	4a1e      	ldr	r2, [pc, #120]	; (80092d4 <_free_r+0x94>)
 800925c:	9801      	ldr	r0, [sp, #4]
 800925e:	6813      	ldr	r3, [r2, #0]
 8009260:	b933      	cbnz	r3, 8009270 <_free_r+0x30>
 8009262:	6063      	str	r3, [r4, #4]
 8009264:	6014      	str	r4, [r2, #0]
 8009266:	b003      	add	sp, #12
 8009268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800926c:	f7ff bfe2 	b.w	8009234 <__malloc_unlock>
 8009270:	42a3      	cmp	r3, r4
 8009272:	d908      	bls.n	8009286 <_free_r+0x46>
 8009274:	6825      	ldr	r5, [r4, #0]
 8009276:	1961      	adds	r1, r4, r5
 8009278:	428b      	cmp	r3, r1
 800927a:	bf01      	itttt	eq
 800927c:	6819      	ldreq	r1, [r3, #0]
 800927e:	685b      	ldreq	r3, [r3, #4]
 8009280:	1949      	addeq	r1, r1, r5
 8009282:	6021      	streq	r1, [r4, #0]
 8009284:	e7ed      	b.n	8009262 <_free_r+0x22>
 8009286:	461a      	mov	r2, r3
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	b10b      	cbz	r3, 8009290 <_free_r+0x50>
 800928c:	42a3      	cmp	r3, r4
 800928e:	d9fa      	bls.n	8009286 <_free_r+0x46>
 8009290:	6811      	ldr	r1, [r2, #0]
 8009292:	1855      	adds	r5, r2, r1
 8009294:	42a5      	cmp	r5, r4
 8009296:	d10b      	bne.n	80092b0 <_free_r+0x70>
 8009298:	6824      	ldr	r4, [r4, #0]
 800929a:	4421      	add	r1, r4
 800929c:	1854      	adds	r4, r2, r1
 800929e:	42a3      	cmp	r3, r4
 80092a0:	6011      	str	r1, [r2, #0]
 80092a2:	d1e0      	bne.n	8009266 <_free_r+0x26>
 80092a4:	681c      	ldr	r4, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	6053      	str	r3, [r2, #4]
 80092aa:	4421      	add	r1, r4
 80092ac:	6011      	str	r1, [r2, #0]
 80092ae:	e7da      	b.n	8009266 <_free_r+0x26>
 80092b0:	d902      	bls.n	80092b8 <_free_r+0x78>
 80092b2:	230c      	movs	r3, #12
 80092b4:	6003      	str	r3, [r0, #0]
 80092b6:	e7d6      	b.n	8009266 <_free_r+0x26>
 80092b8:	6825      	ldr	r5, [r4, #0]
 80092ba:	1961      	adds	r1, r4, r5
 80092bc:	428b      	cmp	r3, r1
 80092be:	bf04      	itt	eq
 80092c0:	6819      	ldreq	r1, [r3, #0]
 80092c2:	685b      	ldreq	r3, [r3, #4]
 80092c4:	6063      	str	r3, [r4, #4]
 80092c6:	bf04      	itt	eq
 80092c8:	1949      	addeq	r1, r1, r5
 80092ca:	6021      	streq	r1, [r4, #0]
 80092cc:	6054      	str	r4, [r2, #4]
 80092ce:	e7ca      	b.n	8009266 <_free_r+0x26>
 80092d0:	b003      	add	sp, #12
 80092d2:	bd30      	pop	{r4, r5, pc}
 80092d4:	20000830 	.word	0x20000830

080092d8 <_read_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_read_r+0x20>)
 80092dc:	4604      	mov	r4, r0
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f7f9 fd36 	bl	8002d58 <_read>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_read_r+0x1e>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_read_r+0x1e>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20000838 	.word	0x20000838

080092fc <_fstat_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4d07      	ldr	r5, [pc, #28]	; (800931c <_fstat_r+0x20>)
 8009300:	2300      	movs	r3, #0
 8009302:	4604      	mov	r4, r0
 8009304:	4608      	mov	r0, r1
 8009306:	4611      	mov	r1, r2
 8009308:	602b      	str	r3, [r5, #0]
 800930a:	f7f9 fd6a 	bl	8002de2 <_fstat>
 800930e:	1c43      	adds	r3, r0, #1
 8009310:	d102      	bne.n	8009318 <_fstat_r+0x1c>
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	b103      	cbz	r3, 8009318 <_fstat_r+0x1c>
 8009316:	6023      	str	r3, [r4, #0]
 8009318:	bd38      	pop	{r3, r4, r5, pc}
 800931a:	bf00      	nop
 800931c:	20000838 	.word	0x20000838

08009320 <_isatty_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4d06      	ldr	r5, [pc, #24]	; (800933c <_isatty_r+0x1c>)
 8009324:	2300      	movs	r3, #0
 8009326:	4604      	mov	r4, r0
 8009328:	4608      	mov	r0, r1
 800932a:	602b      	str	r3, [r5, #0]
 800932c:	f7f9 fd69 	bl	8002e02 <_isatty>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_isatty_r+0x1a>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	b103      	cbz	r3, 800933a <_isatty_r+0x1a>
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	20000838 	.word	0x20000838

08009340 <_init>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr

0800934c <_fini>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr
