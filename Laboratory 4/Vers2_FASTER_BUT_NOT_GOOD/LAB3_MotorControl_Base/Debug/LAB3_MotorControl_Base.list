
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009270  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08009470  08009470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009570  08009570  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009578  08009578  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009578  08009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  2000007c  080095fc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  080095fc  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e39  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c97  00000000  00000000  00038ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  0003bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0003d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a84c  00000000  00000000  0003e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b572  00000000  00000000  00068cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107785  00000000  00000000  00084246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018b9cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061a4  00000000  00000000  0018ba1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009458 	.word	0x08009458

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08009458 	.word	0x08009458

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000600:	2301      	movs	r3, #1
 8000602:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8000604:	e025      	b.n	8000652 <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <cobsEncode+0x3e>
            FinishBlock(code);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	7efa      	ldrb	r2, [r7, #27]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	2301      	movs	r3, #1
 800061e:	76fb      	strb	r3, [r7, #27]
 8000620:	e014      	b.n	800064c <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 800062e:	7efb      	ldrb	r3, [r7, #27]
 8000630:	3301      	adds	r3, #1
 8000632:	76fb      	strb	r3, [r7, #27]
 8000634:	7efb      	ldrb	r3, [r7, #27]
 8000636:	2bff      	cmp	r3, #255	; 0xff
 8000638:	d108      	bne.n	800064c <cobsEncode+0x68>
                FinishBlock(code);
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	7efa      	ldrb	r2, [r7, #27]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	2301      	movs	r3, #1
 800064a:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3d5      	bcc.n	8000606 <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	7efa      	ldrb	r2, [r7, #27]
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	2301      	movs	r3, #1
 800066a:	76fb      	strb	r3, [r7, #27]
}
 800066c:	bf00      	nop
 800066e:	3724      	adds	r7, #36	; 0x24
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01c      	beq.n	80006c6 <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3321      	adds	r3, #33	; 0x21
 8000690:	461a      	mov	r2, r3
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff ffa5 	bl	80005e4 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3302      	adds	r3, #2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	f007 f99b 	bl	80079f8 <HAL_UART_Transmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e000      	b.n	80006c8 <ertc_dlog_send+0x50>
	}

	return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c59      	adds	r1, r3, #1
 80006e2:	2303      	movs	r3, #3
 80006e4:	2201      	movs	r2, #1
 80006e6:	f007 fa0a 	bl	8007afe <HAL_UART_Receive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10e      	bne.n	800070e <ertc_dlog_update+0x3e>
		switch (logger->rxbuff[0]) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b41      	cmp	r3, #65	; 0x41
 80006f6:	d002      	beq.n	80006fe <ertc_dlog_update+0x2e>
 80006f8:	2b42      	cmp	r3, #66	; 0x42
 80006fa:	d004      	beq.n	8000706 <ertc_dlog_update+0x36>
 80006fc:	e008      	b.n	8000710 <ertc_dlog_update+0x40>
			case TX_START_CMD:
				logger->tx_enable = true;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				break;
 8000704:	e004      	b.n	8000710 <ertc_dlog_update+0x40>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
				break;
 800070c:	e000      	b.n	8000710 <ertc_dlog_update+0x40>
//			default:
//				logger->tx_enable = false;
		}
	}
 800070e:	bf00      	nop
	return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <saturate1>:
    voltage = -VLIM;
  return voltage;
}

float saturate1(float voltage)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	ed87 0a01 	vstr	s0, [r7, #4]
  if (voltage > 8)
 8000726:	edd7 7a01 	vldr	s15, [r7, #4]
 800072a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800072e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000736:	dd03      	ble.n	8000740 <saturate1+0x24>
    voltage = VLIM;
 8000738:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <saturate1+0x58>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e00f      	b.n	8000760 <saturate1+0x44>
  else if (voltage < -8)
 8000740:	edd7 7a01 	vldr	s15, [r7, #4]
 8000744:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8000748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000750:	d506      	bpl.n	8000760 <saturate1+0x44>
    voltage = -VLIM;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <saturate1+0x58>)
 8000754:	edd3 7a00 	vldr	s15, [r3]
 8000758:	eef1 7a67 	vneg.f32	s15, s15
 800075c:	edc7 7a01 	vstr	s15, [r7, #4]
  return voltage;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	ee07 3a90 	vmov	s15, r3
}
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000004 	.word	0x20000004

08000778 <compute_error>:
  voltage = KP * error + I2;
  voltage = saturate(voltage);
  return voltage;
}

float compute_error(uint8_t line_sensor_data) {
 8000778:	b480      	push	{r7}
 800077a:	b087      	sub	sp, #28
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t sens_data = line_sensor_data;
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	75fb      	strb	r3, [r7, #23]
	float err_sum = 0;
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
	int i= 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
	int count = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
	while (sens_data) {
 8000794:	e020      	b.n	80007d8 <compute_error+0x60>
		count += sens_data & 1;
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	4413      	add	r3, r2
 80007a0:	60bb      	str	r3, [r7, #8]
		err_sum += omega_n[i]*(sens_data & 1);
 80007a2:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <compute_error+0x98>)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	ed93 7a00 	vldr	s14, [r3]
 80007ae:	7dfb      	ldrb	r3, [r7, #23]
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	ee07 3a90 	vmov	s15, r3
 80007b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80007c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c8:	edc7 7a04 	vstr	s15, [r7, #16]
		sens_data >>= 1;
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	085b      	lsrs	r3, r3, #1
 80007d0:	75fb      	strb	r3, [r7, #23]
		i++;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
	while (sens_data) {
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1db      	bne.n	8000796 <compute_error+0x1e>
	}
	if(count == 0)
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <compute_error+0x72>
		return (float) 0;
 80007e4:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000814 <compute_error+0x9c>
 80007e8:	e008      	b.n	80007fc <compute_error+0x84>
	return (float)(err_sum/count);
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80007f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80007fc:	eef0 7a66 	vmov.f32	s15, s13
 8000800:	eeb0 0a67 	vmov.f32	s0, s15
 8000804:	371c      	adds	r7, #28
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	08009490 	.word	0x08009490
 8000814:	00000000 	.word	0x00000000

08000818 <Simple_Linear_Ctrl>:

float Simple_Linear_Ctrl(float error_sl){
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	ed87 0a01 	vstr	s0, [r7, #4]
	float K = 0.01;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <Simple_Linear_Ctrl+0x38>)
 8000824:	60fb      	str	r3, [r7, #12]

	float correction = K*error_sl;
 8000826:	ed97 7a03 	vldr	s14, [r7, #12]
 800082a:	edd7 7a01 	vldr	s15, [r7, #4]
 800082e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000832:	edc7 7a02 	vstr	s15, [r7, #8]

	correction = error_sl;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	60bb      	str	r3, [r7, #8]

	return correction;
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	ee07 3a90 	vmov	s15, r3
}
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	3c23d70a 	.word	0x3c23d70a
 8000854:	00000000 	.word	0x00000000

08000858 <computeRpm>:


float computeRpm(int32_t encoder_read)
{
 8000858:	b480      	push	{r7}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  float revolutions = 0;
 8000860:	f04f 0300 	mov.w	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  float motor_rpm = 0;
 8000866:	f04f 0300 	mov.w	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  revolutions = ((float)encoder_read / 3840.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	ee07 3a90 	vmov	s15, r3
 8000872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000876:	eddf 6a14 	vldr	s13, [pc, #80]	; 80008c8 <computeRpm+0x70>
 800087a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800087e:	edc7 7a05 	vstr	s15, [r7, #20]
  float wheel_rpm = 60.0 * revolutions / (float)TS;
 8000882:	edd7 7a05 	vldr	s15, [r7, #20]
 8000886:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800088a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80008b8 <computeRpm+0x60>
 800088e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000892:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80008c0 <computeRpm+0x68>
 8000896:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800089a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089e:	edc7 7a03 	vstr	s15, [r7, #12]
  return (float) wheel_rpm;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	ee07 3a90 	vmov	s15, r3
}
 80008a8:	eeb0 0a67 	vmov.f32	s0, s15
 80008ac:	371c      	adds	r7, #28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	00000000 	.word	0x00000000
 80008bc:	404e0000 	.word	0x404e0000
 80008c0:	40000000 	.word	0x40000000
 80008c4:	3f847ae1 	.word	0x3f847ae1
 80008c8:	45700000 	.word	0x45700000

080008cc <countBit>:

// Callback to select VREF manually
float speed = VREF;
int actual_keyboard_value;

uint8_t countBit(uint8_t n){
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
	while(n){
 80008da:	e009      	b.n	80008f0 <countBit+0x24>
		count += n & 1;
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	4413      	add	r3, r2
 80008e8:	73fb      	strb	r3, [r7, #15]
		n>>=1;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	71fb      	strb	r3, [r7, #7]
	while(n){
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f2      	bne.n	80008dc <countBit+0x10>
	}
	return count;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af04      	add	r7, sp, #16
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]

  uint8_t buf[2], data;

  HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_1, 1, &buf[0], 1, HAL_TIMEOUT);
 800090e:	2364      	movs	r3, #100	; 0x64
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	2301      	movs	r3, #1
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2301      	movs	r3, #1
 800091e:	2227      	movs	r2, #39	; 0x27
 8000920:	217e      	movs	r1, #126	; 0x7e
 8000922:	482c      	ldr	r0, [pc, #176]	; (80009d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000924:	f003 fb62 	bl	8003fec <HAL_I2C_Mem_Read>
 8000928:	4603      	mov	r3, r0
 800092a:	75fb      	strb	r3, [r7, #23]

  status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_DATA_2, 1, &buf[1], 1, HAL_TIMEOUT);
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	9302      	str	r3, [sp, #8]
 8000930:	2301      	movs	r3, #1
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	3301      	adds	r3, #1
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2301      	movs	r3, #1
 800093e:	2228      	movs	r2, #40	; 0x28
 8000940:	217e      	movs	r1, #126	; 0x7e
 8000942:	4824      	ldr	r0, [pc, #144]	; (80009d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000944:	f003 fb52 	bl	8003fec <HAL_I2C_Mem_Read>
 8000948:	4603      	mov	r3, r0
 800094a:	75fb      	strb	r3, [r7, #23]

  int row = countBit(~buf[0]-1);
 800094c:	7a3a      	ldrb	r2, [r7, #8]
 800094e:	f06f 0301 	mvn.w	r3, #1
 8000952:	1a9b      	subs	r3, r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ffb8 	bl	80008cc <countBit>
 800095c:	4603      	mov	r3, r0
 800095e:	613b      	str	r3, [r7, #16]
  int column = countBit(~buf[1]-1);
 8000960:	7a7a      	ldrb	r2, [r7, #9]
 8000962:	f06f 0301 	mvn.w	r3, #1
 8000966:	1a9b      	subs	r3, r3, r2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ffae 	bl	80008cc <countBit>
 8000970:	4603      	mov	r3, r0
 8000972:	60fb      	str	r3, [r7, #12]


  // HARD WAY
  if(keypadLayout[column][row] == '#')
 8000974:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	441a      	add	r2, r3
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b23      	cmp	r3, #35	; 0x23
 8000984:	d110      	bne.n	80009a8 <HAL_GPIO_EXTI_Callback+0xa4>
  {
	  speed = (float) actual_keyboard_value*120;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_GPIO_EXTI_Callback+0xd8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	ee07 3a90 	vmov	s15, r3
 800098e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000992:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80009e0 <HAL_GPIO_EXTI_Callback+0xdc>
 8000996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800099c:	edc3 7a00 	vstr	s15, [r3]
	  actual_keyboard_value = 0;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
  else
  {
	  actual_keyboard_value = actual_keyboard_value*10 + ((int) keypadLayout[column][row]-48);
  }

}
 80009a6:	e011      	b.n	80009cc <HAL_GPIO_EXTI_Callback+0xc8>
	  actual_keyboard_value = actual_keyboard_value*10 + ((int) keypadLayout[column][row]-48);
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4613      	mov	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	4619      	mov	r1, r3
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	441a      	add	r2, r3
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	3b30      	subs	r3, #48	; 0x30
 80009c6:	440b      	add	r3, r1
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_GPIO_EXTI_Callback+0xd8>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000e0 	.word	0x200000e0
 80009d8:	080094b0 	.word	0x080094b0
 80009dc:	200007f8 	.word	0x200007f8
 80009e0:	42f00000 	.word	0x42f00000
 80009e4:	20000008 	.word	0x20000008

080009e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af04      	add	r7, sp, #16
 80009ee:	6078      	str	r0, [r7, #4]
  // && logger.tx_enable
  if (htim->Instance == TIM6)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4aa2      	ldr	r2, [pc, #648]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	f040 8288 	bne.w	8000f0c <HAL_TIM_PeriodElapsedCallback+0x524>
  {
	uint8_t buff;
	HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &buff, 1, HAL_TIMEOUT);
 80009fc:	2364      	movs	r3, #100	; 0x64
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	2301      	movs	r3, #1
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	f107 030f 	add.w	r3, r7, #15
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	217c      	movs	r1, #124	; 0x7c
 8000a10:	489c      	ldr	r0, [pc, #624]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000a12:	f003 faeb 	bl	8003fec <HAL_I2C_Mem_Read>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	float error_sensor = compute_error(buff);
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff feaa 	bl	8000778 <compute_error>
 8000a24:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	//float angle_error = error_sensor/H;

    static int32_t TIM3_PreviousCount = 0;
    static int32_t TIM4_PreviousCount = 0;

    TIM3_CurrentCount = (int32_t) __HAL_TIM_GET_COUNTER(&htim3);
 8000a28:	4b97      	ldr	r3, [pc, #604]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b96      	ldr	r3, [pc, #600]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000a32:	601a      	str	r2, [r3, #0]
    TIM4_CurrentCount = (int32_t) __HAL_TIM_GET_COUNTER(&htim4);
 8000a34:	4b96      	ldr	r3, [pc, #600]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b95      	ldr	r3, [pc, #596]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a3e:	601a      	str	r2, [r3, #0]

    /* evaluate increment of TIM3 counter from previous count */
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8000a40:	4b91      	ldr	r3, [pc, #580]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	2b10      	cmp	r3, #16
 8000a4c:	d117      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x96>
    {
      /* check for counter underflow */
      if (TIM3_CurrentCount <= TIM3_PreviousCount)
 8000a4e:	4b8f      	ldr	r3, [pc, #572]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b91      	ldr	r3, [pc, #580]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	dc07      	bgt.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x82>
        TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000a5a:	4b8c      	ldr	r3, [pc, #560]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b8e      	ldr	r3, [pc, #568]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	4a8d      	ldr	r2, [pc, #564]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	e021      	b.n	8000aae <HAL_TIM_PeriodElapsedCallback+0xc6>
      else
        TIM3_DiffCount = -((TIM3_ARR_VALUE + 1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 8000a6a:	4b88      	ldr	r3, [pc, #544]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f6a3 7201 	subw	r2, r3, #3841	; 0xf01
 8000a72:	4b89      	ldr	r3, [pc, #548]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	4a88      	ldr	r2, [pc, #544]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	e017      	b.n	8000aae <HAL_TIM_PeriodElapsedCallback+0xc6>
    }
    else
    {
      /* check for counter overflow */
      if (TIM3_CurrentCount >= TIM3_PreviousCount)
 8000a7e:	4b83      	ldr	r3, [pc, #524]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b85      	ldr	r3, [pc, #532]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	db07      	blt.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0xb2>
        TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000a8a:	4b80      	ldr	r3, [pc, #512]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4b82      	ldr	r3, [pc, #520]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4a81      	ldr	r2, [pc, #516]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e009      	b.n	8000aae <HAL_TIM_PeriodElapsedCallback+0xc6>
      else
        TIM3_DiffCount = ((TIM3_ARR_VALUE + 1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	f640 7301 	movw	r3, #3841	; 0xf01
 8000aa2:	1a9b      	subs	r3, r3, r2
 8000aa4:	4a79      	ldr	r2, [pc, #484]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000aa6:	6812      	ldr	r2, [r2, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a7c      	ldr	r2, [pc, #496]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000aac:	6013      	str	r3, [r2, #0]
    }

    /* evaluate increment of TIM4 counter from previous count */
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8000aae:	4b78      	ldr	r3, [pc, #480]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0310 	and.w	r3, r3, #16
 8000ab8:	2b10      	cmp	r3, #16
 8000aba:	d117      	bne.n	8000aec <HAL_TIM_PeriodElapsedCallback+0x104>
    {
      /* check for counter underflow */
      if (TIM4_CurrentCount <= TIM4_PreviousCount)
 8000abc:	4b75      	ldr	r3, [pc, #468]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b77      	ldr	r3, [pc, #476]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dc07      	bgt.n	8000ad8 <HAL_TIM_PeriodElapsedCallback+0xf0>
        TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000ac8:	4b72      	ldr	r3, [pc, #456]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b74      	ldr	r3, [pc, #464]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	4a74      	ldr	r2, [pc, #464]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e020      	b.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x132>
      else
        TIM4_DiffCount = -((TIM4_ARR_VALUE + 1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 8000ad8:	4b6e      	ldr	r3, [pc, #440]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f5a3 6270 	sub.w	r2, r3, #3840	; 0xf00
 8000ae0:	4b6f      	ldr	r3, [pc, #444]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	4a6f      	ldr	r2, [pc, #444]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	e016      	b.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x132>
    }
    else
    {
      /* check for counter overflow */
      if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8000aec:	4b69      	ldr	r3, [pc, #420]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b6b      	ldr	r3, [pc, #428]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	db07      	blt.n	8000b08 <HAL_TIM_PeriodElapsedCallback+0x120>
        TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000af8:	4b66      	ldr	r3, [pc, #408]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b68      	ldr	r3, [pc, #416]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	4a68      	ldr	r2, [pc, #416]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	e008      	b.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x132>
      else
        TIM4_DiffCount = ((TIM4_ARR_VALUE + 1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 8000b08:	4b65      	ldr	r3, [pc, #404]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f5c3 6270 	rsb	r2, r3, #3840	; 0xf00
 8000b10:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a63      	ldr	r2, [pc, #396]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b18:	6013      	str	r3, [r2, #0]
    }

    TIM3_PreviousCount = TIM3_CurrentCount;
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a5e      	ldr	r2, [pc, #376]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000b20:	6013      	str	r3, [r2, #0]
    TIM4_PreviousCount = TIM4_CurrentCount;
 8000b22:	4b5c      	ldr	r3, [pc, #368]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a5e      	ldr	r2, [pc, #376]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000b28:	6013      	str	r3, [r2, #0]

    // Compute rpm considering 16 pulses per round
    // This speed [rpm] is considered at the motor side
    // If we want the speed of the wheels we have to convert this value taking into account the gear ratio
    // This is done when we pass data to the logger
    float rpm_1 = computeRpm(TIM3_DiffCount);
 8000b2a:	4b5c      	ldr	r3, [pc, #368]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe92 	bl	8000858 <computeRpm>
 8000b34:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float rpm_2 = computeRpm(TIM4_DiffCount);
 8000b38:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fe8b 	bl	8000858 <computeRpm>
 8000b42:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

	float rads_1 = RPM2RADS*rpm_1;
 8000b46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b4e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8000c58 <HAL_TIM_PeriodElapsedCallback+0x270>
 8000b52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float rads_2 = RPM2RADS*rpm_2;
 8000b5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b66:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8000c58 <HAL_TIM_PeriodElapsedCallback+0x270>
 8000b6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b72:	edc7 7a08 	vstr	s15, [r7, #32]

    //v1 = computeRpm(TIM3_DiffCount);
    //v2 = computeRpm(TIM4_DiffCount);

    // Linear speed
	float V1 =R*rads_1;
 8000b76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7e:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8000c60 <HAL_TIM_PeriodElapsedCallback+0x278>
 8000b82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b8a:	edc7 7a07 	vstr	s15, [r7, #28]
	float V2 =R*rads_2;
 8000b8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000b92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b96:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000c60 <HAL_TIM_PeriodElapsedCallback+0x278>
 8000b9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba2:	edc7 7a06 	vstr	s15, [r7, #24]
    //error2 = (float)(speed - v2);

	float ref_1;
	float ref_2;

	float crr = Simple_Linear_Ctrl(error_sensor);
 8000ba6:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8000baa:	f7ff fe35 	bl	8000818 <Simple_Linear_Ctrl>
 8000bae:	ed87 0a05 	vstr	s0, [r7, #20]

	if(crr > 2.4 && crr < -2.4)
 8000bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bba:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000c68 <HAL_TIM_PeriodElapsedCallback+0x280>
 8000bbe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc6:	dd71      	ble.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8000bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd0:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000c70 <HAL_TIM_PeriodElapsedCallback+0x288>
 8000bd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bdc:	d566      	bpl.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x2c4>
	{
		ref_1 = 0.3*V_ref + 1.5*KPMOTOR*crr; 	//m/s
 8000bde:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000be0:	edd3 7a00 	vldr	s15, [r3]
 8000be4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000be8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000c78 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000bec:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bf0:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8000bf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf8:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 8000bfc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c00:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c08:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c14:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		ref_2 = 0.3*V_ref - 1.5*KPMOTOR*crr;
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c22:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000c78 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000c26:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c2a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8000c2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c32:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 8000c36:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c46:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c4e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8000c52:	e0aa      	b.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x3c2>
 8000c54:	f3af 8000 	nop.w
 8000c58:	f37bebd5 	.word	0xf37bebd5
 8000c5c:	3fbacee9 	.word	0x3fbacee9
 8000c60:	b020c49c 	.word	0xb020c49c
 8000c64:	3fa16872 	.word	0x3fa16872
 8000c68:	33333333 	.word	0x33333333
 8000c6c:	40033333 	.word	0x40033333
 8000c70:	33333333 	.word	0x33333333
 8000c74:	c0033333 	.word	0xc0033333
 8000c78:	33333333 	.word	0x33333333
 8000c7c:	3fd33333 	.word	0x3fd33333
 8000c80:	40001000 	.word	0x40001000
 8000c84:	200000e0 	.word	0x200000e0
 8000c88:	20000284 	.word	0x20000284
 8000c8c:	200007c0 	.word	0x200007c0
 8000c90:	200002d0 	.word	0x200002d0
 8000c94:	200007c4 	.word	0x200007c4
 8000c98:	200007fc 	.word	0x200007fc
 8000c9c:	200007c8 	.word	0x200007c8
 8000ca0:	20000800 	.word	0x20000800
 8000ca4:	200007cc 	.word	0x200007cc
 8000ca8:	20000000 	.word	0x20000000
	}
	else if(crr > 1.4 && crr < -1.4)
 8000cac:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cb4:	ed9f 6b98 	vldr	d6, [pc, #608]	; 8000f18 <HAL_TIM_PeriodElapsedCallback+0x530>
 8000cb8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc0:	dd45      	ble.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0x366>
 8000cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cca:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8000f20 <HAL_TIM_PeriodElapsedCallback+0x538>
 8000cce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd6:	d53a      	bpl.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0x366>
	{
		ref_1 = 0.6*V_ref + 1.3*KPMOTOR*crr; 	//m/s
 8000cd8:	4b9b      	ldr	r3, [pc, #620]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000cda:	edd3 7a00 	vldr	s15, [r3]
 8000cde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce2:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8000f28 <HAL_TIM_PeriodElapsedCallback+0x540>
 8000ce6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cea:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8000cee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf2:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 8000f30 <HAL_TIM_PeriodElapsedCallback+0x548>
 8000cf6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000cfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d0e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		ref_2 = 0.6*V_ref - 1.3*KPMOTOR*crr;
 8000d12:	4b8d      	ldr	r3, [pc, #564]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d1c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8000f28 <HAL_TIM_PeriodElapsedCallback+0x540>
 8000d20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d24:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8000d28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d2c:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8000f30 <HAL_TIM_PeriodElapsedCallback+0x548>
 8000d30:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d34:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d3c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d48:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8000d4c:	e02d      	b.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x3c2>
	}
	else
	{

		ref_1 = 0.85*V_ref + KPMOTOR*crr; 	//m/s
 8000d4e:	4b7e      	ldr	r3, [pc, #504]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000d50:	edd3 7a00 	vldr	s15, [r3]
 8000d54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d58:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8000f38 <HAL_TIM_PeriodElapsedCallback+0x550>
 8000d5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d60:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000d64:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		ref_2 = 0.85*V_ref - KPMOTOR*crr;
 8000d7c:	4b72      	ldr	r3, [pc, #456]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000d7e:	edd3 7a00 	vldr	s15, [r3]
 8000d82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d86:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8000f38 <HAL_TIM_PeriodElapsedCallback+0x550>
 8000d8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d8e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000d92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d9e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000da2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000da6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	 *

	 */

    // Compute control input with PID
    vIn1 = saturate1(ref_1*0.05);
 8000daa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000dae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db2:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8000f40 <HAL_TIM_PeriodElapsedCallback+0x558>
 8000db6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc2:	f7ff fcab 	bl	800071c <saturate1>
 8000dc6:	eef0 7a40 	vmov.f32	s15, s0
 8000dca:	4b60      	ldr	r3, [pc, #384]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000dcc:	edc3 7a00 	vstr	s15, [r3]
    vIn2 = saturate1(ref_2*0.05);
 8000dd0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000dd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dd8:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8000f40 <HAL_TIM_PeriodElapsedCallback+0x558>
 8000ddc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000de0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000de4:	eeb0 0a67 	vmov.f32	s0, s15
 8000de8:	f7ff fc98 	bl	800071c <saturate1>
 8000dec:	eef0 7a40 	vmov.f32	s15, s0
 8000df0:	4b57      	ldr	r3, [pc, #348]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000df2:	edc3 7a00 	vstr	s15, [r3]

    //vIn1 = PID1(error_1*120);
    //vIn2 = PID2(error_2*120);

    // Compute duty cycle
    duty1 = V2DUTY * vIn1;
 8000df6:	4b55      	ldr	r3, [pc, #340]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000f54 <HAL_TIM_PeriodElapsedCallback+0x56c>
 8000e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e04:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e06:	edc3 7a00 	vstr	s15, [r3]
    duty2 = V2DUTY * vIn2;
 8000e0a:	4b51      	ldr	r3, [pc, #324]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000f54 <HAL_TIM_PeriodElapsedCallback+0x56c>
 8000e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e18:	4b50      	ldr	r3, [pc, #320]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000e1a:	edc3 7a00 	vstr	s15, [r3]

    // Speed control routine
    /* Alternate between forward and coast */
    /* [Commented] alternate between forward and brake, TIM8_ARR_VALUE is a define*/

    if (duty1 < 0)
 8000e1e:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e20:	edd3 7a00 	vldr	s15, [r3]
 8000e24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	d501      	bpl.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x44a>
    	{uint32_t i = 0;}
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]

    //duty1 = 100;

    // Motor 1
    if (duty1 >= 0) {
 8000e32:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e34:	edd3 7a00 	vldr	s15, [r3]
 8000e38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	db0e      	blt.n	8000e60 <HAL_TIM_PeriodElapsedCallback+0x478>
       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty1);
 8000e42:	4b45      	ldr	r3, [pc, #276]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e44:	edd3 7a00 	vldr	s15, [r3]
 8000e48:	4b45      	ldr	r3, [pc, #276]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e50:	ee17 2a90 	vmov	r2, s15
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000e56:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e5e:	e00f      	b.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x498>
       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, TIM8_ARR_VALUE - duty1);
    } else {
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty1);
 8000e68:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	eef1 7a67 	vneg.f32	s15, s15
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e7a:	ee17 2a90 	vmov	r2, s15
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    // Motor 2
    if (duty2 >= 0) {
 8000e80:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000e82:	edd3 7a00 	vldr	s15, [r3]
 8000e86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8e:	db0e      	blt.n	8000eae <HAL_TIM_PeriodElapsedCallback+0x4c6>
       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)duty2);
 8000e90:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000e92:	edd3 7a00 	vldr	s15, [r3]
 8000e96:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9e:	ee17 2a90 	vmov	r2, s15
 8000ea2:	63da      	str	r2, [r3, #60]	; 0x3c
       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000ea4:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8000eac:	e00f      	b.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x4e6>
       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, TIM8_ARR_VALUE - duty2);
    } else {
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000eae:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)-duty2);
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	eef1 7a67 	vneg.f32	s15, s15
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec8:	ee17 2a90 	vmov	r2, s15
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /*	Prepare data packet */
    // Error speed and voltage
    // In this way error and speed should have the same measurement unit
    data.w1 = crr;
 8000ece:	4a25      	ldr	r2, [pc, #148]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	6013      	str	r3, [r2, #0]
    data.w2 = 0;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
    data.w3 = 0;
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
    data.u1 = 0;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
    data.u2 = duty1;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000ef2:	6113      	str	r3, [r2, #16]
    data.u3 = duty2;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000efa:	6153      	str	r3, [r2, #20]

    ertc_dlog_send(&logger, &data, sizeof(data));
 8000efc:	2218      	movs	r2, #24
 8000efe:	4919      	ldr	r1, [pc, #100]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000f00:	4819      	ldr	r0, [pc, #100]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000f02:	f7ff fbb9 	bl	8000678 <ertc_dlog_send>
    ertc_dlog_update(&logger);
 8000f06:	4818      	ldr	r0, [pc, #96]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8000f08:	f7ff fbe2 	bl	80006d0 <ertc_dlog_update>

  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3740      	adds	r7, #64	; 0x40
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	f3af 8000 	nop.w
 8000f18:	66666666 	.word	0x66666666
 8000f1c:	3ff66666 	.word	0x3ff66666
 8000f20:	66666666 	.word	0x66666666
 8000f24:	bff66666 	.word	0xbff66666
 8000f28:	33333333 	.word	0x33333333
 8000f2c:	3fe33333 	.word	0x3fe33333
 8000f30:	cccccccd 	.word	0xcccccccd
 8000f34:	3ff4cccc 	.word	0x3ff4cccc
 8000f38:	33333333 	.word	0x33333333
 8000f3c:	3feb3333 	.word	0x3feb3333
 8000f40:	9999999a 	.word	0x9999999a
 8000f44:	3fa99999 	.word	0x3fa99999
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	200007d8 	.word	0x200007d8
 8000f50:	200007dc 	.word	0x200007dc
 8000f54:	42c80000 	.word	0x42c80000
 8000f58:	200007d0 	.word	0x200007d0
 8000f5c:	200007d4 	.word	0x200007d4
 8000f60:	200003b4 	.word	0x200003b4
 8000f64:	200007e0 	.word	0x200007e0
 8000f68:	200006f4 	.word	0x200006f4

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f002 f860 	bl	8003036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 fa5b 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f001 f8b3 	bl	80020e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f7e:	f001 f881 	bl	8002084 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000f82:	f000 fac7 	bl	8001514 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f86:	f000 fb17 	bl	80015b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f8a:	f000 fb55 	bl	8001638 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000f8e:	f000 fb93 	bl	80016b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f92:	f000 fbcf 	bl	8001734 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f96:	f000 fc9d 	bl	80018d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f9a:	f000 fd35 	bl	8001a08 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f9e:	f000 fd89 	bl	8001ab4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000fa2:	f000 fddd 	bl	8001b60 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000fa6:	f000 fe8b 	bl	8001cc0 <MX_TIM8_Init>
  MX_UART4_Init();
 8000faa:	f000 ffab 	bl	8001f04 <MX_UART4_Init>
  MX_UART5_Init();
 8000fae:	f000 ffd9 	bl	8001f64 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000fb2:	f001 f807 	bl	8001fc4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fb6:	f001 f835 	bl	8002024 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 8000fba:	f000 ff53 	bl	8001e64 <MX_TIM9_Init>
  MX_TIM6_Init();
 8000fbe:	f000 fe47 	bl	8001c50 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
    HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	48bc      	ldr	r0, [pc, #752]	; (80012b8 <main+0x34c>)
 8000fc8:	f002 fe3a 	bl	8003c40 <HAL_GPIO_WritePin>

    /* Disable EXTI4_IRQ during SX1509 initialization */
    HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f002 fc70 	bl	80038b2 <HAL_NVIC_DisableIRQ>

    /* Software reset */
    data = 0x12;
 8000fd2:	2312      	movs	r3, #18
 8000fd4:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000fd6:	23c8      	movs	r3, #200	; 0xc8
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	1dbb      	adds	r3, r7, #6
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	227d      	movs	r2, #125	; 0x7d
 8000fe6:	217e      	movs	r1, #126	; 0x7e
 8000fe8:	48b4      	ldr	r0, [pc, #720]	; (80012bc <main+0x350>)
 8000fea:	f002 feeb 	bl	8003dc4 <HAL_I2C_Mem_Write>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <main+0x96>
      printf("I2C communication error (%X).\n", status);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	48b0      	ldr	r0, [pc, #704]	; (80012c0 <main+0x354>)
 8000ffe:	f007 fa9d 	bl	800853c <iprintf>

    data = 0x34;
 8001002:	2334      	movs	r3, #52	; 0x34
 8001004:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8001006:	23c8      	movs	r3, #200	; 0xc8
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1dbb      	adds	r3, r7, #6
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	227d      	movs	r2, #125	; 0x7d
 8001016:	217e      	movs	r1, #126	; 0x7e
 8001018:	48a8      	ldr	r0, [pc, #672]	; (80012bc <main+0x350>)
 800101a:	f002 fed3 	bl	8003dc4 <HAL_I2C_Mem_Write>
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <main+0xc6>
      printf("I2C communication error (%X).\n", status);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4619      	mov	r1, r3
 800102c:	48a4      	ldr	r0, [pc, #656]	; (80012c0 <main+0x354>)
 800102e:	f007 fa85 	bl	800853c <iprintf>

    HAL_Delay(100);
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f002 f85c 	bl	80030f0 <HAL_Delay>

    /* Set KeyPad scanning engine */

    /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
    data = 0x40;
 8001038:	2340      	movs	r3, #64	; 0x40
 800103a:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 800103c:	23c8      	movs	r3, #200	; 0xc8
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	1dbb      	adds	r3, r7, #6
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	221e      	movs	r2, #30
 800104c:	217e      	movs	r1, #126	; 0x7e
 800104e:	489b      	ldr	r0, [pc, #620]	; (80012bc <main+0x350>)
 8001050:	f002 feb8 	bl	8003dc4 <HAL_I2C_Mem_Write>
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <main+0xfc>
      printf("I2C communication error (%X).\n", status);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4619      	mov	r1, r3
 8001062:	4897      	ldr	r0, [pc, #604]	; (80012c0 <main+0x354>)
 8001064:	f007 fa6a 	bl	800853c <iprintf>

    /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
    data = 0xF0;
 8001068:	23f0      	movs	r3, #240	; 0xf0
 800106a:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 800106c:	23c8      	movs	r3, #200	; 0xc8
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2301      	movs	r3, #1
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	220f      	movs	r2, #15
 800107c:	217e      	movs	r1, #126	; 0x7e
 800107e:	488f      	ldr	r0, [pc, #572]	; (80012bc <main+0x350>)
 8001080:	f002 fea0 	bl	8003dc4 <HAL_I2C_Mem_Write>
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <main+0x12c>
      printf("I2C communication error (%X).\n", status);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4619      	mov	r1, r3
 8001092:	488b      	ldr	r0, [pc, #556]	; (80012c0 <main+0x354>)
 8001094:	f007 fa52 	bl	800853c <iprintf>

    /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
    data = 0x0F;
 8001098:	230f      	movs	r3, #15
 800109a:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 800109c:	23c8      	movs	r3, #200	; 0xc8
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	2301      	movs	r3, #1
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	220e      	movs	r2, #14
 80010ac:	217e      	movs	r1, #126	; 0x7e
 80010ae:	4883      	ldr	r0, [pc, #524]	; (80012bc <main+0x350>)
 80010b0:	f002 fe88 	bl	8003dc4 <HAL_I2C_Mem_Write>
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <main+0x15c>
      printf("I2C communication error (%X).\n", status);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4619      	mov	r1, r3
 80010c2:	487f      	ldr	r0, [pc, #508]	; (80012c0 <main+0x354>)
 80010c4:	f007 fa3a 	bl	800853c <iprintf>

    /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
    data = 0x0F;
 80010c8:	230f      	movs	r3, #15
 80010ca:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 80010cc:	23c8      	movs	r3, #200	; 0xc8
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2301      	movs	r3, #1
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	1dbb      	adds	r3, r7, #6
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	220b      	movs	r2, #11
 80010dc:	217e      	movs	r1, #126	; 0x7e
 80010de:	4877      	ldr	r0, [pc, #476]	; (80012bc <main+0x350>)
 80010e0:	f002 fe70 	bl	8003dc4 <HAL_I2C_Mem_Write>
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d004      	beq.n	80010f8 <main+0x18c>
      printf("I2C communication error (%X).\n", status);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4873      	ldr	r0, [pc, #460]	; (80012c0 <main+0x354>)
 80010f4:	f007 fa22 	bl	800853c <iprintf>

    /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
    data = 0x0F;
 80010f8:	230f      	movs	r3, #15
 80010fa:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 80010fc:	23c8      	movs	r3, #200	; 0xc8
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	1dbb      	adds	r3, r7, #6
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	2206      	movs	r2, #6
 800110c:	217e      	movs	r1, #126	; 0x7e
 800110e:	486b      	ldr	r0, [pc, #428]	; (80012bc <main+0x350>)
 8001110:	f002 fe58 	bl	8003dc4 <HAL_I2C_Mem_Write>
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d004      	beq.n	8001128 <main+0x1bc>
      printf("I2C communication error (%X).\n", status);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4619      	mov	r1, r3
 8001122:	4867      	ldr	r0, [pc, #412]	; (80012c0 <main+0x354>)
 8001124:	f007 fa0a 	bl	800853c <iprintf>

    /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
    data = 0x0F;
 8001128:	230f      	movs	r3, #15
 800112a:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 800112c:	23c8      	movs	r3, #200	; 0xc8
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	1dbb      	adds	r3, r7, #6
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	2223      	movs	r2, #35	; 0x23
 800113c:	217e      	movs	r1, #126	; 0x7e
 800113e:	485f      	ldr	r0, [pc, #380]	; (80012bc <main+0x350>)
 8001140:	f002 fe40 	bl	8003dc4 <HAL_I2C_Mem_Write>
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d004      	beq.n	8001158 <main+0x1ec>
      printf("I2C communication error (%X).\n", status);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4619      	mov	r1, r3
 8001152:	485b      	ldr	r0, [pc, #364]	; (80012c0 <main+0x354>)
 8001154:	f007 f9f2 	bl	800853c <iprintf>

    /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
    data = 0x05;
 8001158:	2305      	movs	r3, #5
 800115a:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 800115c:	23c8      	movs	r3, #200	; 0xc8
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	2301      	movs	r3, #1
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	1dbb      	adds	r3, r7, #6
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	2222      	movs	r2, #34	; 0x22
 800116c:	217e      	movs	r1, #126	; 0x7e
 800116e:	4853      	ldr	r0, [pc, #332]	; (80012bc <main+0x350>)
 8001170:	f002 fe28 	bl	8003dc4 <HAL_I2C_Mem_Write>
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <main+0x21c>
      printf("I2C communication error (%X).\n", status);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4619      	mov	r1, r3
 8001182:	484f      	ldr	r0, [pc, #316]	; (80012c0 <main+0x354>)
 8001184:	f007 f9da 	bl	800853c <iprintf>

    /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
    data = 0x7D;
 8001188:	237d      	movs	r3, #125	; 0x7d
 800118a:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 800118c:	23c8      	movs	r3, #200	; 0xc8
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2225      	movs	r2, #37	; 0x25
 800119c:	217e      	movs	r1, #126	; 0x7e
 800119e:	4847      	ldr	r0, [pc, #284]	; (80012bc <main+0x350>)
 80011a0:	f002 fe10 	bl	8003dc4 <HAL_I2C_Mem_Write>
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <main+0x24c>
      printf("I2C communication error (%X).\n", status);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4843      	ldr	r0, [pc, #268]	; (80012c0 <main+0x354>)
 80011b4:	f007 f9c2 	bl	800853c <iprintf>

    /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
    data = 0x1B;
 80011b8:	231b      	movs	r3, #27
 80011ba:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 80011bc:	23c8      	movs	r3, #200	; 0xc8
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2226      	movs	r2, #38	; 0x26
 80011cc:	217e      	movs	r1, #126	; 0x7e
 80011ce:	483b      	ldr	r0, [pc, #236]	; (80012bc <main+0x350>)
 80011d0:	f002 fdf8 	bl	8003dc4 <HAL_I2C_Mem_Write>
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <main+0x27c>
      printf("I2C communication error (%X).\n", status);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4837      	ldr	r0, [pc, #220]	; (80012c0 <main+0x354>)
 80011e4:	f007 f9aa 	bl	800853c <iprintf>

    /* Enable EXTI4_IRQ after SX1509 initialization */
    HAL_Delay(100);
 80011e8:	2064      	movs	r0, #100	; 0x64
 80011ea:	f001 ff81 	bl	80030f0 <HAL_Delay>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011ee:	200a      	movs	r0, #10
 80011f0:	f002 fb51 	bl	8003896 <HAL_NVIC_EnableIRQ>

    /* Disable EXTI2_IRQ during SX1509 initialization */
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80011f4:	2008      	movs	r0, #8
 80011f6:	f002 fb5c 	bl	80038b2 <HAL_NVIC_DisableIRQ>

    /* Software reset */
    data = 0x12;
 80011fa:	2312      	movs	r3, #18
 80011fc:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80011fe:	23c8      	movs	r3, #200	; 0xc8
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	1dbb      	adds	r3, r7, #6
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	227d      	movs	r2, #125	; 0x7d
 800120e:	217c      	movs	r1, #124	; 0x7c
 8001210:	482a      	ldr	r0, [pc, #168]	; (80012bc <main+0x350>)
 8001212:	f002 fdd7 	bl	8003dc4 <HAL_I2C_Mem_Write>
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <main+0x2be>
      printf("I2C communication error (%X).\n", status);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4619      	mov	r1, r3
 8001224:	4826      	ldr	r0, [pc, #152]	; (80012c0 <main+0x354>)
 8001226:	f007 f989 	bl	800853c <iprintf>

    data = 0x34;
 800122a:	2334      	movs	r3, #52	; 0x34
 800122c:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 800122e:	23c8      	movs	r3, #200	; 0xc8
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2301      	movs	r3, #1
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	1dbb      	adds	r3, r7, #6
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	227d      	movs	r2, #125	; 0x7d
 800123e:	217c      	movs	r1, #124	; 0x7c
 8001240:	481e      	ldr	r0, [pc, #120]	; (80012bc <main+0x350>)
 8001242:	f002 fdbf 	bl	8003dc4 <HAL_I2C_Mem_Write>
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <main+0x2ee>
      printf("I2C communication error (%X).\n", status);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	4619      	mov	r1, r3
 8001254:	481a      	ldr	r0, [pc, #104]	; (80012c0 <main+0x354>)
 8001256:	f007 f971 	bl	800853c <iprintf>

    HAL_Delay(100);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f001 ff48 	bl	80030f0 <HAL_Delay>

    /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8001260:	23ff      	movs	r3, #255	; 0xff
 8001262:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8001264:	23c8      	movs	r3, #200	; 0xc8
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	2301      	movs	r3, #1
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	1dbb      	adds	r3, r7, #6
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2301      	movs	r3, #1
 8001272:	220f      	movs	r2, #15
 8001274:	217c      	movs	r1, #124	; 0x7c
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <main+0x350>)
 8001278:	f002 fda4 	bl	8003dc4 <HAL_I2C_Mem_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <main+0x324>
      printf("I2C communication error (%X).\n", status);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <main+0x354>)
 800128c:	f007 f956 	bl	800853c <iprintf>

    /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8001290:	23ff      	movs	r3, #255	; 0xff
 8001292:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8001294:	23c8      	movs	r3, #200	; 0xc8
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2301      	movs	r3, #1
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	1dbb      	adds	r3, r7, #6
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2301      	movs	r3, #1
 80012a2:	220e      	movs	r2, #14
 80012a4:	217c      	movs	r1, #124	; 0x7c
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <main+0x350>)
 80012a8:	f002 fd8c 	bl	8003dc4 <HAL_I2C_Mem_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	e006      	b.n	80012c4 <main+0x358>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	200000e0 	.word	0x200000e0
 80012c0:	08009470 	.word	0x08009470
 80012c4:	d004      	beq.n	80012d0 <main+0x364>
      printf("I2C communication error (%X).\n", status);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4619      	mov	r1, r3
 80012ca:	484f      	ldr	r0, [pc, #316]	; (8001408 <main+0x49c>)
 80012cc:	f007 f936 	bl	800853c <iprintf>

    /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
    data = 0x00;
 80012d0:	2300      	movs	r3, #0
 80012d2:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 80012d4:	23c8      	movs	r3, #200	; 0xc8
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	2301      	movs	r3, #1
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	1dbb      	adds	r3, r7, #6
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	2213      	movs	r2, #19
 80012e4:	217c      	movs	r1, #124	; 0x7c
 80012e6:	4849      	ldr	r0, [pc, #292]	; (800140c <main+0x4a0>)
 80012e8:	f002 fd6c 	bl	8003dc4 <HAL_I2C_Mem_Write>
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <main+0x394>
      printf("I2C communication error (%X).\n", status);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4843      	ldr	r0, [pc, #268]	; (8001408 <main+0x49c>)
 80012fc:	f007 f91e 	bl	800853c <iprintf>

    /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8001300:	23aa      	movs	r3, #170	; 0xaa
 8001302:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8001304:	23c8      	movs	r3, #200	; 0xc8
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2301      	movs	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	1dbb      	adds	r3, r7, #6
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	2216      	movs	r2, #22
 8001314:	217c      	movs	r1, #124	; 0x7c
 8001316:	483d      	ldr	r0, [pc, #244]	; (800140c <main+0x4a0>)
 8001318:	f002 fd54 	bl	8003dc4 <HAL_I2C_Mem_Write>
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <main+0x3c4>
      printf("I2C communication error (%X).\n", status);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4619      	mov	r1, r3
 800132a:	4837      	ldr	r0, [pc, #220]	; (8001408 <main+0x49c>)
 800132c:	f007 f906 	bl	800853c <iprintf>

    /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8001330:	23aa      	movs	r3, #170	; 0xaa
 8001332:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8001334:	23c8      	movs	r3, #200	; 0xc8
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1dbb      	adds	r3, r7, #6
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	2217      	movs	r2, #23
 8001344:	217c      	movs	r1, #124	; 0x7c
 8001346:	4831      	ldr	r0, [pc, #196]	; (800140c <main+0x4a0>)
 8001348:	f002 fd3c 	bl	8003dc4 <HAL_I2C_Mem_Write>
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <main+0x3f4>
      printf("I2C communication error (%X).\n", status);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4619      	mov	r1, r3
 800135a:	482b      	ldr	r0, [pc, #172]	; (8001408 <main+0x49c>)
 800135c:	f007 f8ee 	bl	800853c <iprintf>

    /* Enable EXTI2_IRQ after SX1509 initialization */
    HAL_Delay(100);
 8001360:	2064      	movs	r0, #100	; 0x64
 8001362:	f001 fec5 	bl	80030f0 <HAL_Delay>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001366:	2008      	movs	r0, #8
 8001368:	f002 fa95 	bl	8003896 <HAL_NVIC_EnableIRQ>

    //printf("Ready\n");


  //logger.uart_handle = huart3; // for serial
  logger.uart_handle = huart2; // for wifi
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <main+0x4a4>)
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <main+0x4a8>)
 8001370:	3344      	adds	r3, #68	; 0x44
 8001372:	4611      	mov	r1, r2
 8001374:	2288      	movs	r2, #136	; 0x88
 8001376:	4618      	mov	r0, r3
 8001378:	f007 f8ca 	bl	8008510 <memcpy>

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2110      	movs	r1, #16
 8001380:	4825      	ldr	r0, [pc, #148]	; (8001418 <main+0x4ac>)
 8001382:	f002 fc5d 	bl	8003c40 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8001386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138a:	f001 feb1 	bl	80030f0 <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800138e:	213c      	movs	r1, #60	; 0x3c
 8001390:	4822      	ldr	r0, [pc, #136]	; (800141c <main+0x4b0>)
 8001392:	f005 f807 	bl	80063a4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001396:	213c      	movs	r1, #60	; 0x3c
 8001398:	4821      	ldr	r0, [pc, #132]	; (8001420 <main+0x4b4>)
 800139a:	f005 f803 	bl	80063a4 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800139e:	2100      	movs	r1, #0
 80013a0:	4820      	ldr	r0, [pc, #128]	; (8001424 <main+0x4b8>)
 80013a2:	f004 fdfd 	bl	8005fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013a6:	2104      	movs	r1, #4
 80013a8:	481e      	ldr	r0, [pc, #120]	; (8001424 <main+0x4b8>)
 80013aa:	f004 fdf9 	bl	8005fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013ae:	2108      	movs	r1, #8
 80013b0:	481c      	ldr	r0, [pc, #112]	; (8001424 <main+0x4b8>)
 80013b2:	f004 fdf5 	bl	8005fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80013b6:	210c      	movs	r1, #12
 80013b8:	481a      	ldr	r0, [pc, #104]	; (8001424 <main+0x4b8>)
 80013ba:	f004 fdf1 	bl	8005fa0 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <main+0x4bc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2200      	movs	r2, #0
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <main+0x4bc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2200      	movs	r2, #0
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <main+0x4bc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <main+0x4bc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80013de:	2100      	movs	r1, #0
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <main+0x4bc>)
 80013e2:	f004 fddd 	bl	8005fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80013e6:	2104      	movs	r1, #4
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <main+0x4bc>)
 80013ea:	f004 fdd9 	bl	8005fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80013ee:	2108      	movs	r1, #8
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <main+0x4bc>)
 80013f2:	f004 fdd5 	bl	8005fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80013f6:	210c      	movs	r1, #12
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <main+0x4bc>)
 80013fa:	f004 fdd1 	bl	8005fa0 <HAL_TIM_PWM_Start>

  /* Start speed ctrl ISR */
  HAL_TIM_Base_Start_IT(&htim6);
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <main+0x4c0>)
 8001400:	f004 fc9e 	bl	8005d40 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001404:	e7fe      	b.n	8001404 <main+0x498>
 8001406:	bf00      	nop
 8001408:	08009470 	.word	0x08009470
 800140c:	200000e0 	.word	0x200000e0
 8001410:	200006f4 	.word	0x200006f4
 8001414:	200005e4 	.word	0x200005e4
 8001418:	40021000 	.word	0x40021000
 800141c:	20000284 	.word	0x20000284
 8001420:	200002d0 	.word	0x200002d0
 8001424:	200001ec 	.word	0x200001ec
 8001428:	200003b4 	.word	0x200003b4
 800142c:	20000368 	.word	0x20000368

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	; 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2234      	movs	r2, #52	; 0x34
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f007 f874 	bl	800852c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001454:	f003 fa16 	bl	8004884 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	4b2c      	ldr	r3, [pc, #176]	; (800150c <SystemClock_Config+0xdc>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a2b      	ldr	r2, [pc, #172]	; (800150c <SystemClock_Config+0xdc>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	; 0x40
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <SystemClock_Config+0xdc>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <SystemClock_Config+0xe0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001478:	4a25      	ldr	r2, [pc, #148]	; (8001510 <SystemClock_Config+0xe0>)
 800147a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b23      	ldr	r3, [pc, #140]	; (8001510 <SystemClock_Config+0xe0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001490:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001494:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800149a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80014a4:	2360      	movs	r3, #96	; 0x60
 80014a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fa43 	bl	8004944 <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014c4:	f000 ff56 	bl	8002374 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014c8:	f003 f9ec 	bl	80048a4 <HAL_PWREx_EnableOverDrive>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014d2:	f000 ff4f 	bl	8002374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d6:	230f      	movs	r3, #15
 80014d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014da:	2302      	movs	r3, #2
 80014dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	2103      	movs	r1, #3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fcd4 	bl	8004ea0 <HAL_RCC_ClockConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80014fe:	f000 ff39 	bl	8002374 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	3750      	adds	r7, #80	; 0x50
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000

08001514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151a:	463b      	mov	r3, r7
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <MX_ADC1_Init+0x98>)
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <MX_ADC1_Init+0x9c>)
 800152a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_ADC1_Init+0x98>)
 800152e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001532:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001534:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_ADC1_Init+0x98>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MX_ADC1_Init+0x98>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_ADC1_Init+0x98>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <MX_ADC1_Init+0x98>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <MX_ADC1_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_ADC1_Init+0x98>)
 8001556:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <MX_ADC1_Init+0xa0>)
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_ADC1_Init+0x98>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_ADC1_Init+0x98>)
 8001562:	2201      	movs	r2, #1
 8001564:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_ADC1_Init+0x98>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_ADC1_Init+0x98>)
 8001570:	2201      	movs	r2, #1
 8001572:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <MX_ADC1_Init+0x98>)
 8001576:	f001 fddf 	bl	8003138 <HAL_ADC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001580:	f000 fef8 	bl	8002374 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001584:	2303      	movs	r3, #3
 8001586:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001588:	2301      	movs	r3, #1
 800158a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_ADC1_Init+0x98>)
 8001596:	f001 fe13 	bl	80031c0 <HAL_ADC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015a0:	f000 fee8 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000098 	.word	0x20000098
 80015b0:	40012000 	.word	0x40012000
 80015b4:	0f000001 	.word	0x0f000001

080015b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_I2C1_Init+0x74>)
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <MX_I2C1_Init+0x78>)
 80015c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_I2C1_Init+0x74>)
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <MX_I2C1_Init+0x7c>)
 80015c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_I2C1_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_I2C1_Init+0x74>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_I2C1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_I2C1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_I2C1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_I2C1_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f2:	480e      	ldr	r0, [pc, #56]	; (800162c <MX_I2C1_Init+0x74>)
 80015f4:	f002 fb56 	bl	8003ca4 <HAL_I2C_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015fe:	f000 feb9 	bl	8002374 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001602:	2100      	movs	r1, #0
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <MX_I2C1_Init+0x74>)
 8001606:	f003 f8a5 	bl	8004754 <HAL_I2CEx_ConfigAnalogFilter>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001610:	f000 feb0 	bl	8002374 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001614:	2100      	movs	r1, #0
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_I2C1_Init+0x74>)
 8001618:	f003 f8e7 	bl	80047ea <HAL_I2CEx_ConfigDigitalFilter>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001622:	f000 fea7 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000e0 	.word	0x200000e0
 8001630:	40005400 	.word	0x40005400
 8001634:	20303e5d 	.word	0x20303e5d

08001638 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <MX_I2C2_Init+0x74>)
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <MX_I2C2_Init+0x78>)
 8001640:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_I2C2_Init+0x74>)
 8001644:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <MX_I2C2_Init+0x7c>)
 8001646:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_I2C2_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_I2C2_Init+0x74>)
 8001650:	2201      	movs	r2, #1
 8001652:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_I2C2_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_I2C2_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_I2C2_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_I2C2_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_I2C2_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <MX_I2C2_Init+0x74>)
 8001674:	f002 fb16 	bl	8003ca4 <HAL_I2C_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800167e:	f000 fe79 	bl	8002374 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001682:	2100      	movs	r1, #0
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <MX_I2C2_Init+0x74>)
 8001686:	f003 f865 	bl	8004754 <HAL_I2CEx_ConfigAnalogFilter>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001690:	f000 fe70 	bl	8002374 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001694:	2100      	movs	r1, #0
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_I2C2_Init+0x74>)
 8001698:	f003 f8a7 	bl	80047ea <HAL_I2CEx_ConfigDigitalFilter>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016a2:	f000 fe67 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000134 	.word	0x20000134
 80016b0:	40005800 	.word	0x40005800
 80016b4:	20303e5d 	.word	0x20303e5d

080016b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <MX_SPI1_Init+0x74>)
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <MX_SPI1_Init+0x78>)
 80016c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_SPI1_Init+0x74>)
 80016c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_SPI1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_SPI1_Init+0x74>)
 80016d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_SPI1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_SPI1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_SPI1_Init+0x74>)
 80016e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_SPI1_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_SPI1_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_SPI1_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_SPI1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_SPI1_Init+0x74>)
 8001706:	2207      	movs	r2, #7
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_SPI1_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_SPI1_Init+0x74>)
 8001712:	2208      	movs	r2, #8
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_SPI1_Init+0x74>)
 8001718:	f004 fa10 	bl	8005b3c <HAL_SPI_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001722:	f000 fe27 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000188 	.word	0x20000188
 8001730:	40013000 	.word	0x40013000

08001734 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b09a      	sub	sp, #104	; 0x68
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	222c      	movs	r2, #44	; 0x2c
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f006 fedc 	bl	800852c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001774:	4b55      	ldr	r3, [pc, #340]	; (80018cc <MX_TIM1_Init+0x198>)
 8001776:	4a56      	ldr	r2, [pc, #344]	; (80018d0 <MX_TIM1_Init+0x19c>)
 8001778:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800177a:	4b54      	ldr	r3, [pc, #336]	; (80018cc <MX_TIM1_Init+0x198>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b52      	ldr	r3, [pc, #328]	; (80018cc <MX_TIM1_Init+0x198>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001786:	4b51      	ldr	r3, [pc, #324]	; (80018cc <MX_TIM1_Init+0x198>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <MX_TIM1_Init+0x198>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001792:	4b4e      	ldr	r3, [pc, #312]	; (80018cc <MX_TIM1_Init+0x198>)
 8001794:	2200      	movs	r2, #0
 8001796:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001798:	4b4c      	ldr	r3, [pc, #304]	; (80018cc <MX_TIM1_Init+0x198>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800179e:	484b      	ldr	r0, [pc, #300]	; (80018cc <MX_TIM1_Init+0x198>)
 80017a0:	f004 fa77 	bl	8005c92 <HAL_TIM_Base_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017aa:	f000 fde3 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017b8:	4619      	mov	r1, r3
 80017ba:	4844      	ldr	r0, [pc, #272]	; (80018cc <MX_TIM1_Init+0x198>)
 80017bc:	f005 f9ca 	bl	8006b54 <HAL_TIM_ConfigClockSource>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017c6:	f000 fdd5 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80017ca:	4840      	ldr	r0, [pc, #256]	; (80018cc <MX_TIM1_Init+0x198>)
 80017cc:	f004 fb30 	bl	8005e30 <HAL_TIM_OC_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017d6:	f000 fdcd 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017da:	2300      	movs	r3, #0
 80017dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ea:	4619      	mov	r1, r3
 80017ec:	4837      	ldr	r0, [pc, #220]	; (80018cc <MX_TIM1_Init+0x198>)
 80017ee:	f005 ff8b 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80017f8:	f000 fdbc 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80017fc:	2350      	movs	r3, #80	; 0x50
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001804:	2302      	movs	r3, #2
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001808:	2300      	movs	r3, #0
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800181c:	2200      	movs	r2, #0
 800181e:	4619      	mov	r1, r3
 8001820:	482a      	ldr	r0, [pc, #168]	; (80018cc <MX_TIM1_Init+0x198>)
 8001822:	f004 ff6d 	bl	8006700 <HAL_TIM_OC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800182c:	f000 fda2 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001834:	2204      	movs	r2, #4
 8001836:	4619      	mov	r1, r3
 8001838:	4824      	ldr	r0, [pc, #144]	; (80018cc <MX_TIM1_Init+0x198>)
 800183a:	f004 ff61 	bl	8006700 <HAL_TIM_OC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001844:	f000 fd96 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800184c:	2208      	movs	r2, #8
 800184e:	4619      	mov	r1, r3
 8001850:	481e      	ldr	r0, [pc, #120]	; (80018cc <MX_TIM1_Init+0x198>)
 8001852:	f004 ff55 	bl	8006700 <HAL_TIM_OC_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800185c:	f000 fd8a 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001864:	220c      	movs	r2, #12
 8001866:	4619      	mov	r1, r3
 8001868:	4818      	ldr	r0, [pc, #96]	; (80018cc <MX_TIM1_Init+0x198>)
 800186a:	f004 ff49 	bl	8006700 <HAL_TIM_OC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001874:	f000 fd7e 	bl	8002374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001890:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800189a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_TIM1_Init+0x198>)
 80018ae:	f005 ffb9 	bl	8007824 <HAL_TIMEx_ConfigBreakDeadTime>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80018b8:	f000 fd5c 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018bc:	4803      	ldr	r0, [pc, #12]	; (80018cc <MX_TIM1_Init+0x198>)
 80018be:	f001 f81b 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 80018c2:	bf00      	nop
 80018c4:	3768      	adds	r7, #104	; 0x68
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200001ec 	.word	0x200001ec
 80018d0:	40010000 	.word	0x40010000

080018d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b092      	sub	sp, #72	; 0x48
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001908:	463b      	mov	r3, r7
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <MX_TIM2_Init+0x130>)
 8001916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <MX_TIM2_Init+0x130>)
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <MX_TIM2_Init+0x130>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <MX_TIM2_Init+0x130>)
 800192a:	f04f 32ff 	mov.w	r2, #4294967295
 800192e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001930:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <MX_TIM2_Init+0x130>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001936:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <MX_TIM2_Init+0x130>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800193c:	4831      	ldr	r0, [pc, #196]	; (8001a04 <MX_TIM2_Init+0x130>)
 800193e:	f004 f9a8 	bl	8005c92 <HAL_TIM_Base_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001948:	f000 fd14 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001952:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001956:	4619      	mov	r1, r3
 8001958:	482a      	ldr	r0, [pc, #168]	; (8001a04 <MX_TIM2_Init+0x130>)
 800195a:	f005 f8fb 	bl	8006b54 <HAL_TIM_ConfigClockSource>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001964:	f000 fd06 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001968:	4826      	ldr	r0, [pc, #152]	; (8001a04 <MX_TIM2_Init+0x130>)
 800196a:	f004 fac2 	bl	8005ef2 <HAL_TIM_PWM_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001974:	f000 fcfe 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001978:	4822      	ldr	r0, [pc, #136]	; (8001a04 <MX_TIM2_Init+0x130>)
 800197a:	f004 fc0b 	bl	8006194 <HAL_TIM_IC_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001984:	f000 fcf6 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001994:	4619      	mov	r1, r3
 8001996:	481b      	ldr	r0, [pc, #108]	; (8001a04 <MX_TIM2_Init+0x130>)
 8001998:	f005 feb6 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80019a2:	f000 fce7 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a6:	2360      	movs	r3, #96	; 0x60
 80019a8:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	2200      	movs	r2, #0
 80019bc:	4619      	mov	r1, r3
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <MX_TIM2_Init+0x130>)
 80019c0:	f004 ffb4 	bl	800692c <HAL_TIM_PWM_ConfigChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80019ca:	f000 fcd3 	bl	8002374 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019d2:	2301      	movs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019de:	463b      	mov	r3, r7
 80019e0:	2208      	movs	r2, #8
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM2_Init+0x130>)
 80019e6:	f004 ff05 	bl	80067f4 <HAL_TIM_IC_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80019f0:	f000 fcc0 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM2_Init+0x130>)
 80019f6:	f000 ff7f 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3748      	adds	r7, #72	; 0x48
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000238 	.word	0x20000238

08001a08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 fd88 	bl	800852c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <MX_TIM3_Init+0xa4>)
 8001a28:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <MX_TIM3_Init+0xa8>)
 8001a2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_TIM3_Init+0xa4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_TIM3_Init+0xa4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_TIM3_Init+0xa4>)
 8001a3a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001a3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_TIM3_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_TIM3_Init+0xa4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <MX_TIM3_Init+0xa4>)
 8001a78:	f004 fbee 	bl	8006258 <HAL_TIM_Encoder_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a82:	f000 fc77 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_TIM3_Init+0xa4>)
 8001a94:	f005 fe38 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a9e:	f000 fc69 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3730      	adds	r7, #48	; 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000284 	.word	0x20000284
 8001ab0:	40000400 	.word	0x40000400

08001ab4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 fd32 	bl	800852c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <MX_TIM4_Init+0xa4>)
 8001ad4:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <MX_TIM4_Init+0xa8>)
 8001ad6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <MX_TIM4_Init+0xa4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_TIM4_Init+0xa4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_TIM4_Init+0xa4>)
 8001ae6:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001aea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_TIM4_Init+0xa4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_TIM4_Init+0xa4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001af8:	2303      	movs	r3, #3
 8001afa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b00:	2301      	movs	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b10:	2301      	movs	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001b18:	230f      	movs	r3, #15
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_TIM4_Init+0xa4>)
 8001b24:	f004 fb98 	bl	8006258 <HAL_TIM_Encoder_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b2e:	f000 fc21 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_TIM4_Init+0xa4>)
 8001b40:	f005 fde2 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b4a:	f000 fc13 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3730      	adds	r7, #48	; 0x30
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200002d0 	.word	0x200002d0
 8001b5c:	40000800 	.word	0x40000800

08001b60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08e      	sub	sp, #56	; 0x38
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b80:	463b      	mov	r3, r7
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001b94:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <MX_TIM5_Init+0xec>)
 8001b96:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8001baa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bb8:	4823      	ldr	r0, [pc, #140]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001bba:	f004 f86a 	bl	8005c92 <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001bc4:	f000 fbd6 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	481c      	ldr	r0, [pc, #112]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001bd6:	f004 ffbd 	bl	8006b54 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001be0:	f000 fbc8 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001be4:	4818      	ldr	r0, [pc, #96]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001be6:	f004 f984 	bl	8005ef2 <HAL_TIM_PWM_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001bf0:	f000 fbc0 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	4811      	ldr	r0, [pc, #68]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001c04:	f005 fd80 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001c0e:	f000 fbb1 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c12:	2360      	movs	r3, #96	; 0x60
 8001c14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c22:	463b      	mov	r3, r7
 8001c24:	2200      	movs	r2, #0
 8001c26:	4619      	mov	r1, r3
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001c2a:	f004 fe7f 	bl	800692c <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001c34:	f000 fb9e 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <MX_TIM5_Init+0xe8>)
 8001c3a:	f000 fe5d 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8001c3e:	bf00      	nop
 8001c40:	3738      	adds	r7, #56	; 0x38
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000031c 	.word	0x2000031c
 8001c4c:	40000c00 	.word	0x40000c00

08001c50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_TIM6_Init+0x68>)
 8001c62:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <MX_TIM6_Init+0x6c>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_TIM6_Init+0x68>)
 8001c68:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001c6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_TIM6_Init+0x68>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_TIM6_Init+0x68>)
 8001c76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_TIM6_Init+0x68>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_TIM6_Init+0x68>)
 8001c84:	f004 f805 	bl	8005c92 <HAL_TIM_Base_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001c8e:	f000 fb71 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_TIM6_Init+0x68>)
 8001ca0:	f005 fd32 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001caa:	f000 fb63 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000368 	.word	0x20000368
 8001cbc:	40001000 	.word	0x40001000

08001cc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b09a      	sub	sp, #104	; 0x68
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	615a      	str	r2, [r3, #20]
 8001cf2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	222c      	movs	r2, #44	; 0x2c
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 fc16 	bl	800852c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d00:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d02:	4a57      	ldr	r2, [pc, #348]	; (8001e60 <MX_TIM8_Init+0x1a0>)
 8001d04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d08:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001d0c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001d14:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d16:	f240 128f 	movw	r2, #399	; 0x18f
 8001d1a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b4f      	ldr	r3, [pc, #316]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d22:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d28:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d2e:	484b      	ldr	r0, [pc, #300]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d30:	f003 ffaf 	bl	8005c92 <HAL_TIM_Base_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001d3a:	f000 fb1b 	bl	8002374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4844      	ldr	r0, [pc, #272]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d4c:	f004 ff02 	bl	8006b54 <HAL_TIM_ConfigClockSource>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001d56:	f000 fb0d 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d5a:	4840      	ldr	r0, [pc, #256]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d5c:	f004 f8c9 	bl	8005ef2 <HAL_TIM_PWM_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001d66:	f000 fb05 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4837      	ldr	r0, [pc, #220]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001d7e:	f005 fcc3 	bl	8007708 <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001d88:	f000 faf4 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d8c:	2360      	movs	r3, #96	; 0x60
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	482a      	ldr	r0, [pc, #168]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001db2:	f004 fdbb 	bl	800692c <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8001dbc:	f000 fada 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4824      	ldr	r0, [pc, #144]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001dca:	f004 fdaf 	bl	800692c <HAL_TIM_PWM_ConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001dd4:	f000 face 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ddc:	2208      	movs	r2, #8
 8001dde:	4619      	mov	r1, r3
 8001de0:	481e      	ldr	r0, [pc, #120]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001de2:	f004 fda3 	bl	800692c <HAL_TIM_PWM_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001dec:	f000 fac2 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001df0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df4:	220c      	movs	r2, #12
 8001df6:	4619      	mov	r1, r3
 8001df8:	4818      	ldr	r0, [pc, #96]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001dfa:	f004 fd97 	bl	800692c <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001e04:	f000 fab6 	bl	8002374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4807      	ldr	r0, [pc, #28]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001e3e:	f005 fcf1 	bl	8007824 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001e48:	f000 fa94 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <MX_TIM8_Init+0x19c>)
 8001e4e:	f000 fd53 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8001e52:	bf00      	nop
 8001e54:	3768      	adds	r7, #104	; 0x68
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200003b4 	.word	0x200003b4
 8001e60:	40010400 	.word	0x40010400

08001e64 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
 8001e78:	615a      	str	r2, [r3, #20]
 8001e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <MX_TIM9_Init+0x98>)
 8001e7e:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <MX_TIM9_Init+0x9c>)
 8001e80:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <MX_TIM9_Init+0x98>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <MX_TIM9_Init+0x98>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <MX_TIM9_Init+0x98>)
 8001e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e94:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <MX_TIM9_Init+0x98>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <MX_TIM9_Init+0x98>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001ea2:	4816      	ldr	r0, [pc, #88]	; (8001efc <MX_TIM9_Init+0x98>)
 8001ea4:	f004 f825 	bl	8005ef2 <HAL_TIM_PWM_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001eae:	f000 fa61 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb2:	2360      	movs	r3, #96	; 0x60
 8001eb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <MX_TIM9_Init+0x98>)
 8001eca:	f004 fd2f 	bl	800692c <HAL_TIM_PWM_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001ed4:	f000 fa4e 	bl	8002374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2204      	movs	r2, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4807      	ldr	r0, [pc, #28]	; (8001efc <MX_TIM9_Init+0x98>)
 8001ee0:	f004 fd24 	bl	800692c <HAL_TIM_PWM_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001eea:	f000 fa43 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001eee:	4803      	ldr	r0, [pc, #12]	; (8001efc <MX_TIM9_Init+0x98>)
 8001ef0:	f000 fd02 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8001ef4:	bf00      	nop
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000400 	.word	0x20000400
 8001f00:	40014000 	.word	0x40014000

08001f04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f0a:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <MX_UART4_Init+0x5c>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_UART4_Init+0x58>)
 8001f48:	f005 fd08 	bl	800795c <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001f52:	f000 fa0f 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000044c 	.word	0x2000044c
 8001f60:	40004c00 	.word	0x40004c00

08001f64 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_UART5_Init+0x58>)
 8001f6a:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <MX_UART5_Init+0x5c>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_UART5_Init+0x58>)
 8001f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_UART5_Init+0x58>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_UART5_Init+0x58>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_UART5_Init+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_UART5_Init+0x58>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_UART5_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_UART5_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_UART5_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_UART5_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_UART5_Init+0x58>)
 8001fa8:	f005 fcd8 	bl	800795c <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001fb2:	f000 f9df 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200004d4 	.word	0x200004d4
 8001fc0:	40005000 	.word	0x40005000

08001fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fca:	4a15      	ldr	r2, [pc, #84]	; (8002020 <MX_USART1_UART_Init+0x5c>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_USART1_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART1_UART_Init+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_USART1_UART_Init+0x58>)
 8002008:	f005 fca8 	bl	800795c <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002012:	f000 f9af 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000055c 	.word	0x2000055c
 8002020:	40011000 	.word	0x40011000

08002024 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <MX_USART2_UART_Init+0x54>)
 800202a:	4a14      	ldr	r2, [pc, #80]	; (800207c <MX_USART2_UART_Init+0x58>)
 800202c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <MX_USART2_UART_Init+0x54>)
 8002030:	4a13      	ldr	r2, [pc, #76]	; (8002080 <MX_USART2_UART_Init+0x5c>)
 8002032:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <MX_USART2_UART_Init+0x54>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <MX_USART2_UART_Init+0x54>)
 800203c:	2200      	movs	r2, #0
 800203e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <MX_USART2_UART_Init+0x54>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <MX_USART2_UART_Init+0x54>)
 8002048:	220c      	movs	r2, #12
 800204a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <MX_USART2_UART_Init+0x54>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_USART2_UART_Init+0x54>)
 8002054:	2200      	movs	r2, #0
 8002056:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <MX_USART2_UART_Init+0x54>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_USART2_UART_Init+0x54>)
 8002060:	2200      	movs	r2, #0
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002064:	4804      	ldr	r0, [pc, #16]	; (8002078 <MX_USART2_UART_Init+0x54>)
 8002066:	f005 fc79 	bl	800795c <HAL_UART_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8002070:	f000 f980 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200005e4 	.word	0x200005e4
 800207c:	40004400 	.word	0x40004400
 8002080:	000f4240 	.word	0x000f4240

08002084 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <MX_USART3_UART_Init+0x58>)
 800208a:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <MX_USART3_UART_Init+0x5c>)
 800208c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <MX_USART3_UART_Init+0x58>)
 8002090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002094:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <MX_USART3_UART_Init+0x58>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800209c:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <MX_USART3_UART_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <MX_USART3_UART_Init+0x58>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <MX_USART3_UART_Init+0x58>)
 80020aa:	220c      	movs	r2, #12
 80020ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <MX_USART3_UART_Init+0x58>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	4b09      	ldr	r3, [pc, #36]	; (80020dc <MX_USART3_UART_Init+0x58>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <MX_USART3_UART_Init+0x58>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <MX_USART3_UART_Init+0x58>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	; (80020dc <MX_USART3_UART_Init+0x58>)
 80020c8:	f005 fc48 	bl	800795c <HAL_UART_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020d2:	f000 f94f 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000066c 	.word	0x2000066c
 80020e0:	40004800 	.word	0x40004800

080020e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08e      	sub	sp, #56	; 0x38
 80020e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020fa:	4b97      	ldr	r3, [pc, #604]	; (8002358 <MX_GPIO_Init+0x274>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a96      	ldr	r2, [pc, #600]	; (8002358 <MX_GPIO_Init+0x274>)
 8002100:	f043 0310 	orr.w	r3, r3, #16
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b94      	ldr	r3, [pc, #592]	; (8002358 <MX_GPIO_Init+0x274>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	623b      	str	r3, [r7, #32]
 8002110:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	4b91      	ldr	r3, [pc, #580]	; (8002358 <MX_GPIO_Init+0x274>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a90      	ldr	r2, [pc, #576]	; (8002358 <MX_GPIO_Init+0x274>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b8e      	ldr	r3, [pc, #568]	; (8002358 <MX_GPIO_Init+0x274>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800212a:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <MX_GPIO_Init+0x274>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a8a      	ldr	r2, [pc, #552]	; (8002358 <MX_GPIO_Init+0x274>)
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b88      	ldr	r3, [pc, #544]	; (8002358 <MX_GPIO_Init+0x274>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	4b85      	ldr	r3, [pc, #532]	; (8002358 <MX_GPIO_Init+0x274>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a84      	ldr	r2, [pc, #528]	; (8002358 <MX_GPIO_Init+0x274>)
 8002148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b82      	ldr	r3, [pc, #520]	; (8002358 <MX_GPIO_Init+0x274>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	4b7f      	ldr	r3, [pc, #508]	; (8002358 <MX_GPIO_Init+0x274>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a7e      	ldr	r2, [pc, #504]	; (8002358 <MX_GPIO_Init+0x274>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b7c      	ldr	r3, [pc, #496]	; (8002358 <MX_GPIO_Init+0x274>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	4b79      	ldr	r3, [pc, #484]	; (8002358 <MX_GPIO_Init+0x274>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a78      	ldr	r2, [pc, #480]	; (8002358 <MX_GPIO_Init+0x274>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b76      	ldr	r3, [pc, #472]	; (8002358 <MX_GPIO_Init+0x274>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218a:	4b73      	ldr	r3, [pc, #460]	; (8002358 <MX_GPIO_Init+0x274>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a72      	ldr	r2, [pc, #456]	; (8002358 <MX_GPIO_Init+0x274>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b70      	ldr	r3, [pc, #448]	; (8002358 <MX_GPIO_Init+0x274>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021a2:	4b6d      	ldr	r3, [pc, #436]	; (8002358 <MX_GPIO_Init+0x274>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a6c      	ldr	r2, [pc, #432]	; (8002358 <MX_GPIO_Init+0x274>)
 80021a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <MX_GPIO_Init+0x274>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2118      	movs	r1, #24
 80021be:	4867      	ldr	r0, [pc, #412]	; (800235c <MX_GPIO_Init+0x278>)
 80021c0:	f001 fd3e 	bl	8003c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80021c4:	2200      	movs	r2, #0
 80021c6:	f244 0181 	movw	r1, #16513	; 0x4081
 80021ca:	4865      	ldr	r0, [pc, #404]	; (8002360 <MX_GPIO_Init+0x27c>)
 80021cc:	f001 fd38 	bl	8003c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2140      	movs	r1, #64	; 0x40
 80021d4:	4863      	ldr	r0, [pc, #396]	; (8002364 <MX_GPIO_Init+0x280>)
 80021d6:	f001 fd33 	bl	8003c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 80021da:	2318      	movs	r3, #24
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021de:	2301      	movs	r3, #1
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ee:	4619      	mov	r1, r3
 80021f0:	485a      	ldr	r0, [pc, #360]	; (800235c <MX_GPIO_Init+0x278>)
 80021f2:	f001 fb79 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 80021f6:	f643 7308 	movw	r3, #16136	; 0x3f08
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	4619      	mov	r1, r3
 800220c:	4856      	ldr	r0, [pc, #344]	; (8002368 <MX_GPIO_Init+0x284>)
 800220e:	f001 fb6b 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002212:	2310      	movs	r3, #16
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002216:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	4850      	ldr	r0, [pc, #320]	; (8002368 <MX_GPIO_Init+0x284>)
 8002228:	f001 fb5e 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800222c:	2332      	movs	r3, #50	; 0x32
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800223c:	230b      	movs	r3, #11
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	4619      	mov	r1, r3
 8002246:	4849      	ldr	r0, [pc, #292]	; (800236c <MX_GPIO_Init+0x288>)
 8002248:	f001 fb4e 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800224c:	2386      	movs	r3, #134	; 0x86
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002258:	2303      	movs	r3, #3
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800225c:	230b      	movs	r3, #11
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4842      	ldr	r0, [pc, #264]	; (8002370 <MX_GPIO_Init+0x28c>)
 8002268:	f001 fb3e 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800226c:	f244 0381 	movw	r3, #16513	; 0x4081
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	4619      	mov	r1, r3
 8002284:	4836      	ldr	r0, [pc, #216]	; (8002360 <MX_GPIO_Init+0x27c>)
 8002286:	f001 fb2f 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800228a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800229c:	230b      	movs	r3, #11
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a4:	4619      	mov	r1, r3
 80022a6:	482e      	ldr	r0, [pc, #184]	; (8002360 <MX_GPIO_Init+0x27c>)
 80022a8:	f001 fb1e 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	4828      	ldr	r0, [pc, #160]	; (8002364 <MX_GPIO_Init+0x280>)
 80022c4:	f001 fb10 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d8:	4619      	mov	r1, r3
 80022da:	4822      	ldr	r0, [pc, #136]	; (8002364 <MX_GPIO_Init+0x280>)
 80022dc:	f001 fb04 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80022e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ee:	2303      	movs	r3, #3
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022f2:	230a      	movs	r3, #10
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fa:	4619      	mov	r1, r3
 80022fc:	481c      	ldr	r0, [pc, #112]	; (8002370 <MX_GPIO_Init+0x28c>)
 80022fe:	f001 faf3 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002308:	2300      	movs	r3, #0
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002314:	4619      	mov	r1, r3
 8002316:	4816      	ldr	r0, [pc, #88]	; (8002370 <MX_GPIO_Init+0x28c>)
 8002318:	f001 fae6 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800231c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800232e:	230b      	movs	r3, #11
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002336:	4619      	mov	r1, r3
 8002338:	480a      	ldr	r0, [pc, #40]	; (8002364 <MX_GPIO_Init+0x280>)
 800233a:	f001 fad5 	bl	80038e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	200a      	movs	r0, #10
 8002344:	f001 fa8b 	bl	800385e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002348:	200a      	movs	r0, #10
 800234a:	f001 faa4 	bl	8003896 <HAL_NVIC_EnableIRQ>

}
 800234e:	bf00      	nop
 8002350:	3738      	adds	r7, #56	; 0x38
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40021000 	.word	0x40021000
 8002360:	40020400 	.word	0x40020400
 8002364:	40021800 	.word	0x40021800
 8002368:	40021400 	.word	0x40021400
 800236c:	40020800 	.word	0x40020800
 8002370:	40020000 	.word	0x40020000

08002374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002378:	b672      	cpsid	i
}
 800237a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800237c:	e7fe      	b.n	800237c <Error_Handler+0x8>
	...

08002380 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_MspInit+0x44>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <HAL_MspInit+0x44>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_MspInit+0x44>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_MspInit+0x44>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a08      	ldr	r2, [pc, #32]	; (80023c4 <HAL_MspInit+0x44>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_MspInit+0x44>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a15      	ldr	r2, [pc, #84]	; (800243c <HAL_ADC_MspInit+0x74>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d123      	bne.n	8002432 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <HAL_ADC_MspInit+0x78>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a14      	ldr	r2, [pc, #80]	; (8002440 <HAL_ADC_MspInit+0x78>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_ADC_MspInit+0x78>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_ADC_MspInit+0x78>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <HAL_ADC_MspInit+0x78>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_ADC_MspInit+0x78>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 800241a:	2308      	movs	r3, #8
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800241e:	2303      	movs	r3, #3
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	4805      	ldr	r0, [pc, #20]	; (8002444 <HAL_ADC_MspInit+0x7c>)
 800242e:	f001 fa5b 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40012000 	.word	0x40012000
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000

08002448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b0b0      	sub	sp, #192	; 0xc0
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	2290      	movs	r2, #144	; 0x90
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f006 f85f 	bl	800852c <memset>
  if(hi2c->Instance==I2C1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a44      	ldr	r2, [pc, #272]	; (8002584 <HAL_I2C_MspInit+0x13c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d13e      	bne.n	80024f6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002478:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800247c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	4618      	mov	r0, r3
 800248a:	f002 ff2f 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002494:	f7ff ff6e 	bl	8002374 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002498:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_I2C_MspInit+0x140>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	4a3a      	ldr	r2, [pc, #232]	; (8002588 <HAL_I2C_MspInit+0x140>)
 800249e:	f043 0302 	orr.w	r3, r3, #2
 80024a2:	6313      	str	r3, [r2, #48]	; 0x30
 80024a4:	4b38      	ldr	r3, [pc, #224]	; (8002588 <HAL_I2C_MspInit+0x140>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b8:	2312      	movs	r3, #18
 80024ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024be:	2301      	movs	r3, #1
 80024c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024ca:	2304      	movs	r3, #4
 80024cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024d4:	4619      	mov	r1, r3
 80024d6:	482d      	ldr	r0, [pc, #180]	; (800258c <HAL_I2C_MspInit+0x144>)
 80024d8:	f001 fa06 	bl	80038e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <HAL_I2C_MspInit+0x140>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	4a29      	ldr	r2, [pc, #164]	; (8002588 <HAL_I2C_MspInit+0x140>)
 80024e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e6:	6413      	str	r3, [r2, #64]	; 0x40
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_I2C_MspInit+0x140>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024f4:	e041      	b.n	800257a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_I2C_MspInit+0x148>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d13c      	bne.n	800257a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002504:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	4618      	mov	r0, r3
 8002512:	f002 feeb 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 800251c:	f7ff ff2a 	bl	8002374 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_I2C_MspInit+0x140>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_I2C_MspInit+0x140>)
 8002526:	f043 0320 	orr.w	r3, r3, #32
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_I2C_MspInit+0x140>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002538:	2303      	movs	r3, #3
 800253a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253e:	2312      	movs	r3, #18
 8002540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002544:	2301      	movs	r3, #1
 8002546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002550:	2304      	movs	r3, #4
 8002552:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002556:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800255a:	4619      	mov	r1, r3
 800255c:	480d      	ldr	r0, [pc, #52]	; (8002594 <HAL_I2C_MspInit+0x14c>)
 800255e:	f001 f9c3 	bl	80038e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_I2C_MspInit+0x140>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_I2C_MspInit+0x140>)
 8002568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_I2C_MspInit+0x140>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
}
 800257a:	bf00      	nop
 800257c:	37c0      	adds	r7, #192	; 0xc0
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40005400 	.word	0x40005400
 8002588:	40023800 	.word	0x40023800
 800258c:	40020400 	.word	0x40020400
 8002590:	40005800 	.word	0x40005800
 8002594:	40021400 	.word	0x40021400

08002598 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a33      	ldr	r2, [pc, #204]	; (8002684 <HAL_SPI_MspInit+0xec>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d160      	bne.n	800267c <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ba:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a32      	ldr	r2, [pc, #200]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 80025c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a2c      	ldr	r2, [pc, #176]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ea:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a26      	ldr	r2, [pc, #152]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 80025f0:	f043 0308 	orr.w	r3, r3, #8
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a20      	ldr	r2, [pc, #128]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 8002608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b1e      	ldr	r3, [pc, #120]	; (8002688 <HAL_SPI_MspInit+0xf0>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800261a:	2320      	movs	r3, #32
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800262a:	2305      	movs	r3, #5
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4815      	ldr	r0, [pc, #84]	; (800268c <HAL_SPI_MspInit+0xf4>)
 8002636:	f001 f957 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002646:	2303      	movs	r3, #3
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800264a:	2305      	movs	r3, #5
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264e:	f107 031c 	add.w	r3, r7, #28
 8002652:	4619      	mov	r1, r3
 8002654:	480e      	ldr	r0, [pc, #56]	; (8002690 <HAL_SPI_MspInit+0xf8>)
 8002656:	f001 f947 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800265a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800265e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800266c:	2305      	movs	r3, #5
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	4807      	ldr	r0, [pc, #28]	; (8002694 <HAL_SPI_MspInit+0xfc>)
 8002678:	f001 f936 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	3730      	adds	r7, #48	; 0x30
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40013000 	.word	0x40013000
 8002688:	40023800 	.word	0x40023800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020c00 	.word	0x40020c00
 8002694:	40021800 	.word	0x40021800

08002698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08e      	sub	sp, #56	; 0x38
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <HAL_TIM_Base_MspInit+0x11c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10c      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ba:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a3e      	ldr	r2, [pc, #248]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026d2:	e06b      	b.n	80027ac <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026dc:	d129      	bne.n	8002732 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026de:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a35      	ldr	r2, [pc, #212]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a2f      	ldr	r2, [pc, #188]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 800270e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002720:	2301      	movs	r3, #1
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002728:	4619      	mov	r1, r3
 800272a:	4824      	ldr	r0, [pc, #144]	; (80027bc <HAL_TIM_Base_MspInit+0x124>)
 800272c:	f001 f8dc 	bl	80038e8 <HAL_GPIO_Init>
}
 8002730:	e03c      	b.n	80027ac <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_TIM_Base_MspInit+0x128>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10c      	bne.n	8002756 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 8002742:	f043 0308 	orr.w	r3, r3, #8
 8002746:	6413      	str	r3, [r2, #64]	; 0x40
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	697b      	ldr	r3, [r7, #20]
}
 8002754:	e02a      	b.n	80027ac <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_TIM_Base_MspInit+0x12c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d114      	bne.n	800278a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002760:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 8002766:	f043 0310 	orr.w	r3, r3, #16
 800276a:	6413      	str	r3, [r2, #64]	; 0x40
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2101      	movs	r1, #1
 800277c:	2036      	movs	r0, #54	; 0x36
 800277e:	f001 f86e 	bl	800385e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002782:	2036      	movs	r0, #54	; 0x36
 8002784:	f001 f887 	bl	8003896 <HAL_NVIC_EnableIRQ>
}
 8002788:	e010      	b.n	80027ac <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <HAL_TIM_Base_MspInit+0x130>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d10b      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 800279a:	f043 0302 	orr.w	r3, r3, #2
 800279e:	6453      	str	r3, [r2, #68]	; 0x44
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_TIM_Base_MspInit+0x120>)
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3738      	adds	r7, #56	; 0x38
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40000c00 	.word	0x40000c00
 80027c4:	40001000 	.word	0x40001000
 80027c8:	40010400 	.word	0x40010400

080027cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	; 0x30
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2e      	ldr	r2, [pc, #184]	; (80028a4 <HAL_TIM_Encoder_MspInit+0xd8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d128      	bne.n	8002840 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a2d      	ldr	r2, [pc, #180]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 800281e:	2330      	movs	r3, #48	; 0x30
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800282e:	2302      	movs	r3, #2
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	4619      	mov	r1, r3
 8002838:	481c      	ldr	r0, [pc, #112]	; (80028ac <HAL_TIM_Encoder_MspInit+0xe0>)
 800283a:	f001 f855 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800283e:	e02d      	b.n	800289c <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d128      	bne.n	800289c <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a16      	ldr	r2, [pc, #88]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 800287a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800288c:	2302      	movs	r3, #2
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	4807      	ldr	r0, [pc, #28]	; (80028b4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002898:	f001 f826 	bl	80038e8 <HAL_GPIO_Init>
}
 800289c:	bf00      	nop
 800289e:	3730      	adds	r7, #48	; 0x30
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40000800 	.word	0x40000800
 80028b4:	40020c00 	.word	0x40020c00

080028b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_TIM_PWM_MspInit+0x38>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10b      	bne.n	80028e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40014000 	.word	0x40014000
 80028f4:	40023800 	.word	0x40023800

080028f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08c      	sub	sp, #48	; 0x30
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a56      	ldr	r2, [pc, #344]	; (8002a70 <HAL_TIM_MspPostInit+0x178>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d11d      	bne.n	8002956 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800291a:	4b56      	ldr	r3, [pc, #344]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a55      	ldr	r2, [pc, #340]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 8002920:	f043 0310 	orr.w	r3, r3, #16
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8002932:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002944:	2301      	movs	r3, #1
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	484a      	ldr	r0, [pc, #296]	; (8002a78 <HAL_TIM_MspPostInit+0x180>)
 8002950:	f000 ffca 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002954:	e088      	b.n	8002a68 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d11d      	bne.n	800299c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002960:	4b44      	ldr	r3, [pc, #272]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6313      	str	r3, [r2, #48]	; 0x30
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800298a:	2301      	movs	r3, #1
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 800298e:	f107 031c 	add.w	r3, r7, #28
 8002992:	4619      	mov	r1, r3
 8002994:	4839      	ldr	r0, [pc, #228]	; (8002a7c <HAL_TIM_MspPostInit+0x184>)
 8002996:	f000 ffa7 	bl	80038e8 <HAL_GPIO_Init>
}
 800299a:	e065      	b.n	8002a68 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a37      	ldr	r2, [pc, #220]	; (8002a80 <HAL_TIM_MspPostInit+0x188>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d11c      	bne.n	80029e0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b30      	ldr	r3, [pc, #192]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029ce:	2302      	movs	r3, #2
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4619      	mov	r1, r3
 80029d8:	4828      	ldr	r0, [pc, #160]	; (8002a7c <HAL_TIM_MspPostInit+0x184>)
 80029da:	f000 ff85 	bl	80038e8 <HAL_GPIO_Init>
}
 80029de:	e043      	b.n	8002a68 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a27      	ldr	r2, [pc, #156]	; (8002a84 <HAL_TIM_MspPostInit+0x18c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d11d      	bne.n	8002a26 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002a02:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a14:	2303      	movs	r3, #3
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	481a      	ldr	r0, [pc, #104]	; (8002a88 <HAL_TIM_MspPostInit+0x190>)
 8002a20:	f000 ff62 	bl	80038e8 <HAL_GPIO_Init>
}
 8002a24:	e020      	b.n	8002a68 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_TIM_MspPostInit+0x194>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d11b      	bne.n	8002a68 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 8002a36:	f043 0310 	orr.w	r3, r3, #16
 8002a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_TIM_MspPostInit+0x17c>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 8002a48:	2360      	movs	r3, #96	; 0x60
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	4619      	mov	r1, r3
 8002a62:	4805      	ldr	r0, [pc, #20]	; (8002a78 <HAL_TIM_MspPostInit+0x180>)
 8002a64:	f000 ff40 	bl	80038e8 <HAL_GPIO_Init>
}
 8002a68:	bf00      	nop
 8002a6a:	3730      	adds	r7, #48	; 0x30
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40010000 	.word	0x40010000
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40000c00 	.word	0x40000c00
 8002a84:	40010400 	.word	0x40010400
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40014000 	.word	0x40014000

08002a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0b6      	sub	sp, #216	; 0xd8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002aac:	2290      	movs	r2, #144	; 0x90
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f005 fd3b 	bl	800852c <memset>
  if(huart->Instance==UART4)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4aa0      	ldr	r2, [pc, #640]	; (8002d3c <HAL_UART_MspInit+0x2ac>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d13e      	bne.n	8002b3e <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002acc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 fc0b 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002adc:	f7ff fc4a 	bl	8002374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ae0:	4b97      	ldr	r3, [pc, #604]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a96      	ldr	r2, [pc, #600]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002aea:	6413      	str	r3, [r2, #64]	; 0x40
 8002aec:	4b94      	ldr	r3, [pc, #592]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af8:	4b91      	ldr	r3, [pc, #580]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	4a90      	ldr	r2, [pc, #576]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	6313      	str	r3, [r2, #48]	; 0x30
 8002b04:	4b8e      	ldr	r3, [pc, #568]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002b10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4883      	ldr	r0, [pc, #524]	; (8002d44 <HAL_UART_MspInit+0x2b4>)
 8002b38:	f000 fed6 	bl	80038e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b3c:	e151      	b.n	8002de2 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a81      	ldr	r2, [pc, #516]	; (8002d48 <HAL_UART_MspInit+0x2b8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d160      	bne.n	8002c0a <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 fbc7 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002b64:	f7ff fc06 	bl	8002374 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b68:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	4a74      	ldr	r2, [pc, #464]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b72:	6413      	str	r3, [r2, #64]	; 0x40
 8002b74:	4b72      	ldr	r3, [pc, #456]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b80:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	4a6e      	ldr	r2, [pc, #440]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8c:	4b6c      	ldr	r3, [pc, #432]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b98:	4b69      	ldr	r3, [pc, #420]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	4a68      	ldr	r2, [pc, #416]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba4:	4b66      	ldr	r3, [pc, #408]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	623b      	str	r3, [r7, #32]
 8002bae:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bca:	2308      	movs	r3, #8
 8002bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	485d      	ldr	r0, [pc, #372]	; (8002d4c <HAL_UART_MspInit+0x2bc>)
 8002bd8:	f000 fe86 	bl	80038e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bf6:	2308      	movs	r3, #8
 8002bf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4850      	ldr	r0, [pc, #320]	; (8002d44 <HAL_UART_MspInit+0x2b4>)
 8002c04:	f000 fe70 	bl	80038e8 <HAL_GPIO_Init>
}
 8002c08:	e0eb      	b.n	8002de2 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <HAL_UART_MspInit+0x2c0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d151      	bne.n	8002cb8 <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c14:	2340      	movs	r3, #64	; 0x40
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c20:	4618      	mov	r0, r3
 8002c22:	f002 fb63 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002c2c:	f7ff fba2 	bl	8002374 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c30:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	4a42      	ldr	r2, [pc, #264]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002c36:	f043 0310 	orr.w	r3, r3, #16
 8002c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3c:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c48:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a3c      	ldr	r2, [pc, #240]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b3a      	ldr	r3, [pc, #232]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4831      	ldr	r0, [pc, #196]	; (8002d4c <HAL_UART_MspInit+0x2bc>)
 8002c88:	f000 fe2e 	bl	80038e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c8c:	2340      	movs	r3, #64	; 0x40
 8002c8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ca4:	2307      	movs	r3, #7
 8002ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002caa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4826      	ldr	r0, [pc, #152]	; (8002d4c <HAL_UART_MspInit+0x2bc>)
 8002cb2:	f000 fe19 	bl	80038e8 <HAL_GPIO_Init>
}
 8002cb6:	e094      	b.n	8002de2 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a25      	ldr	r2, [pc, #148]	; (8002d54 <HAL_UART_MspInit+0x2c4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d14c      	bne.n	8002d5c <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 fb0c 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002cda:	f7ff fb4b 	bl	8002374 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	6313      	str	r3, [r2, #48]	; 0x30
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_UART_MspInit+0x2b0>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d0e:	2360      	movs	r3, #96	; 0x60
 8002d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d20:	2303      	movs	r3, #3
 8002d22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d26:	2307      	movs	r3, #7
 8002d28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4809      	ldr	r0, [pc, #36]	; (8002d58 <HAL_UART_MspInit+0x2c8>)
 8002d34:	f000 fdd8 	bl	80038e8 <HAL_GPIO_Init>
}
 8002d38:	e053      	b.n	8002de2 <HAL_UART_MspInit+0x352>
 8002d3a:	bf00      	nop
 8002d3c:	40004c00 	.word	0x40004c00
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40005000 	.word	0x40005000
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40011000 	.word	0x40011000
 8002d54:	40004400 	.word	0x40004400
 8002d58:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_UART_MspInit+0x35c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d13d      	bne.n	8002de2 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 fab8 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002d82:	f7ff faf7 	bl	8002374 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_UART_MspInit+0x360>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <HAL_UART_MspInit+0x360>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <HAL_UART_MspInit+0x360>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_UART_MspInit+0x360>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a13      	ldr	r2, [pc, #76]	; (8002df0 <HAL_UART_MspInit+0x360>)
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <HAL_UART_MspInit+0x360>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dd0:	2307      	movs	r3, #7
 8002dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4805      	ldr	r0, [pc, #20]	; (8002df4 <HAL_UART_MspInit+0x364>)
 8002dde:	f000 fd83 	bl	80038e8 <HAL_GPIO_Init>
}
 8002de2:	bf00      	nop
 8002de4:	37d8      	adds	r7, #216	; 0xd8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40004800 	.word	0x40004800
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020c00 	.word	0x40020c00

08002df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <NMI_Handler+0x4>

08002dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e02:	e7fe      	b.n	8002e02 <HardFault_Handler+0x4>

08002e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e08:	e7fe      	b.n	8002e08 <MemManage_Handler+0x4>

08002e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e0e:	e7fe      	b.n	8002e0e <BusFault_Handler+0x4>

08002e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <UsageFault_Handler+0x4>

08002e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e44:	f000 f934 	bl	80030b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002e50:	2010      	movs	r0, #16
 8002e52:	f000 ff0f 	bl	8003c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <TIM6_DAC_IRQHandler+0x10>)
 8002e62:	f003 fb2d 	bl	80064c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000368 	.word	0x20000368

08002e70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e00a      	b.n	8002e98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e82:	f3af 8000 	nop.w
 8002e86:	4601      	mov	r1, r0
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	60ba      	str	r2, [r7, #8]
 8002e8e:	b2ca      	uxtb	r2, r1
 8002e90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3301      	adds	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	dbf0      	blt.n	8002e82 <_read+0x12>
	}

return len;
 8002ea0:	687b      	ldr	r3, [r7, #4]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e009      	b.n	8002ed0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60ba      	str	r2, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dbf1      	blt.n	8002ebc <_write+0x12>
	}
	return len;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_close>:

int _close(int file)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_isatty>:

int _isatty(int file)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
	return 1;
 8002f22:	2301      	movs	r3, #1
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <_sbrk+0x5c>)
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <_sbrk+0x60>)
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <_sbrk+0x64>)
 8002f6a:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <_sbrk+0x68>)
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <_sbrk+0x64>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d207      	bcs.n	8002f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f7c:	f005 fa9e 	bl	80084bc <__errno>
 8002f80:	4603      	mov	r3, r0
 8002f82:	220c      	movs	r2, #12
 8002f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	e009      	b.n	8002fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <_sbrk+0x64>)
 8002f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20080000 	.word	0x20080000
 8002fac:	00000400 	.word	0x00000400
 8002fb0:	20000804 	.word	0x20000804
 8002fb4:	20000820 	.word	0x20000820

08002fb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <SystemInit+0x28>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <SystemInit+0x28>)
 8002fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <SystemInit+0x28>)
 8002fce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fd2:	609a      	str	r2, [r3, #8]
#endif
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800301c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fe8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fea:	e003      	b.n	8002ff4 <LoopCopyDataInit>

08002fec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ff0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ff2:	3104      	adds	r1, #4

08002ff4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ff4:	480b      	ldr	r0, [pc, #44]	; (8003024 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ff8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ffa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ffc:	d3f6      	bcc.n	8002fec <CopyDataInit>
  ldr  r2, =_sbss
 8002ffe:	4a0b      	ldr	r2, [pc, #44]	; (800302c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003000:	e002      	b.n	8003008 <LoopFillZerobss>

08003002 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003002:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003004:	f842 3b04 	str.w	r3, [r2], #4

08003008 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800300a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800300c:	d3f9      	bcc.n	8003002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800300e:	f7ff ffd3 	bl	8002fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003012:	f005 fa59 	bl	80084c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003016:	f7fd ffa9 	bl	8000f6c <main>
  bx  lr    
 800301a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800301c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003020:	08009580 	.word	0x08009580
  ldr  r0, =_sdata
 8003024:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003028:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800302c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003030:	2000081c 	.word	0x2000081c

08003034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC_IRQHandler>

08003036 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303a:	2003      	movs	r0, #3
 800303c:	f000 fc04 	bl	8003848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003040:	2000      	movs	r0, #0
 8003042:	f000 f805 	bl	8003050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003046:	f7ff f99b 	bl	8002380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_InitTick+0x54>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_InitTick+0x58>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4619      	mov	r1, r3
 8003062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003066:	fbb3 f3f1 	udiv	r3, r3, r1
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fc2d 	bl	80038ce <HAL_SYSTICK_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e00e      	b.n	800309c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b0f      	cmp	r3, #15
 8003082:	d80a      	bhi.n	800309a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003084:	2200      	movs	r2, #0
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	f000 fbe7 	bl	800385e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003090:	4a06      	ldr	r2, [pc, #24]	; (80030ac <HAL_InitTick+0x5c>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000000c 	.word	0x2000000c
 80030a8:	20000014 	.word	0x20000014
 80030ac:	20000010 	.word	0x20000010

080030b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_IncTick+0x20>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_IncTick+0x24>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_IncTick+0x24>)
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000014 	.word	0x20000014
 80030d4:	20000808 	.word	0x20000808

080030d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return uwTick;
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_GetTick+0x14>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20000808 	.word	0x20000808

080030f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030f8:	f7ff ffee 	bl	80030d8 <HAL_GetTick>
 80030fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d005      	beq.n	8003116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_Delay+0x44>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003116:	bf00      	nop
 8003118:	f7ff ffde 	bl	80030d8 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	429a      	cmp	r2, r3
 8003126:	d8f7      	bhi.n	8003118 <HAL_Delay+0x28>
  {
  }
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000014 	.word	0x20000014

08003138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e031      	b.n	80031b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff f936 	bl	80023c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	d116      	bne.n	80031a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_ADC_Init+0x84>)
 800317c:	4013      	ands	r3, r2
 800317e:	f043 0202 	orr.w	r2, r3, #2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f970 	bl	800346c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
 80031a2:	e001      	b.n	80031a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	ffffeefd 	.word	0xffffeefd

080031c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x1c>
 80031d8:	2302      	movs	r3, #2
 80031da:	e136      	b.n	800344a <HAL_ADC_ConfigChannel+0x28a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b09      	cmp	r3, #9
 80031ea:	d93a      	bls.n	8003262 <HAL_ADC_ConfigChannel+0xa2>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031f4:	d035      	beq.n	8003262 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68d9      	ldr	r1, [r3, #12]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	b29b      	uxth	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	3b1e      	subs	r3, #30
 800320c:	2207      	movs	r2, #7
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	400a      	ands	r2, r1
 800321a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a8d      	ldr	r2, [pc, #564]	; (8003458 <HAL_ADC_ConfigChannel+0x298>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10a      	bne.n	800323c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68d9      	ldr	r1, [r3, #12]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	061a      	lsls	r2, r3, #24
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800323a:	e035      	b.n	80032a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68d9      	ldr	r1, [r3, #12]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	4618      	mov	r0, r3
 800324e:	4603      	mov	r3, r0
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4403      	add	r3, r0
 8003254:	3b1e      	subs	r3, #30
 8003256:	409a      	lsls	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003260:	e022      	b.n	80032a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6919      	ldr	r1, [r3, #16]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	2207      	movs	r2, #7
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43da      	mvns	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	400a      	ands	r2, r1
 8003284:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6919      	ldr	r1, [r3, #16]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	4618      	mov	r0, r3
 8003298:	4603      	mov	r3, r0
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4403      	add	r3, r0
 800329e:	409a      	lsls	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d824      	bhi.n	80032fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	3b05      	subs	r3, #5
 80032c2:	221f      	movs	r2, #31
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43da      	mvns	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	400a      	ands	r2, r1
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	4618      	mov	r0, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	3b05      	subs	r3, #5
 80032ec:	fa00 f203 	lsl.w	r2, r0, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34
 80032f8:	e04c      	b.n	8003394 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d824      	bhi.n	800334c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	3b23      	subs	r3, #35	; 0x23
 8003314:	221f      	movs	r2, #31
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	400a      	ands	r2, r1
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	4618      	mov	r0, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	3b23      	subs	r3, #35	; 0x23
 800333e:	fa00 f203 	lsl.w	r2, r0, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
 800334a:	e023      	b.n	8003394 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	3b41      	subs	r3, #65	; 0x41
 800335e:	221f      	movs	r2, #31
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43da      	mvns	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	400a      	ands	r2, r1
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	4618      	mov	r0, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	3b41      	subs	r3, #65	; 0x41
 8003388:	fa00 f203 	lsl.w	r2, r0, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a30      	ldr	r2, [pc, #192]	; (800345c <HAL_ADC_ConfigChannel+0x29c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10a      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x1f4>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033a6:	d105      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80033a8:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 80033ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80033b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a28      	ldr	r2, [pc, #160]	; (800345c <HAL_ADC_ConfigChannel+0x29c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10f      	bne.n	80033de <HAL_ADC_ConfigChannel+0x21e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b12      	cmp	r3, #18
 80033c4:	d10b      	bne.n	80033de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80033c6:	4b26      	ldr	r3, [pc, #152]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4a25      	ldr	r2, [pc, #148]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 80033cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80033d2:	4b23      	ldr	r3, [pc, #140]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 80033d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	; (800345c <HAL_ADC_ConfigChannel+0x29c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d12b      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x280>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1a      	ldr	r2, [pc, #104]	; (8003458 <HAL_ADC_ConfigChannel+0x298>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x23a>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b11      	cmp	r3, #17
 80033f8:	d122      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80033fa:	4b19      	ldr	r3, [pc, #100]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 8003400:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003404:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003406:	4b16      	ldr	r3, [pc, #88]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4a15      	ldr	r2, [pc, #84]	; (8003460 <HAL_ADC_ConfigChannel+0x2a0>)
 800340c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003410:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a10      	ldr	r2, [pc, #64]	; (8003458 <HAL_ADC_ConfigChannel+0x298>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d111      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_ADC_ConfigChannel+0x2a4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_ADC_ConfigChannel+0x2a8>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0c9a      	lsrs	r2, r3, #18
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003432:	e002      	b.n	800343a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3b01      	subs	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1f9      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	10000012 	.word	0x10000012
 800345c:	40012000 	.word	0x40012000
 8003460:	40012300 	.word	0x40012300
 8003464:	2000000c 	.word	0x2000000c
 8003468:	431bde83 	.word	0x431bde83

0800346c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003474:	4b78      	ldr	r3, [pc, #480]	; (8003658 <ADC_Init+0x1ec>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a77      	ldr	r2, [pc, #476]	; (8003658 <ADC_Init+0x1ec>)
 800347a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800347e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003480:	4b75      	ldr	r3, [pc, #468]	; (8003658 <ADC_Init+0x1ec>)
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4973      	ldr	r1, [pc, #460]	; (8003658 <ADC_Init+0x1ec>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800349c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	021a      	lsls	r2, r3, #8
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6899      	ldr	r1, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	4a58      	ldr	r2, [pc, #352]	; (800365c <ADC_Init+0x1f0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d022      	beq.n	8003546 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800350e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6899      	ldr	r1, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	e00f      	b.n	8003566 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003564:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0202 	bic.w	r2, r2, #2
 8003574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6899      	ldr	r1, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	005a      	lsls	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6859      	ldr	r1, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	3b01      	subs	r3, #1
 80035c0:	035a      	lsls	r2, r3, #13
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	e007      	b.n	80035dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	051a      	lsls	r2, r3, #20
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6899      	ldr	r1, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800361e:	025a      	lsls	r2, r3, #9
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	029a      	lsls	r2, r3, #10
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40012300 	.word	0x40012300
 800365c:	0f000001 	.word	0x0f000001

08003660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800367c:	4013      	ands	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <__NVIC_SetPriorityGrouping+0x44>)
 800368a:	4313      	orrs	r3, r2
 800368c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368e:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	60d3      	str	r3, [r2, #12]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000ed00 	.word	0xe000ed00
 80036a4:	05fa0000 	.word	0x05fa0000

080036a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	f003 0307 	and.w	r3, r3, #7
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	db0b      	blt.n	80036ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	4907      	ldr	r1, [pc, #28]	; (80036fc <__NVIC_EnableIRQ+0x38>)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	2001      	movs	r0, #1
 80036e6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000e100 	.word	0xe000e100

08003700 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	2b00      	cmp	r3, #0
 8003710:	db12      	blt.n	8003738 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	f003 021f 	and.w	r2, r3, #31
 8003718:	490a      	ldr	r1, [pc, #40]	; (8003744 <__NVIC_DisableIRQ+0x44>)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	2001      	movs	r0, #1
 8003722:	fa00 f202 	lsl.w	r2, r0, r2
 8003726:	3320      	adds	r3, #32
 8003728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800372c:	f3bf 8f4f 	dsb	sy
}
 8003730:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003732:	f3bf 8f6f 	isb	sy
}
 8003736:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000e100 	.word	0xe000e100

08003748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	6039      	str	r1, [r7, #0]
 8003752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	2b00      	cmp	r3, #0
 800375a:	db0a      	blt.n	8003772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	490c      	ldr	r1, [pc, #48]	; (8003794 <__NVIC_SetPriority+0x4c>)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	0112      	lsls	r2, r2, #4
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	440b      	add	r3, r1
 800376c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003770:	e00a      	b.n	8003788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4908      	ldr	r1, [pc, #32]	; (8003798 <__NVIC_SetPriority+0x50>)
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	3b04      	subs	r3, #4
 8003780:	0112      	lsls	r2, r2, #4
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	440b      	add	r3, r1
 8003786:	761a      	strb	r2, [r3, #24]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000e100 	.word	0xe000e100
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f1c3 0307 	rsb	r3, r3, #7
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	bf28      	it	cs
 80037ba:	2304      	movcs	r3, #4
 80037bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3304      	adds	r3, #4
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d902      	bls.n	80037cc <NVIC_EncodePriority+0x30>
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3b03      	subs	r3, #3
 80037ca:	e000      	b.n	80037ce <NVIC_EncodePriority+0x32>
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	f04f 32ff 	mov.w	r2, #4294967295
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	401a      	ands	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e4:	f04f 31ff 	mov.w	r1, #4294967295
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	43d9      	mvns	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f4:	4313      	orrs	r3, r2
         );
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3724      	adds	r7, #36	; 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003814:	d301      	bcc.n	800381a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003816:	2301      	movs	r3, #1
 8003818:	e00f      	b.n	800383a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <SysTick_Config+0x40>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3b01      	subs	r3, #1
 8003820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003822:	210f      	movs	r1, #15
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	f7ff ff8e 	bl	8003748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <SysTick_Config+0x40>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003832:	4b04      	ldr	r3, [pc, #16]	; (8003844 <SysTick_Config+0x40>)
 8003834:	2207      	movs	r2, #7
 8003836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	e000e010 	.word	0xe000e010

08003848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff05 	bl	8003660 <__NVIC_SetPriorityGrouping>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	4603      	mov	r3, r0
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003870:	f7ff ff1a 	bl	80036a8 <__NVIC_GetPriorityGrouping>
 8003874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	6978      	ldr	r0, [r7, #20]
 800387c:	f7ff ff8e 	bl	800379c <NVIC_EncodePriority>
 8003880:	4602      	mov	r2, r0
 8003882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff5d 	bl	8003748 <__NVIC_SetPriority>
}
 800388e:	bf00      	nop
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	4603      	mov	r3, r0
 800389e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff0d 	bl	80036c4 <__NVIC_EnableIRQ>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff1d 	bl	8003700 <__NVIC_DisableIRQ>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ff94 	bl	8003804 <SysTick_Config>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e175      	b.n	8003bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003908:	2201      	movs	r2, #1
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	429a      	cmp	r2, r3
 8003922:	f040 8164 	bne.w	8003bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d005      	beq.n	800393e <HAL_GPIO_Init+0x56>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d130      	bne.n	80039a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	2203      	movs	r2, #3
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003974:	2201      	movs	r2, #1
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 0201 	and.w	r2, r3, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d017      	beq.n	80039dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	2203      	movs	r2, #3
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d123      	bne.n	8003a30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3208      	adds	r2, #8
 80039f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	220f      	movs	r2, #15
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	08da      	lsrs	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3208      	adds	r2, #8
 8003a2a:	69b9      	ldr	r1, [r7, #24]
 8003a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0203 	and.w	r2, r3, #3
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80be 	beq.w	8003bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a72:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7e:	4b63      	ldr	r3, [pc, #396]	; (8003c0c <HAL_GPIO_Init+0x324>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a8a:	4a61      	ldr	r2, [pc, #388]	; (8003c10 <HAL_GPIO_Init+0x328>)
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <HAL_GPIO_Init+0x32c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d037      	beq.n	8003b26 <HAL_GPIO_Init+0x23e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a57      	ldr	r2, [pc, #348]	; (8003c18 <HAL_GPIO_Init+0x330>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d031      	beq.n	8003b22 <HAL_GPIO_Init+0x23a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a56      	ldr	r2, [pc, #344]	; (8003c1c <HAL_GPIO_Init+0x334>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d02b      	beq.n	8003b1e <HAL_GPIO_Init+0x236>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a55      	ldr	r2, [pc, #340]	; (8003c20 <HAL_GPIO_Init+0x338>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d025      	beq.n	8003b1a <HAL_GPIO_Init+0x232>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a54      	ldr	r2, [pc, #336]	; (8003c24 <HAL_GPIO_Init+0x33c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01f      	beq.n	8003b16 <HAL_GPIO_Init+0x22e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a53      	ldr	r2, [pc, #332]	; (8003c28 <HAL_GPIO_Init+0x340>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d019      	beq.n	8003b12 <HAL_GPIO_Init+0x22a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_GPIO_Init+0x344>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_GPIO_Init+0x226>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a51      	ldr	r2, [pc, #324]	; (8003c30 <HAL_GPIO_Init+0x348>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00d      	beq.n	8003b0a <HAL_GPIO_Init+0x222>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a50      	ldr	r2, [pc, #320]	; (8003c34 <HAL_GPIO_Init+0x34c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <HAL_GPIO_Init+0x21e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4f      	ldr	r2, [pc, #316]	; (8003c38 <HAL_GPIO_Init+0x350>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <HAL_GPIO_Init+0x21a>
 8003afe:	2309      	movs	r3, #9
 8003b00:	e012      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b02:	230a      	movs	r3, #10
 8003b04:	e010      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b06:	2308      	movs	r3, #8
 8003b08:	e00e      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b0a:	2307      	movs	r3, #7
 8003b0c:	e00c      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b0e:	2306      	movs	r3, #6
 8003b10:	e00a      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b12:	2305      	movs	r3, #5
 8003b14:	e008      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e004      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_Init+0x240>
 8003b26:	2300      	movs	r3, #0
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4093      	lsls	r3, r2
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b38:	4935      	ldr	r1, [pc, #212]	; (8003c10 <HAL_GPIO_Init+0x328>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b46:	4b3d      	ldr	r3, [pc, #244]	; (8003c3c <HAL_GPIO_Init+0x354>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b6a:	4a34      	ldr	r2, [pc, #208]	; (8003c3c <HAL_GPIO_Init+0x354>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <HAL_GPIO_Init+0x354>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b94:	4a29      	ldr	r2, [pc, #164]	; (8003c3c <HAL_GPIO_Init+0x354>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b9a:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <HAL_GPIO_Init+0x354>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <HAL_GPIO_Init+0x354>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <HAL_GPIO_Init+0x354>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <HAL_GPIO_Init+0x354>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	f67f ae86 	bls.w	8003908 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40021400 	.word	0x40021400
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	40021c00 	.word	0x40021c00
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40022400 	.word	0x40022400
 8003c3c:	40013c00 	.word	0x40013c00

08003c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c50:	787b      	ldrb	r3, [r7, #1]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c56:	887a      	ldrh	r2, [r7, #2]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c5c:	e003      	b.n	8003c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c5e:	887b      	ldrh	r3, [r7, #2]
 8003c60:	041a      	lsls	r2, r3, #16
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	619a      	str	r2, [r3, #24]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c8a:	4a05      	ldr	r2, [pc, #20]	; (8003ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc fe36 	bl	8000904 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40013c00 	.word	0x40013c00

08003ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e07f      	b.n	8003db6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fe fbbc 	bl	8002448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2224      	movs	r2, #36	; 0x24
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cf4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	e006      	b.n	8003d2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d104      	bne.n	8003d3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <HAL_I2C_Init+0x11c>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69d9      	ldr	r1, [r3, #28]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	02008000 	.word	0x02008000

08003dc4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	4608      	mov	r0, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	817b      	strh	r3, [r7, #10]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	813b      	strh	r3, [r7, #8]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	f040 80f9 	bne.w	8003fde <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x34>
 8003df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e0ed      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2C_Mem_Write+0x4e>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e0e6      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e1a:	f7ff f95d 	bl	80030d8 <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2319      	movs	r3, #25
 8003e26:	2201      	movs	r2, #1
 8003e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fac3 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0d1      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2221      	movs	r2, #33	; 0x21
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2240      	movs	r2, #64	; 0x40
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e64:	88f8      	ldrh	r0, [r7, #6]
 8003e66:	893a      	ldrh	r2, [r7, #8]
 8003e68:	8979      	ldrh	r1, [r7, #10]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	4603      	mov	r3, r0
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f9d3 	bl	8004220 <I2C_RequestMemoryWrite>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0a9      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2bff      	cmp	r3, #255	; 0xff
 8003e94:	d90e      	bls.n	8003eb4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	22ff      	movs	r2, #255	; 0xff
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	8979      	ldrh	r1, [r7, #10]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fc1f 	bl	80046f0 <I2C_TransferConfig>
 8003eb2:	e00f      	b.n	8003ed4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	8979      	ldrh	r1, [r7, #10]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fc0e 	bl	80046f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 faad 	bl	8004438 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e07b      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d034      	beq.n	8003f8c <HAL_I2C_Mem_Write+0x1c8>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d130      	bne.n	8003f8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	2200      	movs	r2, #0
 8003f32:	2180      	movs	r1, #128	; 0x80
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fa3f 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e04d      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2bff      	cmp	r3, #255	; 0xff
 8003f4c:	d90e      	bls.n	8003f6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	22ff      	movs	r2, #255	; 0xff
 8003f52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	8979      	ldrh	r1, [r7, #10]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 fbc3 	bl	80046f0 <I2C_TransferConfig>
 8003f6a:	e00f      	b.n	8003f8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	8979      	ldrh	r1, [r7, #10]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fbb2 	bl	80046f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d19e      	bne.n	8003ed4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fa8c 	bl	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e01a      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <HAL_I2C_Mem_Write+0x224>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	fe00e800 	.word	0xfe00e800

08003fec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	817b      	strh	r3, [r7, #10]
 8003ffe:	460b      	mov	r3, r1
 8004000:	813b      	strh	r3, [r7, #8]
 8004002:	4613      	mov	r3, r2
 8004004:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b20      	cmp	r3, #32
 8004010:	f040 80fd 	bne.w	800420e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_I2C_Mem_Read+0x34>
 800401a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800401c:	2b00      	cmp	r3, #0
 800401e:	d105      	bne.n	800402c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004026:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0f1      	b.n	8004210 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_I2C_Mem_Read+0x4e>
 8004036:	2302      	movs	r3, #2
 8004038:	e0ea      	b.n	8004210 <HAL_I2C_Mem_Read+0x224>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004042:	f7ff f849 	bl	80030d8 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2319      	movs	r3, #25
 800404e:	2201      	movs	r2, #1
 8004050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f9af 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0d5      	b.n	8004210 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2222      	movs	r2, #34	; 0x22
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a3a      	ldr	r2, [r7, #32]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800408c:	88f8      	ldrh	r0, [r7, #6]
 800408e:	893a      	ldrh	r2, [r7, #8]
 8004090:	8979      	ldrh	r1, [r7, #10]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	4603      	mov	r3, r0
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f913 	bl	80042c8 <I2C_RequestMemoryRead>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0ad      	b.n	8004210 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2bff      	cmp	r3, #255	; 0xff
 80040bc:	d90e      	bls.n	80040dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	22ff      	movs	r2, #255	; 0xff
 80040c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	8979      	ldrh	r1, [r7, #10]
 80040cc:	4b52      	ldr	r3, [pc, #328]	; (8004218 <HAL_I2C_Mem_Read+0x22c>)
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fb0b 	bl	80046f0 <I2C_TransferConfig>
 80040da:	e00f      	b.n	80040fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	8979      	ldrh	r1, [r7, #10]
 80040ee:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <HAL_I2C_Mem_Read+0x22c>)
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fafa 	bl	80046f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	2200      	movs	r2, #0
 8004104:	2104      	movs	r1, #4
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f956 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e07c      	b.n	8004210 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d034      	beq.n	80041bc <HAL_I2C_Mem_Read+0x1d0>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004156:	2b00      	cmp	r3, #0
 8004158:	d130      	bne.n	80041bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	2200      	movs	r2, #0
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f927 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e04d      	b.n	8004210 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	2bff      	cmp	r3, #255	; 0xff
 800417c:	d90e      	bls.n	800419c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	22ff      	movs	r2, #255	; 0xff
 8004182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	b2da      	uxtb	r2, r3
 800418a:	8979      	ldrh	r1, [r7, #10]
 800418c:	2300      	movs	r3, #0
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 faab 	bl	80046f0 <I2C_TransferConfig>
 800419a:	e00f      	b.n	80041bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	8979      	ldrh	r1, [r7, #10]
 80041ae:	2300      	movs	r3, #0
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fa9a 	bl	80046f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d19a      	bne.n	80040fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f974 	bl	80044b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e01a      	b.n	8004210 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2220      	movs	r2, #32
 80041e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_I2C_Mem_Read+0x230>)
 80041ee:	400b      	ands	r3, r1
 80041f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	80002400 	.word	0x80002400
 800421c:	fe00e800 	.word	0xfe00e800

08004220 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	4608      	mov	r0, r1
 800422a:	4611      	mov	r1, r2
 800422c:	461a      	mov	r2, r3
 800422e:	4603      	mov	r3, r0
 8004230:	817b      	strh	r3, [r7, #10]
 8004232:	460b      	mov	r3, r1
 8004234:	813b      	strh	r3, [r7, #8]
 8004236:	4613      	mov	r3, r2
 8004238:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	8979      	ldrh	r1, [r7, #10]
 8004240:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <I2C_RequestMemoryWrite+0xa4>)
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fa51 	bl	80046f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	69b9      	ldr	r1, [r7, #24]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f8f0 	bl	8004438 <I2C_WaitOnTXISFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e02c      	b.n	80042bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d105      	bne.n	8004274 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004268:	893b      	ldrh	r3, [r7, #8]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	629a      	str	r2, [r3, #40]	; 0x28
 8004272:	e015      	b.n	80042a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004274:	893b      	ldrh	r3, [r7, #8]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	b29b      	uxth	r3, r3
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f8d6 	bl	8004438 <I2C_WaitOnTXISFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e012      	b.n	80042bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004296:	893b      	ldrh	r3, [r7, #8]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2200      	movs	r2, #0
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f884 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	80002000 	.word	0x80002000

080042c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	4608      	mov	r0, r1
 80042d2:	4611      	mov	r1, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	817b      	strh	r3, [r7, #10]
 80042da:	460b      	mov	r3, r1
 80042dc:	813b      	strh	r3, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	8979      	ldrh	r1, [r7, #10]
 80042e8:	4b20      	ldr	r3, [pc, #128]	; (800436c <I2C_RequestMemoryRead+0xa4>)
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	2300      	movs	r3, #0
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f9fe 	bl	80046f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	69b9      	ldr	r1, [r7, #24]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f89d 	bl	8004438 <I2C_WaitOnTXISFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e02c      	b.n	8004362 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d105      	bne.n	800431a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800430e:	893b      	ldrh	r3, [r7, #8]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
 8004318:	e015      	b.n	8004346 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800431a:	893b      	ldrh	r3, [r7, #8]
 800431c:	0a1b      	lsrs	r3, r3, #8
 800431e:	b29b      	uxth	r3, r3
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f883 	bl	8004438 <I2C_WaitOnTXISFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e012      	b.n	8004362 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800433c:	893b      	ldrh	r3, [r7, #8]
 800433e:	b2da      	uxtb	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2200      	movs	r2, #0
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f831 	bl	80043b8 <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	80002000 	.word	0x80002000

08004370 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d103      	bne.n	800438e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d007      	beq.n	80043ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	619a      	str	r2, [r3, #24]
  }
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c8:	e022      	b.n	8004410 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d01e      	beq.n	8004410 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fe fe81 	bl	80030d8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d113      	bne.n	8004410 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e00f      	b.n	8004430 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	429a      	cmp	r2, r3
 800442c:	d0cd      	beq.n	80043ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004444:	e02c      	b.n	80044a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f870 	bl	8004530 <I2C_IsErrorOccurred>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e02a      	b.n	80044b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d01e      	beq.n	80044a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fe fe39 	bl	80030d8 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d113      	bne.n	80044a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e007      	b.n	80044b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d1cb      	bne.n	8004446 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c4:	e028      	b.n	8004518 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f830 	bl	8004530 <I2C_IsErrorOccurred>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e026      	b.n	8004528 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044da:	f7fe fdfd 	bl	80030d8 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d113      	bne.n	8004518 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e007      	b.n	8004528 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b20      	cmp	r3, #32
 8004524:	d1cf      	bne.n	80044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d068      	beq.n	800462e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2210      	movs	r2, #16
 8004562:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004564:	e049      	b.n	80045fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d045      	beq.n	80045fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fe fdb3 	bl	80030d8 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_IsErrorOccurred+0x54>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d13a      	bne.n	80045fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004596:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	d121      	bne.n	80045ec <I2C_IsErrorOccurred+0xbc>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ae:	d01d      	beq.n	80045ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d01a      	beq.n	80045ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045c6:	f7fe fd87 	bl	80030d8 <HAL_GetTick>
 80045ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045cc:	e00e      	b.n	80045ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045ce:	f7fe fd83 	bl	80030d8 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b19      	cmp	r3, #25
 80045da:	d907      	bls.n	80045ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	f043 0320 	orr.w	r3, r3, #32
 80045e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80045ea:	e006      	b.n	80045fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d1e9      	bne.n	80045ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b20      	cmp	r3, #32
 8004606:	d003      	beq.n	8004610 <I2C_IsErrorOccurred+0xe0>
 8004608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0aa      	beq.n	8004566 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004614:	2b00      	cmp	r3, #0
 8004616:	d103      	bne.n	8004620 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2220      	movs	r2, #32
 800461e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	f043 0304 	orr.w	r3, r3, #4
 8004626:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00b      	beq.n	8004658 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004650:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	f043 0308 	orr.w	r3, r3, #8
 8004668:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004672:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00b      	beq.n	800469c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	f043 0302 	orr.w	r3, r3, #2
 800468a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004694:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800469c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01c      	beq.n	80046de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff fe63 	bl	8004370 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6859      	ldr	r1, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <I2C_IsErrorOccurred+0x1bc>)
 80046b6:	400b      	ands	r3, r1
 80046b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80046de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3728      	adds	r7, #40	; 0x28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	fe00e800 	.word	0xfe00e800

080046f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	817b      	strh	r3, [r7, #10]
 80046fe:	4613      	mov	r3, r2
 8004700:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004702:	897b      	ldrh	r3, [r7, #10]
 8004704:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004708:	7a7b      	ldrb	r3, [r7, #9]
 800470a:	041b      	lsls	r3, r3, #16
 800470c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004710:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	4313      	orrs	r3, r2
 800471a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800471e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	0d5b      	lsrs	r3, r3, #21
 800472a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800472e:	4b08      	ldr	r3, [pc, #32]	; (8004750 <I2C_TransferConfig+0x60>)
 8004730:	430b      	orrs	r3, r1
 8004732:	43db      	mvns	r3, r3
 8004734:	ea02 0103 	and.w	r1, r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004742:	bf00      	nop
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	03ff63ff 	.word	0x03ff63ff

08004754 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b20      	cmp	r3, #32
 8004768:	d138      	bne.n	80047dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004774:	2302      	movs	r3, #2
 8004776:	e032      	b.n	80047de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2224      	movs	r2, #36	; 0x24
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6819      	ldr	r1, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d139      	bne.n	8004874 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800480a:	2302      	movs	r3, #2
 800480c:	e033      	b.n	8004876 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2224      	movs	r2, #36	; 0x24
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800483c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800488e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004892:	6013      	str	r3, [r2, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40007000 	.word	0x40007000

080048a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	4b23      	ldr	r3, [pc, #140]	; (800493c <HAL_PWREx_EnableOverDrive+0x98>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a22      	ldr	r2, [pc, #136]	; (800493c <HAL_PWREx_EnableOverDrive+0x98>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b20      	ldr	r3, [pc, #128]	; (800493c <HAL_PWREx_EnableOverDrive+0x98>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048c6:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048d2:	f7fe fc01 	bl	80030d8 <HAL_GetTick>
 80048d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048d8:	e009      	b.n	80048ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048da:	f7fe fbfd 	bl	80030d8 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e8:	d901      	bls.n	80048ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e022      	b.n	8004934 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048ee:	4b14      	ldr	r3, [pc, #80]	; (8004940 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fa:	d1ee      	bne.n	80048da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0f      	ldr	r2, [pc, #60]	; (8004940 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004906:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004908:	f7fe fbe6 	bl	80030d8 <HAL_GetTick>
 800490c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800490e:	e009      	b.n	8004924 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004910:	f7fe fbe2 	bl	80030d8 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800491e:	d901      	bls.n	8004924 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e007      	b.n	8004934 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004930:	d1ee      	bne.n	8004910 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40023800 	.word	0x40023800
 8004940:	40007000 	.word	0x40007000

08004944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800494c:	2300      	movs	r3, #0
 800494e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e29b      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8087 	beq.w	8004a76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004968:	4b96      	ldr	r3, [pc, #600]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b04      	cmp	r3, #4
 8004972:	d00c      	beq.n	800498e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004974:	4b93      	ldr	r3, [pc, #588]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b08      	cmp	r3, #8
 800497e:	d112      	bne.n	80049a6 <HAL_RCC_OscConfig+0x62>
 8004980:	4b90      	ldr	r3, [pc, #576]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800498c:	d10b      	bne.n	80049a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498e:	4b8d      	ldr	r3, [pc, #564]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d06c      	beq.n	8004a74 <HAL_RCC_OscConfig+0x130>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d168      	bne.n	8004a74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e275      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x7a>
 80049b0:	4b84      	ldr	r3, [pc, #528]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e02e      	b.n	8004a1c <HAL_RCC_OscConfig+0xd8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x9c>
 80049c6:	4b7f      	ldr	r3, [pc, #508]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a7e      	ldr	r2, [pc, #504]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	4b7c      	ldr	r3, [pc, #496]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7b      	ldr	r2, [pc, #492]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e01d      	b.n	8004a1c <HAL_RCC_OscConfig+0xd8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0xc0>
 80049ea:	4b76      	ldr	r3, [pc, #472]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a75      	ldr	r2, [pc, #468]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b73      	ldr	r3, [pc, #460]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a72      	ldr	r2, [pc, #456]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e00b      	b.n	8004a1c <HAL_RCC_OscConfig+0xd8>
 8004a04:	4b6f      	ldr	r3, [pc, #444]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6e      	ldr	r2, [pc, #440]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b6c      	ldr	r3, [pc, #432]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a6b      	ldr	r2, [pc, #428]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d013      	beq.n	8004a4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fe fb58 	bl	80030d8 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fe fb54 	bl	80030d8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e229      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a3e:	4b61      	ldr	r3, [pc, #388]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0xe8>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fe fb44 	bl	80030d8 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fe fb40 	bl	80030d8 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e215      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a66:	4b57      	ldr	r3, [pc, #348]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x110>
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d069      	beq.n	8004b56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a82:	4b50      	ldr	r3, [pc, #320]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a8e:	4b4d      	ldr	r3, [pc, #308]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d11c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x190>
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d116      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa6:	4b47      	ldr	r3, [pc, #284]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_RCC_OscConfig+0x17a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d001      	beq.n	8004abe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e1e9      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abe:	4b41      	ldr	r3, [pc, #260]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	493d      	ldr	r1, [pc, #244]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad2:	e040      	b.n	8004b56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d023      	beq.n	8004b24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004adc:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fe faf6 	bl	80030d8 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af0:	f7fe faf2 	bl	80030d8 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e1c7      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0e:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4929      	ldr	r1, [pc, #164]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	600b      	str	r3, [r1, #0]
 8004b22:	e018      	b.n	8004b56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fe fad2 	bl	80030d8 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b38:	f7fe face 	bl	80030d8 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1a3      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d038      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d019      	beq.n	8004b9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b76:	f7fe faaf 	bl	80030d8 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7e:	f7fe faab 	bl	80030d8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e180      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x23a>
 8004b9c:	e01a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba2:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <HAL_RCC_OscConfig+0x280>)
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fe fa95 	bl	80030d8 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb2:	f7fe fa91 	bl	80030d8 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d903      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e166      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
 8004bc4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc8:	4b92      	ldr	r3, [pc, #584]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ee      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80a4 	beq.w	8004d2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004be2:	4b8c      	ldr	r3, [pc, #560]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10d      	bne.n	8004c0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bee:	4b89      	ldr	r3, [pc, #548]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	4a88      	ldr	r2, [pc, #544]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfa:	4b86      	ldr	r3, [pc, #536]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	60bb      	str	r3, [r7, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c06:	2301      	movs	r3, #1
 8004c08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c0a:	4b83      	ldr	r3, [pc, #524]	; (8004e18 <HAL_RCC_OscConfig+0x4d4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d118      	bne.n	8004c48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004c16:	4b80      	ldr	r3, [pc, #512]	; (8004e18 <HAL_RCC_OscConfig+0x4d4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a7f      	ldr	r2, [pc, #508]	; (8004e18 <HAL_RCC_OscConfig+0x4d4>)
 8004c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c22:	f7fe fa59 	bl	80030d8 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2a:	f7fe fa55 	bl	80030d8 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b64      	cmp	r3, #100	; 0x64
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e12a      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c3c:	4b76      	ldr	r3, [pc, #472]	; (8004e18 <HAL_RCC_OscConfig+0x4d4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x31a>
 8004c50:	4b70      	ldr	r3, [pc, #448]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	4a6f      	ldr	r2, [pc, #444]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5c:	e02d      	b.n	8004cba <HAL_RCC_OscConfig+0x376>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x33c>
 8004c66:	4b6b      	ldr	r3, [pc, #428]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	4a6a      	ldr	r2, [pc, #424]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	6713      	str	r3, [r2, #112]	; 0x70
 8004c72:	4b68      	ldr	r3, [pc, #416]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	4a67      	ldr	r2, [pc, #412]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c78:	f023 0304 	bic.w	r3, r3, #4
 8004c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7e:	e01c      	b.n	8004cba <HAL_RCC_OscConfig+0x376>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b05      	cmp	r3, #5
 8004c86:	d10c      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x35e>
 8004c88:	4b62      	ldr	r3, [pc, #392]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	4a61      	ldr	r2, [pc, #388]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c8e:	f043 0304 	orr.w	r3, r3, #4
 8004c92:	6713      	str	r3, [r2, #112]	; 0x70
 8004c94:	4b5f      	ldr	r3, [pc, #380]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	4a5e      	ldr	r2, [pc, #376]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca0:	e00b      	b.n	8004cba <HAL_RCC_OscConfig+0x376>
 8004ca2:	4b5c      	ldr	r3, [pc, #368]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	4a5b      	ldr	r2, [pc, #364]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	6713      	str	r3, [r2, #112]	; 0x70
 8004cae:	4b59      	ldr	r3, [pc, #356]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb2:	4a58      	ldr	r2, [pc, #352]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004cb4:	f023 0304 	bic.w	r3, r3, #4
 8004cb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d015      	beq.n	8004cee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc2:	f7fe fa09 	bl	80030d8 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc8:	e00a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fe fa05 	bl	80030d8 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e0d8      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce0:	4b4c      	ldr	r3, [pc, #304]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0ee      	beq.n	8004cca <HAL_RCC_OscConfig+0x386>
 8004cec:	e014      	b.n	8004d18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cee:	f7fe f9f3 	bl	80030d8 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fe f9ef 	bl	80030d8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e0c2      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0c:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ee      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1e:	4b3d      	ldr	r3, [pc, #244]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	4a3c      	ldr	r2, [pc, #240]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80ae 	beq.w	8004e90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d34:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 030c 	and.w	r3, r3, #12
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d06d      	beq.n	8004e1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d14b      	bne.n	8004de0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d48:	4b32      	ldr	r3, [pc, #200]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a31      	ldr	r2, [pc, #196]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fe f9c0 	bl	80030d8 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fe f9bc 	bl	80030d8 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e091      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	4b29      	ldr	r3, [pc, #164]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	019b      	lsls	r3, r3, #6
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	3b01      	subs	r3, #1
 8004d94:	041b      	lsls	r3, r3, #16
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	071b      	lsls	r3, r3, #28
 8004da6:	491b      	ldr	r1, [pc, #108]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dac:	4b19      	ldr	r3, [pc, #100]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fe f98e 	bl	80030d8 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7fe f98a 	bl	80030d8 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e05f      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd2:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x47c>
 8004dde:	e057      	b.n	8004e90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a0b      	ldr	r2, [pc, #44]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fe f974 	bl	80030d8 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fe f970 	bl	80030d8 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e045      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e06:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <HAL_RCC_OscConfig+0x4d0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4b0>
 8004e12:	e03d      	b.n	8004e90 <HAL_RCC_OscConfig+0x54c>
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004e1c:	4b1f      	ldr	r3, [pc, #124]	; (8004e9c <HAL_RCC_OscConfig+0x558>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d030      	beq.n	8004e8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d129      	bne.n	8004e8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d122      	bne.n	8004e8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d119      	bne.n	8004e8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	3b01      	subs	r3, #1
 8004e66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d10f      	bne.n	8004e8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d001      	beq.n	8004e90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800

08004ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0d0      	b.n	800505a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b6a      	ldr	r3, [pc, #424]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d910      	bls.n	8004ee8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b67      	ldr	r3, [pc, #412]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 020f 	bic.w	r2, r3, #15
 8004ece:	4965      	ldr	r1, [pc, #404]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b63      	ldr	r3, [pc, #396]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0b8      	b.n	800505a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d020      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f00:	4b59      	ldr	r3, [pc, #356]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4a58      	ldr	r2, [pc, #352]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f18:	4b53      	ldr	r3, [pc, #332]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4a52      	ldr	r2, [pc, #328]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f24:	4b50      	ldr	r3, [pc, #320]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	494d      	ldr	r1, [pc, #308]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d040      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4a:	4b47      	ldr	r3, [pc, #284]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d115      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e07f      	b.n	800505a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f62:	4b41      	ldr	r3, [pc, #260]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e073      	b.n	800505a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f72:	4b3d      	ldr	r3, [pc, #244]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e06b      	b.n	800505a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b39      	ldr	r3, [pc, #228]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4936      	ldr	r1, [pc, #216]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f94:	f7fe f8a0 	bl	80030d8 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fe f89c 	bl	80030d8 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e053      	b.n	800505a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc4:	4b27      	ldr	r3, [pc, #156]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d210      	bcs.n	8004ff4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 020f 	bic.w	r2, r3, #15
 8004fda:	4922      	ldr	r1, [pc, #136]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b20      	ldr	r3, [pc, #128]	; (8005064 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e032      	b.n	800505a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005000:	4b19      	ldr	r3, [pc, #100]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4916      	ldr	r1, [pc, #88]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 800500e:	4313      	orrs	r3, r2
 8005010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	490e      	ldr	r1, [pc, #56]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 800502e:	4313      	orrs	r3, r2
 8005030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005032:	f000 f821 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8005036:	4602      	mov	r2, r0
 8005038:	4b0b      	ldr	r3, [pc, #44]	; (8005068 <HAL_RCC_ClockConfig+0x1c8>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	490a      	ldr	r1, [pc, #40]	; (800506c <HAL_RCC_ClockConfig+0x1cc>)
 8005044:	5ccb      	ldrb	r3, [r1, r3]
 8005046:	fa22 f303 	lsr.w	r3, r2, r3
 800504a:	4a09      	ldr	r2, [pc, #36]	; (8005070 <HAL_RCC_ClockConfig+0x1d0>)
 800504c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800504e:	4b09      	ldr	r3, [pc, #36]	; (8005074 <HAL_RCC_ClockConfig+0x1d4>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fd fffc 	bl	8003050 <HAL_InitTick>

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40023c00 	.word	0x40023c00
 8005068:	40023800 	.word	0x40023800
 800506c:	080094c0 	.word	0x080094c0
 8005070:	2000000c 	.word	0x2000000c
 8005074:	20000010 	.word	0x20000010

08005078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800507c:	b094      	sub	sp, #80	; 0x50
 800507e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	647b      	str	r3, [r7, #68]	; 0x44
 8005084:	2300      	movs	r3, #0
 8005086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005088:	2300      	movs	r3, #0
 800508a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005090:	4b79      	ldr	r3, [pc, #484]	; (8005278 <HAL_RCC_GetSysClockFreq+0x200>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b08      	cmp	r3, #8
 800509a:	d00d      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x40>
 800509c:	2b08      	cmp	r3, #8
 800509e:	f200 80e1 	bhi.w	8005264 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x34>
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d003      	beq.n	80050b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80050aa:	e0db      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050ac:	4b73      	ldr	r3, [pc, #460]	; (800527c <HAL_RCC_GetSysClockFreq+0x204>)
 80050ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b0:	e0db      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050b2:	4b73      	ldr	r3, [pc, #460]	; (8005280 <HAL_RCC_GetSysClockFreq+0x208>)
 80050b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b6:	e0d8      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b8:	4b6f      	ldr	r3, [pc, #444]	; (8005278 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80050c2:	4b6d      	ldr	r3, [pc, #436]	; (8005278 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d063      	beq.n	8005196 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ce:	4b6a      	ldr	r3, [pc, #424]	; (8005278 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	099b      	lsrs	r3, r3, #6
 80050d4:	2200      	movs	r2, #0
 80050d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e0:	633b      	str	r3, [r7, #48]	; 0x30
 80050e2:	2300      	movs	r3, #0
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
 80050e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050ea:	4622      	mov	r2, r4
 80050ec:	462b      	mov	r3, r5
 80050ee:	f04f 0000 	mov.w	r0, #0
 80050f2:	f04f 0100 	mov.w	r1, #0
 80050f6:	0159      	lsls	r1, r3, #5
 80050f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050fc:	0150      	lsls	r0, r2, #5
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4621      	mov	r1, r4
 8005104:	1a51      	subs	r1, r2, r1
 8005106:	6139      	str	r1, [r7, #16]
 8005108:	4629      	mov	r1, r5
 800510a:	eb63 0301 	sbc.w	r3, r3, r1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800511c:	4659      	mov	r1, fp
 800511e:	018b      	lsls	r3, r1, #6
 8005120:	4651      	mov	r1, sl
 8005122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005126:	4651      	mov	r1, sl
 8005128:	018a      	lsls	r2, r1, #6
 800512a:	4651      	mov	r1, sl
 800512c:	ebb2 0801 	subs.w	r8, r2, r1
 8005130:	4659      	mov	r1, fp
 8005132:	eb63 0901 	sbc.w	r9, r3, r1
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800514a:	4690      	mov	r8, r2
 800514c:	4699      	mov	r9, r3
 800514e:	4623      	mov	r3, r4
 8005150:	eb18 0303 	adds.w	r3, r8, r3
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	462b      	mov	r3, r5
 8005158:	eb49 0303 	adc.w	r3, r9, r3
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800516a:	4629      	mov	r1, r5
 800516c:	024b      	lsls	r3, r1, #9
 800516e:	4621      	mov	r1, r4
 8005170:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005174:	4621      	mov	r1, r4
 8005176:	024a      	lsls	r2, r1, #9
 8005178:	4610      	mov	r0, r2
 800517a:	4619      	mov	r1, r3
 800517c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517e:	2200      	movs	r2, #0
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
 8005182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005188:	f7fb f8aa 	bl	80002e0 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4613      	mov	r3, r2
 8005192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005194:	e058      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005196:	4b38      	ldr	r3, [pc, #224]	; (8005278 <HAL_RCC_GetSysClockFreq+0x200>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	099b      	lsrs	r3, r3, #6
 800519c:	2200      	movs	r2, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	4611      	mov	r1, r2
 80051a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051a6:	623b      	str	r3, [r7, #32]
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
 80051ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051b0:	4642      	mov	r2, r8
 80051b2:	464b      	mov	r3, r9
 80051b4:	f04f 0000 	mov.w	r0, #0
 80051b8:	f04f 0100 	mov.w	r1, #0
 80051bc:	0159      	lsls	r1, r3, #5
 80051be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051c2:	0150      	lsls	r0, r2, #5
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	4641      	mov	r1, r8
 80051ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80051ce:	4649      	mov	r1, r9
 80051d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051e8:	ebb2 040a 	subs.w	r4, r2, sl
 80051ec:	eb63 050b 	sbc.w	r5, r3, fp
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	00eb      	lsls	r3, r5, #3
 80051fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051fe:	00e2      	lsls	r2, r4, #3
 8005200:	4614      	mov	r4, r2
 8005202:	461d      	mov	r5, r3
 8005204:	4643      	mov	r3, r8
 8005206:	18e3      	adds	r3, r4, r3
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	464b      	mov	r3, r9
 800520c:	eb45 0303 	adc.w	r3, r5, r3
 8005210:	607b      	str	r3, [r7, #4]
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800521e:	4629      	mov	r1, r5
 8005220:	028b      	lsls	r3, r1, #10
 8005222:	4621      	mov	r1, r4
 8005224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005228:	4621      	mov	r1, r4
 800522a:	028a      	lsls	r2, r1, #10
 800522c:	4610      	mov	r0, r2
 800522e:	4619      	mov	r1, r3
 8005230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005232:	2200      	movs	r2, #0
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	61fa      	str	r2, [r7, #28]
 8005238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800523c:	f7fb f850 	bl	80002e0 <__aeabi_uldivmod>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4613      	mov	r3, r2
 8005246:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <HAL_RCC_GetSysClockFreq+0x200>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	0c1b      	lsrs	r3, r3, #16
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	3301      	adds	r3, #1
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800525a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005262:	e002      	b.n	800526a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_RCC_GetSysClockFreq+0x204>)
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800526a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800526c:	4618      	mov	r0, r3
 800526e:	3750      	adds	r7, #80	; 0x50
 8005270:	46bd      	mov	sp, r7
 8005272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005276:	bf00      	nop
 8005278:	40023800 	.word	0x40023800
 800527c:	00f42400 	.word	0x00f42400
 8005280:	007a1200 	.word	0x007a1200

08005284 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <HAL_RCC_GetHCLKFreq+0x14>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	2000000c 	.word	0x2000000c

0800529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052a0:	f7ff fff0 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0a9b      	lsrs	r3, r3, #10
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4903      	ldr	r1, [pc, #12]	; (80052c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40023800 	.word	0x40023800
 80052c0:	080094d0 	.word	0x080094d0

080052c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052c8:	f7ff ffdc 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052cc:	4602      	mov	r2, r0
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	0b5b      	lsrs	r3, r3, #13
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	4903      	ldr	r1, [pc, #12]	; (80052e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052da:	5ccb      	ldrb	r3, [r1, r3]
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40023800 	.word	0x40023800
 80052e8:	080094d0 	.word	0x080094d0

080052ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d012      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005314:	4b69      	ldr	r3, [pc, #420]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a68      	ldr	r2, [pc, #416]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800531e:	6093      	str	r3, [r2, #8]
 8005320:	4b66      	ldr	r3, [pc, #408]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	4964      	ldr	r1, [pc, #400]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005336:	2301      	movs	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d017      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005346:	4b5d      	ldr	r3, [pc, #372]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005354:	4959      	ldr	r1, [pc, #356]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005364:	d101      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005366:	2301      	movs	r3, #1
 8005368:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005372:	2301      	movs	r3, #1
 8005374:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d017      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005382:	4b4e      	ldr	r3, [pc, #312]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005388:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	494a      	ldr	r1, [pc, #296]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a0:	d101      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80053a2:	2301      	movs	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80053ae:	2301      	movs	r3, #1
 80053b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80053be:	2301      	movs	r3, #1
 80053c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 808b 	beq.w	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053d0:	4b3a      	ldr	r3, [pc, #232]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	4a39      	ldr	r2, [pc, #228]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053da:	6413      	str	r3, [r2, #64]	; 0x40
 80053dc:	4b37      	ldr	r3, [pc, #220]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053e8:	4b35      	ldr	r3, [pc, #212]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a34      	ldr	r2, [pc, #208]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f4:	f7fd fe70 	bl	80030d8 <HAL_GetTick>
 80053f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fc:	f7fd fe6c 	bl	80030d8 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b64      	cmp	r3, #100	; 0x64
 8005408:	d901      	bls.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e38f      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800540e:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800541a:	4b28      	ldr	r3, [pc, #160]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d035      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d02e      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005438:	4b20      	ldr	r3, [pc, #128]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005440:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005442:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	4a1d      	ldr	r2, [pc, #116]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800544e:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	4a1a      	ldr	r2, [pc, #104]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005458:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800545a:	4a18      	ldr	r2, [pc, #96]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005460:	4b16      	ldr	r3, [pc, #88]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d114      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fd fe34 	bl	80030d8 <HAL_GetTick>
 8005470:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005472:	e00a      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005474:	f7fd fe30 	bl	80030d8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e351      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ee      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a2:	d111      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80054b0:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054b2:	400b      	ands	r3, r1
 80054b4:	4901      	ldr	r1, [pc, #4]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054bc:	40023800 	.word	0x40023800
 80054c0:	40007000 	.word	0x40007000
 80054c4:	0ffffcff 	.word	0x0ffffcff
 80054c8:	4bac      	ldr	r3, [pc, #688]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4aab      	ldr	r2, [pc, #684]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054d2:	6093      	str	r3, [r2, #8]
 80054d4:	4ba9      	ldr	r3, [pc, #676]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e0:	49a6      	ldr	r1, [pc, #664]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d010      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054f2:	4ba2      	ldr	r3, [pc, #648]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f8:	4aa0      	ldr	r2, [pc, #640]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005502:	4b9e      	ldr	r3, [pc, #632]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005504:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	499b      	ldr	r1, [pc, #620]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005520:	4b96      	ldr	r3, [pc, #600]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552e:	4993      	ldr	r1, [pc, #588]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005542:	4b8e      	ldr	r3, [pc, #568]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005548:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005550:	498a      	ldr	r1, [pc, #552]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005564:	4b85      	ldr	r3, [pc, #532]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005572:	4982      	ldr	r1, [pc, #520]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005586:	4b7d      	ldr	r3, [pc, #500]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005594:	4979      	ldr	r1, [pc, #484]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055a8:	4b74      	ldr	r3, [pc, #464]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ae:	f023 0203 	bic.w	r2, r3, #3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	4971      	ldr	r1, [pc, #452]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ca:	4b6c      	ldr	r3, [pc, #432]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d0:	f023 020c 	bic.w	r2, r3, #12
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d8:	4968      	ldr	r1, [pc, #416]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ec:	4b63      	ldr	r3, [pc, #396]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	4960      	ldr	r1, [pc, #384]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800560e:	4b5b      	ldr	r3, [pc, #364]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005614:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561c:	4957      	ldr	r1, [pc, #348]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005630:	4b52      	ldr	r3, [pc, #328]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	494f      	ldr	r1, [pc, #316]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005652:	4b4a      	ldr	r3, [pc, #296]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005658:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005660:	4946      	ldr	r1, [pc, #280]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005674:	4b41      	ldr	r3, [pc, #260]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005682:	493e      	ldr	r1, [pc, #248]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005696:	4b39      	ldr	r3, [pc, #228]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a4:	4935      	ldr	r1, [pc, #212]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056b8:	4b30      	ldr	r3, [pc, #192]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056c6:	492d      	ldr	r1, [pc, #180]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d011      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056da:	4b28      	ldr	r3, [pc, #160]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056e8:	4924      	ldr	r1, [pc, #144]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f8:	d101      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800570a:	2301      	movs	r3, #1
 800570c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800571a:	4b18      	ldr	r3, [pc, #96]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800571c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005720:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005728:	4914      	ldr	r1, [pc, #80]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800573c:	4b0f      	ldr	r3, [pc, #60]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800574c:	490b      	ldr	r1, [pc, #44]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00f      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005770:	4902      	ldr	r1, [pc, #8]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005778:	e002      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800578c:	4b8a      	ldr	r3, [pc, #552]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800578e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005792:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	4986      	ldr	r1, [pc, #536]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80057b0:	4b81      	ldr	r3, [pc, #516]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c0:	497d      	ldr	r1, [pc, #500]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d006      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80d6 	beq.w	8005988 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057dc:	4b76      	ldr	r3, [pc, #472]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a75      	ldr	r2, [pc, #468]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e8:	f7fd fc76 	bl	80030d8 <HAL_GetTick>
 80057ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057f0:	f7fd fc72 	bl	80030d8 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b64      	cmp	r3, #100	; 0x64
 80057fc:	d901      	bls.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e195      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005802:	4b6d      	ldr	r3, [pc, #436]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d021      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581e:	2b00      	cmp	r3, #0
 8005820:	d11d      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005822:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005830:	4b61      	ldr	r3, [pc, #388]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005836:	0e1b      	lsrs	r3, r3, #24
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	019a      	lsls	r2, r3, #6
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	041b      	lsls	r3, r3, #16
 8005848:	431a      	orrs	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	071b      	lsls	r3, r3, #28
 8005856:	4958      	ldr	r1, [pc, #352]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005858:	4313      	orrs	r3, r2
 800585a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d004      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800587c:	2b00      	cmp	r3, #0
 800587e:	d02e      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005888:	d129      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800588a:	4b4b      	ldr	r3, [pc, #300]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800588c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005898:	4b47      	ldr	r3, [pc, #284]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800589a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800589e:	0f1b      	lsrs	r3, r3, #28
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	019a      	lsls	r2, r3, #6
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	061b      	lsls	r3, r3, #24
 80058b8:	431a      	orrs	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	071b      	lsls	r3, r3, #28
 80058be:	493e      	ldr	r1, [pc, #248]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80058c6:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058cc:	f023 021f 	bic.w	r2, r3, #31
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	3b01      	subs	r3, #1
 80058d6:	4938      	ldr	r1, [pc, #224]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01d      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058ea:	4b33      	ldr	r3, [pc, #204]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f0:	0e1b      	lsrs	r3, r3, #24
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058f8:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fe:	0f1b      	lsrs	r3, r3, #28
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	019a      	lsls	r2, r3, #6
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	431a      	orrs	r2, r3
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	061b      	lsls	r3, r3, #24
 8005918:	431a      	orrs	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	071b      	lsls	r3, r3, #28
 800591e:	4926      	ldr	r1, [pc, #152]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d011      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	019a      	lsls	r2, r3, #6
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	041b      	lsls	r3, r3, #16
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	071b      	lsls	r3, r3, #28
 800594e:	491a      	ldr	r1, [pc, #104]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800595c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005962:	f7fd fbb9 	bl	80030d8 <HAL_GetTick>
 8005966:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005968:	e008      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800596a:	f7fd fbb5 	bl	80030d8 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b64      	cmp	r3, #100	; 0x64
 8005976:	d901      	bls.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e0d8      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800597c:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b01      	cmp	r3, #1
 800598c:	f040 80ce 	bne.w	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599c:	f7fd fb9c 	bl	80030d8 <HAL_GetTick>
 80059a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059a2:	e00b      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059a4:	f7fd fb98 	bl	80030d8 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b64      	cmp	r3, #100	; 0x64
 80059b0:	d904      	bls.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0bb      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80059b6:	bf00      	nop
 80059b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059bc:	4b5e      	ldr	r3, [pc, #376]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c8:	d0ec      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d02e      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d12a      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059f2:	4b51      	ldr	r3, [pc, #324]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a00:	4b4d      	ldr	r3, [pc, #308]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a06:	0f1b      	lsrs	r3, r3, #28
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	019a      	lsls	r2, r3, #6
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	061b      	lsls	r3, r3, #24
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	071b      	lsls	r3, r3, #28
 8005a26:	4944      	ldr	r1, [pc, #272]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a2e:	4b42      	ldr	r3, [pc, #264]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	493d      	ldr	r1, [pc, #244]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d022      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a5c:	d11d      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a5e:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	0e1b      	lsrs	r3, r3, #24
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a6c:	4b32      	ldr	r3, [pc, #200]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a72:	0f1b      	lsrs	r3, r3, #28
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	019a      	lsls	r2, r3, #6
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	431a      	orrs	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	071b      	lsls	r3, r3, #28
 8005a92:	4929      	ldr	r1, [pc, #164]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d028      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aa6:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aac:	0e1b      	lsrs	r3, r3, #24
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ab4:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aba:	0c1b      	lsrs	r3, r3, #16
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	019a      	lsls	r2, r3, #6
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	041b      	lsls	r3, r3, #16
 8005acc:	431a      	orrs	r2, r3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	071b      	lsls	r3, r3, #28
 8005ada:	4917      	ldr	r1, [pc, #92]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ae2:	4b15      	ldr	r3, [pc, #84]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4911      	ldr	r1, [pc, #68]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a0e      	ldr	r2, [pc, #56]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b04:	f7fd fae8 	bl	80030d8 <HAL_GetTick>
 8005b08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b0c:	f7fd fae4 	bl	80030d8 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b64      	cmp	r3, #100	; 0x64
 8005b18:	d901      	bls.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e007      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b1e:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b2a:	d1ef      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40023800 	.word	0x40023800

08005b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e09d      	b.n	8005c8a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5e:	d009      	beq.n	8005b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	61da      	str	r2, [r3, #28]
 8005b66:	e005      	b.n	8005b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc fd02 	bl	8002598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005baa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bb4:	d902      	bls.n	8005bbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e002      	b.n	8005bc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bca:	d007      	beq.n	8005bdc <HAL_SPI_Init+0xa0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bd4:	d002      	beq.n	8005bdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	ea42 0103 	orr.w	r1, r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	f003 0204 	and.w	r2, r3, #4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	f003 0310 	and.w	r3, r3, #16
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c58:	ea42 0103 	orr.w	r1, r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e049      	b.n	8005d38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fc fced 	bl	8002698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f001 f831 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d001      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e054      	b.n	8005e02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a26      	ldr	r2, [pc, #152]	; (8005e10 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d022      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x80>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d82:	d01d      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x80>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a22      	ldr	r2, [pc, #136]	; (8005e14 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d018      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x80>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d013      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x80>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1f      	ldr	r2, [pc, #124]	; (8005e1c <HAL_TIM_Base_Start_IT+0xdc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00e      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x80>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1e      	ldr	r2, [pc, #120]	; (8005e20 <HAL_TIM_Base_Start_IT+0xe0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d009      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x80>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1c      	ldr	r2, [pc, #112]	; (8005e24 <HAL_TIM_Base_Start_IT+0xe4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x80>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <HAL_TIM_Base_Start_IT+0xe8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d115      	bne.n	8005dec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <HAL_TIM_Base_Start_IT+0xec>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b06      	cmp	r3, #6
 8005dd0:	d015      	beq.n	8005dfe <HAL_TIM_Base_Start_IT+0xbe>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd8:	d011      	beq.n	8005dfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0201 	orr.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dea:	e008      	b.n	8005dfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	e000      	b.n	8005e00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	40010400 	.word	0x40010400
 8005e24:	40014000 	.word	0x40014000
 8005e28:	40001800 	.word	0x40001800
 8005e2c:	00010007 	.word	0x00010007

08005e30 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e049      	b.n	8005ed6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f841 	bl	8005ede <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f000 ff62 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e049      	b.n	8005f98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fc fccd 	bl	80028b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f000 ff01 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x24>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e03c      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d109      	bne.n	8005fde <HAL_TIM_PWM_Start+0x3e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	bf14      	ite	ne
 8005fd6:	2301      	movne	r3, #1
 8005fd8:	2300      	moveq	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	e02f      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d109      	bne.n	8005ff8 <HAL_TIM_PWM_Start+0x58>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	bf14      	ite	ne
 8005ff0:	2301      	movne	r3, #1
 8005ff2:	2300      	moveq	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	e022      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b0c      	cmp	r3, #12
 8005ffc:	d109      	bne.n	8006012 <HAL_TIM_PWM_Start+0x72>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b01      	cmp	r3, #1
 8006008:	bf14      	ite	ne
 800600a:	2301      	movne	r3, #1
 800600c:	2300      	moveq	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	e015      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b10      	cmp	r3, #16
 8006016:	d109      	bne.n	800602c <HAL_TIM_PWM_Start+0x8c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	e008      	b.n	800603e <HAL_TIM_PWM_Start+0x9e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	bf14      	ite	ne
 8006038:	2301      	movne	r3, #1
 800603a:	2300      	moveq	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e092      	b.n	800616c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start+0xb6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006054:	e023      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b04      	cmp	r3, #4
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0xc6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006064:	e01b      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0xd6>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006074:	e013      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xe6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006084:	e00b      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b10      	cmp	r3, #16
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Start+0xf6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006094:	e003      	b.n	800609e <HAL_TIM_PWM_Start+0xfe>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2202      	movs	r2, #2
 800609a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2201      	movs	r2, #1
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 fb08 	bl	80076bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a30      	ldr	r2, [pc, #192]	; (8006174 <HAL_TIM_PWM_Start+0x1d4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <HAL_TIM_PWM_Start+0x120>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a2f      	ldr	r2, [pc, #188]	; (8006178 <HAL_TIM_PWM_Start+0x1d8>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d101      	bne.n	80060c4 <HAL_TIM_PWM_Start+0x124>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <HAL_TIM_PWM_Start+0x126>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a25      	ldr	r2, [pc, #148]	; (8006174 <HAL_TIM_PWM_Start+0x1d4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d022      	beq.n	800612a <HAL_TIM_PWM_Start+0x18a>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ec:	d01d      	beq.n	800612a <HAL_TIM_PWM_Start+0x18a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a22      	ldr	r2, [pc, #136]	; (800617c <HAL_TIM_PWM_Start+0x1dc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <HAL_TIM_PWM_Start+0x18a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a20      	ldr	r2, [pc, #128]	; (8006180 <HAL_TIM_PWM_Start+0x1e0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <HAL_TIM_PWM_Start+0x18a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_TIM_PWM_Start+0x1e4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <HAL_TIM_PWM_Start+0x18a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a19      	ldr	r2, [pc, #100]	; (8006178 <HAL_TIM_PWM_Start+0x1d8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_TIM_PWM_Start+0x18a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <HAL_TIM_PWM_Start+0x1e8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_TIM_PWM_Start+0x18a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a19      	ldr	r2, [pc, #100]	; (800618c <HAL_TIM_PWM_Start+0x1ec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d115      	bne.n	8006156 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	4b17      	ldr	r3, [pc, #92]	; (8006190 <HAL_TIM_PWM_Start+0x1f0>)
 8006132:	4013      	ands	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b06      	cmp	r3, #6
 800613a:	d015      	beq.n	8006168 <HAL_TIM_PWM_Start+0x1c8>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006142:	d011      	beq.n	8006168 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0201 	orr.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006154:	e008      	b.n	8006168 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	e000      	b.n	800616a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006168:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40010000 	.word	0x40010000
 8006178:	40010400 	.word	0x40010400
 800617c:	40000400 	.word	0x40000400
 8006180:	40000800 	.word	0x40000800
 8006184:	40000c00 	.word	0x40000c00
 8006188:	40014000 	.word	0x40014000
 800618c:	40001800 	.word	0x40001800
 8006190:	00010007 	.word	0x00010007

08006194 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e049      	b.n	800623a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f841 	bl	8006242 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f000 fdb0 	bl	8006d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e08f      	b.n	800638c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7fc faa3 	bl	80027cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6899      	ldr	r1, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4b3e      	ldr	r3, [pc, #248]	; (8006394 <HAL_TIM_Encoder_Init+0x13c>)
 800629a:	400b      	ands	r3, r1
 800629c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f000 fd45 	bl	8006d38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4b31      	ldr	r3, [pc, #196]	; (8006398 <HAL_TIM_Encoder_Init+0x140>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	4313      	orrs	r3, r2
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4b2b      	ldr	r3, [pc, #172]	; (800639c <HAL_TIM_Encoder_Init+0x144>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <HAL_TIM_Encoder_Init+0x148>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	4313      	orrs	r3, r2
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	011a      	lsls	r2, r3, #4
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	031b      	lsls	r3, r3, #12
 8006318:	4313      	orrs	r3, r2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	4313      	orrs	r3, r2
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	fffebff8 	.word	0xfffebff8
 8006398:	fffffcfc 	.word	0xfffffcfc
 800639c:	fffff3f3 	.word	0xfffff3f3
 80063a0:	ffff0f0f 	.word	0xffff0f0f

080063a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d110      	bne.n	80063f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d102      	bne.n	80063e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80063da:	7b7b      	ldrb	r3, [r7, #13]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d001      	beq.n	80063e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e069      	b.n	80064b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063f4:	e031      	b.n	800645a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d110      	bne.n	800641e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063fc:	7bbb      	ldrb	r3, [r7, #14]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d102      	bne.n	8006408 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006402:	7b3b      	ldrb	r3, [r7, #12]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d001      	beq.n	800640c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e055      	b.n	80064b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800641c:	e01d      	b.n	800645a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d108      	bne.n	8006436 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d105      	bne.n	8006436 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800642a:	7b7b      	ldrb	r3, [r7, #13]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d102      	bne.n	8006436 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006430:	7b3b      	ldrb	r3, [r7, #12]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d001      	beq.n	800643a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e03e      	b.n	80064b8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2202      	movs	r2, #2
 8006456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <HAL_TIM_Encoder_Start+0xc4>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b04      	cmp	r3, #4
 8006464:	d008      	beq.n	8006478 <HAL_TIM_Encoder_Start+0xd4>
 8006466:	e00f      	b.n	8006488 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2201      	movs	r2, #1
 800646e:	2100      	movs	r1, #0
 8006470:	4618      	mov	r0, r3
 8006472:	f001 f923 	bl	80076bc <TIM_CCxChannelCmd>
      break;
 8006476:	e016      	b.n	80064a6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	2104      	movs	r1, #4
 8006480:	4618      	mov	r0, r3
 8006482:	f001 f91b 	bl	80076bc <TIM_CCxChannelCmd>
      break;
 8006486:	e00e      	b.n	80064a6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2201      	movs	r2, #1
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f001 f913 	bl	80076bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2201      	movs	r2, #1
 800649c:	2104      	movs	r1, #4
 800649e:	4618      	mov	r0, r3
 80064a0:	f001 f90c 	bl	80076bc <TIM_CCxChannelCmd>
      break;
 80064a4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d122      	bne.n	800651c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d11b      	bne.n	800651c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0202 	mvn.w	r2, #2
 80064ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fbfa 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 8006508:	e005      	b.n	8006516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fbec 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fbfd 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d122      	bne.n	8006570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b04      	cmp	r3, #4
 8006536:	d11b      	bne.n	8006570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0204 	mvn.w	r2, #4
 8006540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fbd0 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 800655c:	e005      	b.n	800656a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fbc2 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fbd3 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b08      	cmp	r3, #8
 800657c:	d122      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b08      	cmp	r3, #8
 800658a:	d11b      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0208 	mvn.w	r2, #8
 8006594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2204      	movs	r2, #4
 800659a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fba6 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 fb98 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fba9 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d122      	bne.n	8006618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d11b      	bne.n	8006618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0210 	mvn.w	r2, #16
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2208      	movs	r2, #8
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fb7c 	bl	8006cfc <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fb6e 	bl	8006ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fb7f 	bl	8006d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d10e      	bne.n	8006644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d107      	bne.n	8006644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0201 	mvn.w	r2, #1
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fa f9d2 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d10e      	bne.n	8006670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	2b80      	cmp	r3, #128	; 0x80
 800665e:	d107      	bne.n	8006670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 f962 	bl	8007934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800667e:	d10e      	bne.n	800669e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b80      	cmp	r3, #128	; 0x80
 800668c:	d107      	bne.n	800669e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 f955 	bl	8007948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d10e      	bne.n	80066ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d107      	bne.n	80066ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fb2d 	bl	8006d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d10e      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	d107      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f06f 0220 	mvn.w	r2, #32
 80066ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 f915 	bl	8007920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_TIM_OC_ConfigChannel+0x1e>
 800671a:	2302      	movs	r3, #2
 800671c:	e066      	b.n	80067ec <HAL_TIM_OC_ConfigChannel+0xec>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b14      	cmp	r3, #20
 800672a:	d857      	bhi.n	80067dc <HAL_TIM_OC_ConfigChannel+0xdc>
 800672c:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <HAL_TIM_OC_ConfigChannel+0x34>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006789 	.word	0x08006789
 8006738:	080067dd 	.word	0x080067dd
 800673c:	080067dd 	.word	0x080067dd
 8006740:	080067dd 	.word	0x080067dd
 8006744:	08006797 	.word	0x08006797
 8006748:	080067dd 	.word	0x080067dd
 800674c:	080067dd 	.word	0x080067dd
 8006750:	080067dd 	.word	0x080067dd
 8006754:	080067a5 	.word	0x080067a5
 8006758:	080067dd 	.word	0x080067dd
 800675c:	080067dd 	.word	0x080067dd
 8006760:	080067dd 	.word	0x080067dd
 8006764:	080067b3 	.word	0x080067b3
 8006768:	080067dd 	.word	0x080067dd
 800676c:	080067dd 	.word	0x080067dd
 8006770:	080067dd 	.word	0x080067dd
 8006774:	080067c1 	.word	0x080067c1
 8006778:	080067dd 	.word	0x080067dd
 800677c:	080067dd 	.word	0x080067dd
 8006780:	080067dd 	.word	0x080067dd
 8006784:	080067cf 	.word	0x080067cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fb72 	bl	8006e78 <TIM_OC1_SetConfig>
      break;
 8006794:	e025      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fbdd 	bl	8006f5c <TIM_OC2_SetConfig>
      break;
 80067a2:	e01e      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fc4e 	bl	800704c <TIM_OC3_SetConfig>
      break;
 80067b0:	e017      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fcbd 	bl	8007138 <TIM_OC4_SetConfig>
      break;
 80067be:	e010      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fd0e 	bl	80071e8 <TIM_OC5_SetConfig>
      break;
 80067cc:	e009      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fd59 	bl	800728c <TIM_OC6_SetConfig>
      break;
 80067da:	e002      	b.n	80067e2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	75fb      	strb	r3, [r7, #23]
      break;
 80067e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_TIM_IC_ConfigChannel+0x1e>
 800680e:	2302      	movs	r3, #2
 8006810:	e088      	b.n	8006924 <HAL_TIM_IC_ConfigChannel+0x130>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d11b      	bne.n	8006858 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	6819      	ldr	r1, [r3, #0]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f000 fd80 	bl	8007334 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 020c 	bic.w	r2, r2, #12
 8006842:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6999      	ldr	r1, [r3, #24]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	619a      	str	r2, [r3, #24]
 8006856:	e060      	b.n	800691a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b04      	cmp	r3, #4
 800685c:	d11c      	bne.n	8006898 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6819      	ldr	r1, [r3, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f000 fe04 	bl	800747a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699a      	ldr	r2, [r3, #24]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006880:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6999      	ldr	r1, [r3, #24]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	021a      	lsls	r2, r3, #8
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	619a      	str	r2, [r3, #24]
 8006896:	e040      	b.n	800691a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b08      	cmp	r3, #8
 800689c:	d11b      	bne.n	80068d6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	6819      	ldr	r1, [r3, #0]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f000 fe51 	bl	8007554 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 020c 	bic.w	r2, r2, #12
 80068c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69d9      	ldr	r1, [r3, #28]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	61da      	str	r2, [r3, #28]
 80068d4:	e021      	b.n	800691a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b0c      	cmp	r3, #12
 80068da:	d11c      	bne.n	8006916 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	6819      	ldr	r1, [r3, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f000 fe6e 	bl	80075cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69da      	ldr	r2, [r3, #28]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69d9      	ldr	r1, [r3, #28]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	021a      	lsls	r2, r3, #8
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	61da      	str	r2, [r3, #28]
 8006914:	e001      	b.n	800691a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006946:	2302      	movs	r3, #2
 8006948:	e0ff      	b.n	8006b4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b14      	cmp	r3, #20
 8006956:	f200 80f0 	bhi.w	8006b3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	080069b5 	.word	0x080069b5
 8006964:	08006b3b 	.word	0x08006b3b
 8006968:	08006b3b 	.word	0x08006b3b
 800696c:	08006b3b 	.word	0x08006b3b
 8006970:	080069f5 	.word	0x080069f5
 8006974:	08006b3b 	.word	0x08006b3b
 8006978:	08006b3b 	.word	0x08006b3b
 800697c:	08006b3b 	.word	0x08006b3b
 8006980:	08006a37 	.word	0x08006a37
 8006984:	08006b3b 	.word	0x08006b3b
 8006988:	08006b3b 	.word	0x08006b3b
 800698c:	08006b3b 	.word	0x08006b3b
 8006990:	08006a77 	.word	0x08006a77
 8006994:	08006b3b 	.word	0x08006b3b
 8006998:	08006b3b 	.word	0x08006b3b
 800699c:	08006b3b 	.word	0x08006b3b
 80069a0:	08006ab9 	.word	0x08006ab9
 80069a4:	08006b3b 	.word	0x08006b3b
 80069a8:	08006b3b 	.word	0x08006b3b
 80069ac:	08006b3b 	.word	0x08006b3b
 80069b0:	08006af9 	.word	0x08006af9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fa5c 	bl	8006e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0208 	orr.w	r2, r2, #8
 80069ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0204 	bic.w	r2, r2, #4
 80069de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6999      	ldr	r1, [r3, #24]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	619a      	str	r2, [r3, #24]
      break;
 80069f2:	e0a5      	b.n	8006b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 faae 	bl	8006f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6999      	ldr	r1, [r3, #24]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	021a      	lsls	r2, r3, #8
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	619a      	str	r2, [r3, #24]
      break;
 8006a34:	e084      	b.n	8006b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fb05 	bl	800704c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0208 	orr.w	r2, r2, #8
 8006a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0204 	bic.w	r2, r2, #4
 8006a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69d9      	ldr	r1, [r3, #28]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	61da      	str	r2, [r3, #28]
      break;
 8006a74:	e064      	b.n	8006b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fb5b 	bl	8007138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69d9      	ldr	r1, [r3, #28]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	021a      	lsls	r2, r3, #8
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	61da      	str	r2, [r3, #28]
      break;
 8006ab6:	e043      	b.n	8006b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fb92 	bl	80071e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0208 	orr.w	r2, r2, #8
 8006ad2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0204 	bic.w	r2, r2, #4
 8006ae2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006af6:	e023      	b.n	8006b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fbc4 	bl	800728c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	021a      	lsls	r2, r3, #8
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b38:	e002      	b.n	8006b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop

08006b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e0b4      	b.n	8006cda <HAL_TIM_ConfigClockSource+0x186>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	4b56      	ldr	r3, [pc, #344]	; (8006ce4 <HAL_TIM_ConfigClockSource+0x190>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba8:	d03e      	beq.n	8006c28 <HAL_TIM_ConfigClockSource+0xd4>
 8006baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bae:	f200 8087 	bhi.w	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb6:	f000 8086 	beq.w	8006cc6 <HAL_TIM_ConfigClockSource+0x172>
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bbe:	d87f      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b70      	cmp	r3, #112	; 0x70
 8006bc2:	d01a      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0xa6>
 8006bc4:	2b70      	cmp	r3, #112	; 0x70
 8006bc6:	d87b      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc8:	2b60      	cmp	r3, #96	; 0x60
 8006bca:	d050      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x11a>
 8006bcc:	2b60      	cmp	r3, #96	; 0x60
 8006bce:	d877      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd0:	2b50      	cmp	r3, #80	; 0x50
 8006bd2:	d03c      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0xfa>
 8006bd4:	2b50      	cmp	r3, #80	; 0x50
 8006bd6:	d873      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d058      	beq.n	8006c8e <HAL_TIM_ConfigClockSource+0x13a>
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d86f      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b30      	cmp	r3, #48	; 0x30
 8006be2:	d064      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006be4:	2b30      	cmp	r3, #48	; 0x30
 8006be6:	d86b      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d060      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d867      	bhi.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d05c      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006bf4:	2b10      	cmp	r3, #16
 8006bf6:	d05a      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0x15a>
 8006bf8:	e062      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6899      	ldr	r1, [r3, #8]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f000 fd37 	bl	800767c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	609a      	str	r2, [r3, #8]
      break;
 8006c26:	e04f      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	6899      	ldr	r1, [r3, #8]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f000 fd20 	bl	800767c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c4a:	609a      	str	r2, [r3, #8]
      break;
 8006c4c:	e03c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6859      	ldr	r1, [r3, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f000 fbde 	bl	800741c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2150      	movs	r1, #80	; 0x50
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fced 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 8006c6c:	e02c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	6859      	ldr	r1, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f000 fc3a 	bl	80074f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2160      	movs	r1, #96	; 0x60
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fcdd 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 8006c8c:	e01c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6859      	ldr	r1, [r3, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f000 fbbe 	bl	800741c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2140      	movs	r1, #64	; 0x40
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fccd 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 8006cac:	e00c      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f000 fcc4 	bl	8007646 <TIM_ITRx_SetConfig>
      break;
 8006cbe:	e003      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc4:	e000      	b.n	8006cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	fffeff88 	.word	0xfffeff88

08006ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a40      	ldr	r2, [pc, #256]	; (8006e4c <TIM_Base_SetConfig+0x114>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d013      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d56:	d00f      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a3d      	ldr	r2, [pc, #244]	; (8006e50 <TIM_Base_SetConfig+0x118>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a3c      	ldr	r2, [pc, #240]	; (8006e54 <TIM_Base_SetConfig+0x11c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d007      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a3b      	ldr	r2, [pc, #236]	; (8006e58 <TIM_Base_SetConfig+0x120>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_Base_SetConfig+0x40>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a3a      	ldr	r2, [pc, #232]	; (8006e5c <TIM_Base_SetConfig+0x124>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d108      	bne.n	8006d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a2f      	ldr	r2, [pc, #188]	; (8006e4c <TIM_Base_SetConfig+0x114>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d02b      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d98:	d027      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a2c      	ldr	r2, [pc, #176]	; (8006e50 <TIM_Base_SetConfig+0x118>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d023      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a2b      	ldr	r2, [pc, #172]	; (8006e54 <TIM_Base_SetConfig+0x11c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01f      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a2a      	ldr	r2, [pc, #168]	; (8006e58 <TIM_Base_SetConfig+0x120>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d01b      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a29      	ldr	r2, [pc, #164]	; (8006e5c <TIM_Base_SetConfig+0x124>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d017      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a28      	ldr	r2, [pc, #160]	; (8006e60 <TIM_Base_SetConfig+0x128>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <TIM_Base_SetConfig+0x12c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00f      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a26      	ldr	r2, [pc, #152]	; (8006e68 <TIM_Base_SetConfig+0x130>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d00b      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a25      	ldr	r2, [pc, #148]	; (8006e6c <TIM_Base_SetConfig+0x134>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d007      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <TIM_Base_SetConfig+0x138>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d003      	beq.n	8006dea <TIM_Base_SetConfig+0xb2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a23      	ldr	r2, [pc, #140]	; (8006e74 <TIM_Base_SetConfig+0x13c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d108      	bne.n	8006dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <TIM_Base_SetConfig+0x114>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_Base_SetConfig+0xf8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <TIM_Base_SetConfig+0x124>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d103      	bne.n	8006e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	615a      	str	r2, [r3, #20]
}
 8006e3e:	bf00      	nop
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40010400 	.word	0x40010400
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40014400 	.word	0x40014400
 8006e68:	40014800 	.word	0x40014800
 8006e6c:	40001800 	.word	0x40001800
 8006e70:	40001c00 	.word	0x40001c00
 8006e74:	40002000 	.word	0x40002000

08006e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f023 0201 	bic.w	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4b2b      	ldr	r3, [pc, #172]	; (8006f50 <TIM_OC1_SetConfig+0xd8>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f023 0302 	bic.w	r3, r3, #2
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a21      	ldr	r2, [pc, #132]	; (8006f54 <TIM_OC1_SetConfig+0xdc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC1_SetConfig+0x64>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a20      	ldr	r2, [pc, #128]	; (8006f58 <TIM_OC1_SetConfig+0xe0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d10c      	bne.n	8006ef6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f023 0308 	bic.w	r3, r3, #8
 8006ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f023 0304 	bic.w	r3, r3, #4
 8006ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a16      	ldr	r2, [pc, #88]	; (8006f54 <TIM_OC1_SetConfig+0xdc>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d003      	beq.n	8006f06 <TIM_OC1_SetConfig+0x8e>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <TIM_OC1_SetConfig+0xe0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d111      	bne.n	8006f2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	621a      	str	r2, [r3, #32]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	fffeff8f 	.word	0xfffeff8f
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40010400 	.word	0x40010400

08006f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f023 0210 	bic.w	r2, r3, #16
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4b2e      	ldr	r3, [pc, #184]	; (8007040 <TIM_OC2_SetConfig+0xe4>)
 8006f88:	4013      	ands	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f023 0320 	bic.w	r3, r3, #32
 8006fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a23      	ldr	r2, [pc, #140]	; (8007044 <TIM_OC2_SetConfig+0xe8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_OC2_SetConfig+0x68>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a22      	ldr	r2, [pc, #136]	; (8007048 <TIM_OC2_SetConfig+0xec>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d10d      	bne.n	8006fe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a18      	ldr	r2, [pc, #96]	; (8007044 <TIM_OC2_SetConfig+0xe8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_OC2_SetConfig+0x94>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a17      	ldr	r2, [pc, #92]	; (8007048 <TIM_OC2_SetConfig+0xec>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d113      	bne.n	8007018 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	4313      	orrs	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	feff8fff 	.word	0xfeff8fff
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400

0800704c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4b2d      	ldr	r3, [pc, #180]	; (800712c <TIM_OC3_SetConfig+0xe0>)
 8007078:	4013      	ands	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0303 	bic.w	r3, r3, #3
 8007082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a22      	ldr	r2, [pc, #136]	; (8007130 <TIM_OC3_SetConfig+0xe4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d003      	beq.n	80070b2 <TIM_OC3_SetConfig+0x66>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a21      	ldr	r2, [pc, #132]	; (8007134 <TIM_OC3_SetConfig+0xe8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d10d      	bne.n	80070ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	021b      	lsls	r3, r3, #8
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a17      	ldr	r2, [pc, #92]	; (8007130 <TIM_OC3_SetConfig+0xe4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d003      	beq.n	80070de <TIM_OC3_SetConfig+0x92>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a16      	ldr	r2, [pc, #88]	; (8007134 <TIM_OC3_SetConfig+0xe8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d113      	bne.n	8007106 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	621a      	str	r2, [r3, #32]
}
 8007120:	bf00      	nop
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	fffeff8f 	.word	0xfffeff8f
 8007130:	40010000 	.word	0x40010000
 8007134:	40010400 	.word	0x40010400

08007138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4b1e      	ldr	r3, [pc, #120]	; (80071dc <TIM_OC4_SetConfig+0xa4>)
 8007164:	4013      	ands	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	031b      	lsls	r3, r3, #12
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4313      	orrs	r3, r2
 800718e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <TIM_OC4_SetConfig+0xa8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_OC4_SetConfig+0x68>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a12      	ldr	r2, [pc, #72]	; (80071e4 <TIM_OC4_SetConfig+0xac>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d109      	bne.n	80071b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	019b      	lsls	r3, r3, #6
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	621a      	str	r2, [r3, #32]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	feff8fff 	.word	0xfeff8fff
 80071e0:	40010000 	.word	0x40010000
 80071e4:	40010400 	.word	0x40010400

080071e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <TIM_OC5_SetConfig+0x98>)
 8007214:	4013      	ands	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007228:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	041b      	lsls	r3, r3, #16
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a12      	ldr	r2, [pc, #72]	; (8007284 <TIM_OC5_SetConfig+0x9c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d003      	beq.n	8007246 <TIM_OC5_SetConfig+0x5e>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a11      	ldr	r2, [pc, #68]	; (8007288 <TIM_OC5_SetConfig+0xa0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d109      	bne.n	800725a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	621a      	str	r2, [r3, #32]
}
 8007274:	bf00      	nop
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	fffeff8f 	.word	0xfffeff8f
 8007284:	40010000 	.word	0x40010000
 8007288:	40010400 	.word	0x40010400

0800728c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4b1c      	ldr	r3, [pc, #112]	; (8007328 <TIM_OC6_SetConfig+0x9c>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	051b      	lsls	r3, r3, #20
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a13      	ldr	r2, [pc, #76]	; (800732c <TIM_OC6_SetConfig+0xa0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d003      	beq.n	80072ec <TIM_OC6_SetConfig+0x60>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a12      	ldr	r2, [pc, #72]	; (8007330 <TIM_OC6_SetConfig+0xa4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d109      	bne.n	8007300 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	029b      	lsls	r3, r3, #10
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	feff8fff 	.word	0xfeff8fff
 800732c:	40010000 	.word	0x40010000
 8007330:	40010400 	.word	0x40010400

08007334 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0201 	bic.w	r2, r3, #1
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4a28      	ldr	r2, [pc, #160]	; (8007400 <TIM_TI1_SetConfig+0xcc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d01b      	beq.n	800739a <TIM_TI1_SetConfig+0x66>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007368:	d017      	beq.n	800739a <TIM_TI1_SetConfig+0x66>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4a25      	ldr	r2, [pc, #148]	; (8007404 <TIM_TI1_SetConfig+0xd0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <TIM_TI1_SetConfig+0x66>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4a24      	ldr	r2, [pc, #144]	; (8007408 <TIM_TI1_SetConfig+0xd4>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d00f      	beq.n	800739a <TIM_TI1_SetConfig+0x66>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4a23      	ldr	r2, [pc, #140]	; (800740c <TIM_TI1_SetConfig+0xd8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00b      	beq.n	800739a <TIM_TI1_SetConfig+0x66>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	4a22      	ldr	r2, [pc, #136]	; (8007410 <TIM_TI1_SetConfig+0xdc>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d007      	beq.n	800739a <TIM_TI1_SetConfig+0x66>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a21      	ldr	r2, [pc, #132]	; (8007414 <TIM_TI1_SetConfig+0xe0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d003      	beq.n	800739a <TIM_TI1_SetConfig+0x66>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a20      	ldr	r2, [pc, #128]	; (8007418 <TIM_TI1_SetConfig+0xe4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d101      	bne.n	800739e <TIM_TI1_SetConfig+0x6a>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <TIM_TI1_SetConfig+0x6c>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	e003      	b.n	80073be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f043 0301 	orr.w	r3, r3, #1
 80073bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f023 030a 	bic.w	r3, r3, #10
 80073d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f003 030a 	and.w	r3, r3, #10
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40010000 	.word	0x40010000
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	40010400 	.word	0x40010400
 8007414:	40014000 	.word	0x40014000
 8007418:	40001800 	.word	0x40001800

0800741c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f023 0201 	bic.w	r2, r3, #1
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f023 030a 	bic.w	r3, r3, #10
 8007458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4313      	orrs	r3, r2
 8007460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	621a      	str	r2, [r3, #32]
}
 800746e:	bf00      	nop
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800747a:	b480      	push	{r7}
 800747c:	b087      	sub	sp, #28
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	f023 0210 	bic.w	r2, r3, #16
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	031b      	lsls	r3, r3, #12
 80074be:	b29b      	uxth	r3, r3
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	621a      	str	r2, [r3, #32]
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	f023 0210 	bic.w	r2, r3, #16
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800751e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	031b      	lsls	r3, r3, #12
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007530:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	621a      	str	r2, [r3, #32]
}
 8007548:	bf00      	nop
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f023 0303 	bic.w	r3, r3, #3
 8007580:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007590:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	b2db      	uxtb	r3, r3
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80075a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	621a      	str	r2, [r3, #32]
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4313      	orrs	r3, r2
 8007602:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800760a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	031b      	lsls	r3, r3, #12
 8007610:	b29b      	uxth	r3, r3
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800761e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	031b      	lsls	r3, r3, #12
 8007624:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	f043 0307 	orr.w	r3, r3, #7
 8007668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	609a      	str	r2, [r3, #8]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	021a      	lsls	r2, r3, #8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	431a      	orrs	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	609a      	str	r2, [r3, #8]
}
 80076b0:	bf00      	nop
 80076b2:	371c      	adds	r7, #28
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	2201      	movs	r2, #1
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a1a      	ldr	r2, [r3, #32]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	43db      	mvns	r3, r3
 80076de:	401a      	ands	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1a      	ldr	r2, [r3, #32]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	fa01 f303 	lsl.w	r3, r1, r3
 80076f4:	431a      	orrs	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	621a      	str	r2, [r3, #32]
}
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800771c:	2302      	movs	r3, #2
 800771e:	e06d      	b.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a30      	ldr	r2, [pc, #192]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d004      	beq.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2f      	ldr	r2, [pc, #188]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d108      	bne.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800775a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a20      	ldr	r2, [pc, #128]	; (8007808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d022      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007792:	d01d      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d018      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1c      	ldr	r2, [pc, #112]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d013      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1a      	ldr	r2, [pc, #104]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d00e      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a15      	ldr	r2, [pc, #84]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d009      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a16      	ldr	r2, [pc, #88]	; (800781c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d004      	beq.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a15      	ldr	r2, [pc, #84]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10c      	bne.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	40010000 	.word	0x40010000
 800780c:	40010400 	.word	0x40010400
 8007810:	40000400 	.word	0x40000400
 8007814:	40000800 	.word	0x40000800
 8007818:	40000c00 	.word	0x40000c00
 800781c:	40014000 	.word	0x40014000
 8007820:	40001800 	.word	0x40001800

08007824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800783c:	2302      	movs	r3, #2
 800783e:	e065      	b.n	800790c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	4313      	orrs	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	041b      	lsls	r3, r3, #16
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a16      	ldr	r2, [pc, #88]	; (8007918 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a14      	ldr	r2, [pc, #80]	; (800791c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d115      	bne.n	80078fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	051b      	lsls	r3, r3, #20
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	40010000 	.word	0x40010000
 800791c:	40010400 	.word	0x40010400

08007920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e040      	b.n	80079f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fb f886 	bl	8002a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2224      	movs	r2, #36	; 0x24
 8007988:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f022 0201 	bic.w	r2, r2, #1
 8007998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f974 	bl	8007c88 <UART_SetConfig>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e022      	b.n	80079f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fbcc 	bl	8008150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f042 0201 	orr.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fc53 	bl	8008294 <UART_CheckIdleState>
 80079ee:	4603      	mov	r3, r0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	; 0x28
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d171      	bne.n	8007af4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <HAL_UART_Transmit+0x24>
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e06a      	b.n	8007af6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2221      	movs	r2, #33	; 0x21
 8007a2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a2e:	f7fb fb53 	bl	80030d8 <HAL_GetTick>
 8007a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	88fa      	ldrh	r2, [r7, #6]
 8007a38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	88fa      	ldrh	r2, [r7, #6]
 8007a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4c:	d108      	bne.n	8007a60 <HAL_UART_Transmit+0x68>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	e003      	b.n	8007a68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a68:	e02c      	b.n	8007ac4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	2180      	movs	r1, #128	; 0x80
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fc5a 	bl	800832e <UART_WaitOnFlagUntilTimeout>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e038      	b.n	8007af6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	61bb      	str	r3, [r7, #24]
 8007aa0:	e007      	b.n	8007ab2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	781a      	ldrb	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1cc      	bne.n	8007a6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2140      	movs	r1, #64	; 0x40
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fc27 	bl	800832e <UART_WaitOnFlagUntilTimeout>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e005      	b.n	8007af6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2220      	movs	r2, #32
 8007aee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	e000      	b.n	8007af6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007af4:	2302      	movs	r3, #2
  }
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3720      	adds	r7, #32
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b08a      	sub	sp, #40	; 0x28
 8007b02:	af02      	add	r7, sp, #8
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	603b      	str	r3, [r7, #0]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	f040 80b1 	bne.w	8007c7c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <HAL_UART_Receive+0x28>
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e0a9      	b.n	8007c7e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2222      	movs	r2, #34	; 0x22
 8007b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b40:	f7fb faca 	bl	80030d8 <HAL_GetTick>
 8007b44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	88fa      	ldrh	r2, [r7, #6]
 8007b4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	88fa      	ldrh	r2, [r7, #6]
 8007b52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b5e:	d10e      	bne.n	8007b7e <HAL_UART_Receive+0x80>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d105      	bne.n	8007b74 <HAL_UART_Receive+0x76>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b72:	e02d      	b.n	8007bd0 <HAL_UART_Receive+0xd2>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	22ff      	movs	r2, #255	; 0xff
 8007b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b7c:	e028      	b.n	8007bd0 <HAL_UART_Receive+0xd2>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10d      	bne.n	8007ba2 <HAL_UART_Receive+0xa4>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d104      	bne.n	8007b98 <HAL_UART_Receive+0x9a>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	22ff      	movs	r2, #255	; 0xff
 8007b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b96:	e01b      	b.n	8007bd0 <HAL_UART_Receive+0xd2>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	227f      	movs	r2, #127	; 0x7f
 8007b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ba0:	e016      	b.n	8007bd0 <HAL_UART_Receive+0xd2>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007baa:	d10d      	bne.n	8007bc8 <HAL_UART_Receive+0xca>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <HAL_UART_Receive+0xc0>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	227f      	movs	r2, #127	; 0x7f
 8007bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bbc:	e008      	b.n	8007bd0 <HAL_UART_Receive+0xd2>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	223f      	movs	r2, #63	; 0x3f
 8007bc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007bc6:	e003      	b.n	8007bd0 <HAL_UART_Receive+0xd2>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bd6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be0:	d108      	bne.n	8007bf4 <HAL_UART_Receive+0xf6>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d104      	bne.n	8007bf4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	61bb      	str	r3, [r7, #24]
 8007bf2:	e003      	b.n	8007bfc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007bfc:	e032      	b.n	8007c64 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2200      	movs	r2, #0
 8007c06:	2120      	movs	r1, #32
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fb90 	bl	800832e <UART_WaitOnFlagUntilTimeout>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e032      	b.n	8007c7e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10c      	bne.n	8007c38 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	8a7b      	ldrh	r3, [r7, #18]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	3302      	adds	r3, #2
 8007c34:	61bb      	str	r3, [r7, #24]
 8007c36:	e00c      	b.n	8007c52 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	8a7b      	ldrh	r3, [r7, #18]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	4013      	ands	r3, r2
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1c6      	bne.n	8007bfe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e000      	b.n	8007c7e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007c7c:	2302      	movs	r3, #2
  }
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3720      	adds	r7, #32
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4ba6      	ldr	r3, [pc, #664]	; (8007f4c <UART_SetConfig+0x2c4>)
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	6812      	ldr	r2, [r2, #0]
 8007cba:	6979      	ldr	r1, [r7, #20]
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a94      	ldr	r2, [pc, #592]	; (8007f50 <UART_SetConfig+0x2c8>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d120      	bne.n	8007d46 <UART_SetConfig+0xbe>
 8007d04:	4b93      	ldr	r3, [pc, #588]	; (8007f54 <UART_SetConfig+0x2cc>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d816      	bhi.n	8007d40 <UART_SetConfig+0xb8>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <UART_SetConfig+0x90>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d29 	.word	0x08007d29
 8007d1c:	08007d35 	.word	0x08007d35
 8007d20:	08007d2f 	.word	0x08007d2f
 8007d24:	08007d3b 	.word	0x08007d3b
 8007d28:	2301      	movs	r3, #1
 8007d2a:	77fb      	strb	r3, [r7, #31]
 8007d2c:	e150      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	77fb      	strb	r3, [r7, #31]
 8007d32:	e14d      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007d34:	2304      	movs	r3, #4
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e14a      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	77fb      	strb	r3, [r7, #31]
 8007d3e:	e147      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007d40:	2310      	movs	r3, #16
 8007d42:	77fb      	strb	r3, [r7, #31]
 8007d44:	e144      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a83      	ldr	r2, [pc, #524]	; (8007f58 <UART_SetConfig+0x2d0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d132      	bne.n	8007db6 <UART_SetConfig+0x12e>
 8007d50:	4b80      	ldr	r3, [pc, #512]	; (8007f54 <UART_SetConfig+0x2cc>)
 8007d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d56:	f003 030c 	and.w	r3, r3, #12
 8007d5a:	2b0c      	cmp	r3, #12
 8007d5c:	d828      	bhi.n	8007db0 <UART_SetConfig+0x128>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <UART_SetConfig+0xdc>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d99 	.word	0x08007d99
 8007d68:	08007db1 	.word	0x08007db1
 8007d6c:	08007db1 	.word	0x08007db1
 8007d70:	08007db1 	.word	0x08007db1
 8007d74:	08007da5 	.word	0x08007da5
 8007d78:	08007db1 	.word	0x08007db1
 8007d7c:	08007db1 	.word	0x08007db1
 8007d80:	08007db1 	.word	0x08007db1
 8007d84:	08007d9f 	.word	0x08007d9f
 8007d88:	08007db1 	.word	0x08007db1
 8007d8c:	08007db1 	.word	0x08007db1
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007dab 	.word	0x08007dab
 8007d98:	2300      	movs	r3, #0
 8007d9a:	77fb      	strb	r3, [r7, #31]
 8007d9c:	e118      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	77fb      	strb	r3, [r7, #31]
 8007da2:	e115      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007da4:	2304      	movs	r3, #4
 8007da6:	77fb      	strb	r3, [r7, #31]
 8007da8:	e112      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007daa:	2308      	movs	r3, #8
 8007dac:	77fb      	strb	r3, [r7, #31]
 8007dae:	e10f      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007db0:	2310      	movs	r3, #16
 8007db2:	77fb      	strb	r3, [r7, #31]
 8007db4:	e10c      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a68      	ldr	r2, [pc, #416]	; (8007f5c <UART_SetConfig+0x2d4>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d120      	bne.n	8007e02 <UART_SetConfig+0x17a>
 8007dc0:	4b64      	ldr	r3, [pc, #400]	; (8007f54 <UART_SetConfig+0x2cc>)
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007dca:	2b30      	cmp	r3, #48	; 0x30
 8007dcc:	d013      	beq.n	8007df6 <UART_SetConfig+0x16e>
 8007dce:	2b30      	cmp	r3, #48	; 0x30
 8007dd0:	d814      	bhi.n	8007dfc <UART_SetConfig+0x174>
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d009      	beq.n	8007dea <UART_SetConfig+0x162>
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	d810      	bhi.n	8007dfc <UART_SetConfig+0x174>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <UART_SetConfig+0x15c>
 8007dde:	2b10      	cmp	r3, #16
 8007de0:	d006      	beq.n	8007df0 <UART_SetConfig+0x168>
 8007de2:	e00b      	b.n	8007dfc <UART_SetConfig+0x174>
 8007de4:	2300      	movs	r3, #0
 8007de6:	77fb      	strb	r3, [r7, #31]
 8007de8:	e0f2      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007dea:	2302      	movs	r3, #2
 8007dec:	77fb      	strb	r3, [r7, #31]
 8007dee:	e0ef      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007df0:	2304      	movs	r3, #4
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e0ec      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007df6:	2308      	movs	r3, #8
 8007df8:	77fb      	strb	r3, [r7, #31]
 8007dfa:	e0e9      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	77fb      	strb	r3, [r7, #31]
 8007e00:	e0e6      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a56      	ldr	r2, [pc, #344]	; (8007f60 <UART_SetConfig+0x2d8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d120      	bne.n	8007e4e <UART_SetConfig+0x1c6>
 8007e0c:	4b51      	ldr	r3, [pc, #324]	; (8007f54 <UART_SetConfig+0x2cc>)
 8007e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e16:	2bc0      	cmp	r3, #192	; 0xc0
 8007e18:	d013      	beq.n	8007e42 <UART_SetConfig+0x1ba>
 8007e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e1c:	d814      	bhi.n	8007e48 <UART_SetConfig+0x1c0>
 8007e1e:	2b80      	cmp	r3, #128	; 0x80
 8007e20:	d009      	beq.n	8007e36 <UART_SetConfig+0x1ae>
 8007e22:	2b80      	cmp	r3, #128	; 0x80
 8007e24:	d810      	bhi.n	8007e48 <UART_SetConfig+0x1c0>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <UART_SetConfig+0x1a8>
 8007e2a:	2b40      	cmp	r3, #64	; 0x40
 8007e2c:	d006      	beq.n	8007e3c <UART_SetConfig+0x1b4>
 8007e2e:	e00b      	b.n	8007e48 <UART_SetConfig+0x1c0>
 8007e30:	2300      	movs	r3, #0
 8007e32:	77fb      	strb	r3, [r7, #31]
 8007e34:	e0cc      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e36:	2302      	movs	r3, #2
 8007e38:	77fb      	strb	r3, [r7, #31]
 8007e3a:	e0c9      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	77fb      	strb	r3, [r7, #31]
 8007e40:	e0c6      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e42:	2308      	movs	r3, #8
 8007e44:	77fb      	strb	r3, [r7, #31]
 8007e46:	e0c3      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e0c0      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a44      	ldr	r2, [pc, #272]	; (8007f64 <UART_SetConfig+0x2dc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d125      	bne.n	8007ea4 <UART_SetConfig+0x21c>
 8007e58:	4b3e      	ldr	r3, [pc, #248]	; (8007f54 <UART_SetConfig+0x2cc>)
 8007e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e66:	d017      	beq.n	8007e98 <UART_SetConfig+0x210>
 8007e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e6c:	d817      	bhi.n	8007e9e <UART_SetConfig+0x216>
 8007e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e72:	d00b      	beq.n	8007e8c <UART_SetConfig+0x204>
 8007e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e78:	d811      	bhi.n	8007e9e <UART_SetConfig+0x216>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <UART_SetConfig+0x1fe>
 8007e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e82:	d006      	beq.n	8007e92 <UART_SetConfig+0x20a>
 8007e84:	e00b      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e86:	2300      	movs	r3, #0
 8007e88:	77fb      	strb	r3, [r7, #31]
 8007e8a:	e0a1      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	77fb      	strb	r3, [r7, #31]
 8007e90:	e09e      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e92:	2304      	movs	r3, #4
 8007e94:	77fb      	strb	r3, [r7, #31]
 8007e96:	e09b      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e98:	2308      	movs	r3, #8
 8007e9a:	77fb      	strb	r3, [r7, #31]
 8007e9c:	e098      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	77fb      	strb	r3, [r7, #31]
 8007ea2:	e095      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a2f      	ldr	r2, [pc, #188]	; (8007f68 <UART_SetConfig+0x2e0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d125      	bne.n	8007efa <UART_SetConfig+0x272>
 8007eae:	4b29      	ldr	r3, [pc, #164]	; (8007f54 <UART_SetConfig+0x2cc>)
 8007eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ebc:	d017      	beq.n	8007eee <UART_SetConfig+0x266>
 8007ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ec2:	d817      	bhi.n	8007ef4 <UART_SetConfig+0x26c>
 8007ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec8:	d00b      	beq.n	8007ee2 <UART_SetConfig+0x25a>
 8007eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ece:	d811      	bhi.n	8007ef4 <UART_SetConfig+0x26c>
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <UART_SetConfig+0x254>
 8007ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed8:	d006      	beq.n	8007ee8 <UART_SetConfig+0x260>
 8007eda:	e00b      	b.n	8007ef4 <UART_SetConfig+0x26c>
 8007edc:	2301      	movs	r3, #1
 8007ede:	77fb      	strb	r3, [r7, #31]
 8007ee0:	e076      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	77fb      	strb	r3, [r7, #31]
 8007ee6:	e073      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007ee8:	2304      	movs	r3, #4
 8007eea:	77fb      	strb	r3, [r7, #31]
 8007eec:	e070      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007eee:	2308      	movs	r3, #8
 8007ef0:	77fb      	strb	r3, [r7, #31]
 8007ef2:	e06d      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007ef4:	2310      	movs	r3, #16
 8007ef6:	77fb      	strb	r3, [r7, #31]
 8007ef8:	e06a      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a1b      	ldr	r2, [pc, #108]	; (8007f6c <UART_SetConfig+0x2e4>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d138      	bne.n	8007f76 <UART_SetConfig+0x2ee>
 8007f04:	4b13      	ldr	r3, [pc, #76]	; (8007f54 <UART_SetConfig+0x2cc>)
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007f0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f12:	d017      	beq.n	8007f44 <UART_SetConfig+0x2bc>
 8007f14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f18:	d82a      	bhi.n	8007f70 <UART_SetConfig+0x2e8>
 8007f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f1e:	d00b      	beq.n	8007f38 <UART_SetConfig+0x2b0>
 8007f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f24:	d824      	bhi.n	8007f70 <UART_SetConfig+0x2e8>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <UART_SetConfig+0x2aa>
 8007f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2e:	d006      	beq.n	8007f3e <UART_SetConfig+0x2b6>
 8007f30:	e01e      	b.n	8007f70 <UART_SetConfig+0x2e8>
 8007f32:	2300      	movs	r3, #0
 8007f34:	77fb      	strb	r3, [r7, #31]
 8007f36:	e04b      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	77fb      	strb	r3, [r7, #31]
 8007f3c:	e048      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007f3e:	2304      	movs	r3, #4
 8007f40:	77fb      	strb	r3, [r7, #31]
 8007f42:	e045      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007f44:	2308      	movs	r3, #8
 8007f46:	77fb      	strb	r3, [r7, #31]
 8007f48:	e042      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007f4a:	bf00      	nop
 8007f4c:	efff69f3 	.word	0xefff69f3
 8007f50:	40011000 	.word	0x40011000
 8007f54:	40023800 	.word	0x40023800
 8007f58:	40004400 	.word	0x40004400
 8007f5c:	40004800 	.word	0x40004800
 8007f60:	40004c00 	.word	0x40004c00
 8007f64:	40005000 	.word	0x40005000
 8007f68:	40011400 	.word	0x40011400
 8007f6c:	40007800 	.word	0x40007800
 8007f70:	2310      	movs	r3, #16
 8007f72:	77fb      	strb	r3, [r7, #31]
 8007f74:	e02c      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a72      	ldr	r2, [pc, #456]	; (8008144 <UART_SetConfig+0x4bc>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d125      	bne.n	8007fcc <UART_SetConfig+0x344>
 8007f80:	4b71      	ldr	r3, [pc, #452]	; (8008148 <UART_SetConfig+0x4c0>)
 8007f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f8e:	d017      	beq.n	8007fc0 <UART_SetConfig+0x338>
 8007f90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f94:	d817      	bhi.n	8007fc6 <UART_SetConfig+0x33e>
 8007f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f9a:	d00b      	beq.n	8007fb4 <UART_SetConfig+0x32c>
 8007f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa0:	d811      	bhi.n	8007fc6 <UART_SetConfig+0x33e>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <UART_SetConfig+0x326>
 8007fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007faa:	d006      	beq.n	8007fba <UART_SetConfig+0x332>
 8007fac:	e00b      	b.n	8007fc6 <UART_SetConfig+0x33e>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	77fb      	strb	r3, [r7, #31]
 8007fb2:	e00d      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e00a      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007fba:	2304      	movs	r3, #4
 8007fbc:	77fb      	strb	r3, [r7, #31]
 8007fbe:	e007      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	77fb      	strb	r3, [r7, #31]
 8007fc4:	e004      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007fc6:	2310      	movs	r3, #16
 8007fc8:	77fb      	strb	r3, [r7, #31]
 8007fca:	e001      	b.n	8007fd0 <UART_SetConfig+0x348>
 8007fcc:	2310      	movs	r3, #16
 8007fce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd8:	d15b      	bne.n	8008092 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007fda:	7ffb      	ldrb	r3, [r7, #31]
 8007fdc:	2b08      	cmp	r3, #8
 8007fde:	d828      	bhi.n	8008032 <UART_SetConfig+0x3aa>
 8007fe0:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <UART_SetConfig+0x360>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	0800800d 	.word	0x0800800d
 8007fec:	08008015 	.word	0x08008015
 8007ff0:	0800801d 	.word	0x0800801d
 8007ff4:	08008033 	.word	0x08008033
 8007ff8:	08008023 	.word	0x08008023
 8007ffc:	08008033 	.word	0x08008033
 8008000:	08008033 	.word	0x08008033
 8008004:	08008033 	.word	0x08008033
 8008008:	0800802b 	.word	0x0800802b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800800c:	f7fd f946 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8008010:	61b8      	str	r0, [r7, #24]
        break;
 8008012:	e013      	b.n	800803c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008014:	f7fd f956 	bl	80052c4 <HAL_RCC_GetPCLK2Freq>
 8008018:	61b8      	str	r0, [r7, #24]
        break;
 800801a:	e00f      	b.n	800803c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800801c:	4b4b      	ldr	r3, [pc, #300]	; (800814c <UART_SetConfig+0x4c4>)
 800801e:	61bb      	str	r3, [r7, #24]
        break;
 8008020:	e00c      	b.n	800803c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008022:	f7fd f829 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8008026:	61b8      	str	r0, [r7, #24]
        break;
 8008028:	e008      	b.n	800803c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800802a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800802e:	61bb      	str	r3, [r7, #24]
        break;
 8008030:	e004      	b.n	800803c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	77bb      	strb	r3, [r7, #30]
        break;
 800803a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d074      	beq.n	800812c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	005a      	lsls	r2, r3, #1
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	085b      	lsrs	r3, r3, #1
 800804c:	441a      	add	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	fbb2 f3f3 	udiv	r3, r2, r3
 8008056:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	2b0f      	cmp	r3, #15
 800805c:	d916      	bls.n	800808c <UART_SetConfig+0x404>
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008064:	d212      	bcs.n	800808c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	b29b      	uxth	r3, r3
 800806a:	f023 030f 	bic.w	r3, r3, #15
 800806e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	085b      	lsrs	r3, r3, #1
 8008074:	b29b      	uxth	r3, r3
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	b29a      	uxth	r2, r3
 800807c:	89fb      	ldrh	r3, [r7, #14]
 800807e:	4313      	orrs	r3, r2
 8008080:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	89fa      	ldrh	r2, [r7, #14]
 8008088:	60da      	str	r2, [r3, #12]
 800808a:	e04f      	b.n	800812c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	77bb      	strb	r3, [r7, #30]
 8008090:	e04c      	b.n	800812c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008092:	7ffb      	ldrb	r3, [r7, #31]
 8008094:	2b08      	cmp	r3, #8
 8008096:	d828      	bhi.n	80080ea <UART_SetConfig+0x462>
 8008098:	a201      	add	r2, pc, #4	; (adr r2, 80080a0 <UART_SetConfig+0x418>)
 800809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809e:	bf00      	nop
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080cd 	.word	0x080080cd
 80080a8:	080080d5 	.word	0x080080d5
 80080ac:	080080eb 	.word	0x080080eb
 80080b0:	080080db 	.word	0x080080db
 80080b4:	080080eb 	.word	0x080080eb
 80080b8:	080080eb 	.word	0x080080eb
 80080bc:	080080eb 	.word	0x080080eb
 80080c0:	080080e3 	.word	0x080080e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080c4:	f7fd f8ea 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 80080c8:	61b8      	str	r0, [r7, #24]
        break;
 80080ca:	e013      	b.n	80080f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080cc:	f7fd f8fa 	bl	80052c4 <HAL_RCC_GetPCLK2Freq>
 80080d0:	61b8      	str	r0, [r7, #24]
        break;
 80080d2:	e00f      	b.n	80080f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080d4:	4b1d      	ldr	r3, [pc, #116]	; (800814c <UART_SetConfig+0x4c4>)
 80080d6:	61bb      	str	r3, [r7, #24]
        break;
 80080d8:	e00c      	b.n	80080f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080da:	f7fc ffcd 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 80080de:	61b8      	str	r0, [r7, #24]
        break;
 80080e0:	e008      	b.n	80080f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080e6:	61bb      	str	r3, [r7, #24]
        break;
 80080e8:	e004      	b.n	80080f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	77bb      	strb	r3, [r7, #30]
        break;
 80080f2:	bf00      	nop
    }

    if (pclk != 0U)
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d018      	beq.n	800812c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	085a      	lsrs	r2, r3, #1
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	441a      	add	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	fbb2 f3f3 	udiv	r3, r2, r3
 800810c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	2b0f      	cmp	r3, #15
 8008112:	d909      	bls.n	8008128 <UART_SetConfig+0x4a0>
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811a:	d205      	bcs.n	8008128 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	b29a      	uxth	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60da      	str	r2, [r3, #12]
 8008126:	e001      	b.n	800812c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008138:	7fbb      	ldrb	r3, [r7, #30]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3720      	adds	r7, #32
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	40007c00 	.word	0x40007c00
 8008148:	40023800 	.word	0x40023800
 800814c:	00f42400 	.word	0x00f42400

08008150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00a      	beq.n	800817a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00a      	beq.n	80081be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	f003 0308 	and.w	r3, r3, #8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00a      	beq.n	8008202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	430a      	orrs	r2, r1
 8008222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01a      	beq.n	8008266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	430a      	orrs	r2, r1
 8008244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800824e:	d10a      	bne.n	8008266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00a      	beq.n	8008288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	605a      	str	r2, [r3, #4]
  }
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af02      	add	r7, sp, #8
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082a4:	f7fa ff18 	bl	80030d8 <HAL_GetTick>
 80082a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d10e      	bne.n	80082d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f831 	bl	800832e <UART_WaitOnFlagUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e027      	b.n	8008326 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d10e      	bne.n	8008302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f81b 	bl	800832e <UART_WaitOnFlagUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e011      	b.n	8008326 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b09c      	sub	sp, #112	; 0x70
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	603b      	str	r3, [r7, #0]
 800833a:	4613      	mov	r3, r2
 800833c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833e:	e0a7      	b.n	8008490 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	f000 80a3 	beq.w	8008490 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800834a:	f7fa fec5 	bl	80030d8 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008356:	429a      	cmp	r2, r3
 8008358:	d302      	bcc.n	8008360 <UART_WaitOnFlagUntilTimeout+0x32>
 800835a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800835c:	2b00      	cmp	r3, #0
 800835e:	d13f      	bne.n	80083e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800836e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008374:	667b      	str	r3, [r7, #100]	; 0x64
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800837e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008380:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800838c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1e6      	bne.n	8008360 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3308      	adds	r3, #8
 8008398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	f023 0301 	bic.w	r3, r3, #1
 80083a8:	663b      	str	r3, [r7, #96]	; 0x60
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3308      	adds	r3, #8
 80083b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80083b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80083c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e5      	bne.n	8008392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2220      	movs	r2, #32
 80083ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e068      	b.n	80084b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0304 	and.w	r3, r3, #4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d050      	beq.n	8008490 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083fc:	d148      	bne.n	8008490 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008406:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800841c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
 8008428:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800842c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e6      	bne.n	8008408 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3308      	adds	r3, #8
 8008440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	613b      	str	r3, [r7, #16]
   return(result);
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f023 0301 	bic.w	r3, r3, #1
 8008450:	66bb      	str	r3, [r7, #104]	; 0x68
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3308      	adds	r3, #8
 8008458:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800845a:	623a      	str	r2, [r7, #32]
 800845c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	69f9      	ldr	r1, [r7, #28]
 8008460:	6a3a      	ldr	r2, [r7, #32]
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	61bb      	str	r3, [r7, #24]
   return(result);
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e5      	bne.n	800843a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2220      	movs	r2, #32
 8008472:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2220      	movs	r2, #32
 8008478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2220      	movs	r2, #32
 8008480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e010      	b.n	80084b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69da      	ldr	r2, [r3, #28]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	4013      	ands	r3, r2
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	429a      	cmp	r2, r3
 800849e:	bf0c      	ite	eq
 80084a0:	2301      	moveq	r3, #1
 80084a2:	2300      	movne	r3, #0
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	79fb      	ldrb	r3, [r7, #7]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	f43f af48 	beq.w	8008340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3770      	adds	r7, #112	; 0x70
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <__errno>:
 80084bc:	4b01      	ldr	r3, [pc, #4]	; (80084c4 <__errno+0x8>)
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000018 	.word	0x20000018

080084c8 <__libc_init_array>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4d0d      	ldr	r5, [pc, #52]	; (8008500 <__libc_init_array+0x38>)
 80084cc:	4c0d      	ldr	r4, [pc, #52]	; (8008504 <__libc_init_array+0x3c>)
 80084ce:	1b64      	subs	r4, r4, r5
 80084d0:	10a4      	asrs	r4, r4, #2
 80084d2:	2600      	movs	r6, #0
 80084d4:	42a6      	cmp	r6, r4
 80084d6:	d109      	bne.n	80084ec <__libc_init_array+0x24>
 80084d8:	4d0b      	ldr	r5, [pc, #44]	; (8008508 <__libc_init_array+0x40>)
 80084da:	4c0c      	ldr	r4, [pc, #48]	; (800850c <__libc_init_array+0x44>)
 80084dc:	f000 ffbc 	bl	8009458 <_init>
 80084e0:	1b64      	subs	r4, r4, r5
 80084e2:	10a4      	asrs	r4, r4, #2
 80084e4:	2600      	movs	r6, #0
 80084e6:	42a6      	cmp	r6, r4
 80084e8:	d105      	bne.n	80084f6 <__libc_init_array+0x2e>
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f0:	4798      	blx	r3
 80084f2:	3601      	adds	r6, #1
 80084f4:	e7ee      	b.n	80084d4 <__libc_init_array+0xc>
 80084f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fa:	4798      	blx	r3
 80084fc:	3601      	adds	r6, #1
 80084fe:	e7f2      	b.n	80084e6 <__libc_init_array+0x1e>
 8008500:	08009578 	.word	0x08009578
 8008504:	08009578 	.word	0x08009578
 8008508:	08009578 	.word	0x08009578
 800850c:	0800957c 	.word	0x0800957c

08008510 <memcpy>:
 8008510:	440a      	add	r2, r1
 8008512:	4291      	cmp	r1, r2
 8008514:	f100 33ff 	add.w	r3, r0, #4294967295
 8008518:	d100      	bne.n	800851c <memcpy+0xc>
 800851a:	4770      	bx	lr
 800851c:	b510      	push	{r4, lr}
 800851e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008526:	4291      	cmp	r1, r2
 8008528:	d1f9      	bne.n	800851e <memcpy+0xe>
 800852a:	bd10      	pop	{r4, pc}

0800852c <memset>:
 800852c:	4402      	add	r2, r0
 800852e:	4603      	mov	r3, r0
 8008530:	4293      	cmp	r3, r2
 8008532:	d100      	bne.n	8008536 <memset+0xa>
 8008534:	4770      	bx	lr
 8008536:	f803 1b01 	strb.w	r1, [r3], #1
 800853a:	e7f9      	b.n	8008530 <memset+0x4>

0800853c <iprintf>:
 800853c:	b40f      	push	{r0, r1, r2, r3}
 800853e:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <iprintf+0x2c>)
 8008540:	b513      	push	{r0, r1, r4, lr}
 8008542:	681c      	ldr	r4, [r3, #0]
 8008544:	b124      	cbz	r4, 8008550 <iprintf+0x14>
 8008546:	69a3      	ldr	r3, [r4, #24]
 8008548:	b913      	cbnz	r3, 8008550 <iprintf+0x14>
 800854a:	4620      	mov	r0, r4
 800854c:	f000 f866 	bl	800861c <__sinit>
 8008550:	ab05      	add	r3, sp, #20
 8008552:	9a04      	ldr	r2, [sp, #16]
 8008554:	68a1      	ldr	r1, [r4, #8]
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	4620      	mov	r0, r4
 800855a:	f000 f9bd 	bl	80088d8 <_vfiprintf_r>
 800855e:	b002      	add	sp, #8
 8008560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008564:	b004      	add	sp, #16
 8008566:	4770      	bx	lr
 8008568:	20000018 	.word	0x20000018

0800856c <std>:
 800856c:	2300      	movs	r3, #0
 800856e:	b510      	push	{r4, lr}
 8008570:	4604      	mov	r4, r0
 8008572:	e9c0 3300 	strd	r3, r3, [r0]
 8008576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800857a:	6083      	str	r3, [r0, #8]
 800857c:	8181      	strh	r1, [r0, #12]
 800857e:	6643      	str	r3, [r0, #100]	; 0x64
 8008580:	81c2      	strh	r2, [r0, #14]
 8008582:	6183      	str	r3, [r0, #24]
 8008584:	4619      	mov	r1, r3
 8008586:	2208      	movs	r2, #8
 8008588:	305c      	adds	r0, #92	; 0x5c
 800858a:	f7ff ffcf 	bl	800852c <memset>
 800858e:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <std+0x38>)
 8008590:	6263      	str	r3, [r4, #36]	; 0x24
 8008592:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <std+0x3c>)
 8008594:	62a3      	str	r3, [r4, #40]	; 0x28
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <std+0x40>)
 8008598:	62e3      	str	r3, [r4, #44]	; 0x2c
 800859a:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <std+0x44>)
 800859c:	6224      	str	r4, [r4, #32]
 800859e:	6323      	str	r3, [r4, #48]	; 0x30
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	bf00      	nop
 80085a4:	08008e81 	.word	0x08008e81
 80085a8:	08008ea3 	.word	0x08008ea3
 80085ac:	08008edb 	.word	0x08008edb
 80085b0:	08008eff 	.word	0x08008eff

080085b4 <_cleanup_r>:
 80085b4:	4901      	ldr	r1, [pc, #4]	; (80085bc <_cleanup_r+0x8>)
 80085b6:	f000 b8af 	b.w	8008718 <_fwalk_reent>
 80085ba:	bf00      	nop
 80085bc:	080091d9 	.word	0x080091d9

080085c0 <__sfmoreglue>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	2268      	movs	r2, #104	; 0x68
 80085c4:	1e4d      	subs	r5, r1, #1
 80085c6:	4355      	muls	r5, r2
 80085c8:	460e      	mov	r6, r1
 80085ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ce:	f000 f8e5 	bl	800879c <_malloc_r>
 80085d2:	4604      	mov	r4, r0
 80085d4:	b140      	cbz	r0, 80085e8 <__sfmoreglue+0x28>
 80085d6:	2100      	movs	r1, #0
 80085d8:	e9c0 1600 	strd	r1, r6, [r0]
 80085dc:	300c      	adds	r0, #12
 80085de:	60a0      	str	r0, [r4, #8]
 80085e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085e4:	f7ff ffa2 	bl	800852c <memset>
 80085e8:	4620      	mov	r0, r4
 80085ea:	bd70      	pop	{r4, r5, r6, pc}

080085ec <__sfp_lock_acquire>:
 80085ec:	4801      	ldr	r0, [pc, #4]	; (80085f4 <__sfp_lock_acquire+0x8>)
 80085ee:	f000 b8b3 	b.w	8008758 <__retarget_lock_acquire_recursive>
 80085f2:	bf00      	nop
 80085f4:	2000080d 	.word	0x2000080d

080085f8 <__sfp_lock_release>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sfp_lock_release+0x8>)
 80085fa:	f000 b8ae 	b.w	800875a <__retarget_lock_release_recursive>
 80085fe:	bf00      	nop
 8008600:	2000080d 	.word	0x2000080d

08008604 <__sinit_lock_acquire>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sinit_lock_acquire+0x8>)
 8008606:	f000 b8a7 	b.w	8008758 <__retarget_lock_acquire_recursive>
 800860a:	bf00      	nop
 800860c:	2000080e 	.word	0x2000080e

08008610 <__sinit_lock_release>:
 8008610:	4801      	ldr	r0, [pc, #4]	; (8008618 <__sinit_lock_release+0x8>)
 8008612:	f000 b8a2 	b.w	800875a <__retarget_lock_release_recursive>
 8008616:	bf00      	nop
 8008618:	2000080e 	.word	0x2000080e

0800861c <__sinit>:
 800861c:	b510      	push	{r4, lr}
 800861e:	4604      	mov	r4, r0
 8008620:	f7ff fff0 	bl	8008604 <__sinit_lock_acquire>
 8008624:	69a3      	ldr	r3, [r4, #24]
 8008626:	b11b      	cbz	r3, 8008630 <__sinit+0x14>
 8008628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800862c:	f7ff bff0 	b.w	8008610 <__sinit_lock_release>
 8008630:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008634:	6523      	str	r3, [r4, #80]	; 0x50
 8008636:	4b13      	ldr	r3, [pc, #76]	; (8008684 <__sinit+0x68>)
 8008638:	4a13      	ldr	r2, [pc, #76]	; (8008688 <__sinit+0x6c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	62a2      	str	r2, [r4, #40]	; 0x28
 800863e:	42a3      	cmp	r3, r4
 8008640:	bf04      	itt	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	61a3      	streq	r3, [r4, #24]
 8008646:	4620      	mov	r0, r4
 8008648:	f000 f820 	bl	800868c <__sfp>
 800864c:	6060      	str	r0, [r4, #4]
 800864e:	4620      	mov	r0, r4
 8008650:	f000 f81c 	bl	800868c <__sfp>
 8008654:	60a0      	str	r0, [r4, #8]
 8008656:	4620      	mov	r0, r4
 8008658:	f000 f818 	bl	800868c <__sfp>
 800865c:	2200      	movs	r2, #0
 800865e:	60e0      	str	r0, [r4, #12]
 8008660:	2104      	movs	r1, #4
 8008662:	6860      	ldr	r0, [r4, #4]
 8008664:	f7ff ff82 	bl	800856c <std>
 8008668:	68a0      	ldr	r0, [r4, #8]
 800866a:	2201      	movs	r2, #1
 800866c:	2109      	movs	r1, #9
 800866e:	f7ff ff7d 	bl	800856c <std>
 8008672:	68e0      	ldr	r0, [r4, #12]
 8008674:	2202      	movs	r2, #2
 8008676:	2112      	movs	r1, #18
 8008678:	f7ff ff78 	bl	800856c <std>
 800867c:	2301      	movs	r3, #1
 800867e:	61a3      	str	r3, [r4, #24]
 8008680:	e7d2      	b.n	8008628 <__sinit+0xc>
 8008682:	bf00      	nop
 8008684:	080094d8 	.word	0x080094d8
 8008688:	080085b5 	.word	0x080085b5

0800868c <__sfp>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	4607      	mov	r7, r0
 8008690:	f7ff ffac 	bl	80085ec <__sfp_lock_acquire>
 8008694:	4b1e      	ldr	r3, [pc, #120]	; (8008710 <__sfp+0x84>)
 8008696:	681e      	ldr	r6, [r3, #0]
 8008698:	69b3      	ldr	r3, [r6, #24]
 800869a:	b913      	cbnz	r3, 80086a2 <__sfp+0x16>
 800869c:	4630      	mov	r0, r6
 800869e:	f7ff ffbd 	bl	800861c <__sinit>
 80086a2:	3648      	adds	r6, #72	; 0x48
 80086a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	d503      	bpl.n	80086b4 <__sfp+0x28>
 80086ac:	6833      	ldr	r3, [r6, #0]
 80086ae:	b30b      	cbz	r3, 80086f4 <__sfp+0x68>
 80086b0:	6836      	ldr	r6, [r6, #0]
 80086b2:	e7f7      	b.n	80086a4 <__sfp+0x18>
 80086b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086b8:	b9d5      	cbnz	r5, 80086f0 <__sfp+0x64>
 80086ba:	4b16      	ldr	r3, [pc, #88]	; (8008714 <__sfp+0x88>)
 80086bc:	60e3      	str	r3, [r4, #12]
 80086be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086c2:	6665      	str	r5, [r4, #100]	; 0x64
 80086c4:	f000 f847 	bl	8008756 <__retarget_lock_init_recursive>
 80086c8:	f7ff ff96 	bl	80085f8 <__sfp_lock_release>
 80086cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086d4:	6025      	str	r5, [r4, #0]
 80086d6:	61a5      	str	r5, [r4, #24]
 80086d8:	2208      	movs	r2, #8
 80086da:	4629      	mov	r1, r5
 80086dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086e0:	f7ff ff24 	bl	800852c <memset>
 80086e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086ec:	4620      	mov	r0, r4
 80086ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086f0:	3468      	adds	r4, #104	; 0x68
 80086f2:	e7d9      	b.n	80086a8 <__sfp+0x1c>
 80086f4:	2104      	movs	r1, #4
 80086f6:	4638      	mov	r0, r7
 80086f8:	f7ff ff62 	bl	80085c0 <__sfmoreglue>
 80086fc:	4604      	mov	r4, r0
 80086fe:	6030      	str	r0, [r6, #0]
 8008700:	2800      	cmp	r0, #0
 8008702:	d1d5      	bne.n	80086b0 <__sfp+0x24>
 8008704:	f7ff ff78 	bl	80085f8 <__sfp_lock_release>
 8008708:	230c      	movs	r3, #12
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	e7ee      	b.n	80086ec <__sfp+0x60>
 800870e:	bf00      	nop
 8008710:	080094d8 	.word	0x080094d8
 8008714:	ffff0001 	.word	0xffff0001

08008718 <_fwalk_reent>:
 8008718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800871c:	4606      	mov	r6, r0
 800871e:	4688      	mov	r8, r1
 8008720:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008724:	2700      	movs	r7, #0
 8008726:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800872a:	f1b9 0901 	subs.w	r9, r9, #1
 800872e:	d505      	bpl.n	800873c <_fwalk_reent+0x24>
 8008730:	6824      	ldr	r4, [r4, #0]
 8008732:	2c00      	cmp	r4, #0
 8008734:	d1f7      	bne.n	8008726 <_fwalk_reent+0xe>
 8008736:	4638      	mov	r0, r7
 8008738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800873c:	89ab      	ldrh	r3, [r5, #12]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d907      	bls.n	8008752 <_fwalk_reent+0x3a>
 8008742:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008746:	3301      	adds	r3, #1
 8008748:	d003      	beq.n	8008752 <_fwalk_reent+0x3a>
 800874a:	4629      	mov	r1, r5
 800874c:	4630      	mov	r0, r6
 800874e:	47c0      	blx	r8
 8008750:	4307      	orrs	r7, r0
 8008752:	3568      	adds	r5, #104	; 0x68
 8008754:	e7e9      	b.n	800872a <_fwalk_reent+0x12>

08008756 <__retarget_lock_init_recursive>:
 8008756:	4770      	bx	lr

08008758 <__retarget_lock_acquire_recursive>:
 8008758:	4770      	bx	lr

0800875a <__retarget_lock_release_recursive>:
 800875a:	4770      	bx	lr

0800875c <sbrk_aligned>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	4e0e      	ldr	r6, [pc, #56]	; (8008798 <sbrk_aligned+0x3c>)
 8008760:	460c      	mov	r4, r1
 8008762:	6831      	ldr	r1, [r6, #0]
 8008764:	4605      	mov	r5, r0
 8008766:	b911      	cbnz	r1, 800876e <sbrk_aligned+0x12>
 8008768:	f000 fb7a 	bl	8008e60 <_sbrk_r>
 800876c:	6030      	str	r0, [r6, #0]
 800876e:	4621      	mov	r1, r4
 8008770:	4628      	mov	r0, r5
 8008772:	f000 fb75 	bl	8008e60 <_sbrk_r>
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	d00a      	beq.n	8008790 <sbrk_aligned+0x34>
 800877a:	1cc4      	adds	r4, r0, #3
 800877c:	f024 0403 	bic.w	r4, r4, #3
 8008780:	42a0      	cmp	r0, r4
 8008782:	d007      	beq.n	8008794 <sbrk_aligned+0x38>
 8008784:	1a21      	subs	r1, r4, r0
 8008786:	4628      	mov	r0, r5
 8008788:	f000 fb6a 	bl	8008e60 <_sbrk_r>
 800878c:	3001      	adds	r0, #1
 800878e:	d101      	bne.n	8008794 <sbrk_aligned+0x38>
 8008790:	f04f 34ff 	mov.w	r4, #4294967295
 8008794:	4620      	mov	r0, r4
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	20000814 	.word	0x20000814

0800879c <_malloc_r>:
 800879c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a0:	1ccd      	adds	r5, r1, #3
 80087a2:	f025 0503 	bic.w	r5, r5, #3
 80087a6:	3508      	adds	r5, #8
 80087a8:	2d0c      	cmp	r5, #12
 80087aa:	bf38      	it	cc
 80087ac:	250c      	movcc	r5, #12
 80087ae:	2d00      	cmp	r5, #0
 80087b0:	4607      	mov	r7, r0
 80087b2:	db01      	blt.n	80087b8 <_malloc_r+0x1c>
 80087b4:	42a9      	cmp	r1, r5
 80087b6:	d905      	bls.n	80087c4 <_malloc_r+0x28>
 80087b8:	230c      	movs	r3, #12
 80087ba:	603b      	str	r3, [r7, #0]
 80087bc:	2600      	movs	r6, #0
 80087be:	4630      	mov	r0, r6
 80087c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c4:	4e2e      	ldr	r6, [pc, #184]	; (8008880 <_malloc_r+0xe4>)
 80087c6:	f000 fdbb 	bl	8009340 <__malloc_lock>
 80087ca:	6833      	ldr	r3, [r6, #0]
 80087cc:	461c      	mov	r4, r3
 80087ce:	bb34      	cbnz	r4, 800881e <_malloc_r+0x82>
 80087d0:	4629      	mov	r1, r5
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7ff ffc2 	bl	800875c <sbrk_aligned>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	4604      	mov	r4, r0
 80087dc:	d14d      	bne.n	800887a <_malloc_r+0xde>
 80087de:	6834      	ldr	r4, [r6, #0]
 80087e0:	4626      	mov	r6, r4
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	d140      	bne.n	8008868 <_malloc_r+0xcc>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	4631      	mov	r1, r6
 80087ea:	4638      	mov	r0, r7
 80087ec:	eb04 0803 	add.w	r8, r4, r3
 80087f0:	f000 fb36 	bl	8008e60 <_sbrk_r>
 80087f4:	4580      	cmp	r8, r0
 80087f6:	d13a      	bne.n	800886e <_malloc_r+0xd2>
 80087f8:	6821      	ldr	r1, [r4, #0]
 80087fa:	3503      	adds	r5, #3
 80087fc:	1a6d      	subs	r5, r5, r1
 80087fe:	f025 0503 	bic.w	r5, r5, #3
 8008802:	3508      	adds	r5, #8
 8008804:	2d0c      	cmp	r5, #12
 8008806:	bf38      	it	cc
 8008808:	250c      	movcc	r5, #12
 800880a:	4629      	mov	r1, r5
 800880c:	4638      	mov	r0, r7
 800880e:	f7ff ffa5 	bl	800875c <sbrk_aligned>
 8008812:	3001      	adds	r0, #1
 8008814:	d02b      	beq.n	800886e <_malloc_r+0xd2>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	442b      	add	r3, r5
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	e00e      	b.n	800883c <_malloc_r+0xa0>
 800881e:	6822      	ldr	r2, [r4, #0]
 8008820:	1b52      	subs	r2, r2, r5
 8008822:	d41e      	bmi.n	8008862 <_malloc_r+0xc6>
 8008824:	2a0b      	cmp	r2, #11
 8008826:	d916      	bls.n	8008856 <_malloc_r+0xba>
 8008828:	1961      	adds	r1, r4, r5
 800882a:	42a3      	cmp	r3, r4
 800882c:	6025      	str	r5, [r4, #0]
 800882e:	bf18      	it	ne
 8008830:	6059      	strne	r1, [r3, #4]
 8008832:	6863      	ldr	r3, [r4, #4]
 8008834:	bf08      	it	eq
 8008836:	6031      	streq	r1, [r6, #0]
 8008838:	5162      	str	r2, [r4, r5]
 800883a:	604b      	str	r3, [r1, #4]
 800883c:	4638      	mov	r0, r7
 800883e:	f104 060b 	add.w	r6, r4, #11
 8008842:	f000 fd83 	bl	800934c <__malloc_unlock>
 8008846:	f026 0607 	bic.w	r6, r6, #7
 800884a:	1d23      	adds	r3, r4, #4
 800884c:	1af2      	subs	r2, r6, r3
 800884e:	d0b6      	beq.n	80087be <_malloc_r+0x22>
 8008850:	1b9b      	subs	r3, r3, r6
 8008852:	50a3      	str	r3, [r4, r2]
 8008854:	e7b3      	b.n	80087be <_malloc_r+0x22>
 8008856:	6862      	ldr	r2, [r4, #4]
 8008858:	42a3      	cmp	r3, r4
 800885a:	bf0c      	ite	eq
 800885c:	6032      	streq	r2, [r6, #0]
 800885e:	605a      	strne	r2, [r3, #4]
 8008860:	e7ec      	b.n	800883c <_malloc_r+0xa0>
 8008862:	4623      	mov	r3, r4
 8008864:	6864      	ldr	r4, [r4, #4]
 8008866:	e7b2      	b.n	80087ce <_malloc_r+0x32>
 8008868:	4634      	mov	r4, r6
 800886a:	6876      	ldr	r6, [r6, #4]
 800886c:	e7b9      	b.n	80087e2 <_malloc_r+0x46>
 800886e:	230c      	movs	r3, #12
 8008870:	603b      	str	r3, [r7, #0]
 8008872:	4638      	mov	r0, r7
 8008874:	f000 fd6a 	bl	800934c <__malloc_unlock>
 8008878:	e7a1      	b.n	80087be <_malloc_r+0x22>
 800887a:	6025      	str	r5, [r4, #0]
 800887c:	e7de      	b.n	800883c <_malloc_r+0xa0>
 800887e:	bf00      	nop
 8008880:	20000810 	.word	0x20000810

08008884 <__sfputc_r>:
 8008884:	6893      	ldr	r3, [r2, #8]
 8008886:	3b01      	subs	r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	b410      	push	{r4}
 800888c:	6093      	str	r3, [r2, #8]
 800888e:	da08      	bge.n	80088a2 <__sfputc_r+0x1e>
 8008890:	6994      	ldr	r4, [r2, #24]
 8008892:	42a3      	cmp	r3, r4
 8008894:	db01      	blt.n	800889a <__sfputc_r+0x16>
 8008896:	290a      	cmp	r1, #10
 8008898:	d103      	bne.n	80088a2 <__sfputc_r+0x1e>
 800889a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800889e:	f000 bb33 	b.w	8008f08 <__swbuf_r>
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	1c58      	adds	r0, r3, #1
 80088a6:	6010      	str	r0, [r2, #0]
 80088a8:	7019      	strb	r1, [r3, #0]
 80088aa:	4608      	mov	r0, r1
 80088ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <__sfputs_r>:
 80088b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	4614      	mov	r4, r2
 80088ba:	18d5      	adds	r5, r2, r3
 80088bc:	42ac      	cmp	r4, r5
 80088be:	d101      	bne.n	80088c4 <__sfputs_r+0x12>
 80088c0:	2000      	movs	r0, #0
 80088c2:	e007      	b.n	80088d4 <__sfputs_r+0x22>
 80088c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088c8:	463a      	mov	r2, r7
 80088ca:	4630      	mov	r0, r6
 80088cc:	f7ff ffda 	bl	8008884 <__sfputc_r>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d1f3      	bne.n	80088bc <__sfputs_r+0xa>
 80088d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088d8 <_vfiprintf_r>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	460d      	mov	r5, r1
 80088de:	b09d      	sub	sp, #116	; 0x74
 80088e0:	4614      	mov	r4, r2
 80088e2:	4698      	mov	r8, r3
 80088e4:	4606      	mov	r6, r0
 80088e6:	b118      	cbz	r0, 80088f0 <_vfiprintf_r+0x18>
 80088e8:	6983      	ldr	r3, [r0, #24]
 80088ea:	b90b      	cbnz	r3, 80088f0 <_vfiprintf_r+0x18>
 80088ec:	f7ff fe96 	bl	800861c <__sinit>
 80088f0:	4b89      	ldr	r3, [pc, #548]	; (8008b18 <_vfiprintf_r+0x240>)
 80088f2:	429d      	cmp	r5, r3
 80088f4:	d11b      	bne.n	800892e <_vfiprintf_r+0x56>
 80088f6:	6875      	ldr	r5, [r6, #4]
 80088f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088fa:	07d9      	lsls	r1, r3, #31
 80088fc:	d405      	bmi.n	800890a <_vfiprintf_r+0x32>
 80088fe:	89ab      	ldrh	r3, [r5, #12]
 8008900:	059a      	lsls	r2, r3, #22
 8008902:	d402      	bmi.n	800890a <_vfiprintf_r+0x32>
 8008904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008906:	f7ff ff27 	bl	8008758 <__retarget_lock_acquire_recursive>
 800890a:	89ab      	ldrh	r3, [r5, #12]
 800890c:	071b      	lsls	r3, r3, #28
 800890e:	d501      	bpl.n	8008914 <_vfiprintf_r+0x3c>
 8008910:	692b      	ldr	r3, [r5, #16]
 8008912:	b9eb      	cbnz	r3, 8008950 <_vfiprintf_r+0x78>
 8008914:	4629      	mov	r1, r5
 8008916:	4630      	mov	r0, r6
 8008918:	f000 fb5a 	bl	8008fd0 <__swsetup_r>
 800891c:	b1c0      	cbz	r0, 8008950 <_vfiprintf_r+0x78>
 800891e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008920:	07dc      	lsls	r4, r3, #31
 8008922:	d50e      	bpl.n	8008942 <_vfiprintf_r+0x6a>
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	b01d      	add	sp, #116	; 0x74
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	4b7b      	ldr	r3, [pc, #492]	; (8008b1c <_vfiprintf_r+0x244>)
 8008930:	429d      	cmp	r5, r3
 8008932:	d101      	bne.n	8008938 <_vfiprintf_r+0x60>
 8008934:	68b5      	ldr	r5, [r6, #8]
 8008936:	e7df      	b.n	80088f8 <_vfiprintf_r+0x20>
 8008938:	4b79      	ldr	r3, [pc, #484]	; (8008b20 <_vfiprintf_r+0x248>)
 800893a:	429d      	cmp	r5, r3
 800893c:	bf08      	it	eq
 800893e:	68f5      	ldreq	r5, [r6, #12]
 8008940:	e7da      	b.n	80088f8 <_vfiprintf_r+0x20>
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	0598      	lsls	r0, r3, #22
 8008946:	d4ed      	bmi.n	8008924 <_vfiprintf_r+0x4c>
 8008948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800894a:	f7ff ff06 	bl	800875a <__retarget_lock_release_recursive>
 800894e:	e7e9      	b.n	8008924 <_vfiprintf_r+0x4c>
 8008950:	2300      	movs	r3, #0
 8008952:	9309      	str	r3, [sp, #36]	; 0x24
 8008954:	2320      	movs	r3, #32
 8008956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800895a:	f8cd 800c 	str.w	r8, [sp, #12]
 800895e:	2330      	movs	r3, #48	; 0x30
 8008960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b24 <_vfiprintf_r+0x24c>
 8008964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008968:	f04f 0901 	mov.w	r9, #1
 800896c:	4623      	mov	r3, r4
 800896e:	469a      	mov	sl, r3
 8008970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008974:	b10a      	cbz	r2, 800897a <_vfiprintf_r+0xa2>
 8008976:	2a25      	cmp	r2, #37	; 0x25
 8008978:	d1f9      	bne.n	800896e <_vfiprintf_r+0x96>
 800897a:	ebba 0b04 	subs.w	fp, sl, r4
 800897e:	d00b      	beq.n	8008998 <_vfiprintf_r+0xc0>
 8008980:	465b      	mov	r3, fp
 8008982:	4622      	mov	r2, r4
 8008984:	4629      	mov	r1, r5
 8008986:	4630      	mov	r0, r6
 8008988:	f7ff ff93 	bl	80088b2 <__sfputs_r>
 800898c:	3001      	adds	r0, #1
 800898e:	f000 80aa 	beq.w	8008ae6 <_vfiprintf_r+0x20e>
 8008992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008994:	445a      	add	r2, fp
 8008996:	9209      	str	r2, [sp, #36]	; 0x24
 8008998:	f89a 3000 	ldrb.w	r3, [sl]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 80a2 	beq.w	8008ae6 <_vfiprintf_r+0x20e>
 80089a2:	2300      	movs	r3, #0
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295
 80089a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ac:	f10a 0a01 	add.w	sl, sl, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b8:	931a      	str	r3, [sp, #104]	; 0x68
 80089ba:	4654      	mov	r4, sl
 80089bc:	2205      	movs	r2, #5
 80089be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c2:	4858      	ldr	r0, [pc, #352]	; (8008b24 <_vfiprintf_r+0x24c>)
 80089c4:	f7f7 fc3c 	bl	8000240 <memchr>
 80089c8:	9a04      	ldr	r2, [sp, #16]
 80089ca:	b9d8      	cbnz	r0, 8008a04 <_vfiprintf_r+0x12c>
 80089cc:	06d1      	lsls	r1, r2, #27
 80089ce:	bf44      	itt	mi
 80089d0:	2320      	movmi	r3, #32
 80089d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d6:	0713      	lsls	r3, r2, #28
 80089d8:	bf44      	itt	mi
 80089da:	232b      	movmi	r3, #43	; 0x2b
 80089dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089e0:	f89a 3000 	ldrb.w	r3, [sl]
 80089e4:	2b2a      	cmp	r3, #42	; 0x2a
 80089e6:	d015      	beq.n	8008a14 <_vfiprintf_r+0x13c>
 80089e8:	9a07      	ldr	r2, [sp, #28]
 80089ea:	4654      	mov	r4, sl
 80089ec:	2000      	movs	r0, #0
 80089ee:	f04f 0c0a 	mov.w	ip, #10
 80089f2:	4621      	mov	r1, r4
 80089f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f8:	3b30      	subs	r3, #48	; 0x30
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	d94e      	bls.n	8008a9c <_vfiprintf_r+0x1c4>
 80089fe:	b1b0      	cbz	r0, 8008a2e <_vfiprintf_r+0x156>
 8008a00:	9207      	str	r2, [sp, #28]
 8008a02:	e014      	b.n	8008a2e <_vfiprintf_r+0x156>
 8008a04:	eba0 0308 	sub.w	r3, r0, r8
 8008a08:	fa09 f303 	lsl.w	r3, r9, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	9304      	str	r3, [sp, #16]
 8008a10:	46a2      	mov	sl, r4
 8008a12:	e7d2      	b.n	80089ba <_vfiprintf_r+0xe2>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	1d19      	adds	r1, r3, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	9103      	str	r1, [sp, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfbb      	ittet	lt
 8008a20:	425b      	neglt	r3, r3
 8008a22:	f042 0202 	orrlt.w	r2, r2, #2
 8008a26:	9307      	strge	r3, [sp, #28]
 8008a28:	9307      	strlt	r3, [sp, #28]
 8008a2a:	bfb8      	it	lt
 8008a2c:	9204      	strlt	r2, [sp, #16]
 8008a2e:	7823      	ldrb	r3, [r4, #0]
 8008a30:	2b2e      	cmp	r3, #46	; 0x2e
 8008a32:	d10c      	bne.n	8008a4e <_vfiprintf_r+0x176>
 8008a34:	7863      	ldrb	r3, [r4, #1]
 8008a36:	2b2a      	cmp	r3, #42	; 0x2a
 8008a38:	d135      	bne.n	8008aa6 <_vfiprintf_r+0x1ce>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	1d1a      	adds	r2, r3, #4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	9203      	str	r2, [sp, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bfb8      	it	lt
 8008a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a4a:	3402      	adds	r4, #2
 8008a4c:	9305      	str	r3, [sp, #20]
 8008a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b34 <_vfiprintf_r+0x25c>
 8008a52:	7821      	ldrb	r1, [r4, #0]
 8008a54:	2203      	movs	r2, #3
 8008a56:	4650      	mov	r0, sl
 8008a58:	f7f7 fbf2 	bl	8000240 <memchr>
 8008a5c:	b140      	cbz	r0, 8008a70 <_vfiprintf_r+0x198>
 8008a5e:	2340      	movs	r3, #64	; 0x40
 8008a60:	eba0 000a 	sub.w	r0, r0, sl
 8008a64:	fa03 f000 	lsl.w	r0, r3, r0
 8008a68:	9b04      	ldr	r3, [sp, #16]
 8008a6a:	4303      	orrs	r3, r0
 8008a6c:	3401      	adds	r4, #1
 8008a6e:	9304      	str	r3, [sp, #16]
 8008a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a74:	482c      	ldr	r0, [pc, #176]	; (8008b28 <_vfiprintf_r+0x250>)
 8008a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a7a:	2206      	movs	r2, #6
 8008a7c:	f7f7 fbe0 	bl	8000240 <memchr>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d03f      	beq.n	8008b04 <_vfiprintf_r+0x22c>
 8008a84:	4b29      	ldr	r3, [pc, #164]	; (8008b2c <_vfiprintf_r+0x254>)
 8008a86:	bb1b      	cbnz	r3, 8008ad0 <_vfiprintf_r+0x1f8>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	3307      	adds	r3, #7
 8008a8c:	f023 0307 	bic.w	r3, r3, #7
 8008a90:	3308      	adds	r3, #8
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a96:	443b      	add	r3, r7
 8008a98:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9a:	e767      	b.n	800896c <_vfiprintf_r+0x94>
 8008a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	e7a5      	b.n	80089f2 <_vfiprintf_r+0x11a>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	3401      	adds	r4, #1
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	4619      	mov	r1, r3
 8008aae:	f04f 0c0a 	mov.w	ip, #10
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab8:	3a30      	subs	r2, #48	; 0x30
 8008aba:	2a09      	cmp	r2, #9
 8008abc:	d903      	bls.n	8008ac6 <_vfiprintf_r+0x1ee>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0c5      	beq.n	8008a4e <_vfiprintf_r+0x176>
 8008ac2:	9105      	str	r1, [sp, #20]
 8008ac4:	e7c3      	b.n	8008a4e <_vfiprintf_r+0x176>
 8008ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aca:	4604      	mov	r4, r0
 8008acc:	2301      	movs	r3, #1
 8008ace:	e7f0      	b.n	8008ab2 <_vfiprintf_r+0x1da>
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	462a      	mov	r2, r5
 8008ad6:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <_vfiprintf_r+0x258>)
 8008ad8:	a904      	add	r1, sp, #16
 8008ada:	4630      	mov	r0, r6
 8008adc:	f3af 8000 	nop.w
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	1c78      	adds	r0, r7, #1
 8008ae4:	d1d6      	bne.n	8008a94 <_vfiprintf_r+0x1bc>
 8008ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae8:	07d9      	lsls	r1, r3, #31
 8008aea:	d405      	bmi.n	8008af8 <_vfiprintf_r+0x220>
 8008aec:	89ab      	ldrh	r3, [r5, #12]
 8008aee:	059a      	lsls	r2, r3, #22
 8008af0:	d402      	bmi.n	8008af8 <_vfiprintf_r+0x220>
 8008af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008af4:	f7ff fe31 	bl	800875a <__retarget_lock_release_recursive>
 8008af8:	89ab      	ldrh	r3, [r5, #12]
 8008afa:	065b      	lsls	r3, r3, #25
 8008afc:	f53f af12 	bmi.w	8008924 <_vfiprintf_r+0x4c>
 8008b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b02:	e711      	b.n	8008928 <_vfiprintf_r+0x50>
 8008b04:	ab03      	add	r3, sp, #12
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	462a      	mov	r2, r5
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <_vfiprintf_r+0x258>)
 8008b0c:	a904      	add	r1, sp, #16
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f000 f880 	bl	8008c14 <_printf_i>
 8008b14:	e7e4      	b.n	8008ae0 <_vfiprintf_r+0x208>
 8008b16:	bf00      	nop
 8008b18:	080094fc 	.word	0x080094fc
 8008b1c:	0800951c 	.word	0x0800951c
 8008b20:	080094dc 	.word	0x080094dc
 8008b24:	0800953c 	.word	0x0800953c
 8008b28:	08009546 	.word	0x08009546
 8008b2c:	00000000 	.word	0x00000000
 8008b30:	080088b3 	.word	0x080088b3
 8008b34:	08009542 	.word	0x08009542

08008b38 <_printf_common>:
 8008b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	4699      	mov	r9, r3
 8008b40:	688a      	ldr	r2, [r1, #8]
 8008b42:	690b      	ldr	r3, [r1, #16]
 8008b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	bfb8      	it	lt
 8008b4c:	4613      	movlt	r3, r2
 8008b4e:	6033      	str	r3, [r6, #0]
 8008b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b54:	4607      	mov	r7, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	b10a      	cbz	r2, 8008b5e <_printf_common+0x26>
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	0699      	lsls	r1, r3, #26
 8008b62:	bf42      	ittt	mi
 8008b64:	6833      	ldrmi	r3, [r6, #0]
 8008b66:	3302      	addmi	r3, #2
 8008b68:	6033      	strmi	r3, [r6, #0]
 8008b6a:	6825      	ldr	r5, [r4, #0]
 8008b6c:	f015 0506 	ands.w	r5, r5, #6
 8008b70:	d106      	bne.n	8008b80 <_printf_common+0x48>
 8008b72:	f104 0a19 	add.w	sl, r4, #25
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	6832      	ldr	r2, [r6, #0]
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	dc26      	bgt.n	8008bce <_printf_common+0x96>
 8008b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b84:	1e13      	subs	r3, r2, #0
 8008b86:	6822      	ldr	r2, [r4, #0]
 8008b88:	bf18      	it	ne
 8008b8a:	2301      	movne	r3, #1
 8008b8c:	0692      	lsls	r2, r2, #26
 8008b8e:	d42b      	bmi.n	8008be8 <_printf_common+0xb0>
 8008b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b94:	4649      	mov	r1, r9
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c0      	blx	r8
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d01e      	beq.n	8008bdc <_printf_common+0xa4>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	68e5      	ldr	r5, [r4, #12]
 8008ba2:	6832      	ldr	r2, [r6, #0]
 8008ba4:	f003 0306 	and.w	r3, r3, #6
 8008ba8:	2b04      	cmp	r3, #4
 8008baa:	bf08      	it	eq
 8008bac:	1aad      	subeq	r5, r5, r2
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	6922      	ldr	r2, [r4, #16]
 8008bb2:	bf0c      	ite	eq
 8008bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb8:	2500      	movne	r5, #0
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	bfc4      	itt	gt
 8008bbe:	1a9b      	subgt	r3, r3, r2
 8008bc0:	18ed      	addgt	r5, r5, r3
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	341a      	adds	r4, #26
 8008bc6:	42b5      	cmp	r5, r6
 8008bc8:	d11a      	bne.n	8008c00 <_printf_common+0xc8>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e008      	b.n	8008be0 <_printf_common+0xa8>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4652      	mov	r2, sl
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	47c0      	blx	r8
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d103      	bne.n	8008be4 <_printf_common+0xac>
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be4:	3501      	adds	r5, #1
 8008be6:	e7c6      	b.n	8008b76 <_printf_common+0x3e>
 8008be8:	18e1      	adds	r1, r4, r3
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	2030      	movs	r0, #48	; 0x30
 8008bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bf2:	4422      	add	r2, r4
 8008bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	e7c7      	b.n	8008b90 <_printf_common+0x58>
 8008c00:	2301      	movs	r3, #1
 8008c02:	4622      	mov	r2, r4
 8008c04:	4649      	mov	r1, r9
 8008c06:	4638      	mov	r0, r7
 8008c08:	47c0      	blx	r8
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d0e6      	beq.n	8008bdc <_printf_common+0xa4>
 8008c0e:	3601      	adds	r6, #1
 8008c10:	e7d9      	b.n	8008bc6 <_printf_common+0x8e>
	...

08008c14 <_printf_i>:
 8008c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	7e0f      	ldrb	r7, [r1, #24]
 8008c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c1c:	2f78      	cmp	r7, #120	; 0x78
 8008c1e:	4691      	mov	r9, r2
 8008c20:	4680      	mov	r8, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	469a      	mov	sl, r3
 8008c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c2a:	d807      	bhi.n	8008c3c <_printf_i+0x28>
 8008c2c:	2f62      	cmp	r7, #98	; 0x62
 8008c2e:	d80a      	bhi.n	8008c46 <_printf_i+0x32>
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	f000 80d8 	beq.w	8008de6 <_printf_i+0x1d2>
 8008c36:	2f58      	cmp	r7, #88	; 0x58
 8008c38:	f000 80a3 	beq.w	8008d82 <_printf_i+0x16e>
 8008c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c44:	e03a      	b.n	8008cbc <_printf_i+0xa8>
 8008c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c4a:	2b15      	cmp	r3, #21
 8008c4c:	d8f6      	bhi.n	8008c3c <_printf_i+0x28>
 8008c4e:	a101      	add	r1, pc, #4	; (adr r1, 8008c54 <_printf_i+0x40>)
 8008c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008cc1 	.word	0x08008cc1
 8008c5c:	08008c3d 	.word	0x08008c3d
 8008c60:	08008c3d 	.word	0x08008c3d
 8008c64:	08008c3d 	.word	0x08008c3d
 8008c68:	08008c3d 	.word	0x08008c3d
 8008c6c:	08008cc1 	.word	0x08008cc1
 8008c70:	08008c3d 	.word	0x08008c3d
 8008c74:	08008c3d 	.word	0x08008c3d
 8008c78:	08008c3d 	.word	0x08008c3d
 8008c7c:	08008c3d 	.word	0x08008c3d
 8008c80:	08008dcd 	.word	0x08008dcd
 8008c84:	08008cf1 	.word	0x08008cf1
 8008c88:	08008daf 	.word	0x08008daf
 8008c8c:	08008c3d 	.word	0x08008c3d
 8008c90:	08008c3d 	.word	0x08008c3d
 8008c94:	08008def 	.word	0x08008def
 8008c98:	08008c3d 	.word	0x08008c3d
 8008c9c:	08008cf1 	.word	0x08008cf1
 8008ca0:	08008c3d 	.word	0x08008c3d
 8008ca4:	08008c3d 	.word	0x08008c3d
 8008ca8:	08008db7 	.word	0x08008db7
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	602a      	str	r2, [r5, #0]
 8008cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0a3      	b.n	8008e08 <_printf_i+0x1f4>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	6829      	ldr	r1, [r5, #0]
 8008cc4:	0606      	lsls	r6, r0, #24
 8008cc6:	f101 0304 	add.w	r3, r1, #4
 8008cca:	d50a      	bpl.n	8008ce2 <_printf_i+0xce>
 8008ccc:	680e      	ldr	r6, [r1, #0]
 8008cce:	602b      	str	r3, [r5, #0]
 8008cd0:	2e00      	cmp	r6, #0
 8008cd2:	da03      	bge.n	8008cdc <_printf_i+0xc8>
 8008cd4:	232d      	movs	r3, #45	; 0x2d
 8008cd6:	4276      	negs	r6, r6
 8008cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cdc:	485e      	ldr	r0, [pc, #376]	; (8008e58 <_printf_i+0x244>)
 8008cde:	230a      	movs	r3, #10
 8008ce0:	e019      	b.n	8008d16 <_printf_i+0x102>
 8008ce2:	680e      	ldr	r6, [r1, #0]
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cea:	bf18      	it	ne
 8008cec:	b236      	sxthne	r6, r6
 8008cee:	e7ef      	b.n	8008cd0 <_printf_i+0xbc>
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	6820      	ldr	r0, [r4, #0]
 8008cf4:	1d19      	adds	r1, r3, #4
 8008cf6:	6029      	str	r1, [r5, #0]
 8008cf8:	0601      	lsls	r1, r0, #24
 8008cfa:	d501      	bpl.n	8008d00 <_printf_i+0xec>
 8008cfc:	681e      	ldr	r6, [r3, #0]
 8008cfe:	e002      	b.n	8008d06 <_printf_i+0xf2>
 8008d00:	0646      	lsls	r6, r0, #25
 8008d02:	d5fb      	bpl.n	8008cfc <_printf_i+0xe8>
 8008d04:	881e      	ldrh	r6, [r3, #0]
 8008d06:	4854      	ldr	r0, [pc, #336]	; (8008e58 <_printf_i+0x244>)
 8008d08:	2f6f      	cmp	r7, #111	; 0x6f
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2308      	moveq	r3, #8
 8008d0e:	230a      	movne	r3, #10
 8008d10:	2100      	movs	r1, #0
 8008d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d16:	6865      	ldr	r5, [r4, #4]
 8008d18:	60a5      	str	r5, [r4, #8]
 8008d1a:	2d00      	cmp	r5, #0
 8008d1c:	bfa2      	ittt	ge
 8008d1e:	6821      	ldrge	r1, [r4, #0]
 8008d20:	f021 0104 	bicge.w	r1, r1, #4
 8008d24:	6021      	strge	r1, [r4, #0]
 8008d26:	b90e      	cbnz	r6, 8008d2c <_printf_i+0x118>
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	d04d      	beq.n	8008dc8 <_printf_i+0x1b4>
 8008d2c:	4615      	mov	r5, r2
 8008d2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d32:	fb03 6711 	mls	r7, r3, r1, r6
 8008d36:	5dc7      	ldrb	r7, [r0, r7]
 8008d38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d3c:	4637      	mov	r7, r6
 8008d3e:	42bb      	cmp	r3, r7
 8008d40:	460e      	mov	r6, r1
 8008d42:	d9f4      	bls.n	8008d2e <_printf_i+0x11a>
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d10b      	bne.n	8008d60 <_printf_i+0x14c>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	07de      	lsls	r6, r3, #31
 8008d4c:	d508      	bpl.n	8008d60 <_printf_i+0x14c>
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	6861      	ldr	r1, [r4, #4]
 8008d52:	4299      	cmp	r1, r3
 8008d54:	bfde      	ittt	le
 8008d56:	2330      	movle	r3, #48	; 0x30
 8008d58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d60:	1b52      	subs	r2, r2, r5
 8008d62:	6122      	str	r2, [r4, #16]
 8008d64:	f8cd a000 	str.w	sl, [sp]
 8008d68:	464b      	mov	r3, r9
 8008d6a:	aa03      	add	r2, sp, #12
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4640      	mov	r0, r8
 8008d70:	f7ff fee2 	bl	8008b38 <_printf_common>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d14c      	bne.n	8008e12 <_printf_i+0x1fe>
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7c:	b004      	add	sp, #16
 8008d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d82:	4835      	ldr	r0, [pc, #212]	; (8008e58 <_printf_i+0x244>)
 8008d84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d88:	6829      	ldr	r1, [r5, #0]
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d90:	6029      	str	r1, [r5, #0]
 8008d92:	061d      	lsls	r5, r3, #24
 8008d94:	d514      	bpl.n	8008dc0 <_printf_i+0x1ac>
 8008d96:	07df      	lsls	r7, r3, #31
 8008d98:	bf44      	itt	mi
 8008d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d9e:	6023      	strmi	r3, [r4, #0]
 8008da0:	b91e      	cbnz	r6, 8008daa <_printf_i+0x196>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	f023 0320 	bic.w	r3, r3, #32
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	2310      	movs	r3, #16
 8008dac:	e7b0      	b.n	8008d10 <_printf_i+0xfc>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	f043 0320 	orr.w	r3, r3, #32
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	2378      	movs	r3, #120	; 0x78
 8008db8:	4828      	ldr	r0, [pc, #160]	; (8008e5c <_printf_i+0x248>)
 8008dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dbe:	e7e3      	b.n	8008d88 <_printf_i+0x174>
 8008dc0:	0659      	lsls	r1, r3, #25
 8008dc2:	bf48      	it	mi
 8008dc4:	b2b6      	uxthmi	r6, r6
 8008dc6:	e7e6      	b.n	8008d96 <_printf_i+0x182>
 8008dc8:	4615      	mov	r5, r2
 8008dca:	e7bb      	b.n	8008d44 <_printf_i+0x130>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	6826      	ldr	r6, [r4, #0]
 8008dd0:	6961      	ldr	r1, [r4, #20]
 8008dd2:	1d18      	adds	r0, r3, #4
 8008dd4:	6028      	str	r0, [r5, #0]
 8008dd6:	0635      	lsls	r5, r6, #24
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	d501      	bpl.n	8008de0 <_printf_i+0x1cc>
 8008ddc:	6019      	str	r1, [r3, #0]
 8008dde:	e002      	b.n	8008de6 <_printf_i+0x1d2>
 8008de0:	0670      	lsls	r0, r6, #25
 8008de2:	d5fb      	bpl.n	8008ddc <_printf_i+0x1c8>
 8008de4:	8019      	strh	r1, [r3, #0]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	4615      	mov	r5, r2
 8008dec:	e7ba      	b.n	8008d64 <_printf_i+0x150>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	1d1a      	adds	r2, r3, #4
 8008df2:	602a      	str	r2, [r5, #0]
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	6862      	ldr	r2, [r4, #4]
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f7f7 fa20 	bl	8000240 <memchr>
 8008e00:	b108      	cbz	r0, 8008e06 <_printf_i+0x1f2>
 8008e02:	1b40      	subs	r0, r0, r5
 8008e04:	6060      	str	r0, [r4, #4]
 8008e06:	6863      	ldr	r3, [r4, #4]
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e10:	e7a8      	b.n	8008d64 <_printf_i+0x150>
 8008e12:	6923      	ldr	r3, [r4, #16]
 8008e14:	462a      	mov	r2, r5
 8008e16:	4649      	mov	r1, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	47d0      	blx	sl
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d0ab      	beq.n	8008d78 <_printf_i+0x164>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	079b      	lsls	r3, r3, #30
 8008e24:	d413      	bmi.n	8008e4e <_printf_i+0x23a>
 8008e26:	68e0      	ldr	r0, [r4, #12]
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	4298      	cmp	r0, r3
 8008e2c:	bfb8      	it	lt
 8008e2e:	4618      	movlt	r0, r3
 8008e30:	e7a4      	b.n	8008d7c <_printf_i+0x168>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4632      	mov	r2, r6
 8008e36:	4649      	mov	r1, r9
 8008e38:	4640      	mov	r0, r8
 8008e3a:	47d0      	blx	sl
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d09b      	beq.n	8008d78 <_printf_i+0x164>
 8008e40:	3501      	adds	r5, #1
 8008e42:	68e3      	ldr	r3, [r4, #12]
 8008e44:	9903      	ldr	r1, [sp, #12]
 8008e46:	1a5b      	subs	r3, r3, r1
 8008e48:	42ab      	cmp	r3, r5
 8008e4a:	dcf2      	bgt.n	8008e32 <_printf_i+0x21e>
 8008e4c:	e7eb      	b.n	8008e26 <_printf_i+0x212>
 8008e4e:	2500      	movs	r5, #0
 8008e50:	f104 0619 	add.w	r6, r4, #25
 8008e54:	e7f5      	b.n	8008e42 <_printf_i+0x22e>
 8008e56:	bf00      	nop
 8008e58:	0800954d 	.word	0x0800954d
 8008e5c:	0800955e 	.word	0x0800955e

08008e60 <_sbrk_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d06      	ldr	r5, [pc, #24]	; (8008e7c <_sbrk_r+0x1c>)
 8008e64:	2300      	movs	r3, #0
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	602b      	str	r3, [r5, #0]
 8008e6c:	f7fa f86e 	bl	8002f4c <_sbrk>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d102      	bne.n	8008e7a <_sbrk_r+0x1a>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b103      	cbz	r3, 8008e7a <_sbrk_r+0x1a>
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	20000818 	.word	0x20000818

08008e80 <__sread>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	460c      	mov	r4, r1
 8008e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e88:	f000 fab2 	bl	80093f0 <_read_r>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	bfab      	itete	ge
 8008e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e92:	89a3      	ldrhlt	r3, [r4, #12]
 8008e94:	181b      	addge	r3, r3, r0
 8008e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e9a:	bfac      	ite	ge
 8008e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e9e:	81a3      	strhlt	r3, [r4, #12]
 8008ea0:	bd10      	pop	{r4, pc}

08008ea2 <__swrite>:
 8008ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea6:	461f      	mov	r7, r3
 8008ea8:	898b      	ldrh	r3, [r1, #12]
 8008eaa:	05db      	lsls	r3, r3, #23
 8008eac:	4605      	mov	r5, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	d505      	bpl.n	8008ec0 <__swrite+0x1e>
 8008eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb8:	2302      	movs	r3, #2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f000 f9c8 	bl	8009250 <_lseek_r>
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eca:	81a3      	strh	r3, [r4, #12]
 8008ecc:	4632      	mov	r2, r6
 8008ece:	463b      	mov	r3, r7
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed6:	f000 b869 	b.w	8008fac <_write_r>

08008eda <__sseek>:
 8008eda:	b510      	push	{r4, lr}
 8008edc:	460c      	mov	r4, r1
 8008ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee2:	f000 f9b5 	bl	8009250 <_lseek_r>
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	bf15      	itete	ne
 8008eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ef6:	81a3      	strheq	r3, [r4, #12]
 8008ef8:	bf18      	it	ne
 8008efa:	81a3      	strhne	r3, [r4, #12]
 8008efc:	bd10      	pop	{r4, pc}

08008efe <__sclose>:
 8008efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f02:	f000 b8d3 	b.w	80090ac <_close_r>
	...

08008f08 <__swbuf_r>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	460e      	mov	r6, r1
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	4605      	mov	r5, r0
 8008f10:	b118      	cbz	r0, 8008f1a <__swbuf_r+0x12>
 8008f12:	6983      	ldr	r3, [r0, #24]
 8008f14:	b90b      	cbnz	r3, 8008f1a <__swbuf_r+0x12>
 8008f16:	f7ff fb81 	bl	800861c <__sinit>
 8008f1a:	4b21      	ldr	r3, [pc, #132]	; (8008fa0 <__swbuf_r+0x98>)
 8008f1c:	429c      	cmp	r4, r3
 8008f1e:	d12b      	bne.n	8008f78 <__swbuf_r+0x70>
 8008f20:	686c      	ldr	r4, [r5, #4]
 8008f22:	69a3      	ldr	r3, [r4, #24]
 8008f24:	60a3      	str	r3, [r4, #8]
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	071a      	lsls	r2, r3, #28
 8008f2a:	d52f      	bpl.n	8008f8c <__swbuf_r+0x84>
 8008f2c:	6923      	ldr	r3, [r4, #16]
 8008f2e:	b36b      	cbz	r3, 8008f8c <__swbuf_r+0x84>
 8008f30:	6923      	ldr	r3, [r4, #16]
 8008f32:	6820      	ldr	r0, [r4, #0]
 8008f34:	1ac0      	subs	r0, r0, r3
 8008f36:	6963      	ldr	r3, [r4, #20]
 8008f38:	b2f6      	uxtb	r6, r6
 8008f3a:	4283      	cmp	r3, r0
 8008f3c:	4637      	mov	r7, r6
 8008f3e:	dc04      	bgt.n	8008f4a <__swbuf_r+0x42>
 8008f40:	4621      	mov	r1, r4
 8008f42:	4628      	mov	r0, r5
 8008f44:	f000 f948 	bl	80091d8 <_fflush_r>
 8008f48:	bb30      	cbnz	r0, 8008f98 <__swbuf_r+0x90>
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	60a3      	str	r3, [r4, #8]
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	6022      	str	r2, [r4, #0]
 8008f56:	701e      	strb	r6, [r3, #0]
 8008f58:	6963      	ldr	r3, [r4, #20]
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	4283      	cmp	r3, r0
 8008f5e:	d004      	beq.n	8008f6a <__swbuf_r+0x62>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	07db      	lsls	r3, r3, #31
 8008f64:	d506      	bpl.n	8008f74 <__swbuf_r+0x6c>
 8008f66:	2e0a      	cmp	r6, #10
 8008f68:	d104      	bne.n	8008f74 <__swbuf_r+0x6c>
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f000 f933 	bl	80091d8 <_fflush_r>
 8008f72:	b988      	cbnz	r0, 8008f98 <__swbuf_r+0x90>
 8008f74:	4638      	mov	r0, r7
 8008f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <__swbuf_r+0x9c>)
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d101      	bne.n	8008f82 <__swbuf_r+0x7a>
 8008f7e:	68ac      	ldr	r4, [r5, #8]
 8008f80:	e7cf      	b.n	8008f22 <__swbuf_r+0x1a>
 8008f82:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <__swbuf_r+0xa0>)
 8008f84:	429c      	cmp	r4, r3
 8008f86:	bf08      	it	eq
 8008f88:	68ec      	ldreq	r4, [r5, #12]
 8008f8a:	e7ca      	b.n	8008f22 <__swbuf_r+0x1a>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 f81e 	bl	8008fd0 <__swsetup_r>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d0cb      	beq.n	8008f30 <__swbuf_r+0x28>
 8008f98:	f04f 37ff 	mov.w	r7, #4294967295
 8008f9c:	e7ea      	b.n	8008f74 <__swbuf_r+0x6c>
 8008f9e:	bf00      	nop
 8008fa0:	080094fc 	.word	0x080094fc
 8008fa4:	0800951c 	.word	0x0800951c
 8008fa8:	080094dc 	.word	0x080094dc

08008fac <_write_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	; (8008fcc <_write_r+0x20>)
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	602a      	str	r2, [r5, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f7f9 ff75 	bl	8002eaa <_write>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_write_r+0x1e>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_write_r+0x1e>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	20000818 	.word	0x20000818

08008fd0 <__swsetup_r>:
 8008fd0:	4b32      	ldr	r3, [pc, #200]	; (800909c <__swsetup_r+0xcc>)
 8008fd2:	b570      	push	{r4, r5, r6, lr}
 8008fd4:	681d      	ldr	r5, [r3, #0]
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	b125      	cbz	r5, 8008fe6 <__swsetup_r+0x16>
 8008fdc:	69ab      	ldr	r3, [r5, #24]
 8008fde:	b913      	cbnz	r3, 8008fe6 <__swsetup_r+0x16>
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f7ff fb1b 	bl	800861c <__sinit>
 8008fe6:	4b2e      	ldr	r3, [pc, #184]	; (80090a0 <__swsetup_r+0xd0>)
 8008fe8:	429c      	cmp	r4, r3
 8008fea:	d10f      	bne.n	800900c <__swsetup_r+0x3c>
 8008fec:	686c      	ldr	r4, [r5, #4]
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ff4:	0719      	lsls	r1, r3, #28
 8008ff6:	d42c      	bmi.n	8009052 <__swsetup_r+0x82>
 8008ff8:	06dd      	lsls	r5, r3, #27
 8008ffa:	d411      	bmi.n	8009020 <__swsetup_r+0x50>
 8008ffc:	2309      	movs	r3, #9
 8008ffe:	6033      	str	r3, [r6, #0]
 8009000:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009004:	81a3      	strh	r3, [r4, #12]
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	e03e      	b.n	800908a <__swsetup_r+0xba>
 800900c:	4b25      	ldr	r3, [pc, #148]	; (80090a4 <__swsetup_r+0xd4>)
 800900e:	429c      	cmp	r4, r3
 8009010:	d101      	bne.n	8009016 <__swsetup_r+0x46>
 8009012:	68ac      	ldr	r4, [r5, #8]
 8009014:	e7eb      	b.n	8008fee <__swsetup_r+0x1e>
 8009016:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <__swsetup_r+0xd8>)
 8009018:	429c      	cmp	r4, r3
 800901a:	bf08      	it	eq
 800901c:	68ec      	ldreq	r4, [r5, #12]
 800901e:	e7e6      	b.n	8008fee <__swsetup_r+0x1e>
 8009020:	0758      	lsls	r0, r3, #29
 8009022:	d512      	bpl.n	800904a <__swsetup_r+0x7a>
 8009024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009026:	b141      	cbz	r1, 800903a <__swsetup_r+0x6a>
 8009028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800902c:	4299      	cmp	r1, r3
 800902e:	d002      	beq.n	8009036 <__swsetup_r+0x66>
 8009030:	4630      	mov	r0, r6
 8009032:	f000 f991 	bl	8009358 <_free_r>
 8009036:	2300      	movs	r3, #0
 8009038:	6363      	str	r3, [r4, #52]	; 0x34
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009040:	81a3      	strh	r3, [r4, #12]
 8009042:	2300      	movs	r3, #0
 8009044:	6063      	str	r3, [r4, #4]
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	f043 0308 	orr.w	r3, r3, #8
 8009050:	81a3      	strh	r3, [r4, #12]
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	b94b      	cbnz	r3, 800906a <__swsetup_r+0x9a>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800905c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009060:	d003      	beq.n	800906a <__swsetup_r+0x9a>
 8009062:	4621      	mov	r1, r4
 8009064:	4630      	mov	r0, r6
 8009066:	f000 f92b 	bl	80092c0 <__smakebuf_r>
 800906a:	89a0      	ldrh	r0, [r4, #12]
 800906c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009070:	f010 0301 	ands.w	r3, r0, #1
 8009074:	d00a      	beq.n	800908c <__swsetup_r+0xbc>
 8009076:	2300      	movs	r3, #0
 8009078:	60a3      	str	r3, [r4, #8]
 800907a:	6963      	ldr	r3, [r4, #20]
 800907c:	425b      	negs	r3, r3
 800907e:	61a3      	str	r3, [r4, #24]
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	b943      	cbnz	r3, 8009096 <__swsetup_r+0xc6>
 8009084:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009088:	d1ba      	bne.n	8009000 <__swsetup_r+0x30>
 800908a:	bd70      	pop	{r4, r5, r6, pc}
 800908c:	0781      	lsls	r1, r0, #30
 800908e:	bf58      	it	pl
 8009090:	6963      	ldrpl	r3, [r4, #20]
 8009092:	60a3      	str	r3, [r4, #8]
 8009094:	e7f4      	b.n	8009080 <__swsetup_r+0xb0>
 8009096:	2000      	movs	r0, #0
 8009098:	e7f7      	b.n	800908a <__swsetup_r+0xba>
 800909a:	bf00      	nop
 800909c:	20000018 	.word	0x20000018
 80090a0:	080094fc 	.word	0x080094fc
 80090a4:	0800951c 	.word	0x0800951c
 80090a8:	080094dc 	.word	0x080094dc

080090ac <_close_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4d06      	ldr	r5, [pc, #24]	; (80090c8 <_close_r+0x1c>)
 80090b0:	2300      	movs	r3, #0
 80090b2:	4604      	mov	r4, r0
 80090b4:	4608      	mov	r0, r1
 80090b6:	602b      	str	r3, [r5, #0]
 80090b8:	f7f9 ff13 	bl	8002ee2 <_close>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_close_r+0x1a>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_close_r+0x1a>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	20000818 	.word	0x20000818

080090cc <__sflush_r>:
 80090cc:	898a      	ldrh	r2, [r1, #12]
 80090ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d2:	4605      	mov	r5, r0
 80090d4:	0710      	lsls	r0, r2, #28
 80090d6:	460c      	mov	r4, r1
 80090d8:	d458      	bmi.n	800918c <__sflush_r+0xc0>
 80090da:	684b      	ldr	r3, [r1, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dc05      	bgt.n	80090ec <__sflush_r+0x20>
 80090e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dc02      	bgt.n	80090ec <__sflush_r+0x20>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	d0f9      	beq.n	80090e6 <__sflush_r+0x1a>
 80090f2:	2300      	movs	r3, #0
 80090f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090f8:	682f      	ldr	r7, [r5, #0]
 80090fa:	602b      	str	r3, [r5, #0]
 80090fc:	d032      	beq.n	8009164 <__sflush_r+0x98>
 80090fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	075a      	lsls	r2, r3, #29
 8009104:	d505      	bpl.n	8009112 <__sflush_r+0x46>
 8009106:	6863      	ldr	r3, [r4, #4]
 8009108:	1ac0      	subs	r0, r0, r3
 800910a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800910c:	b10b      	cbz	r3, 8009112 <__sflush_r+0x46>
 800910e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009110:	1ac0      	subs	r0, r0, r3
 8009112:	2300      	movs	r3, #0
 8009114:	4602      	mov	r2, r0
 8009116:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009118:	6a21      	ldr	r1, [r4, #32]
 800911a:	4628      	mov	r0, r5
 800911c:	47b0      	blx	r6
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	d106      	bne.n	8009132 <__sflush_r+0x66>
 8009124:	6829      	ldr	r1, [r5, #0]
 8009126:	291d      	cmp	r1, #29
 8009128:	d82c      	bhi.n	8009184 <__sflush_r+0xb8>
 800912a:	4a2a      	ldr	r2, [pc, #168]	; (80091d4 <__sflush_r+0x108>)
 800912c:	40ca      	lsrs	r2, r1
 800912e:	07d6      	lsls	r6, r2, #31
 8009130:	d528      	bpl.n	8009184 <__sflush_r+0xb8>
 8009132:	2200      	movs	r2, #0
 8009134:	6062      	str	r2, [r4, #4]
 8009136:	04d9      	lsls	r1, r3, #19
 8009138:	6922      	ldr	r2, [r4, #16]
 800913a:	6022      	str	r2, [r4, #0]
 800913c:	d504      	bpl.n	8009148 <__sflush_r+0x7c>
 800913e:	1c42      	adds	r2, r0, #1
 8009140:	d101      	bne.n	8009146 <__sflush_r+0x7a>
 8009142:	682b      	ldr	r3, [r5, #0]
 8009144:	b903      	cbnz	r3, 8009148 <__sflush_r+0x7c>
 8009146:	6560      	str	r0, [r4, #84]	; 0x54
 8009148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800914a:	602f      	str	r7, [r5, #0]
 800914c:	2900      	cmp	r1, #0
 800914e:	d0ca      	beq.n	80090e6 <__sflush_r+0x1a>
 8009150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009154:	4299      	cmp	r1, r3
 8009156:	d002      	beq.n	800915e <__sflush_r+0x92>
 8009158:	4628      	mov	r0, r5
 800915a:	f000 f8fd 	bl	8009358 <_free_r>
 800915e:	2000      	movs	r0, #0
 8009160:	6360      	str	r0, [r4, #52]	; 0x34
 8009162:	e7c1      	b.n	80090e8 <__sflush_r+0x1c>
 8009164:	6a21      	ldr	r1, [r4, #32]
 8009166:	2301      	movs	r3, #1
 8009168:	4628      	mov	r0, r5
 800916a:	47b0      	blx	r6
 800916c:	1c41      	adds	r1, r0, #1
 800916e:	d1c7      	bne.n	8009100 <__sflush_r+0x34>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0c4      	beq.n	8009100 <__sflush_r+0x34>
 8009176:	2b1d      	cmp	r3, #29
 8009178:	d001      	beq.n	800917e <__sflush_r+0xb2>
 800917a:	2b16      	cmp	r3, #22
 800917c:	d101      	bne.n	8009182 <__sflush_r+0xb6>
 800917e:	602f      	str	r7, [r5, #0]
 8009180:	e7b1      	b.n	80090e6 <__sflush_r+0x1a>
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	e7ad      	b.n	80090e8 <__sflush_r+0x1c>
 800918c:	690f      	ldr	r7, [r1, #16]
 800918e:	2f00      	cmp	r7, #0
 8009190:	d0a9      	beq.n	80090e6 <__sflush_r+0x1a>
 8009192:	0793      	lsls	r3, r2, #30
 8009194:	680e      	ldr	r6, [r1, #0]
 8009196:	bf08      	it	eq
 8009198:	694b      	ldreq	r3, [r1, #20]
 800919a:	600f      	str	r7, [r1, #0]
 800919c:	bf18      	it	ne
 800919e:	2300      	movne	r3, #0
 80091a0:	eba6 0807 	sub.w	r8, r6, r7
 80091a4:	608b      	str	r3, [r1, #8]
 80091a6:	f1b8 0f00 	cmp.w	r8, #0
 80091aa:	dd9c      	ble.n	80090e6 <__sflush_r+0x1a>
 80091ac:	6a21      	ldr	r1, [r4, #32]
 80091ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091b0:	4643      	mov	r3, r8
 80091b2:	463a      	mov	r2, r7
 80091b4:	4628      	mov	r0, r5
 80091b6:	47b0      	blx	r6
 80091b8:	2800      	cmp	r0, #0
 80091ba:	dc06      	bgt.n	80091ca <__sflush_r+0xfe>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	e78e      	b.n	80090e8 <__sflush_r+0x1c>
 80091ca:	4407      	add	r7, r0
 80091cc:	eba8 0800 	sub.w	r8, r8, r0
 80091d0:	e7e9      	b.n	80091a6 <__sflush_r+0xda>
 80091d2:	bf00      	nop
 80091d4:	20400001 	.word	0x20400001

080091d8 <_fflush_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	690b      	ldr	r3, [r1, #16]
 80091dc:	4605      	mov	r5, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	b913      	cbnz	r3, 80091e8 <_fflush_r+0x10>
 80091e2:	2500      	movs	r5, #0
 80091e4:	4628      	mov	r0, r5
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	b118      	cbz	r0, 80091f2 <_fflush_r+0x1a>
 80091ea:	6983      	ldr	r3, [r0, #24]
 80091ec:	b90b      	cbnz	r3, 80091f2 <_fflush_r+0x1a>
 80091ee:	f7ff fa15 	bl	800861c <__sinit>
 80091f2:	4b14      	ldr	r3, [pc, #80]	; (8009244 <_fflush_r+0x6c>)
 80091f4:	429c      	cmp	r4, r3
 80091f6:	d11b      	bne.n	8009230 <_fflush_r+0x58>
 80091f8:	686c      	ldr	r4, [r5, #4]
 80091fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0ef      	beq.n	80091e2 <_fflush_r+0xa>
 8009202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009204:	07d0      	lsls	r0, r2, #31
 8009206:	d404      	bmi.n	8009212 <_fflush_r+0x3a>
 8009208:	0599      	lsls	r1, r3, #22
 800920a:	d402      	bmi.n	8009212 <_fflush_r+0x3a>
 800920c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800920e:	f7ff faa3 	bl	8008758 <__retarget_lock_acquire_recursive>
 8009212:	4628      	mov	r0, r5
 8009214:	4621      	mov	r1, r4
 8009216:	f7ff ff59 	bl	80090cc <__sflush_r>
 800921a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800921c:	07da      	lsls	r2, r3, #31
 800921e:	4605      	mov	r5, r0
 8009220:	d4e0      	bmi.n	80091e4 <_fflush_r+0xc>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	059b      	lsls	r3, r3, #22
 8009226:	d4dd      	bmi.n	80091e4 <_fflush_r+0xc>
 8009228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800922a:	f7ff fa96 	bl	800875a <__retarget_lock_release_recursive>
 800922e:	e7d9      	b.n	80091e4 <_fflush_r+0xc>
 8009230:	4b05      	ldr	r3, [pc, #20]	; (8009248 <_fflush_r+0x70>)
 8009232:	429c      	cmp	r4, r3
 8009234:	d101      	bne.n	800923a <_fflush_r+0x62>
 8009236:	68ac      	ldr	r4, [r5, #8]
 8009238:	e7df      	b.n	80091fa <_fflush_r+0x22>
 800923a:	4b04      	ldr	r3, [pc, #16]	; (800924c <_fflush_r+0x74>)
 800923c:	429c      	cmp	r4, r3
 800923e:	bf08      	it	eq
 8009240:	68ec      	ldreq	r4, [r5, #12]
 8009242:	e7da      	b.n	80091fa <_fflush_r+0x22>
 8009244:	080094fc 	.word	0x080094fc
 8009248:	0800951c 	.word	0x0800951c
 800924c:	080094dc 	.word	0x080094dc

08009250 <_lseek_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d07      	ldr	r5, [pc, #28]	; (8009270 <_lseek_r+0x20>)
 8009254:	4604      	mov	r4, r0
 8009256:	4608      	mov	r0, r1
 8009258:	4611      	mov	r1, r2
 800925a:	2200      	movs	r2, #0
 800925c:	602a      	str	r2, [r5, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	f7f9 fe66 	bl	8002f30 <_lseek>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_lseek_r+0x1e>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_lseek_r+0x1e>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20000818 	.word	0x20000818

08009274 <__swhatbuf_r>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	460e      	mov	r6, r1
 8009278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927c:	2900      	cmp	r1, #0
 800927e:	b096      	sub	sp, #88	; 0x58
 8009280:	4614      	mov	r4, r2
 8009282:	461d      	mov	r5, r3
 8009284:	da08      	bge.n	8009298 <__swhatbuf_r+0x24>
 8009286:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	602a      	str	r2, [r5, #0]
 800928e:	061a      	lsls	r2, r3, #24
 8009290:	d410      	bmi.n	80092b4 <__swhatbuf_r+0x40>
 8009292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009296:	e00e      	b.n	80092b6 <__swhatbuf_r+0x42>
 8009298:	466a      	mov	r2, sp
 800929a:	f000 f8bb 	bl	8009414 <_fstat_r>
 800929e:	2800      	cmp	r0, #0
 80092a0:	dbf1      	blt.n	8009286 <__swhatbuf_r+0x12>
 80092a2:	9a01      	ldr	r2, [sp, #4]
 80092a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092ac:	425a      	negs	r2, r3
 80092ae:	415a      	adcs	r2, r3
 80092b0:	602a      	str	r2, [r5, #0]
 80092b2:	e7ee      	b.n	8009292 <__swhatbuf_r+0x1e>
 80092b4:	2340      	movs	r3, #64	; 0x40
 80092b6:	2000      	movs	r0, #0
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	b016      	add	sp, #88	; 0x58
 80092bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080092c0 <__smakebuf_r>:
 80092c0:	898b      	ldrh	r3, [r1, #12]
 80092c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c4:	079d      	lsls	r5, r3, #30
 80092c6:	4606      	mov	r6, r0
 80092c8:	460c      	mov	r4, r1
 80092ca:	d507      	bpl.n	80092dc <__smakebuf_r+0x1c>
 80092cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	2301      	movs	r3, #1
 80092d6:	6163      	str	r3, [r4, #20]
 80092d8:	b002      	add	sp, #8
 80092da:	bd70      	pop	{r4, r5, r6, pc}
 80092dc:	ab01      	add	r3, sp, #4
 80092de:	466a      	mov	r2, sp
 80092e0:	f7ff ffc8 	bl	8009274 <__swhatbuf_r>
 80092e4:	9900      	ldr	r1, [sp, #0]
 80092e6:	4605      	mov	r5, r0
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff fa57 	bl	800879c <_malloc_r>
 80092ee:	b948      	cbnz	r0, 8009304 <__smakebuf_r+0x44>
 80092f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f4:	059a      	lsls	r2, r3, #22
 80092f6:	d4ef      	bmi.n	80092d8 <__smakebuf_r+0x18>
 80092f8:	f023 0303 	bic.w	r3, r3, #3
 80092fc:	f043 0302 	orr.w	r3, r3, #2
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	e7e3      	b.n	80092cc <__smakebuf_r+0xc>
 8009304:	4b0d      	ldr	r3, [pc, #52]	; (800933c <__smakebuf_r+0x7c>)
 8009306:	62b3      	str	r3, [r6, #40]	; 0x28
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009310:	81a3      	strh	r3, [r4, #12]
 8009312:	9b00      	ldr	r3, [sp, #0]
 8009314:	6163      	str	r3, [r4, #20]
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	6120      	str	r0, [r4, #16]
 800931a:	b15b      	cbz	r3, 8009334 <__smakebuf_r+0x74>
 800931c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009320:	4630      	mov	r0, r6
 8009322:	f000 f889 	bl	8009438 <_isatty_r>
 8009326:	b128      	cbz	r0, 8009334 <__smakebuf_r+0x74>
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	f023 0303 	bic.w	r3, r3, #3
 800932e:	f043 0301 	orr.w	r3, r3, #1
 8009332:	81a3      	strh	r3, [r4, #12]
 8009334:	89a0      	ldrh	r0, [r4, #12]
 8009336:	4305      	orrs	r5, r0
 8009338:	81a5      	strh	r5, [r4, #12]
 800933a:	e7cd      	b.n	80092d8 <__smakebuf_r+0x18>
 800933c:	080085b5 	.word	0x080085b5

08009340 <__malloc_lock>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__malloc_lock+0x8>)
 8009342:	f7ff ba09 	b.w	8008758 <__retarget_lock_acquire_recursive>
 8009346:	bf00      	nop
 8009348:	2000080c 	.word	0x2000080c

0800934c <__malloc_unlock>:
 800934c:	4801      	ldr	r0, [pc, #4]	; (8009354 <__malloc_unlock+0x8>)
 800934e:	f7ff ba04 	b.w	800875a <__retarget_lock_release_recursive>
 8009352:	bf00      	nop
 8009354:	2000080c 	.word	0x2000080c

08009358 <_free_r>:
 8009358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800935a:	2900      	cmp	r1, #0
 800935c:	d044      	beq.n	80093e8 <_free_r+0x90>
 800935e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009362:	9001      	str	r0, [sp, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f1a1 0404 	sub.w	r4, r1, #4
 800936a:	bfb8      	it	lt
 800936c:	18e4      	addlt	r4, r4, r3
 800936e:	f7ff ffe7 	bl	8009340 <__malloc_lock>
 8009372:	4a1e      	ldr	r2, [pc, #120]	; (80093ec <_free_r+0x94>)
 8009374:	9801      	ldr	r0, [sp, #4]
 8009376:	6813      	ldr	r3, [r2, #0]
 8009378:	b933      	cbnz	r3, 8009388 <_free_r+0x30>
 800937a:	6063      	str	r3, [r4, #4]
 800937c:	6014      	str	r4, [r2, #0]
 800937e:	b003      	add	sp, #12
 8009380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009384:	f7ff bfe2 	b.w	800934c <__malloc_unlock>
 8009388:	42a3      	cmp	r3, r4
 800938a:	d908      	bls.n	800939e <_free_r+0x46>
 800938c:	6825      	ldr	r5, [r4, #0]
 800938e:	1961      	adds	r1, r4, r5
 8009390:	428b      	cmp	r3, r1
 8009392:	bf01      	itttt	eq
 8009394:	6819      	ldreq	r1, [r3, #0]
 8009396:	685b      	ldreq	r3, [r3, #4]
 8009398:	1949      	addeq	r1, r1, r5
 800939a:	6021      	streq	r1, [r4, #0]
 800939c:	e7ed      	b.n	800937a <_free_r+0x22>
 800939e:	461a      	mov	r2, r3
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	b10b      	cbz	r3, 80093a8 <_free_r+0x50>
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	d9fa      	bls.n	800939e <_free_r+0x46>
 80093a8:	6811      	ldr	r1, [r2, #0]
 80093aa:	1855      	adds	r5, r2, r1
 80093ac:	42a5      	cmp	r5, r4
 80093ae:	d10b      	bne.n	80093c8 <_free_r+0x70>
 80093b0:	6824      	ldr	r4, [r4, #0]
 80093b2:	4421      	add	r1, r4
 80093b4:	1854      	adds	r4, r2, r1
 80093b6:	42a3      	cmp	r3, r4
 80093b8:	6011      	str	r1, [r2, #0]
 80093ba:	d1e0      	bne.n	800937e <_free_r+0x26>
 80093bc:	681c      	ldr	r4, [r3, #0]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	6053      	str	r3, [r2, #4]
 80093c2:	4421      	add	r1, r4
 80093c4:	6011      	str	r1, [r2, #0]
 80093c6:	e7da      	b.n	800937e <_free_r+0x26>
 80093c8:	d902      	bls.n	80093d0 <_free_r+0x78>
 80093ca:	230c      	movs	r3, #12
 80093cc:	6003      	str	r3, [r0, #0]
 80093ce:	e7d6      	b.n	800937e <_free_r+0x26>
 80093d0:	6825      	ldr	r5, [r4, #0]
 80093d2:	1961      	adds	r1, r4, r5
 80093d4:	428b      	cmp	r3, r1
 80093d6:	bf04      	itt	eq
 80093d8:	6819      	ldreq	r1, [r3, #0]
 80093da:	685b      	ldreq	r3, [r3, #4]
 80093dc:	6063      	str	r3, [r4, #4]
 80093de:	bf04      	itt	eq
 80093e0:	1949      	addeq	r1, r1, r5
 80093e2:	6021      	streq	r1, [r4, #0]
 80093e4:	6054      	str	r4, [r2, #4]
 80093e6:	e7ca      	b.n	800937e <_free_r+0x26>
 80093e8:	b003      	add	sp, #12
 80093ea:	bd30      	pop	{r4, r5, pc}
 80093ec:	20000810 	.word	0x20000810

080093f0 <_read_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4d07      	ldr	r5, [pc, #28]	; (8009410 <_read_r+0x20>)
 80093f4:	4604      	mov	r4, r0
 80093f6:	4608      	mov	r0, r1
 80093f8:	4611      	mov	r1, r2
 80093fa:	2200      	movs	r2, #0
 80093fc:	602a      	str	r2, [r5, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	f7f9 fd36 	bl	8002e70 <_read>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_read_r+0x1e>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_read_r+0x1e>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	20000818 	.word	0x20000818

08009414 <_fstat_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4d07      	ldr	r5, [pc, #28]	; (8009434 <_fstat_r+0x20>)
 8009418:	2300      	movs	r3, #0
 800941a:	4604      	mov	r4, r0
 800941c:	4608      	mov	r0, r1
 800941e:	4611      	mov	r1, r2
 8009420:	602b      	str	r3, [r5, #0]
 8009422:	f7f9 fd6a 	bl	8002efa <_fstat>
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	d102      	bne.n	8009430 <_fstat_r+0x1c>
 800942a:	682b      	ldr	r3, [r5, #0]
 800942c:	b103      	cbz	r3, 8009430 <_fstat_r+0x1c>
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	bd38      	pop	{r3, r4, r5, pc}
 8009432:	bf00      	nop
 8009434:	20000818 	.word	0x20000818

08009438 <_isatty_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d06      	ldr	r5, [pc, #24]	; (8009454 <_isatty_r+0x1c>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	f7f9 fd69 	bl	8002f1a <_isatty>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_isatty_r+0x1a>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_isatty_r+0x1a>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	20000818 	.word	0x20000818

08009458 <_init>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	bf00      	nop
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr

08009464 <_fini>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	bf00      	nop
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr
