
LAB3_MotorControl_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800cde0  0800cde0  0001cde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfb4  0800cfb4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfb4  0800cfb4  0001cfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfbc  0800cfbc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfbc  0800cfbc  0001cfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfc0  0800cfc0  0001cfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800cfc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005120  20000080  0800d044  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051a0  0800d044  000251a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ab8  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000426c  00000000  00000000  00043b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  00047dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae0  00000000  00000000  00049a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf43  00000000  00000000  0004b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002456a  00000000  00000000  00077493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111913  00000000  00000000  0009b9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ad310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c0  00000000  00000000  001ad360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cdc8 	.word	0x0800cdc8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800cdc8 	.word	0x0800cdc8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 8000600:	2301      	movs	r3, #1
 8000602:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8000604:	e025      	b.n	8000652 <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <cobsEncode+0x3e>
            FinishBlock(code);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	7efa      	ldrb	r2, [r7, #27]
 8000612:	701a      	strb	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	61fb      	str	r3, [r7, #28]
 800061c:	2301      	movs	r3, #1
 800061e:	76fb      	strb	r3, [r7, #27]
 8000620:	e014      	b.n	800064c <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 800062e:	7efb      	ldrb	r3, [r7, #27]
 8000630:	3301      	adds	r3, #1
 8000632:	76fb      	strb	r3, [r7, #27]
 8000634:	7efb      	ldrb	r3, [r7, #27]
 8000636:	2bff      	cmp	r3, #255	; 0xff
 8000638:	d108      	bne.n	800064c <cobsEncode+0x68>
                FinishBlock(code);
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	7efa      	ldrb	r2, [r7, #27]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	2301      	movs	r3, #1
 800064a:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	429a      	cmp	r2, r3
 8000658:	d3d5      	bcc.n	8000606 <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	7efa      	ldrb	r2, [r7, #27]
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	2301      	movs	r3, #1
 800066a:	76fb      	strb	r3, [r7, #27]
}
 800066c:	bf00      	nop
 800066e:	3724      	adds	r7, #36	; 0x24
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01c      	beq.n	80006c6 <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3321      	adds	r3, #33	; 0x21
 8000690:	461a      	mov	r2, r3
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f7ff ffa5 	bl	80005e4 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f103 0121 	add.w	r1, r3, #33	; 0x21
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3302      	adds	r3, #2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	2303      	movs	r3, #3
 80006be:	f007 f8d5 	bl	800786c <HAL_UART_Transmit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e000      	b.n	80006c8 <ertc_dlog_send+0x50>
	}

	return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	1c59      	adds	r1, r3, #1
 80006e2:	2303      	movs	r3, #3
 80006e4:	2201      	movs	r2, #1
 80006e6:	f007 f944 	bl	8007972 <HAL_UART_Receive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10e      	bne.n	800070e <ertc_dlog_update+0x3e>
		switch (logger->rxbuff[0]) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	2b41      	cmp	r3, #65	; 0x41
 80006f6:	d002      	beq.n	80006fe <ertc_dlog_update+0x2e>
 80006f8:	2b42      	cmp	r3, #66	; 0x42
 80006fa:	d004      	beq.n	8000706 <ertc_dlog_update+0x36>
 80006fc:	e008      	b.n	8000710 <ertc_dlog_update+0x40>
			case TX_START_CMD:
				logger->tx_enable = true;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
				break;
 8000704:	e004      	b.n	8000710 <ertc_dlog_update+0x40>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
				break;
 800070c:	e000      	b.n	8000710 <ertc_dlog_update+0x40>
//			default:
//				logger->tx_enable = false;
		}
	}
 800070e:	bf00      	nop
	return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <saturate>:
float I1 = 0, I2 = 0;
float voltage = 0;

float VLIM = VBATT / 2;
float saturate(float voltage)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	ed87 0a01 	vstr	s0, [r7, #4]
  if (voltage > VLIM)
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <saturate+0x60>)
 8000728:	edd3 7a00 	vldr	s15, [r3]
 800072c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000738:	dd03      	ble.n	8000742 <saturate+0x26>
    voltage = VLIM;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <saturate+0x60>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e012      	b.n	8000768 <saturate+0x4c>
  else if (voltage < -VLIM)
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <saturate+0x60>)
 8000744:	edd3 7a00 	vldr	s15, [r3]
 8000748:	eef1 7a67 	vneg.f32	s15, s15
 800074c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000750:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000758:	d506      	bpl.n	8000768 <saturate+0x4c>
    voltage = -VLIM;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <saturate+0x60>)
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	eef1 7a67 	vneg.f32	s15, s15
 8000764:	edc7 7a01 	vstr	s15, [r7, #4]
  return voltage;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	ee07 3a90 	vmov	s15, r3
}
 800076e:	eeb0 0a67 	vmov.f32	s0, s15
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	20000004 	.word	0x20000004

08000780 <PID1>:

// Function to compute the PID with the anti-wind up
float PID1(float error)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	ed87 0a01 	vstr	s0, [r7, #4]
  voltage = 0;
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <PID1+0x98>)
 800078c:	f04f 0200 	mov.w	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
  I1 = I1 + error * KI * TS;
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <PID1+0x9c>)
 8000794:	edd3 7a00 	vldr	s15, [r3]
 8000798:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <PID1+0xa0>)
 800079e:	ed93 7a00 	vldr	s14, [r3]
 80007a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ae:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8000810 <PID1+0x90>
 80007b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80007b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <PID1+0x9c>)
 80007c0:	edc3 7a00 	vstr	s15, [r3]
  voltage = KP * error + I1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <PID1+0xa4>)
 80007c6:	ed93 7a00 	vldr	s14, [r3]
 80007ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <PID1+0x9c>)
 80007d4:	edd3 7a00 	vldr	s15, [r3]
 80007d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <PID1+0x98>)
 80007de:	edc3 7a00 	vstr	s15, [r3]
  voltage = saturate(voltage);
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <PID1+0x98>)
 80007e4:	edd3 7a00 	vldr	s15, [r3]
 80007e8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ec:	f7ff ff96 	bl	800071c <saturate>
 80007f0:	eef0 7a40 	vmov.f32	s15, s0
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <PID1+0x98>)
 80007f6:	edc3 7a00 	vstr	s15, [r3]
  return voltage;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <PID1+0x98>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	ee07 3a90 	vmov	s15, r3
}
 8000802:	eeb0 0a67 	vmov.f32	s0, s15
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	f3af 8000 	nop.w
 8000810:	47ae147b 	.word	0x47ae147b
 8000814:	3f847ae1 	.word	0x3f847ae1
 8000818:	200007d0 	.word	0x200007d0
 800081c:	200007c8 	.word	0x200007c8
 8000820:	200007c4 	.word	0x200007c4
 8000824:	20000000 	.word	0x20000000

08000828 <PID2>:

float PID2(float error)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	ed87 0a01 	vstr	s0, [r7, #4]
  voltage = 0;
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <PID2+0x98>)
 8000834:	f04f 0200 	mov.w	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
  I2 = I2 + error * KI * TS;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <PID2+0x9c>)
 800083c:	edd3 7a00 	vldr	s15, [r3]
 8000840:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <PID2+0xa0>)
 8000846:	ed93 7a00 	vldr	s14, [r3]
 800084a:	edd7 7a01 	vldr	s15, [r7, #4]
 800084e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000852:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000856:	ed9f 5b18 	vldr	d5, [pc, #96]	; 80008b8 <PID2+0x90>
 800085a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800085e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000862:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <PID2+0x9c>)
 8000868:	edc3 7a00 	vstr	s15, [r3]
  voltage = KP * error + I2;
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <PID2+0xa4>)
 800086e:	ed93 7a00 	vldr	s14, [r3]
 8000872:	edd7 7a01 	vldr	s15, [r7, #4]
 8000876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <PID2+0x9c>)
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <PID2+0x98>)
 8000886:	edc3 7a00 	vstr	s15, [r3]
  voltage = saturate(voltage);
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <PID2+0x98>)
 800088c:	edd3 7a00 	vldr	s15, [r3]
 8000890:	eeb0 0a67 	vmov.f32	s0, s15
 8000894:	f7ff ff42 	bl	800071c <saturate>
 8000898:	eef0 7a40 	vmov.f32	s15, s0
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <PID2+0x98>)
 800089e:	edc3 7a00 	vstr	s15, [r3]
  return voltage;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <PID2+0x98>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	ee07 3a90 	vmov	s15, r3
}
 80008aa:	eeb0 0a67 	vmov.f32	s0, s15
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	f3af 8000 	nop.w
 80008b8:	47ae147b 	.word	0x47ae147b
 80008bc:	3f847ae1 	.word	0x3f847ae1
 80008c0:	200007d0 	.word	0x200007d0
 80008c4:	200007cc 	.word	0x200007cc
 80008c8:	200007c4 	.word	0x200007c4
 80008cc:	20000000 	.word	0x20000000

080008d0 <computeRpm>:




float computeRpm(int32_t encoder_read)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  float revolutions = 0;
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  float motor_rpm = 0;
 80008de:	f04f 0300 	mov.w	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  revolutions = ((float)encoder_read / 3840.0);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	ee07 3a90 	vmov	s15, r3
 80008ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ee:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000950 <computeRpm+0x80>
 80008f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f6:	edc7 7a05 	vstr	s15, [r7, #20]
  float wheel_rpm = 60.0 * revolutions / (float)TS;
 80008fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80008fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000902:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000940 <computeRpm+0x70>
 8000906:	ee27 6b06 	vmul.f64	d6, d7, d6
 800090a:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000948 <computeRpm+0x78>
 800090e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000912:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000916:	edc7 7a03 	vstr	s15, [r7, #12]
  motor_rpm = wheel_rpm * 120;
 800091a:	edd7 7a03 	vldr	s15, [r7, #12]
 800091e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000954 <computeRpm+0x84>
 8000922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000926:	edc7 7a04 	vstr	s15, [r7, #16]
  return (float)motor_rpm;
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	ee07 3a90 	vmov	s15, r3
}
 8000930:	eeb0 0a67 	vmov.f32	s0, s15
 8000934:	371c      	adds	r7, #28
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	00000000 	.word	0x00000000
 8000944:	404e0000 	.word	0x404e0000
 8000948:	40000000 	.word	0x40000000
 800094c:	3f847ae1 	.word	0x3f847ae1
 8000950:	45700000 	.word	0x45700000
 8000954:	42f00000 	.word	0x42f00000

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f002 faea 	bl	8002f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 fa93 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f001 f8b3 	bl	8001ad0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800096a:	f001 f881 	bl	8001a70 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800096e:	f000 faff 	bl	8000f70 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000972:	f000 fb4f 	bl	8001014 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000976:	f000 fb8d 	bl	8001094 <MX_I2C2_Init>
  MX_SPI1_Init();
 800097a:	f000 fbcb 	bl	8001114 <MX_SPI1_Init>
  MX_TIM1_Init();
 800097e:	f000 fc07 	bl	8001190 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000982:	f000 fcd5 	bl	8001330 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000986:	f000 fd6d 	bl	8001464 <MX_TIM3_Init>
  MX_TIM4_Init();
 800098a:	f000 fdc1 	bl	8001510 <MX_TIM4_Init>
  MX_TIM5_Init();
 800098e:	f000 fe15 	bl	80015bc <MX_TIM5_Init>
  MX_TIM8_Init();
 8000992:	f000 fe8b 	bl	80016ac <MX_TIM8_Init>
  MX_UART4_Init();
 8000996:	f000 ffab 	bl	80018f0 <MX_UART4_Init>
  MX_UART5_Init();
 800099a:	f000 ffd9 	bl	8001950 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800099e:	f001 f807 	bl	80019b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009a2:	f001 f835 	bl	8001a10 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 80009a6:	f000 ff53 	bl	8001850 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* Disable LCD SPI SS */
    HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2110      	movs	r1, #16
 80009ae:	48ba      	ldr	r0, [pc, #744]	; (8000c98 <main+0x340>)
 80009b0:	f003 f842 	bl	8003a38 <HAL_GPIO_WritePin>

    /* Disable EXTI4_IRQ during SX1509 initialization */
    HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f002 fe85 	bl	80036c4 <HAL_NVIC_DisableIRQ>

    /* Software reset */
    data = 0x12;
 80009ba:	2312      	movs	r3, #18
 80009bc:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80009be:	23c8      	movs	r3, #200	; 0xc8
 80009c0:	9302      	str	r3, [sp, #8]
 80009c2:	2301      	movs	r3, #1
 80009c4:	9301      	str	r3, [sp, #4]
 80009c6:	1dbb      	adds	r3, r7, #6
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	227d      	movs	r2, #125	; 0x7d
 80009ce:	217e      	movs	r1, #126	; 0x7e
 80009d0:	48b2      	ldr	r0, [pc, #712]	; (8000c9c <main+0x344>)
 80009d2:	f003 f8ff 	bl	8003bd4 <HAL_I2C_Mem_Write>
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d004      	beq.n	80009ea <main+0x92>
      printf("I2C communication error (%X).\n", status);
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4619      	mov	r1, r3
 80009e4:	48ae      	ldr	r0, [pc, #696]	; (8000ca0 <main+0x348>)
 80009e6:	f00b fa61 	bl	800beac <iprintf>

    data = 0x34;
 80009ea:	2334      	movs	r3, #52	; 0x34
 80009ec:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 80009ee:	23c8      	movs	r3, #200	; 0xc8
 80009f0:	9302      	str	r3, [sp, #8]
 80009f2:	2301      	movs	r3, #1
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	1dbb      	adds	r3, r7, #6
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2301      	movs	r3, #1
 80009fc:	227d      	movs	r2, #125	; 0x7d
 80009fe:	217e      	movs	r1, #126	; 0x7e
 8000a00:	48a6      	ldr	r0, [pc, #664]	; (8000c9c <main+0x344>)
 8000a02:	f003 f8e7 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d004      	beq.n	8000a1a <main+0xc2>
      printf("I2C communication error (%X).\n", status);
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4619      	mov	r1, r3
 8000a14:	48a2      	ldr	r0, [pc, #648]	; (8000ca0 <main+0x348>)
 8000a16:	f00b fa49 	bl	800beac <iprintf>
    //osDelay(100);
    //HAL_Delay(100);
    /* Set KeyPad scanning engine */

    /* Set RegClock to 0x40 (enable internal oscillator; 2MHz freq) */
    data = 0x40;
 8000a1a:	2340      	movs	r3, #64	; 0x40
 8000a1c:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_CLOCK, 1, &data, 1, I2C_TIMEOUT);
 8000a1e:	23c8      	movs	r3, #200	; 0xc8
 8000a20:	9302      	str	r3, [sp, #8]
 8000a22:	2301      	movs	r3, #1
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	221e      	movs	r2, #30
 8000a2e:	217e      	movs	r1, #126	; 0x7e
 8000a30:	489a      	ldr	r0, [pc, #616]	; (8000c9c <main+0x344>)
 8000a32:	f003 f8cf 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d004      	beq.n	8000a4a <main+0xf2>
      printf("I2C communication error (%X).\n", status);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4619      	mov	r1, r3
 8000a44:	4896      	ldr	r0, [pc, #600]	; (8000ca0 <main+0x348>)
 8000a46:	f00b fa31 	bl	800beac <iprintf>

    /* Set Bank A RegDir to 0xF0 (IO[0:3] as out) */
    data = 0xF0;
 8000a4a:	23f0      	movs	r3, #240	; 0xf0
 8000a4c:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000a4e:	23c8      	movs	r3, #200	; 0xc8
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	2301      	movs	r3, #1
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	1dbb      	adds	r3, r7, #6
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	217e      	movs	r1, #126	; 0x7e
 8000a60:	488e      	ldr	r0, [pc, #568]	; (8000c9c <main+0x344>)
 8000a62:	f003 f8b7 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d004      	beq.n	8000a7a <main+0x122>
      printf("I2C communication error (%X).\n", status);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4619      	mov	r1, r3
 8000a74:	488a      	ldr	r0, [pc, #552]	; (8000ca0 <main+0x348>)
 8000a76:	f00b fa19 	bl	800beac <iprintf>

    /* Set Bank B RegDir to 0x0F (IO[8:11] as in) */
    data = 0x0F;
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000a7e:	23c8      	movs	r3, #200	; 0xc8
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	2301      	movs	r3, #1
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	1dbb      	adds	r3, r7, #6
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	220e      	movs	r2, #14
 8000a8e:	217e      	movs	r1, #126	; 0x7e
 8000a90:	4882      	ldr	r0, [pc, #520]	; (8000c9c <main+0x344>)
 8000a92:	f003 f89f 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d004      	beq.n	8000aaa <main+0x152>
      printf("I2C communication error (%X).\n", status);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	487e      	ldr	r0, [pc, #504]	; (8000ca0 <main+0x348>)
 8000aa6:	f00b fa01 	bl	800beac <iprintf>

    /* Set Bank A RegOpenDrain to 0x0F (IO[0:3] as open-drain outputs) */
    data = 0x0F;
 8000aaa:	230f      	movs	r3, #15
 8000aac:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_OPEN_DRAIN_A, 1, &data, 1, I2C_TIMEOUT);
 8000aae:	23c8      	movs	r3, #200	; 0xc8
 8000ab0:	9302      	str	r3, [sp, #8]
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	1dbb      	adds	r3, r7, #6
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2301      	movs	r3, #1
 8000abc:	220b      	movs	r2, #11
 8000abe:	217e      	movs	r1, #126	; 0x7e
 8000ac0:	4876      	ldr	r0, [pc, #472]	; (8000c9c <main+0x344>)
 8000ac2:	f003 f887 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d004      	beq.n	8000ada <main+0x182>
      printf("I2C communication error (%X).\n", status);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4872      	ldr	r0, [pc, #456]	; (8000ca0 <main+0x348>)
 8000ad6:	f00b f9e9 	bl	800beac <iprintf>

    /* Set Bank B RegPullup to 0x0F (pull-ups enabled on inputs IO[8:11]) */
    data = 0x0F;
 8000ada:	230f      	movs	r3, #15
 8000adc:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_PULL_UP_B, 1, &data, 1, I2C_TIMEOUT);
 8000ade:	23c8      	movs	r3, #200	; 0xc8
 8000ae0:	9302      	str	r3, [sp, #8]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	1dbb      	adds	r3, r7, #6
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2301      	movs	r3, #1
 8000aec:	2206      	movs	r2, #6
 8000aee:	217e      	movs	r1, #126	; 0x7e
 8000af0:	486a      	ldr	r0, [pc, #424]	; (8000c9c <main+0x344>)
 8000af2:	f003 f86f 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <main+0x1b2>
      printf("I2C communication error (%X).\n", status);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4866      	ldr	r0, [pc, #408]	; (8000ca0 <main+0x348>)
 8000b06:	f00b f9d1 	bl	800beac <iprintf>

    /* Set Bank B RegDebounceEnable to 0x0F (enable debouncing on IO[8:11]) */
    data = 0x0F;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_ENABLE_B, 1, &data, 1, I2C_TIMEOUT);
 8000b0e:	23c8      	movs	r3, #200	; 0xc8
 8000b10:	9302      	str	r3, [sp, #8]
 8000b12:	2301      	movs	r3, #1
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	1dbb      	adds	r3, r7, #6
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	2223      	movs	r2, #35	; 0x23
 8000b1e:	217e      	movs	r1, #126	; 0x7e
 8000b20:	485e      	ldr	r0, [pc, #376]	; (8000c9c <main+0x344>)
 8000b22:	f003 f857 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <main+0x1e2>
      printf("I2C communication error (%X).\n", status);
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4619      	mov	r1, r3
 8000b34:	485a      	ldr	r0, [pc, #360]	; (8000ca0 <main+0x348>)
 8000b36:	f00b f9b9 	bl	800beac <iprintf>

    /* Set RegDebounceConfig to 0x05 (16ms debounce time) */
    data = 0x05;
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_DEBOUNCE_CONFIG, 1, &data, 1, I2C_TIMEOUT);
 8000b3e:	23c8      	movs	r3, #200	; 0xc8
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	2301      	movs	r3, #1
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	1dbb      	adds	r3, r7, #6
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	2222      	movs	r2, #34	; 0x22
 8000b4e:	217e      	movs	r1, #126	; 0x7e
 8000b50:	4852      	ldr	r0, [pc, #328]	; (8000c9c <main+0x344>)
 8000b52:	f003 f83f 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d004      	beq.n	8000b6a <main+0x212>
      printf("I2C communication error (%X).\n", status);
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4619      	mov	r1, r3
 8000b64:	484e      	ldr	r0, [pc, #312]	; (8000ca0 <main+0x348>)
 8000b66:	f00b f9a1 	bl	800beac <iprintf>

    /* Set RegKeyConfig1 to 0x7D (8s auto-sleep; 32ms scan time per row) */
    data = 0x7D;
 8000b6a:	237d      	movs	r3, #125	; 0x7d
 8000b6c:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_1, 1, &data, 1, I2C_TIMEOUT);
 8000b6e:	23c8      	movs	r3, #200	; 0xc8
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	2301      	movs	r3, #1
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	1dbb      	adds	r3, r7, #6
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	2225      	movs	r2, #37	; 0x25
 8000b7e:	217e      	movs	r1, #126	; 0x7e
 8000b80:	4846      	ldr	r0, [pc, #280]	; (8000c9c <main+0x344>)
 8000b82:	f003 f827 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d004      	beq.n	8000b9a <main+0x242>
      printf("I2C communication error (%X).\n", status);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4842      	ldr	r0, [pc, #264]	; (8000ca0 <main+0x348>)
 8000b96:	f00b f989 	bl	800beac <iprintf>

    /* Set RegKeyConfig2 to 0x1B (4 rows; 4 columns) */
    data = 0x1B;
 8000b9a:	231b      	movs	r3, #27
 8000b9c:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR2 << 1, REG_KEY_CONFIG_2, 1, &data, 1, I2C_TIMEOUT);
 8000b9e:	23c8      	movs	r3, #200	; 0xc8
 8000ba0:	9302      	str	r3, [sp, #8]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	1dbb      	adds	r3, r7, #6
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2301      	movs	r3, #1
 8000bac:	2226      	movs	r2, #38	; 0x26
 8000bae:	217e      	movs	r1, #126	; 0x7e
 8000bb0:	483a      	ldr	r0, [pc, #232]	; (8000c9c <main+0x344>)
 8000bb2:	f003 f80f 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d004      	beq.n	8000bca <main+0x272>
      printf("I2C communication error (%X).\n", status);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4836      	ldr	r0, [pc, #216]	; (8000ca0 <main+0x348>)
 8000bc6:	f00b f971 	bl	800beac <iprintf>

    /* Enable EXTI4_IRQ after SX1509 initialization */
    //osDelay(100);
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bca:	200a      	movs	r0, #10
 8000bcc:	f002 fd6c 	bl	80036a8 <HAL_NVIC_EnableIRQ>

    /* Disable EXTI2_IRQ during SX1509 initialization */
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 8000bd0:	2008      	movs	r0, #8
 8000bd2:	f002 fd77 	bl	80036c4 <HAL_NVIC_DisableIRQ>

    /* Software reset */
    data = 0x12;
 8000bd6:	2312      	movs	r3, #18
 8000bd8:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000bda:	23c8      	movs	r3, #200	; 0xc8
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	2301      	movs	r3, #1
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	1dbb      	adds	r3, r7, #6
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2301      	movs	r3, #1
 8000be8:	227d      	movs	r2, #125	; 0x7d
 8000bea:	217c      	movs	r1, #124	; 0x7c
 8000bec:	482b      	ldr	r0, [pc, #172]	; (8000c9c <main+0x344>)
 8000bee:	f002 fff1 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d004      	beq.n	8000c06 <main+0x2ae>
      printf("I2C communication error (%X).\n", status);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4827      	ldr	r0, [pc, #156]	; (8000ca0 <main+0x348>)
 8000c02:	f00b f953 	bl	800beac <iprintf>

    data = 0x34;
 8000c06:	2334      	movs	r3, #52	; 0x34
 8000c08:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000c0a:	23c8      	movs	r3, #200	; 0xc8
 8000c0c:	9302      	str	r3, [sp, #8]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	1dbb      	adds	r3, r7, #6
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2301      	movs	r3, #1
 8000c18:	227d      	movs	r2, #125	; 0x7d
 8000c1a:	217c      	movs	r1, #124	; 0x7c
 8000c1c:	481f      	ldr	r0, [pc, #124]	; (8000c9c <main+0x344>)
 8000c1e:	f002 ffd9 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d004      	beq.n	8000c36 <main+0x2de>
      printf("I2C communication error (%X).\n", status);
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <main+0x348>)
 8000c32:	f00b f93b 	bl	800beac <iprintf>

    //osDelay(100);

    /* Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000c36:	23ff      	movs	r3, #255	; 0xff
 8000c38:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000c3a:	23c8      	movs	r3, #200	; 0xc8
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	1dbb      	adds	r3, r7, #6
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	220f      	movs	r2, #15
 8000c4a:	217c      	movs	r1, #124	; 0x7c
 8000c4c:	4813      	ldr	r0, [pc, #76]	; (8000c9c <main+0x344>)
 8000c4e:	f002 ffc1 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <main+0x30e>
      printf("I2C communication error (%X).\n", status);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <main+0x348>)
 8000c62:	f00b f923 	bl	800beac <iprintf>

    /* Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
    data = 0xFF; // 0 = out; 1 = in
 8000c66:	23ff      	movs	r3, #255	; 0xff
 8000c68:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000c6a:	23c8      	movs	r3, #200	; 0xc8
 8000c6c:	9302      	str	r3, [sp, #8]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	1dbb      	adds	r3, r7, #6
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	220e      	movs	r2, #14
 8000c7a:	217c      	movs	r1, #124	; 0x7c
 8000c7c:	4807      	ldr	r0, [pc, #28]	; (8000c9c <main+0x344>)
 8000c7e:	f002 ffa9 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00b      	beq.n	8000ca4 <main+0x34c>
      printf("I2C communication error (%X).\n", status);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <main+0x348>)
 8000c92:	f00b f90b 	bl	800beac <iprintf>
 8000c96:	e005      	b.n	8000ca4 <main+0x34c>
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	200000e8 	.word	0x200000e8
 8000ca0:	0800ce28 	.word	0x0800ce28

    /* Set RegInterruptMaskA to 0x00 (all IO of Bank A will trigger an interrupt) */
    data = 0x00;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_INTERRUPT_MASK_A, 1, &data, 1, I2C_TIMEOUT);
 8000ca8:	23c8      	movs	r3, #200	; 0xc8
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	2301      	movs	r3, #1
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	1dbb      	adds	r3, r7, #6
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	2213      	movs	r2, #19
 8000cb8:	217c      	movs	r1, #124	; 0x7c
 8000cba:	485c      	ldr	r0, [pc, #368]	; (8000e2c <main+0x4d4>)
 8000cbc:	f002 ff8a 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d004      	beq.n	8000cd4 <main+0x37c>
      printf("I2C communication error (%X).\n", status);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4858      	ldr	r0, [pc, #352]	; (8000e30 <main+0x4d8>)
 8000cd0:	f00b f8ec 	bl	800beac <iprintf>

    /* Set RegSenseHighA to 0xAA (IO[7:4] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000cd4:	23aa      	movs	r3, #170	; 0xaa
 8000cd6:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_HIGH_A, 1, &data, 1, I2C_TIMEOUT);
 8000cd8:	23c8      	movs	r3, #200	; 0xc8
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	2216      	movs	r2, #22
 8000ce8:	217c      	movs	r1, #124	; 0x7c
 8000cea:	4850      	ldr	r0, [pc, #320]	; (8000e2c <main+0x4d4>)
 8000cec:	f002 ff72 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <main+0x3ac>
      printf("I2C communication error (%X).\n", status);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	484c      	ldr	r0, [pc, #304]	; (8000e30 <main+0x4d8>)
 8000d00:	f00b f8d4 	bl	800beac <iprintf>

    /* Set RegSenseLowA to 0xAA (IO[3:0] of Bank A will trigger an interrupt on falling edge) */
    data = 0xAA;
 8000d04:	23aa      	movs	r3, #170	; 0xaa
 8000d06:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_SENSE_LOW_A, 1, &data, 1, I2C_TIMEOUT);
 8000d08:	23c8      	movs	r3, #200	; 0xc8
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	2217      	movs	r2, #23
 8000d18:	217c      	movs	r1, #124	; 0x7c
 8000d1a:	4844      	ldr	r0, [pc, #272]	; (8000e2c <main+0x4d4>)
 8000d1c:	f002 ff5a 	bl	8003bd4 <HAL_I2C_Mem_Write>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d004      	beq.n	8000d34 <main+0x3dc>
      printf("I2C communication error (%X).\n", status);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4840      	ldr	r0, [pc, #256]	; (8000e30 <main+0x4d8>)
 8000d30:	f00b f8bc 	bl	800beac <iprintf>

    /* Enable EXTI2_IRQ after SX1509 initialization */
    //osDelay(100);
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d34:	2008      	movs	r0, #8
 8000d36:	f002 fcb7 	bl	80036a8 <HAL_NVIC_EnableIRQ>


    //printf("Ready\n");


  logger.uart_handle = huart3; // for serial
 8000d3a:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <main+0x4dc>)
 8000d3c:	4a3e      	ldr	r2, [pc, #248]	; (8000e38 <main+0x4e0>)
 8000d3e:	3344      	adds	r3, #68	; 0x44
 8000d40:	4611      	mov	r1, r2
 8000d42:	2288      	movs	r2, #136	; 0x88
 8000d44:	4618      	mov	r0, r3
 8000d46:	f00b f89b 	bl	800be80 <memcpy>
  //logger.uart_handle = huart2; // for wifi

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	483b      	ldr	r0, [pc, #236]	; (8000e3c <main+0x4e4>)
 8000d50:	f002 fe72 	bl	8003a38 <HAL_GPIO_WritePin>

  //osDelay(1000);

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000d54:	213c      	movs	r1, #60	; 0x3c
 8000d56:	483a      	ldr	r0, [pc, #232]	; (8000e40 <main+0x4e8>)
 8000d58:	f005 fa5e 	bl	8006218 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000d5c:	213c      	movs	r1, #60	; 0x3c
 8000d5e:	4839      	ldr	r0, [pc, #228]	; (8000e44 <main+0x4ec>)
 8000d60:	f005 fa5a 	bl	8006218 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d64:	2100      	movs	r1, #0
 8000d66:	4838      	ldr	r0, [pc, #224]	; (8000e48 <main+0x4f0>)
 8000d68:	f005 f854 	bl	8005e14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	4836      	ldr	r0, [pc, #216]	; (8000e48 <main+0x4f0>)
 8000d70:	f005 f850 	bl	8005e14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d74:	2108      	movs	r1, #8
 8000d76:	4834      	ldr	r0, [pc, #208]	; (8000e48 <main+0x4f0>)
 8000d78:	f005 f84c 	bl	8005e14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d7c:	210c      	movs	r1, #12
 8000d7e:	4832      	ldr	r0, [pc, #200]	; (8000e48 <main+0x4f0>)
 8000d80:	f005 f848 	bl	8005e14 <HAL_TIM_PWM_Start>

  /* Start motor PWM */
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000d84:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <main+0x4f4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <main+0x4f4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2200      	movs	r2, #0
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <main+0x4f4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <main+0x4f4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000da4:	2100      	movs	r1, #0
 8000da6:	4829      	ldr	r0, [pc, #164]	; (8000e4c <main+0x4f4>)
 8000da8:	f005 f834 	bl	8005e14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000dac:	2104      	movs	r1, #4
 8000dae:	4827      	ldr	r0, [pc, #156]	; (8000e4c <main+0x4f4>)
 8000db0:	f005 f830 	bl	8005e14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000db4:	2108      	movs	r1, #8
 8000db6:	4825      	ldr	r0, [pc, #148]	; (8000e4c <main+0x4f4>)
 8000db8:	f005 f82c 	bl	8005e14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000dbc:	210c      	movs	r1, #12
 8000dbe:	4823      	ldr	r0, [pc, #140]	; (8000e4c <main+0x4f4>)
 8000dc0:	f005 f828 	bl	8005e14 <HAL_TIM_PWM_Start>
 // HAL_TIM_Base_Start_IT(&htim6);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dc4:	f007 faba 	bl	800833c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of DataMutex */
  DataMutexHandle = osMutexNew(&DataMutex_attributes);
 8000dc8:	4821      	ldr	r0, [pc, #132]	; (8000e50 <main+0x4f8>)
 8000dca:	f007 fbc7 	bl	800855c <osMutexNew>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <main+0x4fc>)
 8000dd2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binarySemSync */
  binarySemSyncHandle = osSemaphoreNew(1, 1, &binarySemSync_attributes);
 8000dd4:	4a20      	ldr	r2, [pc, #128]	; (8000e58 <main+0x500>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f007 fc59 	bl	8008690 <osSemaphoreNew>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <main+0x504>)
 8000de2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue1 */
  queue1Handle = osMessageQueueNew (16, sizeof(datalog), &queue1_attributes);
 8000de4:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <main+0x508>)
 8000de6:	2104      	movs	r1, #4
 8000de8:	2010      	movs	r0, #16
 8000dea:	f007 fdab 	bl	8008944 <osMessageQueueNew>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <main+0x50c>)
 8000df2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controlTask */
  controlTaskHandle = osThreadNew(StartControlTask, NULL, &controlTask_attributes);
 8000df4:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <main+0x510>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	481c      	ldr	r0, [pc, #112]	; (8000e6c <main+0x514>)
 8000dfa:	f007 fb09 	bl	8008410 <osThreadNew>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <main+0x518>)
 8000e02:	6013      	str	r3, [r2, #0]

  /* creation of lineTask */
  lineTaskHandle = osThreadNew(StartLineTask, NULL, &lineTask_attributes);
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <main+0x51c>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	481b      	ldr	r0, [pc, #108]	; (8000e78 <main+0x520>)
 8000e0a:	f007 fb01 	bl	8008410 <osThreadNew>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <main+0x524>)
 8000e12:	6013      	str	r3, [r2, #0]

  /* creation of commTask */
  commTaskHandle = osThreadNew(StartCommTask, NULL, &commTask_attributes);
 8000e14:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <main+0x528>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	481a      	ldr	r0, [pc, #104]	; (8000e84 <main+0x52c>)
 8000e1a:	f007 faf9 	bl	8008410 <osThreadNew>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <main+0x530>)
 8000e22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e24:	f007 fabe 	bl	80083a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000e28:	e7fe      	b.n	8000e28 <main+0x4d0>
 8000e2a:	bf00      	nop
 8000e2c:	200000e8 	.word	0x200000e8
 8000e30:	0800ce28 	.word	0x0800ce28
 8000e34:	200006c8 	.word	0x200006c8
 8000e38:	20000628 	.word	0x20000628
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	2000028c 	.word	0x2000028c
 8000e44:	200002d8 	.word	0x200002d8
 8000e48:	200001f4 	.word	0x200001f4
 8000e4c:	20000370 	.word	0x20000370
 8000e50:	0800cee4 	.word	0x0800cee4
 8000e54:	200006c0 	.word	0x200006c0
 8000e58:	0800cef4 	.word	0x0800cef4
 8000e5c:	200006c4 	.word	0x200006c4
 8000e60:	0800cecc 	.word	0x0800cecc
 8000e64:	200006bc 	.word	0x200006bc
 8000e68:	0800ce60 	.word	0x0800ce60
 8000e6c:	08001d61 	.word	0x08001d61
 8000e70:	200006b0 	.word	0x200006b0
 8000e74:	0800ce84 	.word	0x0800ce84
 8000e78:	08002139 	.word	0x08002139
 8000e7c:	200006b4 	.word	0x200006b4
 8000e80:	0800cea8 	.word	0x0800cea8
 8000e84:	08002175 	.word	0x08002175
 8000e88:	200006b8 	.word	0x200006b8

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2234      	movs	r2, #52	; 0x34
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00a fffe 	bl	800be9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000eb0:	f003 fbf0 	bl	8004694 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <SystemClock_Config+0xdc>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a2b      	ldr	r2, [pc, #172]	; (8000f68 <SystemClock_Config+0xdc>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <SystemClock_Config+0xdc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <SystemClock_Config+0xe0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ed4:	4a25      	ldr	r2, [pc, #148]	; (8000f6c <SystemClock_Config+0xe0>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <SystemClock_Config+0xe0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ef0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000f00:	2360      	movs	r3, #96	; 0x60
 8000f02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 fc1d 	bl	8004754 <HAL_RCC_OscConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f20:	f001 f95a 	bl	80021d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f24:	f003 fbc6 	bl	80046b4 <HAL_PWREx_EnableOverDrive>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f2e:	f001 f953 	bl	80021d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f32:	230f      	movs	r3, #15
 8000f34:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2302      	movs	r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 feae 	bl	8004cb0 <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f5a:	f001 f93d 	bl	80021d8 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	; 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000

08000f70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_ADC1_Init+0x98>)
 8000f84:	4a21      	ldr	r2, [pc, #132]	; (800100c <MX_ADC1_Init+0x9c>)
 8000f86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_ADC1_Init+0x98>)
 8000f8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_ADC1_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_ADC1_Init+0x98>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_ADC1_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_ADC1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_ADC1_Init+0x98>)
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <MX_ADC1_Init+0xa0>)
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_ADC1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_ADC1_Init+0x98>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_ADC1_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_ADC1_Init+0x98>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_ADC1_Init+0x98>)
 8000fd2:	f001 ffdd 	bl	8002f90 <HAL_ADC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f001 f8fc 	bl	80021d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_ADC1_Init+0x98>)
 8000ff2:	f002 f811 	bl	8003018 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ffc:	f001 f8ec 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200000a0 	.word	0x200000a0
 800100c:	40012000 	.word	0x40012000
 8001010:	0f000001 	.word	0x0f000001

08001014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_I2C1_Init+0x74>)
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <MX_I2C1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_I2C1_Init+0x74>)
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <MX_I2C1_Init+0x7c>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_I2C1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <MX_I2C1_Init+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_I2C1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104e:	480e      	ldr	r0, [pc, #56]	; (8001088 <MX_I2C1_Init+0x74>)
 8001050:	f002 fd30 	bl	8003ab4 <HAL_I2C_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105a:	f001 f8bd 	bl	80021d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <MX_I2C1_Init+0x74>)
 8001062:	f003 fa7f 	bl	8004564 <HAL_I2CEx_ConfigAnalogFilter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800106c:	f001 f8b4 	bl	80021d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001070:	2100      	movs	r1, #0
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_I2C1_Init+0x74>)
 8001074:	f003 fac1 	bl	80045fa <HAL_I2CEx_ConfigDigitalFilter>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800107e:	f001 f8ab 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000e8 	.word	0x200000e8
 800108c:	40005400 	.word	0x40005400
 8001090:	20303e5d 	.word	0x20303e5d

08001094 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_I2C2_Init+0x74>)
 800109a:	4a1c      	ldr	r2, [pc, #112]	; (800110c <MX_I2C2_Init+0x78>)
 800109c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_I2C2_Init+0x74>)
 80010a0:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <MX_I2C2_Init+0x7c>)
 80010a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_I2C2_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_I2C2_Init+0x74>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_I2C2_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_I2C2_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_I2C2_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_I2C2_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_I2C2_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010ce:	480e      	ldr	r0, [pc, #56]	; (8001108 <MX_I2C2_Init+0x74>)
 80010d0:	f002 fcf0 	bl	8003ab4 <HAL_I2C_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80010da:	f001 f87d 	bl	80021d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010de:	2100      	movs	r1, #0
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <MX_I2C2_Init+0x74>)
 80010e2:	f003 fa3f 	bl	8004564 <HAL_I2CEx_ConfigAnalogFilter>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010ec:	f001 f874 	bl	80021d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010f0:	2100      	movs	r1, #0
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_I2C2_Init+0x74>)
 80010f4:	f003 fa81 	bl	80045fa <HAL_I2CEx_ConfigDigitalFilter>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010fe:	f001 f86b 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000013c 	.word	0x2000013c
 800110c:	40005800 	.word	0x40005800
 8001110:	20303e5d 	.word	0x20303e5d

08001114 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_SPI1_Init+0x74>)
 800111a:	4a1c      	ldr	r2, [pc, #112]	; (800118c <MX_SPI1_Init+0x78>)
 800111c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_SPI1_Init+0x74>)
 8001120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_SPI1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_SPI1_Init+0x74>)
 800112e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001132:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_SPI1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_SPI1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_SPI1_Init+0x74>)
 8001142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001146:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_SPI1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_SPI1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_SPI1_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_SPI1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_SPI1_Init+0x74>)
 8001162:	2207      	movs	r2, #7
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_SPI1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_SPI1_Init+0x74>)
 800116e:	2208      	movs	r2, #8
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_SPI1_Init+0x74>)
 8001174:	f004 fc1c 	bl	80059b0 <HAL_SPI_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800117e:	f001 f82b 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000190 	.word	0x20000190
 800118c:	40013000 	.word	0x40013000

08001190 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b09a      	sub	sp, #104	; 0x68
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	222c      	movs	r2, #44	; 0x2c
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00a fe66 	bl	800be9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011d0:	4b55      	ldr	r3, [pc, #340]	; (8001328 <MX_TIM1_Init+0x198>)
 80011d2:	4a56      	ldr	r2, [pc, #344]	; (800132c <MX_TIM1_Init+0x19c>)
 80011d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011d6:	4b54      	ldr	r3, [pc, #336]	; (8001328 <MX_TIM1_Init+0x198>)
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b52      	ldr	r3, [pc, #328]	; (8001328 <MX_TIM1_Init+0x198>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80011e2:	4b51      	ldr	r3, [pc, #324]	; (8001328 <MX_TIM1_Init+0x198>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <MX_TIM1_Init+0x198>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ee:	4b4e      	ldr	r3, [pc, #312]	; (8001328 <MX_TIM1_Init+0x198>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <MX_TIM1_Init+0x198>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011fa:	484b      	ldr	r0, [pc, #300]	; (8001328 <MX_TIM1_Init+0x198>)
 80011fc:	f004 fc83 	bl	8005b06 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001206:	f000 ffe7 	bl	80021d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001210:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001214:	4619      	mov	r1, r3
 8001216:	4844      	ldr	r0, [pc, #272]	; (8001328 <MX_TIM1_Init+0x198>)
 8001218:	f005 fbd6 	bl	80069c8 <HAL_TIM_ConfigClockSource>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001222:	f000 ffd9 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001226:	4840      	ldr	r0, [pc, #256]	; (8001328 <MX_TIM1_Init+0x198>)
 8001228:	f004 fd3c 	bl	8005ca4 <HAL_TIM_OC_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001232:	f000 ffd1 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001242:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001246:	4619      	mov	r1, r3
 8001248:	4837      	ldr	r0, [pc, #220]	; (8001328 <MX_TIM1_Init+0x198>)
 800124a:	f006 f997 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001254:	f000 ffc0 	bl	80021d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001258:	2350      	movs	r3, #80	; 0x50
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001260:	2302      	movs	r3, #2
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001264:	2300      	movs	r3, #0
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	482a      	ldr	r0, [pc, #168]	; (8001328 <MX_TIM1_Init+0x198>)
 800127e:	f005 f979 	bl	8006574 <HAL_TIM_OC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001288:	f000 ffa6 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800128c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001290:	2204      	movs	r2, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4824      	ldr	r0, [pc, #144]	; (8001328 <MX_TIM1_Init+0x198>)
 8001296:	f005 f96d 	bl	8006574 <HAL_TIM_OC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012a0:	f000 ff9a 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a8:	2208      	movs	r2, #8
 80012aa:	4619      	mov	r1, r3
 80012ac:	481e      	ldr	r0, [pc, #120]	; (8001328 <MX_TIM1_Init+0x198>)
 80012ae:	f005 f961 	bl	8006574 <HAL_TIM_OC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012b8:	f000 ff8e 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c0:	220c      	movs	r2, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	4818      	ldr	r0, [pc, #96]	; (8001328 <MX_TIM1_Init+0x198>)
 80012c6:	f005 f955 	bl	8006574 <HAL_TIM_OC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80012d0:	f000 ff82 	bl	80021d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <MX_TIM1_Init+0x198>)
 800130a:	f006 f9c5 	bl	8007698 <HAL_TIMEx_ConfigBreakDeadTime>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8001314:	f000 ff60 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <MX_TIM1_Init+0x198>)
 800131a:	f001 fa07 	bl	800272c <HAL_TIM_MspPostInit>

}
 800131e:	bf00      	nop
 8001320:	3768      	adds	r7, #104	; 0x68
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200001f4 	.word	0x200001f4
 800132c:	40010000 	.word	0x40010000

08001330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b092      	sub	sp, #72	; 0x48
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	615a      	str	r2, [r3, #20]
 8001362:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001370:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <MX_TIM2_Init+0x130>)
 8001372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001378:	4b39      	ldr	r3, [pc, #228]	; (8001460 <MX_TIM2_Init+0x130>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <MX_TIM2_Init+0x130>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <MX_TIM2_Init+0x130>)
 8001386:	f04f 32ff 	mov.w	r2, #4294967295
 800138a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <MX_TIM2_Init+0x130>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <MX_TIM2_Init+0x130>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001398:	4831      	ldr	r0, [pc, #196]	; (8001460 <MX_TIM2_Init+0x130>)
 800139a:	f004 fbb4 	bl	8005b06 <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013a4:	f000 ff18 	bl	80021d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013b2:	4619      	mov	r1, r3
 80013b4:	482a      	ldr	r0, [pc, #168]	; (8001460 <MX_TIM2_Init+0x130>)
 80013b6:	f005 fb07 	bl	80069c8 <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013c0:	f000 ff0a 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013c4:	4826      	ldr	r0, [pc, #152]	; (8001460 <MX_TIM2_Init+0x130>)
 80013c6:	f004 fcce 	bl	8005d66 <HAL_TIM_PWM_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80013d0:	f000 ff02 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013d4:	4822      	ldr	r0, [pc, #136]	; (8001460 <MX_TIM2_Init+0x130>)
 80013d6:	f004 fe17 	bl	8006008 <HAL_TIM_IC_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013e0:	f000 fefa 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f0:	4619      	mov	r1, r3
 80013f2:	481b      	ldr	r0, [pc, #108]	; (8001460 <MX_TIM2_Init+0x130>)
 80013f4:	f006 f8c2 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80013fe:	f000 feeb 	bl	80021d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001402:	2360      	movs	r3, #96	; 0x60
 8001404:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <MX_TIM2_Init+0x130>)
 800141c:	f005 f9c0 	bl	80067a0 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8001426:	f000 fed7 	bl	80021d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800142e:	2301      	movs	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM2_Init+0x130>)
 8001442:	f005 f911 	bl	8006668 <HAL_TIM_IC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800144c:	f000 fec4 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM2_Init+0x130>)
 8001452:	f001 f96b 	bl	800272c <HAL_TIM_MspPostInit>

}
 8001456:	bf00      	nop
 8001458:	3748      	adds	r7, #72	; 0x48
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000240 	.word	0x20000240

08001464 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2224      	movs	r2, #36	; 0x24
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f00a fd12 	bl	800be9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_TIM3_Init+0xa4>)
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <MX_TIM3_Init+0xa8>)
 8001486:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_TIM3_Init+0xa4>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_TIM3_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_TIM3_Init+0xa4>)
 8001496:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800149a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_TIM3_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_TIM3_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014a8:	2303      	movs	r3, #3
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80014b8:	230f      	movs	r3, #15
 80014ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c0:	2301      	movs	r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80014c8:	230f      	movs	r3, #15
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_TIM3_Init+0xa4>)
 80014d4:	f004 fdfa 	bl	80060cc <HAL_TIM_Encoder_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80014de:	f000 fe7b 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_TIM3_Init+0xa4>)
 80014f0:	f006 f844 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80014fa:	f000 fe6d 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	; 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000028c 	.word	0x2000028c
 800150c:	40000400 	.word	0x40000400

08001510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	2224      	movs	r2, #36	; 0x24
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f00a fcbc 	bl	800be9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	463b      	mov	r3, r7
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_TIM4_Init+0xa4>)
 8001530:	4a21      	ldr	r2, [pc, #132]	; (80015b8 <MX_TIM4_Init+0xa8>)
 8001532:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_TIM4_Init+0xa4>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_TIM4_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_TIM4_Init+0xa4>)
 8001542:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001546:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_TIM4_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_TIM4_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001554:	2303      	movs	r3, #3
 8001556:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800155c:	2301      	movs	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001564:	230f      	movs	r3, #15
 8001566:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800156c:	2301      	movs	r3, #1
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001574:	230f      	movs	r3, #15
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4619      	mov	r1, r3
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_TIM4_Init+0xa4>)
 8001580:	f004 fda4 	bl	80060cc <HAL_TIM_Encoder_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800158a:	f000 fe25 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001596:	463b      	mov	r3, r7
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_TIM4_Init+0xa4>)
 800159c:	f005 ffee 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015a6:	f000 fe17 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3730      	adds	r7, #48	; 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200002d8 	.word	0x200002d8
 80015b8:	40000800 	.word	0x40000800

080015bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <MX_TIM5_Init+0xe8>)
 80015f0:	4a2d      	ldr	r2, [pc, #180]	; (80016a8 <MX_TIM5_Init+0xec>)
 80015f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <MX_TIM5_Init+0xe8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <MX_TIM5_Init+0xe8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <MX_TIM5_Init+0xe8>)
 8001602:	f04f 32ff 	mov.w	r2, #4294967295
 8001606:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <MX_TIM5_Init+0xe8>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <MX_TIM5_Init+0xe8>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001614:	4823      	ldr	r0, [pc, #140]	; (80016a4 <MX_TIM5_Init+0xe8>)
 8001616:	f004 fa76 	bl	8005b06 <HAL_TIM_Base_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001620:	f000 fdda 	bl	80021d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800162a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162e:	4619      	mov	r1, r3
 8001630:	481c      	ldr	r0, [pc, #112]	; (80016a4 <MX_TIM5_Init+0xe8>)
 8001632:	f005 f9c9 	bl	80069c8 <HAL_TIM_ConfigClockSource>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800163c:	f000 fdcc 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001640:	4818      	ldr	r0, [pc, #96]	; (80016a4 <MX_TIM5_Init+0xe8>)
 8001642:	f004 fb90 	bl	8005d66 <HAL_TIM_PWM_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800164c:	f000 fdc4 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <MX_TIM5_Init+0xe8>)
 8001660:	f005 ff8c 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800166a:	f000 fdb5 	bl	80021d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166e:	2360      	movs	r3, #96	; 0x60
 8001670:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	2200      	movs	r2, #0
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM5_Init+0xe8>)
 8001686:	f005 f88b 	bl	80067a0 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001690:	f000 fda2 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM5_Init+0xe8>)
 8001696:	f001 f849 	bl	800272c <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3738      	adds	r7, #56	; 0x38
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000324 	.word	0x20000324
 80016a8:	40000c00 	.word	0x40000c00

080016ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09a      	sub	sp, #104	; 0x68
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	222c      	movs	r2, #44	; 0x2c
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00a fbd8 	bl	800be9c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016ec:	4b56      	ldr	r3, [pc, #344]	; (8001848 <MX_TIM8_Init+0x19c>)
 80016ee:	4a57      	ldr	r2, [pc, #348]	; (800184c <MX_TIM8_Init+0x1a0>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 80016f2:	4b55      	ldr	r3, [pc, #340]	; (8001848 <MX_TIM8_Init+0x19c>)
 80016f4:	f240 32bf 	movw	r2, #959	; 0x3bf
 80016f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	4b53      	ldr	r3, [pc, #332]	; (8001848 <MX_TIM8_Init+0x19c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <MX_TIM8_Init+0x19c>)
 8001702:	f240 128f 	movw	r2, #399	; 0x18f
 8001706:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	4b4f      	ldr	r3, [pc, #316]	; (8001848 <MX_TIM8_Init+0x19c>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800170e:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <MX_TIM8_Init+0x19c>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <MX_TIM8_Init+0x19c>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800171a:	484b      	ldr	r0, [pc, #300]	; (8001848 <MX_TIM8_Init+0x19c>)
 800171c:	f004 f9f3 	bl	8005b06 <HAL_TIM_Base_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001726:	f000 fd57 	bl	80021d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001734:	4619      	mov	r1, r3
 8001736:	4844      	ldr	r0, [pc, #272]	; (8001848 <MX_TIM8_Init+0x19c>)
 8001738:	f005 f946 	bl	80069c8 <HAL_TIM_ConfigClockSource>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001742:	f000 fd49 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001746:	4840      	ldr	r0, [pc, #256]	; (8001848 <MX_TIM8_Init+0x19c>)
 8001748:	f004 fb0d 	bl	8005d66 <HAL_TIM_PWM_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001752:	f000 fd41 	bl	80021d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001762:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001766:	4619      	mov	r1, r3
 8001768:	4837      	ldr	r0, [pc, #220]	; (8001848 <MX_TIM8_Init+0x19c>)
 800176a:	f005 ff07 	bl	800757c <HAL_TIMEx_MasterConfigSynchronization>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001774:	f000 fd30 	bl	80021d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001778:	2360      	movs	r3, #96	; 0x60
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001780:	2300      	movs	r3, #0
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001784:	2300      	movs	r3, #0
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001798:	2200      	movs	r2, #0
 800179a:	4619      	mov	r1, r3
 800179c:	482a      	ldr	r0, [pc, #168]	; (8001848 <MX_TIM8_Init+0x19c>)
 800179e:	f004 ffff 	bl	80067a0 <HAL_TIM_PWM_ConfigChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80017a8:	f000 fd16 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017b0:	2204      	movs	r2, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4824      	ldr	r0, [pc, #144]	; (8001848 <MX_TIM8_Init+0x19c>)
 80017b6:	f004 fff3 	bl	80067a0 <HAL_TIM_PWM_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80017c0:	f000 fd0a 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c8:	2208      	movs	r2, #8
 80017ca:	4619      	mov	r1, r3
 80017cc:	481e      	ldr	r0, [pc, #120]	; (8001848 <MX_TIM8_Init+0x19c>)
 80017ce:	f004 ffe7 	bl	80067a0 <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 80017d8:	f000 fcfe 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e0:	220c      	movs	r2, #12
 80017e2:	4619      	mov	r1, r3
 80017e4:	4818      	ldr	r0, [pc, #96]	; (8001848 <MX_TIM8_Init+0x19c>)
 80017e6:	f004 ffdb 	bl	80067a0 <HAL_TIM_PWM_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 80017f0:	f000 fcf2 	bl	80021d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4807      	ldr	r0, [pc, #28]	; (8001848 <MX_TIM8_Init+0x19c>)
 800182a:	f005 ff35 	bl	8007698 <HAL_TIMEx_ConfigBreakDeadTime>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001834:	f000 fcd0 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <MX_TIM8_Init+0x19c>)
 800183a:	f000 ff77 	bl	800272c <HAL_TIM_MspPostInit>

}
 800183e:	bf00      	nop
 8001840:	3768      	adds	r7, #104	; 0x68
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000370 	.word	0x20000370
 800184c:	40010400 	.word	0x40010400

08001850 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
 8001864:	615a      	str	r2, [r3, #20]
 8001866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <MX_TIM9_Init+0x98>)
 800186a:	4a20      	ldr	r2, [pc, #128]	; (80018ec <MX_TIM9_Init+0x9c>)
 800186c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800186e:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_TIM9_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <MX_TIM9_Init+0x98>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_TIM9_Init+0x98>)
 800187c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001880:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <MX_TIM9_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_TIM9_Init+0x98>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800188e:	4816      	ldr	r0, [pc, #88]	; (80018e8 <MX_TIM9_Init+0x98>)
 8001890:	f004 fa69 	bl	8005d66 <HAL_TIM_PWM_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800189a:	f000 fc9d 	bl	80021d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189e:	2360      	movs	r3, #96	; 0x60
 80018a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <MX_TIM9_Init+0x98>)
 80018b6:	f004 ff73 	bl	80067a0 <HAL_TIM_PWM_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80018c0:	f000 fc8a 	bl	80021d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2204      	movs	r2, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <MX_TIM9_Init+0x98>)
 80018cc:	f004 ff68 	bl	80067a0 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80018d6:	f000 fc7f 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80018da:	4803      	ldr	r0, [pc, #12]	; (80018e8 <MX_TIM9_Init+0x98>)
 80018dc:	f000 ff26 	bl	800272c <HAL_TIM_MspPostInit>

}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200003bc 	.word	0x200003bc
 80018ec:	40014000 	.word	0x40014000

080018f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_UART4_Init+0x58>)
 80018f6:	4a15      	ldr	r2, [pc, #84]	; (800194c <MX_UART4_Init+0x5c>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <MX_UART4_Init+0x58>)
 80018fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001900:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_UART4_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_UART4_Init+0x58>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_UART4_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_UART4_Init+0x58>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_UART4_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_UART4_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_UART4_Init+0x58>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_UART4_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_UART4_Init+0x58>)
 8001934:	f005 ff4c 	bl	80077d0 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800193e:	f000 fc4b 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000408 	.word	0x20000408
 800194c:	40004c00 	.word	0x40004c00

08001950 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_UART5_Init+0x58>)
 8001956:	4a15      	ldr	r2, [pc, #84]	; (80019ac <MX_UART5_Init+0x5c>)
 8001958:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_UART5_Init+0x58>)
 800195c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001960:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_UART5_Init+0x58>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_UART5_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_UART5_Init+0x58>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_UART5_Init+0x58>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_UART5_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_UART5_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_UART5_Init+0x58>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_UART5_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_UART5_Init+0x58>)
 8001994:	f005 ff1c 	bl	80077d0 <HAL_UART_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800199e:	f000 fc1b 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000490 	.word	0x20000490
 80019ac:	40005000 	.word	0x40005000

080019b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019b6:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <MX_USART1_UART_Init+0x5c>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_USART1_UART_Init+0x58>)
 80019f4:	f005 feec 	bl	80077d0 <HAL_UART_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019fe:	f000 fbeb 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000518 	.word	0x20000518
 8001a0c:	40011000 	.word	0x40011000

08001a10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a16:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <MX_USART2_UART_Init+0x58>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a1c:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <MX_USART2_UART_Init+0x5c>)
 8001a1e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a34:	220c      	movs	r2, #12
 8001a36:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <MX_USART2_UART_Init+0x54>)
 8001a52:	f005 febd 	bl	80077d0 <HAL_UART_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001a5c:	f000 fbbc 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200005a0 	.word	0x200005a0
 8001a68:	40004400 	.word	0x40004400
 8001a6c:	000f4240 	.word	0x000f4240

08001a70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a76:	4a15      	ldr	r2, [pc, #84]	; (8001acc <MX_USART3_UART_Init+0x5c>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_USART3_UART_Init+0x58>)
 8001ab4:	f005 fe8c 	bl	80077d0 <HAL_UART_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001abe:	f000 fb8b 	bl	80021d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000628 	.word	0x20000628
 8001acc:	40004800 	.word	0x40004800

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08e      	sub	sp, #56	; 0x38
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae6:	4b97      	ldr	r3, [pc, #604]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a96      	ldr	r2, [pc, #600]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b94      	ldr	r3, [pc, #592]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	4b91      	ldr	r3, [pc, #580]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a90      	ldr	r2, [pc, #576]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b8e      	ldr	r3, [pc, #568]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b16:	4b8b      	ldr	r3, [pc, #556]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a8a      	ldr	r2, [pc, #552]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b1c:	f043 0320 	orr.w	r3, r3, #32
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b88      	ldr	r3, [pc, #544]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2e:	4b85      	ldr	r3, [pc, #532]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a84      	ldr	r2, [pc, #528]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b82      	ldr	r3, [pc, #520]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	4b7f      	ldr	r3, [pc, #508]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a7e      	ldr	r2, [pc, #504]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b7c      	ldr	r3, [pc, #496]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a78      	ldr	r2, [pc, #480]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b76      	ldr	r3, [pc, #472]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a72      	ldr	r2, [pc, #456]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b70      	ldr	r3, [pc, #448]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b8e:	4b6d      	ldr	r3, [pc, #436]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a6c      	ldr	r2, [pc, #432]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <MX_GPIO_Init+0x274>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2118      	movs	r1, #24
 8001baa:	4867      	ldr	r0, [pc, #412]	; (8001d48 <MX_GPIO_Init+0x278>)
 8001bac:	f001 ff44 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f244 0181 	movw	r1, #16513	; 0x4081
 8001bb6:	4865      	ldr	r0, [pc, #404]	; (8001d4c <MX_GPIO_Init+0x27c>)
 8001bb8:	f001 ff3e 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2140      	movs	r1, #64	; 0x40
 8001bc0:	4863      	ldr	r0, [pc, #396]	; (8001d50 <MX_GPIO_Init+0x280>)
 8001bc2:	f001 ff39 	bl	8003a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001bc6:	2318      	movs	r3, #24
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bda:	4619      	mov	r1, r3
 8001bdc:	485a      	ldr	r0, [pc, #360]	; (8001d48 <MX_GPIO_Init+0x278>)
 8001bde:	f001 fd7f 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin
                           GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin|GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin
 8001be2:	f643 7308 	movw	r3, #16136	; 0x3f08
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin|GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4856      	ldr	r0, [pc, #344]	; (8001d54 <MX_GPIO_Init+0x284>)
 8001bfa:	f001 fd71 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bfe:	2310      	movs	r3, #16
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c10:	4619      	mov	r1, r3
 8001c12:	4850      	ldr	r0, [pc, #320]	; (8001d54 <MX_GPIO_Init+0x284>)
 8001c14:	f001 fd64 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c18:	2332      	movs	r3, #50	; 0x32
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c28:	230b      	movs	r3, #11
 8001c2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4849      	ldr	r0, [pc, #292]	; (8001d58 <MX_GPIO_Init+0x288>)
 8001c34:	f001 fd54 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c38:	2386      	movs	r3, #134	; 0x86
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c48:	230b      	movs	r3, #11
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c50:	4619      	mov	r1, r3
 8001c52:	4842      	ldr	r0, [pc, #264]	; (8001d5c <MX_GPIO_Init+0x28c>)
 8001c54:	f001 fd44 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001c58:	f244 0381 	movw	r3, #16513	; 0x4081
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4836      	ldr	r0, [pc, #216]	; (8001d4c <MX_GPIO_Init+0x27c>)
 8001c72:	f001 fd35 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c88:	230b      	movs	r3, #11
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c90:	4619      	mov	r1, r3
 8001c92:	482e      	ldr	r0, [pc, #184]	; (8001d4c <MX_GPIO_Init+0x27c>)
 8001c94:	f001 fd24 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c98:	2340      	movs	r3, #64	; 0x40
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	4619      	mov	r1, r3
 8001cae:	4828      	ldr	r0, [pc, #160]	; (8001d50 <MX_GPIO_Init+0x280>)
 8001cb0:	f001 fd16 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4822      	ldr	r0, [pc, #136]	; (8001d50 <MX_GPIO_Init+0x280>)
 8001cc8:	f001 fd0a 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ccc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cde:	230a      	movs	r3, #10
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	481c      	ldr	r0, [pc, #112]	; (8001d5c <MX_GPIO_Init+0x28c>)
 8001cea:	f001 fcf9 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	4816      	ldr	r0, [pc, #88]	; (8001d5c <MX_GPIO_Init+0x28c>)
 8001d04:	f001 fcec 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d1a:	230b      	movs	r3, #11
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	4619      	mov	r1, r3
 8001d24:	480a      	ldr	r0, [pc, #40]	; (8001d50 <MX_GPIO_Init+0x280>)
 8001d26:	f001 fcdb 	bl	80036e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	200a      	movs	r0, #10
 8001d30:	f001 fc9e 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d34:	200a      	movs	r0, #10
 8001d36:	f001 fcb7 	bl	80036a8 <HAL_NVIC_EnableIRQ>

}
 8001d3a:	bf00      	nop
 8001d3c:	3738      	adds	r7, #56	; 0x38
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020000 	.word	0x40020000

08001d60 <StartControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    osSemaphoreAcquire(binarySemSyncHandle, osWaitForever);
 8001d68:	4ba5      	ldr	r3, [pc, #660]	; (8002000 <StartControlTask+0x2a0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	4618      	mov	r0, r3
 8001d72:	f006 fd29 	bl	80087c8 <osSemaphoreAcquire>

	    static int32_t TIM3_PreviousCount = 0;
	    static int32_t TIM4_PreviousCount = 0;

	    TIM3_CurrentCount = (int32_t) __HAL_TIM_GET_COUNTER(&htim3);
 8001d76:	4ba3      	ldr	r3, [pc, #652]	; (8002004 <StartControlTask+0x2a4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4ba2      	ldr	r3, [pc, #648]	; (8002008 <StartControlTask+0x2a8>)
 8001d80:	601a      	str	r2, [r3, #0]
	    TIM4_CurrentCount = (int32_t) __HAL_TIM_GET_COUNTER(&htim4);
 8001d82:	4ba2      	ldr	r3, [pc, #648]	; (800200c <StartControlTask+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4ba1      	ldr	r3, [pc, #644]	; (8002010 <StartControlTask+0x2b0>)
 8001d8c:	601a      	str	r2, [r3, #0]

	    /* evaluate increment of TIM3 counter from previous count */
	    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8001d8e:	4b9d      	ldr	r3, [pc, #628]	; (8002004 <StartControlTask+0x2a4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d117      	bne.n	8001dcc <StartControlTask+0x6c>
	    {
	      /* check for counter underflow */
	      if (TIM3_CurrentCount <= TIM3_PreviousCount)
 8001d9c:	4b9a      	ldr	r3, [pc, #616]	; (8002008 <StartControlTask+0x2a8>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b9c      	ldr	r3, [pc, #624]	; (8002014 <StartControlTask+0x2b4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dc07      	bgt.n	8001db8 <StartControlTask+0x58>
	        TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8001da8:	4b97      	ldr	r3, [pc, #604]	; (8002008 <StartControlTask+0x2a8>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b99      	ldr	r3, [pc, #612]	; (8002014 <StartControlTask+0x2b4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	4a99      	ldr	r2, [pc, #612]	; (8002018 <StartControlTask+0x2b8>)
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e021      	b.n	8001dfc <StartControlTask+0x9c>
	      else
	        TIM3_DiffCount = -((TIM3_ARR_VALUE + 1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 8001db8:	4b93      	ldr	r3, [pc, #588]	; (8002008 <StartControlTask+0x2a8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f6a3 7201 	subw	r2, r3, #3841	; 0xf01
 8001dc0:	4b94      	ldr	r3, [pc, #592]	; (8002014 <StartControlTask+0x2b4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	4a94      	ldr	r2, [pc, #592]	; (8002018 <StartControlTask+0x2b8>)
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e017      	b.n	8001dfc <StartControlTask+0x9c>
	    }
	    else
	    {
	      /* check for counter overflow */
	      if (TIM3_CurrentCount >= TIM3_PreviousCount)
 8001dcc:	4b8e      	ldr	r3, [pc, #568]	; (8002008 <StartControlTask+0x2a8>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b90      	ldr	r3, [pc, #576]	; (8002014 <StartControlTask+0x2b4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	db07      	blt.n	8001de8 <StartControlTask+0x88>
	        TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8001dd8:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <StartControlTask+0x2a8>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b8d      	ldr	r3, [pc, #564]	; (8002014 <StartControlTask+0x2b4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4a8d      	ldr	r2, [pc, #564]	; (8002018 <StartControlTask+0x2b8>)
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e009      	b.n	8001dfc <StartControlTask+0x9c>
	      else
	        TIM3_DiffCount = ((TIM3_ARR_VALUE + 1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 8001de8:	4b8a      	ldr	r3, [pc, #552]	; (8002014 <StartControlTask+0x2b4>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f640 7301 	movw	r3, #3841	; 0xf01
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	4a85      	ldr	r2, [pc, #532]	; (8002008 <StartControlTask+0x2a8>)
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	4a87      	ldr	r2, [pc, #540]	; (8002018 <StartControlTask+0x2b8>)
 8001dfa:	6013      	str	r3, [r2, #0]
	    }

	    /* evaluate increment of TIM4 counter from previous count */
	    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8001dfc:	4b83      	ldr	r3, [pc, #524]	; (800200c <StartControlTask+0x2ac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d117      	bne.n	8001e3a <StartControlTask+0xda>
	    {
	      /* check for counter underflow */
	      if (TIM4_CurrentCount <= TIM4_PreviousCount)
 8001e0a:	4b81      	ldr	r3, [pc, #516]	; (8002010 <StartControlTask+0x2b0>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b83      	ldr	r3, [pc, #524]	; (800201c <StartControlTask+0x2bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	dc07      	bgt.n	8001e26 <StartControlTask+0xc6>
	        TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8001e16:	4b7e      	ldr	r3, [pc, #504]	; (8002010 <StartControlTask+0x2b0>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b80      	ldr	r3, [pc, #512]	; (800201c <StartControlTask+0x2bc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	4a7f      	ldr	r2, [pc, #508]	; (8002020 <StartControlTask+0x2c0>)
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e020      	b.n	8001e68 <StartControlTask+0x108>
	      else
	        TIM4_DiffCount = -((TIM4_ARR_VALUE + 1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 8001e26:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <StartControlTask+0x2b0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f5a3 6270 	sub.w	r2, r3, #3840	; 0xf00
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	; (800201c <StartControlTask+0x2bc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a7a      	ldr	r2, [pc, #488]	; (8002020 <StartControlTask+0x2c0>)
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e016      	b.n	8001e68 <StartControlTask+0x108>
	    }
	    else
	    {
	      /* check for counter overflow */
	      if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8001e3a:	4b75      	ldr	r3, [pc, #468]	; (8002010 <StartControlTask+0x2b0>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b77      	ldr	r3, [pc, #476]	; (800201c <StartControlTask+0x2bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	db07      	blt.n	8001e56 <StartControlTask+0xf6>
	        TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8001e46:	4b72      	ldr	r3, [pc, #456]	; (8002010 <StartControlTask+0x2b0>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b74      	ldr	r3, [pc, #464]	; (800201c <StartControlTask+0x2bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	4a73      	ldr	r2, [pc, #460]	; (8002020 <StartControlTask+0x2c0>)
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e008      	b.n	8001e68 <StartControlTask+0x108>
	      else
	        TIM4_DiffCount = ((TIM4_ARR_VALUE + 1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 8001e56:	4b71      	ldr	r3, [pc, #452]	; (800201c <StartControlTask+0x2bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f5c3 6270 	rsb	r2, r3, #3840	; 0xf00
 8001e5e:	4b6c      	ldr	r3, [pc, #432]	; (8002010 <StartControlTask+0x2b0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a6e      	ldr	r2, [pc, #440]	; (8002020 <StartControlTask+0x2c0>)
 8001e66:	6013      	str	r3, [r2, #0]
	    }

	    TIM3_PreviousCount = TIM3_CurrentCount;
 8001e68:	4b67      	ldr	r3, [pc, #412]	; (8002008 <StartControlTask+0x2a8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a69      	ldr	r2, [pc, #420]	; (8002014 <StartControlTask+0x2b4>)
 8001e6e:	6013      	str	r3, [r2, #0]
	    TIM4_PreviousCount = TIM4_CurrentCount;
 8001e70:	4b67      	ldr	r3, [pc, #412]	; (8002010 <StartControlTask+0x2b0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a69      	ldr	r2, [pc, #420]	; (800201c <StartControlTask+0x2bc>)
 8001e76:	6013      	str	r3, [r2, #0]

	    // Compute rpm considering 16 pulses per round
	    // This speed [rpm] is considered at the motor side
	    // If we want the speed of the wheels we have to convert this value taking into account the gear ratio
	    // This is done when we pass data to the logger
	    v1 = computeRpm(TIM3_DiffCount);
 8001e78:	4b67      	ldr	r3, [pc, #412]	; (8002018 <StartControlTask+0x2b8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fd27 	bl	80008d0 <computeRpm>
 8001e82:	eef0 7a40 	vmov.f32	s15, s0
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <StartControlTask+0x2c4>)
 8001e88:	edc3 7a00 	vstr	s15, [r3]
	    v2 = computeRpm(TIM4_DiffCount);
 8001e8c:	4b64      	ldr	r3, [pc, #400]	; (8002020 <StartControlTask+0x2c0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fd1d 	bl	80008d0 <computeRpm>
 8001e96:	eef0 7a40 	vmov.f32	s15, s0
 8001e9a:	4b63      	ldr	r3, [pc, #396]	; (8002028 <StartControlTask+0x2c8>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]

	    // Compute tracking error
	    error1 = (float)(speed - v1);
 8001ea0:	4b62      	ldr	r3, [pc, #392]	; (800202c <StartControlTask+0x2cc>)
 8001ea2:	ed93 7a00 	vldr	s14, [r3]
 8001ea6:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <StartControlTask+0x2c4>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	4b5f      	ldr	r3, [pc, #380]	; (8002030 <StartControlTask+0x2d0>)
 8001eb2:	edc3 7a00 	vstr	s15, [r3]
	    error2 = (float)(speed - v2);
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	; (800202c <StartControlTask+0x2cc>)
 8001eb8:	ed93 7a00 	vldr	s14, [r3]
 8001ebc:	4b5a      	ldr	r3, [pc, #360]	; (8002028 <StartControlTask+0x2c8>)
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <StartControlTask+0x2d4>)
 8001ec8:	edc3 7a00 	vstr	s15, [r3]

	    // By reading the maximum value of the error using our voltage limit, we get that the maximum error is 3600
	    // To prevent errors due to strange wrong readings of the encoder, we limit this value

	    if(error1 > 3600)
 8001ecc:	4b58      	ldr	r3, [pc, #352]	; (8002030 <StartControlTask+0x2d0>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002038 <StartControlTask+0x2d8>
 8001ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	dd03      	ble.n	8001ee8 <StartControlTask+0x188>
	    	error1 = 3600;
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <StartControlTask+0x2d0>)
 8001ee2:	4a56      	ldr	r2, [pc, #344]	; (800203c <StartControlTask+0x2dc>)
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e00c      	b.n	8001f02 <StartControlTask+0x1a2>
	    else if(error1 <-3600)
 8001ee8:	4b51      	ldr	r3, [pc, #324]	; (8002030 <StartControlTask+0x2d0>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002040 <StartControlTask+0x2e0>
 8001ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efa:	d502      	bpl.n	8001f02 <StartControlTask+0x1a2>
	    	error1 = -3600;
 8001efc:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <StartControlTask+0x2d0>)
 8001efe:	4a51      	ldr	r2, [pc, #324]	; (8002044 <StartControlTask+0x2e4>)
 8001f00:	601a      	str	r2, [r3, #0]

	    if(error2 > 3600)
 8001f02:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <StartControlTask+0x2d4>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002038 <StartControlTask+0x2d8>
 8001f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	dd03      	ble.n	8001f1e <StartControlTask+0x1be>
	    	error2 = 3600;
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <StartControlTask+0x2d4>)
 8001f18:	4a48      	ldr	r2, [pc, #288]	; (800203c <StartControlTask+0x2dc>)
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e00c      	b.n	8001f38 <StartControlTask+0x1d8>
	    else if(error2 <-3600)
 8001f1e:	4b45      	ldr	r3, [pc, #276]	; (8002034 <StartControlTask+0x2d4>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002040 <StartControlTask+0x2e0>
 8001f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d502      	bpl.n	8001f38 <StartControlTask+0x1d8>
	    	error2 = -3600;
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <StartControlTask+0x2d4>)
 8001f34:	4a43      	ldr	r2, [pc, #268]	; (8002044 <StartControlTask+0x2e4>)
 8001f36:	601a      	str	r2, [r3, #0]

	    // Compute control input with PID
	    vIn1 = PID1(RPM2RADS * error1);
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <StartControlTask+0x2d0>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f42:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001ff8 <StartControlTask+0x298>
 8001f46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f52:	f7fe fc15 	bl	8000780 <PID1>
 8001f56:	eef0 7a40 	vmov.f32	s15, s0
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <StartControlTask+0x2e8>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
	    vIn2 = PID2(RPM2RADS * error2);
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <StartControlTask+0x2d4>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f6a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001ff8 <StartControlTask+0x298>
 8001f6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f76:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7a:	f7fe fc55 	bl	8000828 <PID2>
 8001f7e:	eef0 7a40 	vmov.f32	s15, s0
 8001f82:	4b32      	ldr	r3, [pc, #200]	; (800204c <StartControlTask+0x2ec>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]

	    // Compute duty cycle
	    duty1 = V2DUTY * vIn1;
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <StartControlTask+0x2e8>)
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002050 <StartControlTask+0x2f0>
 8001f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f96:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <StartControlTask+0x2f4>)
 8001f98:	edc3 7a00 	vstr	s15, [r3]
	    duty2 = V2DUTY * vIn2;
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <StartControlTask+0x2ec>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002050 <StartControlTask+0x2f0>
 8001fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <StartControlTask+0x2f8>)
 8001fac:	edc3 7a00 	vstr	s15, [r3]

	    // Speed control routine
	    /* Alternate between forward and coast */
	    /* [Commented] alternate between forward and brake, TIM8_ARR_VALUE is a define*/

	    if (duty1 < 0)
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <StartControlTask+0x2f4>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbe:	d501      	bpl.n	8001fc4 <StartControlTask+0x264>
	    	{uint32_t i = 0;}
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]

	    //duty1 = 100;

	    // Motor 1
	    if (duty1 >= 0) {
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <StartControlTask+0x2f4>)
 8001fc6:	edd3 7a00 	vldr	s15, [r3]
 8001fca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	db45      	blt.n	8002060 <StartControlTask+0x300>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)duty1);
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <StartControlTask+0x2f4>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <StartControlTask+0x2fc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe2:	ee17 2a90 	vmov	r2, s15
 8001fe6:	635a      	str	r2, [r3, #52]	; 0x34
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <StartControlTask+0x2fc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2200      	movs	r2, #0
 8001fee:	639a      	str	r2, [r3, #56]	; 0x38
 8001ff0:	e046      	b.n	8002080 <StartControlTask+0x320>
 8001ff2:	bf00      	nop
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	f37bebd5 	.word	0xf37bebd5
 8001ffc:	3fbacee9 	.word	0x3fbacee9
 8002000:	200006c4 	.word	0x200006c4
 8002004:	2000028c 	.word	0x2000028c
 8002008:	20000794 	.word	0x20000794
 800200c:	200002d8 	.word	0x200002d8
 8002010:	20000798 	.word	0x20000798
 8002014:	200007ec 	.word	0x200007ec
 8002018:	2000079c 	.word	0x2000079c
 800201c:	200007f0 	.word	0x200007f0
 8002020:	200007a0 	.word	0x200007a0
 8002024:	200007bc 	.word	0x200007bc
 8002028:	200007c0 	.word	0x200007c0
 800202c:	20000008 	.word	0x20000008
 8002030:	200007ac 	.word	0x200007ac
 8002034:	200007b0 	.word	0x200007b0
 8002038:	45610000 	.word	0x45610000
 800203c:	45610000 	.word	0x45610000
 8002040:	c5610000 	.word	0xc5610000
 8002044:	c5610000 	.word	0xc5610000
 8002048:	200007b4 	.word	0x200007b4
 800204c:	200007b8 	.word	0x200007b8
 8002050:	42c80000 	.word	0x42c80000
 8002054:	200007a4 	.word	0x200007a4
 8002058:	200007a8 	.word	0x200007a8
 800205c:	20000370 	.word	0x20000370
	       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
	       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, TIM8_ARR_VALUE - duty1);
	    } else {
	      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8002060:	4b2a      	ldr	r3, [pc, #168]	; (800210c <StartControlTask+0x3ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	635a      	str	r2, [r3, #52]	; 0x34
	      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)-duty1);
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <StartControlTask+0x3b0>)
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	eef1 7a67 	vneg.f32	s15, s15
 8002072:	4b26      	ldr	r3, [pc, #152]	; (800210c <StartControlTask+0x3ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800207a:	ee17 2a90 	vmov	r2, s15
 800207e:	639a      	str	r2, [r3, #56]	; 0x38
	    }

	    // Motor 2
	    if (duty2 >= 0) {
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <StartControlTask+0x3b4>)
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800208a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208e:	db0e      	blt.n	80020ae <StartControlTask+0x34e>
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)duty2);
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <StartControlTask+0x3b4>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <StartControlTask+0x3ac>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209e:	ee17 2a90 	vmov	r2, s15
 80020a2:	63da      	str	r2, [r3, #60]	; 0x3c
	       __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <StartControlTask+0x3ac>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
 80020ac:	e00f      	b.n	80020ce <StartControlTask+0x36e>
	       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
	       //__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, TIM8_ARR_VALUE - duty2);
	    } else {
	      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <StartControlTask+0x3ac>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2200      	movs	r2, #0
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c
	      __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)-duty2);
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <StartControlTask+0x3b4>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eef1 7a67 	vneg.f32	s15, s15
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <StartControlTask+0x3ac>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c8:	ee17 2a90 	vmov	r2, s15
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40

	    /*	Prepare data packet */
	    // Error speed and voltage
	    // In this way error and speed should have the same measurement unit

	   data.w1 = error1;
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <StartControlTask+0x3b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <StartControlTask+0x3bc>)
 80020d4:	6013      	str	r3, [r2, #0]
	   data.w2 = v1;
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <StartControlTask+0x3c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <StartControlTask+0x3bc>)
 80020dc:	6053      	str	r3, [r2, #4]
	   data.w3 = vIn1;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <StartControlTask+0x3c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a0e      	ldr	r2, [pc, #56]	; (800211c <StartControlTask+0x3bc>)
 80020e4:	6093      	str	r3, [r2, #8]
	   data.u1 = error2;
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <StartControlTask+0x3c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <StartControlTask+0x3bc>)
 80020ec:	60d3      	str	r3, [r2, #12]
	   data.u2 = v2;
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <StartControlTask+0x3cc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <StartControlTask+0x3bc>)
 80020f4:	6113      	str	r3, [r2, #16]
	   data.u3 = vIn2;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <StartControlTask+0x3d0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <StartControlTask+0x3bc>)
 80020fc:	6153      	str	r3, [r2, #20]

	    osMessageQueuePut("queue1", &data, 0, 0);
 80020fe:	2300      	movs	r3, #0
 8002100:	2200      	movs	r2, #0
 8002102:	4906      	ldr	r1, [pc, #24]	; (800211c <StartControlTask+0x3bc>)
 8002104:	480b      	ldr	r0, [pc, #44]	; (8002134 <StartControlTask+0x3d4>)
 8002106:	f006 fca3 	bl	8008a50 <osMessageQueuePut>
  {
 800210a:	e62d      	b.n	8001d68 <StartControlTask+0x8>
 800210c:	20000370 	.word	0x20000370
 8002110:	200007a4 	.word	0x200007a4
 8002114:	200007a8 	.word	0x200007a8
 8002118:	200007ac 	.word	0x200007ac
 800211c:	200007d4 	.word	0x200007d4
 8002120:	200007bc 	.word	0x200007bc
 8002124:	200007b4 	.word	0x200007b4
 8002128:	200007b0 	.word	0x200007b0
 800212c:	200007c0 	.word	0x200007c0
 8002130:	200007b8 	.word	0x200007b8
 8002134:	0800ce04 	.word	0x0800ce04

08002138 <StartLineTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLineTask */
void StartLineTask(void *argument)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af04      	add	r7, sp, #16
 800213e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLineTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &buff, 1, HAL_TIMEOUT);
 8002140:	2364      	movs	r3, #100	; 0x64
 8002142:	9302      	str	r3, [sp, #8]
 8002144:	2301      	movs	r3, #1
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <StartLineTask+0x30>)
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2301      	movs	r3, #1
 800214e:	2210      	movs	r2, #16
 8002150:	217c      	movs	r1, #124	; 0x7c
 8002152:	4806      	ldr	r0, [pc, #24]	; (800216c <StartLineTask+0x34>)
 8002154:	f001 fe52 	bl	8003dfc <HAL_I2C_Mem_Read>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
	  //osDelayUntil(10);
	  osSemaphoreRelease(binarySemSyncHandle);
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <StartLineTask+0x38>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f006 fb97 	bl	8008894 <osSemaphoreRelease>
  {
 8002166:	e7eb      	b.n	8002140 <StartLineTask+0x8>
 8002168:	2000009c 	.word	0x2000009c
 800216c:	200000e8 	.word	0x200000e8
 8002170:	200006c4 	.word	0x200006c4

08002174 <StartCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommTask */
void StartCommTask(void *argument)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommTask */
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet("queue1", &data, 0, 0);
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	4909      	ldr	r1, [pc, #36]	; (80021a8 <StartCommTask+0x34>)
 8002182:	480a      	ldr	r0, [pc, #40]	; (80021ac <StartCommTask+0x38>)
 8002184:	f006 fcd8 	bl	8008b38 <osMessageQueueGet>
	  if(osMessageQueueGetCapacity("queue1"))
 8002188:	4808      	ldr	r0, [pc, #32]	; (80021ac <StartCommTask+0x38>)
 800218a:	f006 fd47 	bl	8008c1c <osMessageQueueGetCapacity>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f3      	beq.n	800217c <StartCommTask+0x8>
	  {
		    ertc_dlog_send(&logger, &data, sizeof(data));
 8002194:	2218      	movs	r2, #24
 8002196:	4904      	ldr	r1, [pc, #16]	; (80021a8 <StartCommTask+0x34>)
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <StartCommTask+0x3c>)
 800219a:	f7fe fa6d 	bl	8000678 <ertc_dlog_send>
		    ertc_dlog_update(&logger);
 800219e:	4804      	ldr	r0, [pc, #16]	; (80021b0 <StartCommTask+0x3c>)
 80021a0:	f7fe fa96 	bl	80006d0 <ertc_dlog_update>
	  osMessageQueueGet("queue1", &data, 0, 0);
 80021a4:	e7ea      	b.n	800217c <StartCommTask+0x8>
 80021a6:	bf00      	nop
 80021a8:	200007d4 	.word	0x200007d4
 80021ac:	0800ce04 	.word	0x0800ce04
 80021b0:	200006c8 	.word	0x200006c8

080021b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021c6:	f000 fec3 	bl	8002f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40001000 	.word	0x40001000

080021d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <Error_Handler+0x8>
	...

080021e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_MspInit+0x4c>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a10      	ldr	r2, [pc, #64]	; (8002230 <HAL_MspInit+0x4c>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_MspInit+0x4c>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_MspInit+0x4c>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_MspInit+0x4c>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_MspInit+0x4c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	210f      	movs	r1, #15
 800221e:	f06f 0001 	mvn.w	r0, #1
 8002222:	f001 fa25 	bl	8003670 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800

08002234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <HAL_ADC_MspInit+0x74>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d123      	bne.n	800229e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_ADC_MspInit+0x78>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	4a14      	ldr	r2, [pc, #80]	; (80022ac <HAL_ADC_MspInit+0x78>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	6453      	str	r3, [r2, #68]	; 0x44
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_ADC_MspInit+0x78>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_ADC_MspInit+0x78>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_ADC_MspInit+0x78>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_ADC_MspInit+0x78>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8002286:	2308      	movs	r3, #8
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800228a:	2303      	movs	r3, #3
 800228c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <HAL_ADC_MspInit+0x7c>)
 800229a:	f001 fa21 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40012000 	.word	0x40012000
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020000 	.word	0x40020000

080022b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0b0      	sub	sp, #192	; 0xc0
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	2290      	movs	r2, #144	; 0x90
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f009 fde1 	bl	800be9c <memset>
  if(hi2c->Instance==I2C1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a44      	ldr	r2, [pc, #272]	; (80023f0 <HAL_I2C_MspInit+0x13c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d13e      	bne.n	8002362 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4618      	mov	r0, r3
 80022f6:	f002 ff33 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002300:	f7ff ff6a 	bl	80021d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	6313      	str	r3, [r2, #48]	; 0x30
 8002310:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800231c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002324:	2312      	movs	r3, #18
 8002326:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232a:	2301      	movs	r3, #1
 800232c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002336:	2304      	movs	r3, #4
 8002338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002340:	4619      	mov	r1, r3
 8002342:	482d      	ldr	r0, [pc, #180]	; (80023f8 <HAL_I2C_MspInit+0x144>)
 8002344:	f001 f9cc 	bl	80036e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 800234e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002352:	6413      	str	r3, [r2, #64]	; 0x40
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002360:	e041      	b.n	80023e6 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a25      	ldr	r2, [pc, #148]	; (80023fc <HAL_I2C_MspInit+0x148>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d13c      	bne.n	80023e6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800236c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002370:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	4618      	mov	r0, r3
 800237e:	f002 feef 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002388:	f7ff ff26 	bl	80021d8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023a4:	2303      	movs	r3, #3
 80023a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023aa:	2312      	movs	r3, #18
 80023ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023bc:	2304      	movs	r3, #4
 80023be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023c6:	4619      	mov	r1, r3
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <HAL_I2C_MspInit+0x14c>)
 80023ca:	f001 f989 	bl	80036e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 80023d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_I2C_MspInit+0x140>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	bf00      	nop
 80023e8:	37c0      	adds	r7, #192	; 0xc0
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40005400 	.word	0x40005400
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40005800 	.word	0x40005800
 8002400:	40021400 	.word	0x40021400

08002404 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	; 0x30
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a33      	ldr	r2, [pc, #204]	; (80024f0 <HAL_SPI_MspInit+0xec>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d160      	bne.n	80024e8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002426:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a32      	ldr	r2, [pc, #200]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 800242c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 8002474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_SPI_MspInit+0xf0>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002486:	2320      	movs	r3, #32
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002496:	2305      	movs	r3, #5
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 031c 	add.w	r3, r7, #28
 800249e:	4619      	mov	r1, r3
 80024a0:	4815      	ldr	r0, [pc, #84]	; (80024f8 <HAL_SPI_MspInit+0xf4>)
 80024a2:	f001 f91d 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024b6:	2305      	movs	r3, #5
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	480e      	ldr	r0, [pc, #56]	; (80024fc <HAL_SPI_MspInit+0xf8>)
 80024c2:	f001 f90d 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024d8:	2305      	movs	r3, #5
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	4619      	mov	r1, r3
 80024e2:	4807      	ldr	r0, [pc, #28]	; (8002500 <HAL_SPI_MspInit+0xfc>)
 80024e4:	f001 f8fc 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024e8:	bf00      	nop
 80024ea:	3730      	adds	r7, #48	; 0x30
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40013000 	.word	0x40013000
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020c00 	.word	0x40020c00
 8002500:	40021800 	.word	0x40021800

08002504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	; 0x30
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a32      	ldr	r2, [pc, #200]	; (80025ec <HAL_TIM_Base_MspInit+0xe8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d10c      	bne.n	8002540 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002526:	4b32      	ldr	r3, [pc, #200]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a31      	ldr	r2, [pc, #196]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800253e:	e051      	b.n	80025e4 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002548:	d129      	bne.n	800259e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254a:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a28      	ldr	r2, [pc, #160]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 800257a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258c:	2301      	movs	r3, #1
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002590:	f107 031c 	add.w	r3, r7, #28
 8002594:	4619      	mov	r1, r3
 8002596:	4817      	ldr	r0, [pc, #92]	; (80025f4 <HAL_TIM_Base_MspInit+0xf0>)
 8002598:	f001 f8a2 	bl	80036e0 <HAL_GPIO_Init>
}
 800259c:	e022      	b.n	80025e4 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <HAL_TIM_Base_MspInit+0xf4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10c      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 80025ae:	f043 0308 	orr.w	r3, r3, #8
 80025b2:	6413      	str	r3, [r2, #64]	; 0x40
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	e010      	b.n	80025e4 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_TIM_Base_MspInit+0xf8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d10b      	bne.n	80025e4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	6453      	str	r3, [r2, #68]	; 0x44
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_TIM_Base_MspInit+0xec>)
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
}
 80025e4:	bf00      	nop
 80025e6:	3730      	adds	r7, #48	; 0x30
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020400 	.word	0x40020400
 80025f8:	40000c00 	.word	0x40000c00
 80025fc:	40010400 	.word	0x40010400

08002600 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a2e      	ldr	r2, [pc, #184]	; (80026d8 <HAL_TIM_Encoder_MspInit+0xd8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d128      	bne.n	8002674 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002622:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a2d      	ldr	r2, [pc, #180]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
 800262e:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	4b28      	ldr	r3, [pc, #160]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a27      	ldr	r2, [pc, #156]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b25      	ldr	r3, [pc, #148]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 8002652:	2330      	movs	r3, #48	; 0x30
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002662:	2302      	movs	r3, #2
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	481c      	ldr	r0, [pc, #112]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800266e:	f001 f837 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002672:	e02d      	b.n	80026d0 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1a      	ldr	r2, [pc, #104]	; (80026e4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d128      	bne.n	80026d0 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800267e:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a16      	ldr	r2, [pc, #88]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_TIM_Encoder_MspInit+0xdc>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 80026ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026c0:	2302      	movs	r3, #2
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4807      	ldr	r0, [pc, #28]	; (80026e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80026cc:	f001 f808 	bl	80036e0 <HAL_GPIO_Init>
}
 80026d0:	bf00      	nop
 80026d2:	3730      	adds	r7, #48	; 0x30
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020400 	.word	0x40020400
 80026e4:	40000800 	.word	0x40000800
 80026e8:	40020c00 	.word	0x40020c00

080026ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <HAL_TIM_PWM_MspInit+0x38>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10b      	bne.n	8002716 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_TIM_PWM_MspInit+0x3c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_TIM_PWM_MspInit+0x3c>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_TIM_PWM_MspInit+0x3c>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40014000 	.word	0x40014000
 8002728:	40023800 	.word	0x40023800

0800272c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a56      	ldr	r2, [pc, #344]	; (80028a4 <HAL_TIM_MspPostInit+0x178>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d11d      	bne.n	800278a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800274e:	4b56      	ldr	r3, [pc, #344]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a55      	ldr	r2, [pc, #340]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 8002754:	f043 0310 	orr.w	r3, r3, #16
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 8002766:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002778:	2301      	movs	r3, #1
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	4619      	mov	r1, r3
 8002782:	484a      	ldr	r0, [pc, #296]	; (80028ac <HAL_TIM_MspPostInit+0x180>)
 8002784:	f000 ffac 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002788:	e088      	b.n	800289c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d11d      	bne.n	80027d0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b44      	ldr	r3, [pc, #272]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	4a43      	ldr	r2, [pc, #268]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6313      	str	r3, [r2, #48]	; 0x30
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 80027ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027be:	2301      	movs	r3, #1
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 031c 	add.w	r3, r7, #28
 80027c6:	4619      	mov	r1, r3
 80027c8:	4839      	ldr	r0, [pc, #228]	; (80028b0 <HAL_TIM_MspPostInit+0x184>)
 80027ca:	f000 ff89 	bl	80036e0 <HAL_GPIO_Init>
}
 80027ce:	e065      	b.n	800289c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a37      	ldr	r2, [pc, #220]	; (80028b4 <HAL_TIM_MspPostInit+0x188>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d11c      	bne.n	8002814 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a32      	ldr	r2, [pc, #200]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002802:	2302      	movs	r3, #2
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4828      	ldr	r0, [pc, #160]	; (80028b0 <HAL_TIM_MspPostInit+0x184>)
 800280e:	f000 ff67 	bl	80036e0 <HAL_GPIO_Init>
}
 8002812:	e043      	b.n	800289c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_TIM_MspPostInit+0x18c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d11d      	bne.n	800285a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 8002836:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002848:	2303      	movs	r3, #3
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4619      	mov	r1, r3
 8002852:	481a      	ldr	r0, [pc, #104]	; (80028bc <HAL_TIM_MspPostInit+0x190>)
 8002854:	f000 ff44 	bl	80036e0 <HAL_GPIO_Init>
}
 8002858:	e020      	b.n	800289c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <HAL_TIM_MspPostInit+0x194>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d11b      	bne.n	800289c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002864:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 800286a:	f043 0310 	orr.w	r3, r3, #16
 800286e:	6313      	str	r3, [r2, #48]	; 0x30
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_TIM_MspPostInit+0x17c>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 800287c:	2360      	movs	r3, #96	; 0x60
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800288c:	2303      	movs	r3, #3
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	4805      	ldr	r0, [pc, #20]	; (80028ac <HAL_TIM_MspPostInit+0x180>)
 8002898:	f000 ff22 	bl	80036e0 <HAL_GPIO_Init>
}
 800289c:	bf00      	nop
 800289e:	3730      	adds	r7, #48	; 0x30
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40010000 	.word	0x40010000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40000c00 	.word	0x40000c00
 80028b8:	40010400 	.word	0x40010400
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40014000 	.word	0x40014000

080028c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b0b6      	sub	sp, #216	; 0xd8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028e0:	2290      	movs	r2, #144	; 0x90
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f009 fad9 	bl	800be9c <memset>
  if(huart->Instance==UART4)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4aa0      	ldr	r2, [pc, #640]	; (8002b70 <HAL_UART_MspInit+0x2ac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d13e      	bne.n	8002972 <HAL_UART_MspInit+0xae>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80028f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002900:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fc2b 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002910:	f7ff fc62 	bl	80021d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002914:	4b97      	ldr	r3, [pc, #604]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a96      	ldr	r2, [pc, #600]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 800291a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
 8002920:	4b94      	ldr	r3, [pc, #592]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002928:	633b      	str	r3, [r7, #48]	; 0x30
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800292c:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a90      	ldr	r2, [pc, #576]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b8e      	ldr	r3, [pc, #568]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002944:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800295e:	2308      	movs	r3, #8
 8002960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002964:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002968:	4619      	mov	r1, r3
 800296a:	4883      	ldr	r0, [pc, #524]	; (8002b78 <HAL_UART_MspInit+0x2b4>)
 800296c:	f000 feb8 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002970:	e151      	b.n	8002c16 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a81      	ldr	r2, [pc, #516]	; (8002b7c <HAL_UART_MspInit+0x2b8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d160      	bne.n	8002a3e <HAL_UART_MspInit+0x17a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800297c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fbe7 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002998:	f7ff fc1e 	bl	80021d8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800299c:	4b75      	ldr	r3, [pc, #468]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	4a74      	ldr	r2, [pc, #464]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a6:	6413      	str	r3, [r2, #64]	; 0x40
 80029a8:	4b72      	ldr	r3, [pc, #456]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b4:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	4a6e      	ldr	r2, [pc, #440]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	6313      	str	r3, [r2, #48]	; 0x30
 80029c0:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029cc:	4b69      	ldr	r3, [pc, #420]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	4a68      	ldr	r2, [pc, #416]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	6313      	str	r3, [r2, #48]	; 0x30
 80029d8:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	623b      	str	r3, [r7, #32]
 80029e2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029fe:	2308      	movs	r3, #8
 8002a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a08:	4619      	mov	r1, r3
 8002a0a:	485d      	ldr	r0, [pc, #372]	; (8002b80 <HAL_UART_MspInit+0x2bc>)
 8002a0c:	f000 fe68 	bl	80036e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4850      	ldr	r0, [pc, #320]	; (8002b78 <HAL_UART_MspInit+0x2b4>)
 8002a38:	f000 fe52 	bl	80036e0 <HAL_GPIO_Init>
}
 8002a3c:	e0eb      	b.n	8002c16 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a50      	ldr	r2, [pc, #320]	; (8002b84 <HAL_UART_MspInit+0x2c0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d151      	bne.n	8002aec <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a48:	2340      	movs	r3, #64	; 0x40
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 fb83 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002a60:	f7ff fbba 	bl	80021d8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a64:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	4a42      	ldr	r2, [pc, #264]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002a6a:	f043 0310 	orr.w	r3, r3, #16
 8002a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a70:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7c:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	4a3c      	ldr	r2, [pc, #240]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	6313      	str	r3, [r2, #48]	; 0x30
 8002a88:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4831      	ldr	r0, [pc, #196]	; (8002b80 <HAL_UART_MspInit+0x2bc>)
 8002abc:	f000 fe10 	bl	80036e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ac0:	2340      	movs	r3, #64	; 0x40
 8002ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ad8:	2307      	movs	r3, #7
 8002ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ade:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4826      	ldr	r0, [pc, #152]	; (8002b80 <HAL_UART_MspInit+0x2bc>)
 8002ae6:	f000 fdfb 	bl	80036e0 <HAL_GPIO_Init>
}
 8002aea:	e094      	b.n	8002c16 <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a25      	ldr	r2, [pc, #148]	; (8002b88 <HAL_UART_MspInit+0x2c4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d14c      	bne.n	8002b90 <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002afa:	2300      	movs	r3, #0
 8002afc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002afe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fb2c 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002b0e:	f7ff fb63 	bl	80021d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002b30:	f043 0308 	orr.w	r3, r3, #8
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_UART_MspInit+0x2b0>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b42:	2360      	movs	r3, #96	; 0x60
 8002b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4809      	ldr	r0, [pc, #36]	; (8002b8c <HAL_UART_MspInit+0x2c8>)
 8002b68:	f000 fdba 	bl	80036e0 <HAL_GPIO_Init>
}
 8002b6c:	e053      	b.n	8002c16 <HAL_UART_MspInit+0x352>
 8002b6e:	bf00      	nop
 8002b70:	40004c00 	.word	0x40004c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020800 	.word	0x40020800
 8002b7c:	40005000 	.word	0x40005000
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40011000 	.word	0x40011000
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_UART_MspInit+0x35c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d13d      	bne.n	8002c16 <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002baa:	4618      	mov	r0, r3
 8002bac:	f002 fad8 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002bb6:	f7ff fb0f 	bl	80021d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_UART_MspInit+0x360>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_UART_MspInit+0x360>)
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b17      	ldr	r3, [pc, #92]	; (8002c24 <HAL_UART_MspInit+0x360>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_UART_MspInit+0x360>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_UART_MspInit+0x360>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_UART_MspInit+0x360>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c04:	2307      	movs	r3, #7
 8002c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4805      	ldr	r0, [pc, #20]	; (8002c28 <HAL_UART_MspInit+0x364>)
 8002c12:	f000 fd65 	bl	80036e0 <HAL_GPIO_Init>
}
 8002c16:	bf00      	nop
 8002c18:	37d8      	adds	r7, #216	; 0xd8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40004800 	.word	0x40004800
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020c00 	.word	0x40020c00

08002c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08e      	sub	sp, #56	; 0x38
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c3c:	4b33      	ldr	r3, [pc, #204]	; (8002d0c <HAL_InitTick+0xe0>)
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <HAL_InitTick+0xe0>)
 8002c42:	f043 0310 	orr.w	r3, r3, #16
 8002c46:	6413      	str	r3, [r2, #64]	; 0x40
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_InitTick+0xe0>)
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c54:	f107 0210 	add.w	r2, r7, #16
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fa4c 	bl	80050fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d103      	bne.n	8002c76 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c6e:	f002 fa1d 	bl	80050ac <HAL_RCC_GetPCLK1Freq>
 8002c72:	6378      	str	r0, [r7, #52]	; 0x34
 8002c74:	e004      	b.n	8002c80 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c76:	f002 fa19 	bl	80050ac <HAL_RCC_GetPCLK1Freq>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c82:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <HAL_InitTick+0xe4>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	0c9b      	lsrs	r3, r3, #18
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c8e:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <HAL_InitTick+0xe8>)
 8002c90:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <HAL_InitTick+0xec>)
 8002c92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c94:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_InitTick+0xe8>)
 8002c96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_InitTick+0xe8>)
 8002c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <HAL_InitTick+0xe8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_InitTick+0xe8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cae:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_InitTick+0xe8>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002cb4:	4817      	ldr	r0, [pc, #92]	; (8002d14 <HAL_InitTick+0xe8>)
 8002cb6:	f002 ff26 	bl	8005b06 <HAL_TIM_Base_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d11b      	bne.n	8002d00 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cc8:	4812      	ldr	r0, [pc, #72]	; (8002d14 <HAL_InitTick+0xe8>)
 8002cca:	f002 ff73 	bl	8005bb4 <HAL_TIM_Base_Start_IT>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002cd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d111      	bne.n	8002d00 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cdc:	2036      	movs	r0, #54	; 0x36
 8002cde:	f000 fce3 	bl	80036a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d808      	bhi.n	8002cfa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	2036      	movs	r0, #54	; 0x36
 8002cee:	f000 fcbf 	bl	8003670 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_InitTick+0xf0>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e002      	b.n	8002d00 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3738      	adds	r7, #56	; 0x38
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	431bde83 	.word	0x431bde83
 8002d14:	200007f4 	.word	0x200007f4
 8002d18:	40001000 	.word	0x40001000
 8002d1c:	20000010 	.word	0x20000010

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <NMI_Handler+0x4>

08002d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2a:	e7fe      	b.n	8002d2a <HardFault_Handler+0x4>

08002d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d30:	e7fe      	b.n	8002d30 <MemManage_Handler+0x4>

08002d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d36:	e7fe      	b.n	8002d36 <BusFault_Handler+0x4>

08002d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <UsageFault_Handler+0x4>

08002d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002d50:	2010      	movs	r0, #16
 8002d52:	f000 fe8b 	bl	8003a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <TIM6_DAC_IRQHandler+0x10>)
 8002d62:	f003 fae7 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200007f4 	.word	0x200007f4

08002d70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	e00a      	b.n	8002d98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d82:	f3af 8000 	nop.w
 8002d86:	4601      	mov	r1, r0
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	60ba      	str	r2, [r7, #8]
 8002d8e:	b2ca      	uxtb	r2, r1
 8002d90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	3301      	adds	r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	dbf0      	blt.n	8002d82 <_read+0x12>
	}

return len;
 8002da0:	687b      	ldr	r3, [r7, #4]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e009      	b.n	8002dd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	60ba      	str	r2, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	dbf1      	blt.n	8002dbc <_write+0x12>
	}
	return len;
 8002dd8:	687b      	ldr	r3, [r7, #4]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_close>:

int _close(int file)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	return -1;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <_isatty>:

int _isatty(int file)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
	return 1;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f008 ffd6 	bl	800be2c <__errno>
 8002e80:	4603      	mov	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <_sbrk+0x64>)
 8002e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20080000 	.word	0x20080000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	20000840 	.word	0x20000840
 8002eb4:	200051a0 	.word	0x200051a0

08002eb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <SystemInit+0x28>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	4a07      	ldr	r2, [pc, #28]	; (8002ee0 <SystemInit+0x28>)
 8002ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <SystemInit+0x28>)
 8002ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ed2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eea:	e003      	b.n	8002ef4 <LoopCopyDataInit>

08002eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ef2:	3104      	adds	r1, #4

08002ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ef4:	480b      	ldr	r0, [pc, #44]	; (8002f24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002efc:	d3f6      	bcc.n	8002eec <CopyDataInit>
  ldr  r2, =_sbss
 8002efe:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f00:	e002      	b.n	8002f08 <LoopFillZerobss>

08002f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f04:	f842 3b04 	str.w	r3, [r2], #4

08002f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f0c:	d3f9      	bcc.n	8002f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f0e:	f7ff ffd3 	bl	8002eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f12:	f008 ff91 	bl	800be38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f16:	f7fd fd1f 	bl	8000958 <main>
  bx  lr    
 8002f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f1c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002f20:	0800cfc4 	.word	0x0800cfc4
  ldr  r0, =_sdata
 8002f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f28:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8002f2c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002f30:	200051a0 	.word	0x200051a0

08002f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f34:	e7fe      	b.n	8002f34 <ADC_IRQHandler>

08002f36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f3a:	2003      	movs	r0, #3
 8002f3c:	f000 fb8d 	bl	800365a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f40:	200f      	movs	r0, #15
 8002f42:	f7ff fe73 	bl	8002c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f46:	f7ff f94d 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_IncTick+0x20>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_IncTick+0x24>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_IncTick+0x24>)
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000014 	.word	0x20000014
 8002f74:	20000844 	.word	0x20000844

08002f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_GetTick+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000844 	.word	0x20000844

08002f90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e031      	b.n	800300a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff f940 	bl	8002234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_ADC_Init+0x84>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f970 	bl	80032c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	f043 0201 	orr.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8002ffa:	e001      	b.n	8003000 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	ffffeefd 	.word	0xffffeefd

08003018 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x1c>
 8003030:	2302      	movs	r3, #2
 8003032:	e136      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x28a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b09      	cmp	r3, #9
 8003042:	d93a      	bls.n	80030ba <HAL_ADC_ConfigChannel+0xa2>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800304c:	d035      	beq.n	80030ba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68d9      	ldr	r1, [r3, #12]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	3b1e      	subs	r3, #30
 8003064:	2207      	movs	r2, #7
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	400a      	ands	r2, r1
 8003072:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a8d      	ldr	r2, [pc, #564]	; (80032b0 <HAL_ADC_ConfigChannel+0x298>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68d9      	ldr	r1, [r3, #12]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	061a      	lsls	r2, r3, #24
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003092:	e035      	b.n	8003100 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68d9      	ldr	r1, [r3, #12]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4618      	mov	r0, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4403      	add	r3, r0
 80030ac:	3b1e      	subs	r3, #30
 80030ae:	409a      	lsls	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030b8:	e022      	b.n	8003100 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6919      	ldr	r1, [r3, #16]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	2207      	movs	r2, #7
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43da      	mvns	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	400a      	ands	r2, r1
 80030dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6919      	ldr	r1, [r3, #16]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	4618      	mov	r0, r3
 80030f0:	4603      	mov	r3, r0
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4403      	add	r3, r0
 80030f6:	409a      	lsls	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b06      	cmp	r3, #6
 8003106:	d824      	bhi.n	8003152 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	3b05      	subs	r3, #5
 800311a:	221f      	movs	r2, #31
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43da      	mvns	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	400a      	ands	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	4618      	mov	r0, r3
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	3b05      	subs	r3, #5
 8003144:	fa00 f203 	lsl.w	r2, r0, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	635a      	str	r2, [r3, #52]	; 0x34
 8003150:	e04c      	b.n	80031ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d824      	bhi.n	80031a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	3b23      	subs	r3, #35	; 0x23
 800316c:	221f      	movs	r2, #31
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	400a      	ands	r2, r1
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	4618      	mov	r0, r3
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	3b23      	subs	r3, #35	; 0x23
 8003196:	fa00 f203 	lsl.w	r2, r0, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
 80031a2:	e023      	b.n	80031ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	3b41      	subs	r3, #65	; 0x41
 80031b6:	221f      	movs	r2, #31
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43da      	mvns	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	400a      	ands	r2, r1
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	4618      	mov	r0, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	3b41      	subs	r3, #65	; 0x41
 80031e0:	fa00 f203 	lsl.w	r2, r0, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <HAL_ADC_ConfigChannel+0x29c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10a      	bne.n	800320c <HAL_ADC_ConfigChannel+0x1f4>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031fe:	d105      	bne.n	800320c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a2c      	ldr	r2, [pc, #176]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003206:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800320a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a28      	ldr	r2, [pc, #160]	; (80032b4 <HAL_ADC_ConfigChannel+0x29c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10f      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x21e>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b12      	cmp	r3, #18
 800321c:	d10b      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003224:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003228:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800322a:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003234:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <HAL_ADC_ConfigChannel+0x29c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d12b      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x280>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1a      	ldr	r2, [pc, #104]	; (80032b0 <HAL_ADC_ConfigChannel+0x298>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <HAL_ADC_ConfigChannel+0x23a>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b11      	cmp	r3, #17
 8003250:	d122      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003252:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a18      	ldr	r2, [pc, #96]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003258:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800325c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_ADC_ConfigChannel+0x2a0>)
 8003264:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003268:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_ADC_ConfigChannel+0x298>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d111      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_ADC_ConfigChannel+0x2a4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <HAL_ADC_ConfigChannel+0x2a8>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0c9a      	lsrs	r2, r3, #18
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800328a:	e002      	b.n	8003292 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f9      	bne.n	800328c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	10000012 	.word	0x10000012
 80032b4:	40012000 	.word	0x40012000
 80032b8:	40012300 	.word	0x40012300
 80032bc:	2000000c 	.word	0x2000000c
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80032cc:	4b78      	ldr	r3, [pc, #480]	; (80034b0 <ADC_Init+0x1ec>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4a77      	ldr	r2, [pc, #476]	; (80034b0 <ADC_Init+0x1ec>)
 80032d2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80032d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80032d8:	4b75      	ldr	r3, [pc, #468]	; (80034b0 <ADC_Init+0x1ec>)
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4973      	ldr	r1, [pc, #460]	; (80034b0 <ADC_Init+0x1ec>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6899      	ldr	r1, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <ADC_Init+0x1f0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d022      	beq.n	800339e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003366:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	e00f      	b.n	80033be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0202 	bic.w	r2, r2, #2
 80033cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01b      	beq.n	8003424 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800340a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	3b01      	subs	r3, #1
 8003418:	035a      	lsls	r2, r3, #13
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	e007      	b.n	8003434 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003432:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	3b01      	subs	r3, #1
 8003450:	051a      	lsls	r2, r3, #20
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003468:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6899      	ldr	r1, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003476:	025a      	lsls	r2, r3, #9
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6899      	ldr	r1, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	029a      	lsls	r2, r3, #10
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40012300 	.word	0x40012300
 80034b4:	0f000001 	.word	0x0f000001

080034b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <__NVIC_SetPriorityGrouping+0x40>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e6:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <__NVIC_SetPriorityGrouping+0x40>)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	60d3      	str	r3, [r2, #12]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00
 80034fc:	05fa0000 	.word	0x05fa0000

08003500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <__NVIC_GetPriorityGrouping+0x18>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 0307 	and.w	r3, r3, #7
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db0b      	blt.n	8003546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4907      	ldr	r1, [pc, #28]	; (8003554 <__NVIC_EnableIRQ+0x38>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2001      	movs	r0, #1
 800353e:	fa00 f202 	lsl.w	r2, r0, r2
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	db12      	blt.n	8003590 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	490a      	ldr	r1, [pc, #40]	; (800359c <__NVIC_DisableIRQ+0x44>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2001      	movs	r0, #1
 800357a:	fa00 f202 	lsl.w	r2, r0, r2
 800357e:	3320      	adds	r3, #32
 8003580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003584:	f3bf 8f4f 	dsb	sy
}
 8003588:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800358a:	f3bf 8f6f 	isb	sy
}
 800358e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100

080035a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	db0a      	blt.n	80035ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	490c      	ldr	r1, [pc, #48]	; (80035ec <__NVIC_SetPriority+0x4c>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	440b      	add	r3, r1
 80035c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c8:	e00a      	b.n	80035e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4908      	ldr	r1, [pc, #32]	; (80035f0 <__NVIC_SetPriority+0x50>)
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	3b04      	subs	r3, #4
 80035d8:	0112      	lsls	r2, r2, #4
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	440b      	add	r3, r1
 80035de:	761a      	strb	r2, [r3, #24]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000e100 	.word	0xe000e100
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f1c3 0307 	rsb	r3, r3, #7
 800360e:	2b04      	cmp	r3, #4
 8003610:	bf28      	it	cs
 8003612:	2304      	movcs	r3, #4
 8003614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3304      	adds	r3, #4
 800361a:	2b06      	cmp	r3, #6
 800361c:	d902      	bls.n	8003624 <NVIC_EncodePriority+0x30>
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3b03      	subs	r3, #3
 8003622:	e000      	b.n	8003626 <NVIC_EncodePriority+0x32>
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	f04f 32ff 	mov.w	r2, #4294967295
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	401a      	ands	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800363c:	f04f 31ff 	mov.w	r1, #4294967295
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	43d9      	mvns	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	4313      	orrs	r3, r2
         );
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ff28 	bl	80034b8 <__NVIC_SetPriorityGrouping>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003682:	f7ff ff3d 	bl	8003500 <__NVIC_GetPriorityGrouping>
 8003686:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	6978      	ldr	r0, [r7, #20]
 800368e:	f7ff ffb1 	bl	80035f4 <NVIC_EncodePriority>
 8003692:	4602      	mov	r2, r0
 8003694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ff80 	bl	80035a0 <__NVIC_SetPriority>
}
 80036a0:	bf00      	nop
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ff30 	bl	800351c <__NVIC_EnableIRQ>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ff40 	bl	8003558 <__NVIC_DisableIRQ>
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e175      	b.n	80039ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 8164 	bne.w	80039e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d005      	beq.n	8003736 <HAL_GPIO_Init+0x56>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d130      	bne.n	8003798 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800376c:	2201      	movs	r2, #1
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 0201 	and.w	r2, r3, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d017      	beq.n	80037d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80be 	beq.w	80039e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <HAL_GPIO_Init+0x324>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a65      	ldr	r2, [pc, #404]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003882:	4a61      	ldr	r2, [pc, #388]	; (8003a08 <HAL_GPIO_Init+0x328>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_GPIO_Init+0x32c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d037      	beq.n	800391e <HAL_GPIO_Init+0x23e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_GPIO_Init+0x330>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_GPIO_Init+0x23a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_GPIO_Init+0x334>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d02b      	beq.n	8003916 <HAL_GPIO_Init+0x236>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a55      	ldr	r2, [pc, #340]	; (8003a18 <HAL_GPIO_Init+0x338>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d025      	beq.n	8003912 <HAL_GPIO_Init+0x232>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a54      	ldr	r2, [pc, #336]	; (8003a1c <HAL_GPIO_Init+0x33c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01f      	beq.n	800390e <HAL_GPIO_Init+0x22e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a53      	ldr	r2, [pc, #332]	; (8003a20 <HAL_GPIO_Init+0x340>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d019      	beq.n	800390a <HAL_GPIO_Init+0x22a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_GPIO_Init+0x344>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_GPIO_Init+0x226>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a51      	ldr	r2, [pc, #324]	; (8003a28 <HAL_GPIO_Init+0x348>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00d      	beq.n	8003902 <HAL_GPIO_Init+0x222>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a50      	ldr	r2, [pc, #320]	; (8003a2c <HAL_GPIO_Init+0x34c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <HAL_GPIO_Init+0x21e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4f      	ldr	r2, [pc, #316]	; (8003a30 <HAL_GPIO_Init+0x350>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_GPIO_Init+0x21a>
 80038f6:	2309      	movs	r3, #9
 80038f8:	e012      	b.n	8003920 <HAL_GPIO_Init+0x240>
 80038fa:	230a      	movs	r3, #10
 80038fc:	e010      	b.n	8003920 <HAL_GPIO_Init+0x240>
 80038fe:	2308      	movs	r3, #8
 8003900:	e00e      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003902:	2307      	movs	r3, #7
 8003904:	e00c      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003906:	2306      	movs	r3, #6
 8003908:	e00a      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800390a:	2305      	movs	r3, #5
 800390c:	e008      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800390e:	2304      	movs	r3, #4
 8003910:	e006      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003912:	2303      	movs	r3, #3
 8003914:	e004      	b.n	8003920 <HAL_GPIO_Init+0x240>
 8003916:	2302      	movs	r3, #2
 8003918:	e002      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <HAL_GPIO_Init+0x240>
 800391e:	2300      	movs	r3, #0
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f002 0203 	and.w	r2, r2, #3
 8003926:	0092      	lsls	r2, r2, #2
 8003928:	4093      	lsls	r3, r2
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003930:	4935      	ldr	r1, [pc, #212]	; (8003a08 <HAL_GPIO_Init+0x328>)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	3302      	adds	r3, #2
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393e:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <HAL_GPIO_Init+0x354>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003962:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <HAL_GPIO_Init+0x354>)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003968:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <HAL_GPIO_Init+0x354>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800398c:	4a29      	ldr	r2, [pc, #164]	; (8003a34 <HAL_GPIO_Init+0x354>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003992:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_GPIO_Init+0x354>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b6:	4a1f      	ldr	r2, [pc, #124]	; (8003a34 <HAL_GPIO_Init+0x354>)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039bc:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <HAL_GPIO_Init+0x354>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_GPIO_Init+0x354>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3301      	adds	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b0f      	cmp	r3, #15
 80039f0:	f67f ae86 	bls.w	8003700 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3724      	adds	r7, #36	; 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40013800 	.word	0x40013800
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	40020400 	.word	0x40020400
 8003a14:	40020800 	.word	0x40020800
 8003a18:	40020c00 	.word	0x40020c00
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40021400 	.word	0x40021400
 8003a24:	40021800 	.word	0x40021800
 8003a28:	40021c00 	.word	0x40021c00
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40022400 	.word	0x40022400
 8003a34:	40013c00 	.word	0x40013c00

08003a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a48:	787b      	ldrb	r3, [r7, #1]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a54:	e003      	b.n	8003a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a56:	887b      	ldrh	r3, [r7, #2]
 8003a58:	041a      	lsls	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	619a      	str	r2, [r3, #24]
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a76:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f806 	bl	8003a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40013c00 	.word	0x40013c00

08003a9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e07f      	b.n	8003bc6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fe fbea 	bl	80022b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	; 0x24
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d107      	bne.n	8003b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	e006      	b.n	8003b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d104      	bne.n	8003b4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_I2C_Init+0x11c>)
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69d9      	ldr	r1, [r3, #28]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	02008000 	.word	0x02008000

08003bd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	460b      	mov	r3, r1
 8003be8:	813b      	strh	r3, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	f040 80f9 	bne.w	8003dee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_I2C_Mem_Write+0x34>
 8003c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0ed      	b.n	8003df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_I2C_Mem_Write+0x4e>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e0e6      	b.n	8003df0 <HAL_I2C_Mem_Write+0x21c>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c2a:	f7ff f9a5 	bl	8002f78 <HAL_GetTick>
 8003c2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2319      	movs	r3, #25
 8003c36:	2201      	movs	r2, #1
 8003c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fac3 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0d1      	b.n	8003df0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2221      	movs	r2, #33	; 0x21
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a3a      	ldr	r2, [r7, #32]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c74:	88f8      	ldrh	r0, [r7, #6]
 8003c76:	893a      	ldrh	r2, [r7, #8]
 8003c78:	8979      	ldrh	r1, [r7, #10]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	9301      	str	r3, [sp, #4]
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	4603      	mov	r3, r0
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f9d3 	bl	8004030 <I2C_RequestMemoryWrite>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0a9      	b.n	8003df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2bff      	cmp	r3, #255	; 0xff
 8003ca4:	d90e      	bls.n	8003cc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	8979      	ldrh	r1, [r7, #10]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fc1f 	bl	8004500 <I2C_TransferConfig>
 8003cc2:	e00f      	b.n	8003ce4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	8979      	ldrh	r1, [r7, #10]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fc0e 	bl	8004500 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 faad 	bl	8004248 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e07b      	b.n	8003df0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d034      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x1c8>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d130      	bne.n	8003d9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fa3f 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e04d      	b.n	8003df0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2bff      	cmp	r3, #255	; 0xff
 8003d5c:	d90e      	bls.n	8003d7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	22ff      	movs	r2, #255	; 0xff
 8003d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	8979      	ldrh	r1, [r7, #10]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fbc3 	bl	8004500 <I2C_TransferConfig>
 8003d7a:	e00f      	b.n	8003d9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	8979      	ldrh	r1, [r7, #10]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fbb2 	bl	8004500 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d19e      	bne.n	8003ce4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fa8c 	bl	80042c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e01a      	b.n	8003df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <HAL_I2C_Mem_Write+0x224>)
 8003dce:	400b      	ands	r3, r1
 8003dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
  }
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	fe00e800 	.word	0xfe00e800

08003dfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	817b      	strh	r3, [r7, #10]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	813b      	strh	r3, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	f040 80fd 	bne.w	800401e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_I2C_Mem_Read+0x34>
 8003e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0f1      	b.n	8004020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_I2C_Mem_Read+0x4e>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0ea      	b.n	8004020 <HAL_I2C_Mem_Read+0x224>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e52:	f7ff f891 	bl	8002f78 <HAL_GetTick>
 8003e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2319      	movs	r3, #25
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f9af 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0d5      	b.n	8004020 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2222      	movs	r2, #34	; 0x22
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2240      	movs	r2, #64	; 0x40
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e9c:	88f8      	ldrh	r0, [r7, #6]
 8003e9e:	893a      	ldrh	r2, [r7, #8]
 8003ea0:	8979      	ldrh	r1, [r7, #10]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	9301      	str	r3, [sp, #4]
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	4603      	mov	r3, r0
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f913 	bl	80040d8 <I2C_RequestMemoryRead>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0ad      	b.n	8004020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2bff      	cmp	r3, #255	; 0xff
 8003ecc:	d90e      	bls.n	8003eec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	22ff      	movs	r2, #255	; 0xff
 8003ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	8979      	ldrh	r1, [r7, #10]
 8003edc:	4b52      	ldr	r3, [pc, #328]	; (8004028 <HAL_I2C_Mem_Read+0x22c>)
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fb0b 	bl	8004500 <I2C_TransferConfig>
 8003eea:	e00f      	b.n	8003f0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	8979      	ldrh	r1, [r7, #10]
 8003efe:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <HAL_I2C_Mem_Read+0x22c>)
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fafa 	bl	8004500 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	2200      	movs	r2, #0
 8003f14:	2104      	movs	r1, #4
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f956 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e07c      	b.n	8004020 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d034      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x1d0>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d130      	bne.n	8003fcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	2200      	movs	r2, #0
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f927 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e04d      	b.n	8004020 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2bff      	cmp	r3, #255	; 0xff
 8003f8c:	d90e      	bls.n	8003fac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	22ff      	movs	r2, #255	; 0xff
 8003f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	8979      	ldrh	r1, [r7, #10]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 faab 	bl	8004500 <I2C_TransferConfig>
 8003faa:	e00f      	b.n	8003fcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	8979      	ldrh	r1, [r7, #10]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fa9a 	bl	8004500 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d19a      	bne.n	8003f0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f974 	bl	80042c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e01a      	b.n	8004020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_I2C_Mem_Read+0x230>)
 8003ffe:	400b      	ands	r3, r1
 8004000:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e000      	b.n	8004020 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800401e:	2302      	movs	r3, #2
  }
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	80002400 	.word	0x80002400
 800402c:	fe00e800 	.word	0xfe00e800

08004030 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	4608      	mov	r0, r1
 800403a:	4611      	mov	r1, r2
 800403c:	461a      	mov	r2, r3
 800403e:	4603      	mov	r3, r0
 8004040:	817b      	strh	r3, [r7, #10]
 8004042:	460b      	mov	r3, r1
 8004044:	813b      	strh	r3, [r7, #8]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <I2C_RequestMemoryWrite+0xa4>)
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fa51 	bl	8004500 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	69b9      	ldr	r1, [r7, #24]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f8f0 	bl	8004248 <I2C_WaitOnTXISFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e02c      	b.n	80040cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004078:	893b      	ldrh	r3, [r7, #8]
 800407a:	b2da      	uxtb	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
 8004082:	e015      	b.n	80040b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004084:	893b      	ldrh	r3, [r7, #8]
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	b29b      	uxth	r3, r3
 800408a:	b2da      	uxtb	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	69b9      	ldr	r1, [r7, #24]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f8d6 	bl	8004248 <I2C_WaitOnTXISFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e012      	b.n	80040cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040a6:	893b      	ldrh	r3, [r7, #8]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2200      	movs	r2, #0
 80040b8:	2180      	movs	r1, #128	; 0x80
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f884 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	80002000 	.word	0x80002000

080040d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	817b      	strh	r3, [r7, #10]
 80040ea:	460b      	mov	r3, r1
 80040ec:	813b      	strh	r3, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	8979      	ldrh	r1, [r7, #10]
 80040f8:	4b20      	ldr	r3, [pc, #128]	; (800417c <I2C_RequestMemoryRead+0xa4>)
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2300      	movs	r3, #0
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f9fe 	bl	8004500 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	69b9      	ldr	r1, [r7, #24]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f89d 	bl	8004248 <I2C_WaitOnTXISFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e02c      	b.n	8004172 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d105      	bne.n	800412a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800411e:	893b      	ldrh	r3, [r7, #8]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
 8004128:	e015      	b.n	8004156 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800412a:	893b      	ldrh	r3, [r7, #8]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	b29b      	uxth	r3, r3
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f883 	bl	8004248 <I2C_WaitOnTXISFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e012      	b.n	8004172 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800414c:	893b      	ldrh	r3, [r7, #8]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2200      	movs	r2, #0
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f831 	bl	80041c8 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	80002000 	.word	0x80002000

08004180 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d103      	bne.n	800419e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d007      	beq.n	80041bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	619a      	str	r2, [r3, #24]
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d8:	e022      	b.n	8004220 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d01e      	beq.n	8004220 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e2:	f7fe fec9 	bl	8002f78 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d113      	bne.n	8004220 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e00f      	b.n	8004240 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4013      	ands	r3, r2
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	429a      	cmp	r2, r3
 800423c:	d0cd      	beq.n	80041da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004254:	e02c      	b.n	80042b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 f870 	bl	8004340 <I2C_IsErrorOccurred>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e02a      	b.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004270:	d01e      	beq.n	80042b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fe fe81 	bl	8002f78 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d113      	bne.n	80042b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e007      	b.n	80042c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d1cb      	bne.n	8004256 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042d4:	e028      	b.n	8004328 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f830 	bl	8004340 <I2C_IsErrorOccurred>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e026      	b.n	8004338 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fe fe45 	bl	8002f78 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d113      	bne.n	8004328 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	f043 0220 	orr.w	r2, r3, #32
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e007      	b.n	8004338 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b20      	cmp	r3, #32
 8004334:	d1cf      	bne.n	80042d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d068      	beq.n	800443e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2210      	movs	r2, #16
 8004372:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004374:	e049      	b.n	800440a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d045      	beq.n	800440a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800437e:	f7fe fdfb 	bl	8002f78 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <I2C_IsErrorOccurred+0x54>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d13a      	bne.n	800440a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b6:	d121      	bne.n	80043fc <I2C_IsErrorOccurred+0xbc>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043be:	d01d      	beq.n	80043fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d01a      	beq.n	80043fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043d6:	f7fe fdcf 	bl	8002f78 <HAL_GetTick>
 80043da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043dc:	e00e      	b.n	80043fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043de:	f7fe fdcb 	bl	8002f78 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b19      	cmp	r3, #25
 80043ea:	d907      	bls.n	80043fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f043 0320 	orr.w	r3, r3, #32
 80043f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80043fa:	e006      	b.n	800440a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b20      	cmp	r3, #32
 8004408:	d1e9      	bne.n	80043de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b20      	cmp	r3, #32
 8004416:	d003      	beq.n	8004420 <I2C_IsErrorOccurred+0xe0>
 8004418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0aa      	beq.n	8004376 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004424:	2b00      	cmp	r3, #0
 8004426:	d103      	bne.n	8004430 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2220      	movs	r2, #32
 800442e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f043 0304 	orr.w	r3, r3, #4
 8004436:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00b      	beq.n	8004468 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004460:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	f043 0308 	orr.w	r3, r3, #8
 8004478:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004482:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00b      	beq.n	80044ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f043 0302 	orr.w	r3, r3, #2
 800449a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80044ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01c      	beq.n	80044ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff fe63 	bl	8004180 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6859      	ldr	r1, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <I2C_IsErrorOccurred+0x1bc>)
 80044c6:	400b      	ands	r3, r1
 80044c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80044ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3728      	adds	r7, #40	; 0x28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	fe00e800 	.word	0xfe00e800

08004500 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	607b      	str	r3, [r7, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	817b      	strh	r3, [r7, #10]
 800450e:	4613      	mov	r3, r2
 8004510:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004512:	897b      	ldrh	r3, [r7, #10]
 8004514:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004518:	7a7b      	ldrb	r3, [r7, #9]
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004520:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	4313      	orrs	r3, r2
 800452a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800452e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	0d5b      	lsrs	r3, r3, #21
 800453a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <I2C_TransferConfig+0x60>)
 8004540:	430b      	orrs	r3, r1
 8004542:	43db      	mvns	r3, r3
 8004544:	ea02 0103 	and.w	r1, r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	03ff63ff 	.word	0x03ff63ff

08004564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b20      	cmp	r3, #32
 8004578:	d138      	bne.n	80045ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004584:	2302      	movs	r3, #2
 8004586:	e032      	b.n	80045ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2224      	movs	r2, #36	; 0x24
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6819      	ldr	r1, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b20      	cmp	r3, #32
 800460e:	d139      	bne.n	8004684 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800461a:	2302      	movs	r3, #2
 800461c:	e033      	b.n	8004686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2224      	movs	r2, #36	; 0x24
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800464c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800469e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a2:	6013      	str	r3, [r2, #0]
}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40007000 	.word	0x40007000

080046b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <HAL_PWREx_EnableOverDrive+0x98>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4a22      	ldr	r2, [pc, #136]	; (800474c <HAL_PWREx_EnableOverDrive+0x98>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_PWREx_EnableOverDrive+0x98>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	603b      	str	r3, [r7, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046d6:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046e2:	f7fe fc49 	bl	8002f78 <HAL_GetTick>
 80046e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046e8:	e009      	b.n	80046fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046ea:	f7fe fc45 	bl	8002f78 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046f8:	d901      	bls.n	80046fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e022      	b.n	8004744 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470a:	d1ee      	bne.n	80046ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800470c:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_PWREx_EnableOverDrive+0x9c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a0f      	ldr	r2, [pc, #60]	; (8004750 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004716:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004718:	f7fe fc2e 	bl	8002f78 <HAL_GetTick>
 800471c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800471e:	e009      	b.n	8004734 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004720:	f7fe fc2a 	bl	8002f78 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800472e:	d901      	bls.n	8004734 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e007      	b.n	8004744 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004740:	d1ee      	bne.n	8004720 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	40007000 	.word	0x40007000

08004754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800475c:	2300      	movs	r3, #0
 800475e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e29b      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8087 	beq.w	8004886 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004778:	4b96      	ldr	r3, [pc, #600]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b04      	cmp	r3, #4
 8004782:	d00c      	beq.n	800479e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004784:	4b93      	ldr	r3, [pc, #588]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b08      	cmp	r3, #8
 800478e:	d112      	bne.n	80047b6 <HAL_RCC_OscConfig+0x62>
 8004790:	4b90      	ldr	r3, [pc, #576]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479c:	d10b      	bne.n	80047b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479e:	4b8d      	ldr	r3, [pc, #564]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d06c      	beq.n	8004884 <HAL_RCC_OscConfig+0x130>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d168      	bne.n	8004884 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e275      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x7a>
 80047c0:	4b84      	ldr	r3, [pc, #528]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a83      	ldr	r2, [pc, #524]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e02e      	b.n	800482c <HAL_RCC_OscConfig+0xd8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x9c>
 80047d6:	4b7f      	ldr	r3, [pc, #508]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a7e      	ldr	r2, [pc, #504]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b7c      	ldr	r3, [pc, #496]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7b      	ldr	r2, [pc, #492]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e01d      	b.n	800482c <HAL_RCC_OscConfig+0xd8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCC_OscConfig+0xc0>
 80047fa:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a75      	ldr	r2, [pc, #468]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	4b73      	ldr	r3, [pc, #460]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a72      	ldr	r2, [pc, #456]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e00b      	b.n	800482c <HAL_RCC_OscConfig+0xd8>
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6e      	ldr	r2, [pc, #440]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800481a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	4b6c      	ldr	r3, [pc, #432]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a6b      	ldr	r2, [pc, #428]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004834:	f7fe fba0 	bl	8002f78 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800483c:	f7fe fb9c 	bl	8002f78 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e229      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCC_OscConfig+0xe8>
 800485a:	e014      	b.n	8004886 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fe fb8c 	bl	8002f78 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004864:	f7fe fb88 	bl	8002f78 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e215      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	4b57      	ldr	r3, [pc, #348]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x110>
 8004882:	e000      	b.n	8004886 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d069      	beq.n	8004966 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004892:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489e:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d11c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x190>
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d116      	bne.n	80048e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_RCC_OscConfig+0x17a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e1e9      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	493d      	ldr	r1, [pc, #244]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	e040      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d023      	beq.n	8004934 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ec:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a38      	ldr	r2, [pc, #224]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fe fb3e 	bl	8002f78 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004900:	f7fe fb3a 	bl	8002f78 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e1c7      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004912:	4b30      	ldr	r3, [pc, #192]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491e:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4929      	ldr	r1, [pc, #164]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]
 8004932:	e018      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004934:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fe fb1a 	bl	8002f78 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004948:	f7fe fb16 	bl	8002f78 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e1a3      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d038      	beq.n	80049e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d019      	beq.n	80049ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800497c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497e:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004986:	f7fe faf7 	bl	8002f78 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800498e:	f7fe faf3 	bl	8002f78 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e180      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80049a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x23a>
 80049ac:	e01a      	b.n	80049e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80049b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b2:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ba:	f7fe fadd 	bl	8002f78 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	e00a      	b.n	80049d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fe fad9 	bl	8002f78 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d903      	bls.n	80049d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e166      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
 80049d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d8:	4b92      	ldr	r3, [pc, #584]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 80049da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1ee      	bne.n	80049c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80a4 	beq.w	8004b3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b8c      	ldr	r3, [pc, #560]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	4b89      	ldr	r3, [pc, #548]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	4a88      	ldr	r2, [pc, #544]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0a:	4b86      	ldr	r3, [pc, #536]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a1a:	4b83      	ldr	r3, [pc, #524]	; (8004c28 <HAL_RCC_OscConfig+0x4d4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d118      	bne.n	8004a58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a26:	4b80      	ldr	r3, [pc, #512]	; (8004c28 <HAL_RCC_OscConfig+0x4d4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a7f      	ldr	r2, [pc, #508]	; (8004c28 <HAL_RCC_OscConfig+0x4d4>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a32:	f7fe faa1 	bl	8002f78 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3a:	f7fe fa9d 	bl	8002f78 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	; 0x64
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e12a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a4c:	4b76      	ldr	r3, [pc, #472]	; (8004c28 <HAL_RCC_OscConfig+0x4d4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x31a>
 8004a60:	4b70      	ldr	r3, [pc, #448]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a6f      	ldr	r2, [pc, #444]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	e02d      	b.n	8004aca <HAL_RCC_OscConfig+0x376>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x33c>
 8004a76:	4b6b      	ldr	r3, [pc, #428]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	4a6a      	ldr	r2, [pc, #424]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	6713      	str	r3, [r2, #112]	; 0x70
 8004a82:	4b68      	ldr	r3, [pc, #416]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a67      	ldr	r2, [pc, #412]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	e01c      	b.n	8004aca <HAL_RCC_OscConfig+0x376>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x35e>
 8004a98:	4b62      	ldr	r3, [pc, #392]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	4a61      	ldr	r2, [pc, #388]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa4:	4b5f      	ldr	r3, [pc, #380]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	4a5e      	ldr	r2, [pc, #376]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab0:	e00b      	b.n	8004aca <HAL_RCC_OscConfig+0x376>
 8004ab2:	4b5c      	ldr	r3, [pc, #368]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6713      	str	r3, [r2, #112]	; 0x70
 8004abe:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac2:	4a58      	ldr	r2, [pc, #352]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d015      	beq.n	8004afe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fe fa51 	bl	8002f78 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fe fa4d 	bl	8002f78 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0d8      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af0:	4b4c      	ldr	r3, [pc, #304]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ee      	beq.n	8004ada <HAL_RCC_OscConfig+0x386>
 8004afc:	e014      	b.n	8004b28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7fe fa3b 	bl	8002f78 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fe fa37 	bl	8002f78 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0c2      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1c:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ee      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d105      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a3c      	ldr	r2, [pc, #240]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80ae 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d06d      	beq.n	8004c2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d14b      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b58:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a31      	ldr	r2, [pc, #196]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fe fa08 	bl	8002f78 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fe fa04 	bl	8002f78 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e091      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7e:	4b29      	ldr	r3, [pc, #164]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	019b      	lsls	r3, r3, #6
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	061b      	lsls	r3, r3, #24
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	071b      	lsls	r3, r3, #28
 8004bb6:	491b      	ldr	r1, [pc, #108]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fe f9d6 	bl	8002f78 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fe f9d2 	bl	8002f78 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e05f      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x47c>
 8004bee:	e057      	b.n	8004ca0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fe f9bc 	bl	8002f78 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fe f9b8 	bl	8002f78 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e045      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c16:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4b0>
 8004c22:	e03d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x54c>
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	; (8004cac <HAL_RCC_OscConfig+0x558>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d030      	beq.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d129      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d122      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d119      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	3b01      	subs	r3, #1
 8004c76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d10f      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800

08004cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0d0      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d910      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b67      	ldr	r3, [pc, #412]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 020f 	bic.w	r2, r3, #15
 8004cde:	4965      	ldr	r1, [pc, #404]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b63      	ldr	r3, [pc, #396]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0b8      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d10:	4b59      	ldr	r3, [pc, #356]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a58      	ldr	r2, [pc, #352]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d28:	4b53      	ldr	r3, [pc, #332]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a52      	ldr	r2, [pc, #328]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d34:	4b50      	ldr	r3, [pc, #320]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	494d      	ldr	r1, [pc, #308]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d040      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d107      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d115      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e07f      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e073      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d82:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e06b      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4936      	ldr	r1, [pc, #216]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da4:	f7fe f8e8 	bl	8002f78 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dac:	f7fe f8e4 	bl	8002f78 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e053      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 020c 	and.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1eb      	bne.n	8004dac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d210      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 020f 	bic.w	r2, r3, #15
 8004dea:	4922      	ldr	r1, [pc, #136]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e032      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4916      	ldr	r1, [pc, #88]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	490e      	ldr	r1, [pc, #56]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e42:	f000 f821 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8004e46:	4602      	mov	r2, r0
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	490a      	ldr	r1, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x1cc>)
 8004e54:	5ccb      	ldrb	r3, [r1, r3]
 8004e56:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <HAL_RCC_ClockConfig+0x1d0>)
 8004e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <HAL_RCC_ClockConfig+0x1d4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fd fee2 	bl	8002c2c <HAL_InitTick>

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023c00 	.word	0x40023c00
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	0800cf04 	.word	0x0800cf04
 8004e80:	2000000c 	.word	0x2000000c
 8004e84:	20000010 	.word	0x20000010

08004e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e8c:	b094      	sub	sp, #80	; 0x50
 8004e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	647b      	str	r3, [r7, #68]	; 0x44
 8004e94:	2300      	movs	r3, #0
 8004e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e98:	2300      	movs	r3, #0
 8004e9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ea0:	4b79      	ldr	r3, [pc, #484]	; (8005088 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d00d      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	f200 80e1 	bhi.w	8005074 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_RCC_GetSysClockFreq+0x34>
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d003      	beq.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eba:	e0db      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ebc:	4b73      	ldr	r3, [pc, #460]	; (800508c <HAL_RCC_GetSysClockFreq+0x204>)
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ec0:	e0db      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ec2:	4b73      	ldr	r3, [pc, #460]	; (8005090 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ec6:	e0d8      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec8:	4b6f      	ldr	r3, [pc, #444]	; (8005088 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ed2:	4b6d      	ldr	r3, [pc, #436]	; (8005088 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d063      	beq.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ede:	4b6a      	ldr	r3, [pc, #424]	; (8005088 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	099b      	lsrs	r3, r3, #6
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ef6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004efa:	4622      	mov	r2, r4
 8004efc:	462b      	mov	r3, r5
 8004efe:	f04f 0000 	mov.w	r0, #0
 8004f02:	f04f 0100 	mov.w	r1, #0
 8004f06:	0159      	lsls	r1, r3, #5
 8004f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f0c:	0150      	lsls	r0, r2, #5
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4621      	mov	r1, r4
 8004f14:	1a51      	subs	r1, r2, r1
 8004f16:	6139      	str	r1, [r7, #16]
 8004f18:	4629      	mov	r1, r5
 8004f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	018b      	lsls	r3, r1, #6
 8004f30:	4651      	mov	r1, sl
 8004f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f36:	4651      	mov	r1, sl
 8004f38:	018a      	lsls	r2, r1, #6
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	ebb2 0801 	subs.w	r8, r2, r1
 8004f40:	4659      	mov	r1, fp
 8004f42:	eb63 0901 	sbc.w	r9, r3, r1
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f5a:	4690      	mov	r8, r2
 8004f5c:	4699      	mov	r9, r3
 8004f5e:	4623      	mov	r3, r4
 8004f60:	eb18 0303 	adds.w	r3, r8, r3
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	462b      	mov	r3, r5
 8004f68:	eb49 0303 	adc.w	r3, r9, r3
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	024b      	lsls	r3, r1, #9
 8004f7e:	4621      	mov	r1, r4
 8004f80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f84:	4621      	mov	r1, r4
 8004f86:	024a      	lsls	r2, r1, #9
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8e:	2200      	movs	r2, #0
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f98:	f7fb f9a2 	bl	80002e0 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa4:	e058      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa6:	4b38      	ldr	r3, [pc, #224]	; (8005088 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	099b      	lsrs	r3, r3, #6
 8004fac:	2200      	movs	r2, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fb6:	623b      	str	r3, [r7, #32]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	f04f 0000 	mov.w	r0, #0
 8004fc8:	f04f 0100 	mov.w	r1, #0
 8004fcc:	0159      	lsls	r1, r3, #5
 8004fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fd2:	0150      	lsls	r0, r2, #5
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fde:	4649      	mov	r1, r9
 8004fe0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ff0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ff4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ff8:	ebb2 040a 	subs.w	r4, r2, sl
 8004ffc:	eb63 050b 	sbc.w	r5, r3, fp
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	00eb      	lsls	r3, r5, #3
 800500a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800500e:	00e2      	lsls	r2, r4, #3
 8005010:	4614      	mov	r4, r2
 8005012:	461d      	mov	r5, r3
 8005014:	4643      	mov	r3, r8
 8005016:	18e3      	adds	r3, r4, r3
 8005018:	603b      	str	r3, [r7, #0]
 800501a:	464b      	mov	r3, r9
 800501c:	eb45 0303 	adc.w	r3, r5, r3
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800502e:	4629      	mov	r1, r5
 8005030:	028b      	lsls	r3, r1, #10
 8005032:	4621      	mov	r1, r4
 8005034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005038:	4621      	mov	r1, r4
 800503a:	028a      	lsls	r2, r1, #10
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005042:	2200      	movs	r2, #0
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	61fa      	str	r2, [r7, #28]
 8005048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800504c:	f7fb f948 	bl	80002e0 <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4613      	mov	r3, r2
 8005056:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_GetSysClockFreq+0x200>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	3301      	adds	r3, #1
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005068:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800506a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005072:	e002      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_RCC_GetSysClockFreq+0x204>)
 8005076:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800507a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800507c:	4618      	mov	r0, r3
 800507e:	3750      	adds	r7, #80	; 0x50
 8005080:	46bd      	mov	sp, r7
 8005082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800
 800508c:	00f42400 	.word	0x00f42400
 8005090:	007a1200 	.word	0x007a1200

08005094 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005098:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	2000000c 	.word	0x2000000c

080050ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050b0:	f7ff fff0 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 80050b4:	4602      	mov	r2, r0
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	0a9b      	lsrs	r3, r3, #10
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	4903      	ldr	r1, [pc, #12]	; (80050d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c2:	5ccb      	ldrb	r3, [r1, r3]
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40023800 	.word	0x40023800
 80050d0:	0800cf14 	.word	0x0800cf14

080050d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050d8:	f7ff ffdc 	bl	8005094 <HAL_RCC_GetHCLKFreq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	0b5b      	lsrs	r3, r3, #13
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4903      	ldr	r1, [pc, #12]	; (80050f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ea:	5ccb      	ldrb	r3, [r1, r3]
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40023800 	.word	0x40023800
 80050f8:	0800cf14 	.word	0x0800cf14

080050fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	220f      	movs	r2, #15
 800510a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800510c:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_RCC_GetClockConfig+0x5c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0203 	and.w	r2, r3, #3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <HAL_RCC_GetClockConfig+0x5c>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005124:	4b0c      	ldr	r3, [pc, #48]	; (8005158 <HAL_RCC_GetClockConfig+0x5c>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005130:	4b09      	ldr	r3, [pc, #36]	; (8005158 <HAL_RCC_GetClockConfig+0x5c>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	08db      	lsrs	r3, r3, #3
 8005136:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800513e:	4b07      	ldr	r3, [pc, #28]	; (800515c <HAL_RCC_GetClockConfig+0x60>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 020f 	and.w	r2, r3, #15
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	601a      	str	r2, [r3, #0]
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800
 800515c:	40023c00 	.word	0x40023c00

08005160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d012      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005188:	4b69      	ldr	r3, [pc, #420]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a68      	ldr	r2, [pc, #416]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005192:	6093      	str	r3, [r2, #8]
 8005194:	4b66      	ldr	r3, [pc, #408]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	4964      	ldr	r1, [pc, #400]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d017      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051ba:	4b5d      	ldr	r3, [pc, #372]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	4959      	ldr	r1, [pc, #356]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051d8:	d101      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80051e6:	2301      	movs	r3, #1
 80051e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d017      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051f6:	4b4e      	ldr	r3, [pc, #312]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	494a      	ldr	r1, [pc, #296]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005214:	d101      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005216:	2301      	movs	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005222:	2301      	movs	r3, #1
 8005224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 808b 	beq.w	800535a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005244:	4b3a      	ldr	r3, [pc, #232]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	4a39      	ldr	r2, [pc, #228]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524e:	6413      	str	r3, [r2, #64]	; 0x40
 8005250:	4b37      	ldr	r3, [pc, #220]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800525c:	4b35      	ldr	r3, [pc, #212]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a34      	ldr	r2, [pc, #208]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005268:	f7fd fe86 	bl	8002f78 <HAL_GetTick>
 800526c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005270:	f7fd fe82 	bl	8002f78 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	; 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e38f      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005282:	4b2c      	ldr	r3, [pc, #176]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800528e:	4b28      	ldr	r3, [pc, #160]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005296:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d035      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d02e      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ac:	4b20      	ldr	r3, [pc, #128]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052b6:	4b1e      	ldr	r3, [pc, #120]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	4a1a      	ldr	r2, [pc, #104]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80052ce:	4a18      	ldr	r2, [pc, #96]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052d4:	4b16      	ldr	r3, [pc, #88]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d114      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fd fe4a 	bl	8002f78 <HAL_GetTick>
 80052e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e6:	e00a      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fd fe46 	bl	8002f78 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e351      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0ee      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005316:	d111      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005324:	4b04      	ldr	r3, [pc, #16]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005326:	400b      	ands	r3, r1
 8005328:	4901      	ldr	r1, [pc, #4]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
 800532e:	e00b      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005330:	40023800 	.word	0x40023800
 8005334:	40007000 	.word	0x40007000
 8005338:	0ffffcff 	.word	0x0ffffcff
 800533c:	4bac      	ldr	r3, [pc, #688]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4aab      	ldr	r2, [pc, #684]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005342:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005346:	6093      	str	r3, [r2, #8]
 8005348:	4ba9      	ldr	r3, [pc, #676]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005354:	49a6      	ldr	r1, [pc, #664]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005356:	4313      	orrs	r3, r2
 8005358:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005366:	4ba2      	ldr	r3, [pc, #648]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536c:	4aa0      	ldr	r2, [pc, #640]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005372:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005376:	4b9e      	ldr	r3, [pc, #632]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005378:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	499b      	ldr	r1, [pc, #620]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005394:	4b96      	ldr	r3, [pc, #600]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053a2:	4993      	ldr	r1, [pc, #588]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053b6:	4b8e      	ldr	r3, [pc, #568]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c4:	498a      	ldr	r1, [pc, #552]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053d8:	4b85      	ldr	r3, [pc, #532]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e6:	4982      	ldr	r1, [pc, #520]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053fa:	4b7d      	ldr	r3, [pc, #500]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	4979      	ldr	r1, [pc, #484]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800541c:	4b74      	ldr	r3, [pc, #464]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	f023 0203 	bic.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	4971      	ldr	r1, [pc, #452]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800543e:	4b6c      	ldr	r3, [pc, #432]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	f023 020c 	bic.w	r2, r3, #12
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544c:	4968      	ldr	r1, [pc, #416]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005460:	4b63      	ldr	r3, [pc, #396]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546e:	4960      	ldr	r1, [pc, #384]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005482:	4b5b      	ldr	r3, [pc, #364]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	4957      	ldr	r1, [pc, #348]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054a4:	4b52      	ldr	r3, [pc, #328]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	494f      	ldr	r1, [pc, #316]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80054c6:	4b4a      	ldr	r3, [pc, #296]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	4946      	ldr	r1, [pc, #280]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80054e8:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f6:	493e      	ldr	r1, [pc, #248]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800550a:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005510:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005518:	4935      	ldr	r1, [pc, #212]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800552c:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800553a:	492d      	ldr	r1, [pc, #180]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d011      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800554e:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800555c:	4924      	ldr	r1, [pc, #144]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800556c:	d101      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800556e:	2301      	movs	r3, #1
 8005570:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800557e:	2301      	movs	r3, #1
 8005580:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005594:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559c:	4914      	ldr	r1, [pc, #80]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00b      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c0:	490b      	ldr	r1, [pc, #44]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00f      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e4:	4902      	ldr	r1, [pc, #8]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055ec:	e002      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80055ee:	bf00      	nop
 80055f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005600:	4b8a      	ldr	r3, [pc, #552]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005606:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	4986      	ldr	r1, [pc, #536]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005624:	4b81      	ldr	r3, [pc, #516]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005634:	497d      	ldr	r1, [pc, #500]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d006      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80d6 	beq.w	80057fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005650:	4b76      	ldr	r3, [pc, #472]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a75      	ldr	r2, [pc, #468]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005656:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800565a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565c:	f7fd fc8c 	bl	8002f78 <HAL_GetTick>
 8005660:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005664:	f7fd fc88 	bl	8002f78 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	; 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e195      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005676:	4b6d      	ldr	r3, [pc, #436]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d021      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005692:	2b00      	cmp	r3, #0
 8005694:	d11d      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005696:	4b65      	ldr	r3, [pc, #404]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056a4:	4b61      	ldr	r3, [pc, #388]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056aa:	0e1b      	lsrs	r3, r3, #24
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	019a      	lsls	r2, r3, #6
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	431a      	orrs	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	061b      	lsls	r3, r3, #24
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	071b      	lsls	r3, r3, #28
 80056ca:	4958      	ldr	r1, [pc, #352]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d004      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e6:	d00a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d02e      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fc:	d129      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056fe:	4b4b      	ldr	r3, [pc, #300]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800570c:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800570e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005712:	0f1b      	lsrs	r3, r3, #28
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	019a      	lsls	r2, r3, #6
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	071b      	lsls	r3, r3, #28
 8005732:	493e      	ldr	r1, [pc, #248]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800573a:	4b3c      	ldr	r3, [pc, #240]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005740:	f023 021f 	bic.w	r2, r3, #31
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	3b01      	subs	r3, #1
 800574a:	4938      	ldr	r1, [pc, #224]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01d      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800575e:	4b33      	ldr	r3, [pc, #204]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005764:	0e1b      	lsrs	r3, r3, #24
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800576c:	4b2f      	ldr	r3, [pc, #188]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800576e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005772:	0f1b      	lsrs	r3, r3, #28
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	019a      	lsls	r2, r3, #6
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	431a      	orrs	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	071b      	lsls	r3, r3, #28
 8005792:	4926      	ldr	r1, [pc, #152]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d011      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	019a      	lsls	r2, r3, #6
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	061b      	lsls	r3, r3, #24
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	071b      	lsls	r3, r3, #28
 80057c2:	491a      	ldr	r1, [pc, #104]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057ca:	4b18      	ldr	r3, [pc, #96]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a17      	ldr	r2, [pc, #92]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d6:	f7fd fbcf 	bl	8002f78 <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057dc:	e008      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057de:	f7fd fbcb 	bl	8002f78 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b64      	cmp	r3, #100	; 0x64
 80057ea:	d901      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e0d8      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057f0:	4b0e      	ldr	r3, [pc, #56]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	f040 80ce 	bne.w	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005804:	4b09      	ldr	r3, [pc, #36]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a08      	ldr	r2, [pc, #32]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005810:	f7fd fbb2 	bl	8002f78 <HAL_GetTick>
 8005814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005816:	e00b      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005818:	f7fd fbae 	bl	8002f78 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b64      	cmp	r3, #100	; 0x64
 8005824:	d904      	bls.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e0bb      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800582a:	bf00      	nop
 800582c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005830:	4b5e      	ldr	r3, [pc, #376]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800583c:	d0ec      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d009      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800585a:	2b00      	cmp	r3, #0
 800585c:	d02e      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d12a      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005866:	4b51      	ldr	r3, [pc, #324]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	0c1b      	lsrs	r3, r3, #16
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005874:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	0f1b      	lsrs	r3, r3, #28
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	019a      	lsls	r2, r3, #6
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	061b      	lsls	r3, r3, #24
 8005894:	431a      	orrs	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	071b      	lsls	r3, r3, #28
 800589a:	4944      	ldr	r1, [pc, #272]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058a2:	4b42      	ldr	r3, [pc, #264]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	3b01      	subs	r3, #1
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	493d      	ldr	r1, [pc, #244]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d022      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d0:	d11d      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058d2:	4b36      	ldr	r3, [pc, #216]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d8:	0e1b      	lsrs	r3, r3, #24
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058e0:	4b32      	ldr	r3, [pc, #200]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	0f1b      	lsrs	r3, r3, #28
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	019a      	lsls	r2, r3, #6
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	041b      	lsls	r3, r3, #16
 80058fa:	431a      	orrs	r2, r3
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	061b      	lsls	r3, r3, #24
 8005900:	431a      	orrs	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	071b      	lsls	r3, r3, #28
 8005906:	4929      	ldr	r1, [pc, #164]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d028      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800591a:	4b24      	ldr	r3, [pc, #144]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	0e1b      	lsrs	r3, r3, #24
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005928:	4b20      	ldr	r3, [pc, #128]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800592a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	019a      	lsls	r2, r3, #6
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	431a      	orrs	r2, r3
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	071b      	lsls	r3, r3, #28
 800594e:	4917      	ldr	r1, [pc, #92]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800595c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	4911      	ldr	r1, [pc, #68]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800596c:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a0e      	ldr	r2, [pc, #56]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005978:	f7fd fafe 	bl	8002f78 <HAL_GetTick>
 800597c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005980:	f7fd fafa 	bl	8002f78 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b64      	cmp	r3, #100	; 0x64
 800598c:	d901      	bls.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e007      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005992:	4b06      	ldr	r3, [pc, #24]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800599a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800599e:	d1ef      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40023800 	.word	0x40023800

080059b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e09d      	b.n	8005afe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d108      	bne.n	80059dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d2:	d009      	beq.n	80059e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	61da      	str	r2, [r3, #28]
 80059da:	e005      	b.n	80059e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fc fcfe 	bl	8002404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a28:	d902      	bls.n	8005a30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	e002      	b.n	8005a36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a3e:	d007      	beq.n	8005a50 <HAL_SPI_Init+0xa0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a48:	d002      	beq.n	8005a50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	ea42 0103 	orr.w	r1, r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	0c1b      	lsrs	r3, r3, #16
 8005aac:	f003 0204 	and.w	r2, r3, #4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005acc:	ea42 0103 	orr.w	r1, r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e049      	b.n	8005bac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fc fce9 	bl	8002504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	4619      	mov	r1, r3
 8005b44:	4610      	mov	r0, r2
 8005b46:	f001 f831 	bl	8006bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d001      	beq.n	8005bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e054      	b.n	8005c76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a26      	ldr	r2, [pc, #152]	; (8005c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d022      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x80>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf6:	d01d      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x80>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d018      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x80>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d013      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x80>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1f      	ldr	r2, [pc, #124]	; (8005c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00e      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x80>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1e      	ldr	r2, [pc, #120]	; (8005c94 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x80>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1c      	ldr	r2, [pc, #112]	; (8005c98 <HAL_TIM_Base_Start_IT+0xe4>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x80>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <HAL_TIM_Base_Start_IT+0xe8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d115      	bne.n	8005c60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <HAL_TIM_Base_Start_IT+0xec>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b06      	cmp	r3, #6
 8005c44:	d015      	beq.n	8005c72 <HAL_TIM_Base_Start_IT+0xbe>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4c:	d011      	beq.n	8005c72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0201 	orr.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5e:	e008      	b.n	8005c72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	e000      	b.n	8005c74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40001800 	.word	0x40001800
 8005ca0:	00010007 	.word	0x00010007

08005ca4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e049      	b.n	8005d4a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f841 	bl	8005d52 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f000 ff62 	bl	8006bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e049      	b.n	8005e0c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d106      	bne.n	8005d92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fc fcad 	bl	80026ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f000 ff01 	bl	8006bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x24>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e03c      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d109      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x3e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	bf14      	ite	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	2300      	moveq	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	e02f      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d109      	bne.n	8005e6c <HAL_TIM_PWM_Start+0x58>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e022      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d109      	bne.n	8005e86 <HAL_TIM_PWM_Start+0x72>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	e015      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d109      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0x8c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e008      	b.n	8005eb2 <HAL_TIM_PWM_Start+0x9e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e092      	b.n	8005fe0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xb6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ec8:	e023      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xc6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	e01b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_PWM_Start+0xd6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee8:	e013      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b0c      	cmp	r3, #12
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0xe6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef8:	e00b      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0xf6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f08:	e003      	b.n	8005f12 <HAL_TIM_PWM_Start+0xfe>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fb08 	bl	8007530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a30      	ldr	r2, [pc, #192]	; (8005fe8 <HAL_TIM_PWM_Start+0x1d4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_TIM_PWM_Start+0x120>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a2f      	ldr	r2, [pc, #188]	; (8005fec <HAL_TIM_PWM_Start+0x1d8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d101      	bne.n	8005f38 <HAL_TIM_PWM_Start+0x124>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <HAL_TIM_PWM_Start+0x126>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a25      	ldr	r2, [pc, #148]	; (8005fe8 <HAL_TIM_PWM_Start+0x1d4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d022      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x18a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f60:	d01d      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x18a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a22      	ldr	r2, [pc, #136]	; (8005ff0 <HAL_TIM_PWM_Start+0x1dc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d018      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x18a>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a20      	ldr	r2, [pc, #128]	; (8005ff4 <HAL_TIM_PWM_Start+0x1e0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x18a>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1f      	ldr	r2, [pc, #124]	; (8005ff8 <HAL_TIM_PWM_Start+0x1e4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00e      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x18a>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a19      	ldr	r2, [pc, #100]	; (8005fec <HAL_TIM_PWM_Start+0x1d8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d009      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x18a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1b      	ldr	r2, [pc, #108]	; (8005ffc <HAL_TIM_PWM_Start+0x1e8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d004      	beq.n	8005f9e <HAL_TIM_PWM_Start+0x18a>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a19      	ldr	r2, [pc, #100]	; (8006000 <HAL_TIM_PWM_Start+0x1ec>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d115      	bne.n	8005fca <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	4b17      	ldr	r3, [pc, #92]	; (8006004 <HAL_TIM_PWM_Start+0x1f0>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d015      	beq.n	8005fdc <HAL_TIM_PWM_Start+0x1c8>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb6:	d011      	beq.n	8005fdc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc8:	e008      	b.n	8005fdc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	e000      	b.n	8005fde <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40010000 	.word	0x40010000
 8005fec:	40010400 	.word	0x40010400
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40014000 	.word	0x40014000
 8006000:	40001800 	.word	0x40001800
 8006004:	00010007 	.word	0x00010007

08006008 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e049      	b.n	80060ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f841 	bl	80060b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f000 fdb0 	bl	8006bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e08f      	b.n	8006200 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fc fa83 	bl	8002600 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6899      	ldr	r1, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	4b3e      	ldr	r3, [pc, #248]	; (8006208 <HAL_TIM_Encoder_Init+0x13c>)
 800610e:	400b      	ands	r3, r1
 8006110:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3304      	adds	r3, #4
 800611a:	4619      	mov	r1, r3
 800611c:	4610      	mov	r0, r2
 800611e:	f000 fd45 	bl	8006bac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4b31      	ldr	r3, [pc, #196]	; (800620c <HAL_TIM_Encoder_Init+0x140>)
 8006148:	4013      	ands	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	4313      	orrs	r3, r2
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4b2b      	ldr	r3, [pc, #172]	; (8006210 <HAL_TIM_Encoder_Init+0x144>)
 8006162:	4013      	ands	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4b2a      	ldr	r3, [pc, #168]	; (8006214 <HAL_TIM_Encoder_Init+0x148>)
 800616a:	4013      	ands	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	4313      	orrs	r3, r2
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	011a      	lsls	r2, r3, #4
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	031b      	lsls	r3, r3, #12
 800618c:	4313      	orrs	r3, r2
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80061a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	4313      	orrs	r3, r2
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	fffebff8 	.word	0xfffebff8
 800620c:	fffffcfc 	.word	0xfffffcfc
 8006210:	fffff3f3 	.word	0xfffff3f3
 8006214:	ffff0f0f 	.word	0xffff0f0f

08006218 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006228:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006230:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006238:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006240:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d110      	bne.n	800626a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d102      	bne.n	8006254 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800624e:	7b7b      	ldrb	r3, [r7, #13]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d001      	beq.n	8006258 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e069      	b.n	800632c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006268:	e031      	b.n	80062ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b04      	cmp	r3, #4
 800626e:	d110      	bne.n	8006292 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d102      	bne.n	800627c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006276:	7b3b      	ldrb	r3, [r7, #12]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d001      	beq.n	8006280 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e055      	b.n	800632c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006290:	e01d      	b.n	80062ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d108      	bne.n	80062aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006298:	7bbb      	ldrb	r3, [r7, #14]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d105      	bne.n	80062aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d102      	bne.n	80062aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062a4:	7b3b      	ldrb	r3, [r7, #12]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d001      	beq.n	80062ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e03e      	b.n	800632c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2202      	movs	r2, #2
 80062ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_TIM_Encoder_Start+0xc4>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d008      	beq.n	80062ec <HAL_TIM_Encoder_Start+0xd4>
 80062da:	e00f      	b.n	80062fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2201      	movs	r2, #1
 80062e2:	2100      	movs	r1, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 f923 	bl	8007530 <TIM_CCxChannelCmd>
      break;
 80062ea:	e016      	b.n	800631a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2201      	movs	r2, #1
 80062f2:	2104      	movs	r1, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 f91b 	bl	8007530 <TIM_CCxChannelCmd>
      break;
 80062fa:	e00e      	b.n	800631a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	2100      	movs	r1, #0
 8006304:	4618      	mov	r0, r3
 8006306:	f001 f913 	bl	8007530 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2201      	movs	r2, #1
 8006310:	2104      	movs	r1, #4
 8006312:	4618      	mov	r0, r3
 8006314:	f001 f90c 	bl	8007530 <TIM_CCxChannelCmd>
      break;
 8006318:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0201 	orr.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b02      	cmp	r3, #2
 8006348:	d122      	bne.n	8006390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b02      	cmp	r3, #2
 8006356:	d11b      	bne.n	8006390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0202 	mvn.w	r2, #2
 8006360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fbfa 	bl	8006b70 <HAL_TIM_IC_CaptureCallback>
 800637c:	e005      	b.n	800638a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fbec 	bl	8006b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fbfd 	bl	8006b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b04      	cmp	r3, #4
 800639c:	d122      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d11b      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0204 	mvn.w	r2, #4
 80063b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fbd0 	bl	8006b70 <HAL_TIM_IC_CaptureCallback>
 80063d0:	e005      	b.n	80063de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fbc2 	bl	8006b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fbd3 	bl	8006b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0208 	mvn.w	r2, #8
 8006408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2204      	movs	r2, #4
 800640e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fba6 	bl	8006b70 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb98 	bl	8006b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fba9 	bl	8006b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b10      	cmp	r3, #16
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b10      	cmp	r3, #16
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0210 	mvn.w	r2, #16
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2208      	movs	r2, #8
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fb7c 	bl	8006b70 <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fb6e 	bl	8006b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fb7f 	bl	8006b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10e      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d107      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0201 	mvn.w	r2, #1
 80064b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fb fe7e 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d10e      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d107      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 f962 	bl	80077a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f2:	d10e      	bne.n	8006512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d107      	bne.n	8006512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800650a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 f955 	bl	80077bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d10e      	bne.n	800653e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d107      	bne.n	800653e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fb2d 	bl	8006b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b20      	cmp	r3, #32
 800654a:	d10e      	bne.n	800656a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b20      	cmp	r3, #32
 8006558:	d107      	bne.n	800656a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f06f 0220 	mvn.w	r2, #32
 8006562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 f915 	bl	8007794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_TIM_OC_ConfigChannel+0x1e>
 800658e:	2302      	movs	r3, #2
 8006590:	e066      	b.n	8006660 <HAL_TIM_OC_ConfigChannel+0xec>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b14      	cmp	r3, #20
 800659e:	d857      	bhi.n	8006650 <HAL_TIM_OC_ConfigChannel+0xdc>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065fd 	.word	0x080065fd
 80065ac:	08006651 	.word	0x08006651
 80065b0:	08006651 	.word	0x08006651
 80065b4:	08006651 	.word	0x08006651
 80065b8:	0800660b 	.word	0x0800660b
 80065bc:	08006651 	.word	0x08006651
 80065c0:	08006651 	.word	0x08006651
 80065c4:	08006651 	.word	0x08006651
 80065c8:	08006619 	.word	0x08006619
 80065cc:	08006651 	.word	0x08006651
 80065d0:	08006651 	.word	0x08006651
 80065d4:	08006651 	.word	0x08006651
 80065d8:	08006627 	.word	0x08006627
 80065dc:	08006651 	.word	0x08006651
 80065e0:	08006651 	.word	0x08006651
 80065e4:	08006651 	.word	0x08006651
 80065e8:	08006635 	.word	0x08006635
 80065ec:	08006651 	.word	0x08006651
 80065f0:	08006651 	.word	0x08006651
 80065f4:	08006651 	.word	0x08006651
 80065f8:	08006643 	.word	0x08006643
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fb72 	bl	8006cec <TIM_OC1_SetConfig>
      break;
 8006608:	e025      	b.n	8006656 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fbdd 	bl	8006dd0 <TIM_OC2_SetConfig>
      break;
 8006616:	e01e      	b.n	8006656 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fc4e 	bl	8006ec0 <TIM_OC3_SetConfig>
      break;
 8006624:	e017      	b.n	8006656 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fcbd 	bl	8006fac <TIM_OC4_SetConfig>
      break;
 8006632:	e010      	b.n	8006656 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 fd0e 	bl	800705c <TIM_OC5_SetConfig>
      break;
 8006640:	e009      	b.n	8006656 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fd59 	bl	8007100 <TIM_OC6_SetConfig>
      break;
 800664e:	e002      	b.n	8006656 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	75fb      	strb	r3, [r7, #23]
      break;
 8006654:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800665e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006682:	2302      	movs	r3, #2
 8006684:	e088      	b.n	8006798 <HAL_TIM_IC_ConfigChannel+0x130>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d11b      	bne.n	80066cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6819      	ldr	r1, [r3, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f000 fd80 	bl	80071a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 020c 	bic.w	r2, r2, #12
 80066b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6999      	ldr	r1, [r3, #24]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	619a      	str	r2, [r3, #24]
 80066ca:	e060      	b.n	800678e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d11c      	bne.n	800670c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6819      	ldr	r1, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f000 fe04 	bl	80072ee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699a      	ldr	r2, [r3, #24]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6999      	ldr	r1, [r3, #24]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	021a      	lsls	r2, r3, #8
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	619a      	str	r2, [r3, #24]
 800670a:	e040      	b.n	800678e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b08      	cmp	r3, #8
 8006710:	d11b      	bne.n	800674a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6819      	ldr	r1, [r3, #0]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f000 fe51 	bl	80073c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 020c 	bic.w	r2, r2, #12
 8006734:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69d9      	ldr	r1, [r3, #28]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	61da      	str	r2, [r3, #28]
 8006748:	e021      	b.n	800678e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b0c      	cmp	r3, #12
 800674e:	d11c      	bne.n	800678a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6819      	ldr	r1, [r3, #0]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f000 fe6e 	bl	8007440 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006772:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69d9      	ldr	r1, [r3, #28]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	021a      	lsls	r2, r3, #8
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	61da      	str	r2, [r3, #28]
 8006788:	e001      	b.n	800678e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006796:	7dfb      	ldrb	r3, [r7, #23]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e0ff      	b.n	80069be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b14      	cmp	r3, #20
 80067ca:	f200 80f0 	bhi.w	80069ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	08006829 	.word	0x08006829
 80067d8:	080069af 	.word	0x080069af
 80067dc:	080069af 	.word	0x080069af
 80067e0:	080069af 	.word	0x080069af
 80067e4:	08006869 	.word	0x08006869
 80067e8:	080069af 	.word	0x080069af
 80067ec:	080069af 	.word	0x080069af
 80067f0:	080069af 	.word	0x080069af
 80067f4:	080068ab 	.word	0x080068ab
 80067f8:	080069af 	.word	0x080069af
 80067fc:	080069af 	.word	0x080069af
 8006800:	080069af 	.word	0x080069af
 8006804:	080068eb 	.word	0x080068eb
 8006808:	080069af 	.word	0x080069af
 800680c:	080069af 	.word	0x080069af
 8006810:	080069af 	.word	0x080069af
 8006814:	0800692d 	.word	0x0800692d
 8006818:	080069af 	.word	0x080069af
 800681c:	080069af 	.word	0x080069af
 8006820:	080069af 	.word	0x080069af
 8006824:	0800696d 	.word	0x0800696d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fa5c 	bl	8006cec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0208 	orr.w	r2, r2, #8
 8006842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0204 	bic.w	r2, r2, #4
 8006852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6999      	ldr	r1, [r3, #24]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	691a      	ldr	r2, [r3, #16]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	619a      	str	r2, [r3, #24]
      break;
 8006866:	e0a5      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 faae 	bl	8006dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6999      	ldr	r1, [r3, #24]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	021a      	lsls	r2, r3, #8
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	619a      	str	r2, [r3, #24]
      break;
 80068a8:	e084      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fb05 	bl	8006ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0208 	orr.w	r2, r2, #8
 80068c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69da      	ldr	r2, [r3, #28]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0204 	bic.w	r2, r2, #4
 80068d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69d9      	ldr	r1, [r3, #28]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	61da      	str	r2, [r3, #28]
      break;
 80068e8:	e064      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fb5b 	bl	8006fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69da      	ldr	r2, [r3, #28]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69d9      	ldr	r1, [r3, #28]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	021a      	lsls	r2, r3, #8
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	61da      	str	r2, [r3, #28]
      break;
 800692a:	e043      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fb92 	bl	800705c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0208 	orr.w	r2, r2, #8
 8006946:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0204 	bic.w	r2, r2, #4
 8006956:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800696a:	e023      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fbc4 	bl	8007100 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006986:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006996:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	021a      	lsls	r2, r3, #8
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069ac:	e002      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	75fb      	strb	r3, [r7, #23]
      break;
 80069b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop

080069c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_TIM_ConfigClockSource+0x1c>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e0b4      	b.n	8006b4e <HAL_TIM_ConfigClockSource+0x186>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	4b56      	ldr	r3, [pc, #344]	; (8006b58 <HAL_TIM_ConfigClockSource+0x190>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1c:	d03e      	beq.n	8006a9c <HAL_TIM_ConfigClockSource+0xd4>
 8006a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a22:	f200 8087 	bhi.w	8006b34 <HAL_TIM_ConfigClockSource+0x16c>
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2a:	f000 8086 	beq.w	8006b3a <HAL_TIM_ConfigClockSource+0x172>
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d87f      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x16c>
 8006a34:	2b70      	cmp	r3, #112	; 0x70
 8006a36:	d01a      	beq.n	8006a6e <HAL_TIM_ConfigClockSource+0xa6>
 8006a38:	2b70      	cmp	r3, #112	; 0x70
 8006a3a:	d87b      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	2b60      	cmp	r3, #96	; 0x60
 8006a3e:	d050      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x11a>
 8006a40:	2b60      	cmp	r3, #96	; 0x60
 8006a42:	d877      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x16c>
 8006a44:	2b50      	cmp	r3, #80	; 0x50
 8006a46:	d03c      	beq.n	8006ac2 <HAL_TIM_ConfigClockSource+0xfa>
 8006a48:	2b50      	cmp	r3, #80	; 0x50
 8006a4a:	d873      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x16c>
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	d058      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x13a>
 8006a50:	2b40      	cmp	r3, #64	; 0x40
 8006a52:	d86f      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x16c>
 8006a54:	2b30      	cmp	r3, #48	; 0x30
 8006a56:	d064      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x15a>
 8006a58:	2b30      	cmp	r3, #48	; 0x30
 8006a5a:	d86b      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x16c>
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d060      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x15a>
 8006a60:	2b20      	cmp	r3, #32
 8006a62:	d867      	bhi.n	8006b34 <HAL_TIM_ConfigClockSource+0x16c>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d05c      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x15a>
 8006a68:	2b10      	cmp	r3, #16
 8006a6a:	d05a      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0x15a>
 8006a6c:	e062      	b.n	8006b34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	6899      	ldr	r1, [r3, #8]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f000 fd37 	bl	80074f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	609a      	str	r2, [r3, #8]
      break;
 8006a9a:	e04f      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6899      	ldr	r1, [r3, #8]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f000 fd20 	bl	80074f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006abe:	609a      	str	r2, [r3, #8]
      break;
 8006ac0:	e03c      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f000 fbde 	bl	8007290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2150      	movs	r1, #80	; 0x50
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fced 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 8006ae0:	e02c      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6859      	ldr	r1, [r3, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f000 fc3a 	bl	8007368 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2160      	movs	r1, #96	; 0x60
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fcdd 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 8006b00:	e01c      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	6859      	ldr	r1, [r3, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f000 fbbe 	bl	8007290 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2140      	movs	r1, #64	; 0x40
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fccd 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 8006b20:	e00c      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f000 fcc4 	bl	80074ba <TIM_ITRx_SetConfig>
      break;
 8006b32:	e003      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
      break;
 8006b38:	e000      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	fffeff88 	.word	0xfffeff88

08006b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a40      	ldr	r2, [pc, #256]	; (8006cc0 <TIM_Base_SetConfig+0x114>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d013      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bca:	d00f      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a3d      	ldr	r2, [pc, #244]	; (8006cc4 <TIM_Base_SetConfig+0x118>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00b      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a3c      	ldr	r2, [pc, #240]	; (8006cc8 <TIM_Base_SetConfig+0x11c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d007      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a3b      	ldr	r2, [pc, #236]	; (8006ccc <TIM_Base_SetConfig+0x120>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d003      	beq.n	8006bec <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a3a      	ldr	r2, [pc, #232]	; (8006cd0 <TIM_Base_SetConfig+0x124>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d108      	bne.n	8006bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2f      	ldr	r2, [pc, #188]	; (8006cc0 <TIM_Base_SetConfig+0x114>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d02b      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0c:	d027      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2c      	ldr	r2, [pc, #176]	; (8006cc4 <TIM_Base_SetConfig+0x118>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d023      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <TIM_Base_SetConfig+0x11c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01f      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <TIM_Base_SetConfig+0x120>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01b      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a29      	ldr	r2, [pc, #164]	; (8006cd0 <TIM_Base_SetConfig+0x124>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d017      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <TIM_Base_SetConfig+0x128>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a27      	ldr	r2, [pc, #156]	; (8006cd8 <TIM_Base_SetConfig+0x12c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a26      	ldr	r2, [pc, #152]	; (8006cdc <TIM_Base_SetConfig+0x130>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a25      	ldr	r2, [pc, #148]	; (8006ce0 <TIM_Base_SetConfig+0x134>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a24      	ldr	r2, [pc, #144]	; (8006ce4 <TIM_Base_SetConfig+0x138>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a23      	ldr	r2, [pc, #140]	; (8006ce8 <TIM_Base_SetConfig+0x13c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d108      	bne.n	8006c70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a0a      	ldr	r2, [pc, #40]	; (8006cc0 <TIM_Base_SetConfig+0x114>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_Base_SetConfig+0xf8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a0c      	ldr	r2, [pc, #48]	; (8006cd0 <TIM_Base_SetConfig+0x124>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d103      	bne.n	8006cac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	615a      	str	r2, [r3, #20]
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800
 8006ccc:	40000c00 	.word	0x40000c00
 8006cd0:	40010400 	.word	0x40010400
 8006cd4:	40014000 	.word	0x40014000
 8006cd8:	40014400 	.word	0x40014400
 8006cdc:	40014800 	.word	0x40014800
 8006ce0:	40001800 	.word	0x40001800
 8006ce4:	40001c00 	.word	0x40001c00
 8006ce8:	40002000 	.word	0x40002000

08006cec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4b2b      	ldr	r3, [pc, #172]	; (8006dc4 <TIM_OC1_SetConfig+0xd8>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f023 0302 	bic.w	r3, r3, #2
 8006d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <TIM_OC1_SetConfig+0xdc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_OC1_SetConfig+0x64>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <TIM_OC1_SetConfig+0xe0>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10c      	bne.n	8006d6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0308 	bic.w	r3, r3, #8
 8006d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 0304 	bic.w	r3, r3, #4
 8006d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <TIM_OC1_SetConfig+0xdc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC1_SetConfig+0x8e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <TIM_OC1_SetConfig+0xe0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d111      	bne.n	8006d9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	621a      	str	r2, [r3, #32]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	fffeff8f 	.word	0xfffeff8f
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40010400 	.word	0x40010400

08006dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f023 0210 	bic.w	r2, r3, #16
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4b2e      	ldr	r3, [pc, #184]	; (8006eb4 <TIM_OC2_SetConfig+0xe4>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f023 0320 	bic.w	r3, r3, #32
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a23      	ldr	r2, [pc, #140]	; (8006eb8 <TIM_OC2_SetConfig+0xe8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC2_SetConfig+0x68>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a22      	ldr	r2, [pc, #136]	; (8006ebc <TIM_OC2_SetConfig+0xec>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10d      	bne.n	8006e54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <TIM_OC2_SetConfig+0xe8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d003      	beq.n	8006e64 <TIM_OC2_SetConfig+0x94>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a17      	ldr	r2, [pc, #92]	; (8006ebc <TIM_OC2_SetConfig+0xec>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d113      	bne.n	8006e8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	621a      	str	r2, [r3, #32]
}
 8006ea6:	bf00      	nop
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	feff8fff 	.word	0xfeff8fff
 8006eb8:	40010000 	.word	0x40010000
 8006ebc:	40010400 	.word	0x40010400

08006ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4b2d      	ldr	r3, [pc, #180]	; (8006fa0 <TIM_OC3_SetConfig+0xe0>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a22      	ldr	r2, [pc, #136]	; (8006fa4 <TIM_OC3_SetConfig+0xe4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d003      	beq.n	8006f26 <TIM_OC3_SetConfig+0x66>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a21      	ldr	r2, [pc, #132]	; (8006fa8 <TIM_OC3_SetConfig+0xe8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d10d      	bne.n	8006f42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a17      	ldr	r2, [pc, #92]	; (8006fa4 <TIM_OC3_SetConfig+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_OC3_SetConfig+0x92>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a16      	ldr	r2, [pc, #88]	; (8006fa8 <TIM_OC3_SetConfig+0xe8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d113      	bne.n	8006f7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	621a      	str	r2, [r3, #32]
}
 8006f94:	bf00      	nop
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	fffeff8f 	.word	0xfffeff8f
 8006fa4:	40010000 	.word	0x40010000
 8006fa8:	40010400 	.word	0x40010400

08006fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <TIM_OC4_SetConfig+0xa4>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	031b      	lsls	r3, r3, #12
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4313      	orrs	r3, r2
 8007002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a13      	ldr	r2, [pc, #76]	; (8007054 <TIM_OC4_SetConfig+0xa8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d003      	beq.n	8007014 <TIM_OC4_SetConfig+0x68>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a12      	ldr	r2, [pc, #72]	; (8007058 <TIM_OC4_SetConfig+0xac>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d109      	bne.n	8007028 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800701a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	019b      	lsls	r3, r3, #6
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	697a      	ldr	r2, [r7, #20]
 800702c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	feff8fff 	.word	0xfeff8fff
 8007054:	40010000 	.word	0x40010000
 8007058:	40010400 	.word	0x40010400

0800705c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4b1b      	ldr	r3, [pc, #108]	; (80070f4 <TIM_OC5_SetConfig+0x98>)
 8007088:	4013      	ands	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800709c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	041b      	lsls	r3, r3, #16
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a12      	ldr	r2, [pc, #72]	; (80070f8 <TIM_OC5_SetConfig+0x9c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d003      	beq.n	80070ba <TIM_OC5_SetConfig+0x5e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a11      	ldr	r2, [pc, #68]	; (80070fc <TIM_OC5_SetConfig+0xa0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d109      	bne.n	80070ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	021b      	lsls	r3, r3, #8
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	fffeff8f 	.word	0xfffeff8f
 80070f8:	40010000 	.word	0x40010000
 80070fc:	40010400 	.word	0x40010400

08007100 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4b1c      	ldr	r3, [pc, #112]	; (800719c <TIM_OC6_SetConfig+0x9c>)
 800712c:	4013      	ands	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	051b      	lsls	r3, r3, #20
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a13      	ldr	r2, [pc, #76]	; (80071a0 <TIM_OC6_SetConfig+0xa0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <TIM_OC6_SetConfig+0x60>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a12      	ldr	r2, [pc, #72]	; (80071a4 <TIM_OC6_SetConfig+0xa4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d109      	bne.n	8007174 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007166:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	029b      	lsls	r3, r3, #10
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	feff8fff 	.word	0xfeff8fff
 80071a0:	40010000 	.word	0x40010000
 80071a4:	40010400 	.word	0x40010400

080071a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f023 0201 	bic.w	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4a28      	ldr	r2, [pc, #160]	; (8007274 <TIM_TI1_SetConfig+0xcc>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01b      	beq.n	800720e <TIM_TI1_SetConfig+0x66>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071dc:	d017      	beq.n	800720e <TIM_TI1_SetConfig+0x66>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4a25      	ldr	r2, [pc, #148]	; (8007278 <TIM_TI1_SetConfig+0xd0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <TIM_TI1_SetConfig+0x66>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4a24      	ldr	r2, [pc, #144]	; (800727c <TIM_TI1_SetConfig+0xd4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00f      	beq.n	800720e <TIM_TI1_SetConfig+0x66>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4a23      	ldr	r2, [pc, #140]	; (8007280 <TIM_TI1_SetConfig+0xd8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00b      	beq.n	800720e <TIM_TI1_SetConfig+0x66>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4a22      	ldr	r2, [pc, #136]	; (8007284 <TIM_TI1_SetConfig+0xdc>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d007      	beq.n	800720e <TIM_TI1_SetConfig+0x66>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4a21      	ldr	r2, [pc, #132]	; (8007288 <TIM_TI1_SetConfig+0xe0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d003      	beq.n	800720e <TIM_TI1_SetConfig+0x66>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	4a20      	ldr	r2, [pc, #128]	; (800728c <TIM_TI1_SetConfig+0xe4>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d101      	bne.n	8007212 <TIM_TI1_SetConfig+0x6a>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <TIM_TI1_SetConfig+0x6c>
 8007212:	2300      	movs	r3, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f023 0303 	bic.w	r3, r3, #3
 800721e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
 8007228:	e003      	b.n	8007232 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f043 0301 	orr.w	r3, r3, #1
 8007230:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007238:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	b2db      	uxtb	r3, r3
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4313      	orrs	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f023 030a 	bic.w	r3, r3, #10
 800724c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 030a 	and.w	r3, r3, #10
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40010000 	.word	0x40010000
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40010400 	.word	0x40010400
 8007288:	40014000 	.word	0x40014000
 800728c:	40001800 	.word	0x40001800

08007290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f023 0201 	bic.w	r2, r3, #1
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	011b      	lsls	r3, r3, #4
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f023 030a 	bic.w	r3, r3, #10
 80072cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b087      	sub	sp, #28
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	f023 0210 	bic.w	r2, r3, #16
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800732c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	031b      	lsls	r3, r3, #12
 8007332:	b29b      	uxth	r3, r3
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007340:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	621a      	str	r2, [r3, #32]
}
 800735c:	bf00      	nop
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	f023 0210 	bic.w	r2, r3, #16
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007392:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	031b      	lsls	r3, r3, #12
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	4313      	orrs	r3, r2
 800739c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	621a      	str	r2, [r3, #32]
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f023 0303 	bic.w	r3, r3, #3
 80073f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007404:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	b2db      	uxtb	r3, r3
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007418:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	621a      	str	r2, [r3, #32]
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	4313      	orrs	r3, r2
 8007476:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800747e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	031b      	lsls	r3, r3, #12
 8007484:	b29b      	uxth	r3, r3
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007492:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	031b      	lsls	r3, r3, #12
 8007498:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	621a      	str	r2, [r3, #32]
}
 80074ae:	bf00      	nop
 80074b0:	371c      	adds	r7, #28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f043 0307 	orr.w	r3, r3, #7
 80074dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	609a      	str	r2, [r3, #8]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800750a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	021a      	lsls	r2, r3, #8
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	431a      	orrs	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4313      	orrs	r3, r2
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	609a      	str	r2, [r3, #8]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	2201      	movs	r2, #1
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a1a      	ldr	r2, [r3, #32]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	43db      	mvns	r3, r3
 8007552:	401a      	ands	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a1a      	ldr	r2, [r3, #32]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f003 031f 	and.w	r3, r3, #31
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	fa01 f303 	lsl.w	r3, r1, r3
 8007568:	431a      	orrs	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
	...

0800757c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007590:	2302      	movs	r3, #2
 8007592:	e06d      	b.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a30      	ldr	r2, [pc, #192]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d004      	beq.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a2f      	ldr	r2, [pc, #188]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d108      	bne.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a20      	ldr	r2, [pc, #128]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d022      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007606:	d01d      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1d      	ldr	r2, [pc, #116]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d018      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1c      	ldr	r2, [pc, #112]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d013      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1a      	ldr	r2, [pc, #104]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00e      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a15      	ldr	r2, [pc, #84]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d009      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a16      	ldr	r2, [pc, #88]	; (8007690 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d004      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a15      	ldr	r2, [pc, #84]	; (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d10c      	bne.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800764a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	4313      	orrs	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40010000 	.word	0x40010000
 8007680:	40010400 	.word	0x40010400
 8007684:	40000400 	.word	0x40000400
 8007688:	40000800 	.word	0x40000800
 800768c:	40000c00 	.word	0x40000c00
 8007690:	40014000 	.word	0x40014000
 8007694:	40001800 	.word	0x40001800

08007698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e065      	b.n	8007780 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a16      	ldr	r2, [pc, #88]	; (800778c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d004      	beq.n	8007742 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a14      	ldr	r2, [pc, #80]	; (8007790 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d115      	bne.n	800776e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	051b      	lsls	r3, r3, #20
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	40010000 	.word	0x40010000
 8007790:	40010400 	.word	0x40010400

08007794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e040      	b.n	8007864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fb f866 	bl	80028c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2224      	movs	r2, #36	; 0x24
 80077fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0201 	bic.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f974 	bl	8007afc <UART_SetConfig>
 8007814:	4603      	mov	r3, r0
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e022      	b.n	8007864 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fbcc 	bl	8007fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800783a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800784a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0201 	orr.w	r2, r2, #1
 800785a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fc53 	bl	8008108 <UART_CheckIdleState>
 8007862:	4603      	mov	r3, r0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af02      	add	r7, sp, #8
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	4613      	mov	r3, r2
 800787a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007880:	2b20      	cmp	r3, #32
 8007882:	d171      	bne.n	8007968 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <HAL_UART_Transmit+0x24>
 800788a:	88fb      	ldrh	r3, [r7, #6]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e06a      	b.n	800796a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2221      	movs	r2, #33	; 0x21
 80078a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078a2:	f7fb fb69 	bl	8002f78 <HAL_GetTick>
 80078a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d108      	bne.n	80078d4 <HAL_UART_Transmit+0x68>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d104      	bne.n	80078d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	e003      	b.n	80078dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078d8:	2300      	movs	r3, #0
 80078da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078dc:	e02c      	b.n	8007938 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2200      	movs	r2, #0
 80078e6:	2180      	movs	r1, #128	; 0x80
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fc5a 	bl	80081a2 <UART_WaitOnFlagUntilTimeout>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e038      	b.n	800796a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800790c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	3302      	adds	r3, #2
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	e007      	b.n	8007926 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	3301      	adds	r3, #1
 8007924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800792c:	b29b      	uxth	r3, r3
 800792e:	3b01      	subs	r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1cc      	bne.n	80078de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2200      	movs	r2, #0
 800794c:	2140      	movs	r1, #64	; 0x40
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fc27 	bl	80081a2 <UART_WaitOnFlagUntilTimeout>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e005      	b.n	800796a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	e000      	b.n	800796a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007968:	2302      	movs	r3, #2
  }
}
 800796a:	4618      	mov	r0, r3
 800796c:	3720      	adds	r7, #32
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b08a      	sub	sp, #40	; 0x28
 8007976:	af02      	add	r7, sp, #8
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	4613      	mov	r3, r2
 8007980:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007988:	2b20      	cmp	r3, #32
 800798a:	f040 80b1 	bne.w	8007af0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_UART_Receive+0x28>
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e0a9      	b.n	8007af2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2222      	movs	r2, #34	; 0x22
 80079aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079b4:	f7fb fae0 	bl	8002f78 <HAL_GetTick>
 80079b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	88fa      	ldrh	r2, [r7, #6]
 80079c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d2:	d10e      	bne.n	80079f2 <HAL_UART_Receive+0x80>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <HAL_UART_Receive+0x76>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079e6:	e02d      	b.n	8007a44 <HAL_UART_Receive+0xd2>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	22ff      	movs	r2, #255	; 0xff
 80079ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079f0:	e028      	b.n	8007a44 <HAL_UART_Receive+0xd2>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10d      	bne.n	8007a16 <HAL_UART_Receive+0xa4>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d104      	bne.n	8007a0c <HAL_UART_Receive+0x9a>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	22ff      	movs	r2, #255	; 0xff
 8007a06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a0a:	e01b      	b.n	8007a44 <HAL_UART_Receive+0xd2>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	227f      	movs	r2, #127	; 0x7f
 8007a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a14:	e016      	b.n	8007a44 <HAL_UART_Receive+0xd2>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a1e:	d10d      	bne.n	8007a3c <HAL_UART_Receive+0xca>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d104      	bne.n	8007a32 <HAL_UART_Receive+0xc0>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	227f      	movs	r2, #127	; 0x7f
 8007a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a30:	e008      	b.n	8007a44 <HAL_UART_Receive+0xd2>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	223f      	movs	r2, #63	; 0x3f
 8007a36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a3a:	e003      	b.n	8007a44 <HAL_UART_Receive+0xd2>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a4a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a54:	d108      	bne.n	8007a68 <HAL_UART_Receive+0xf6>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	e003      	b.n	8007a70 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007a70:	e032      	b.n	8007ad8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2120      	movs	r1, #32
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fb90 	bl	80081a2 <UART_WaitOnFlagUntilTimeout>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e032      	b.n	8007af2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10c      	bne.n	8007aac <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	8a7b      	ldrh	r3, [r7, #18]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	3302      	adds	r3, #2
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	e00c      	b.n	8007ac6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	8a7b      	ldrh	r3, [r7, #18]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	4013      	ands	r3, r2
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1c6      	bne.n	8007a72 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	e000      	b.n	8007af2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007af0:	2302      	movs	r3, #2
  }
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3720      	adds	r7, #32
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4ba6      	ldr	r3, [pc, #664]	; (8007dc0 <UART_SetConfig+0x2c4>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	6979      	ldr	r1, [r7, #20]
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a94      	ldr	r2, [pc, #592]	; (8007dc4 <UART_SetConfig+0x2c8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d120      	bne.n	8007bba <UART_SetConfig+0xbe>
 8007b78:	4b93      	ldr	r3, [pc, #588]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d816      	bhi.n	8007bb4 <UART_SetConfig+0xb8>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <UART_SetConfig+0x90>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007b9d 	.word	0x08007b9d
 8007b90:	08007ba9 	.word	0x08007ba9
 8007b94:	08007ba3 	.word	0x08007ba3
 8007b98:	08007baf 	.word	0x08007baf
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	77fb      	strb	r3, [r7, #31]
 8007ba0:	e150      	b.n	8007e44 <UART_SetConfig+0x348>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	77fb      	strb	r3, [r7, #31]
 8007ba6:	e14d      	b.n	8007e44 <UART_SetConfig+0x348>
 8007ba8:	2304      	movs	r3, #4
 8007baa:	77fb      	strb	r3, [r7, #31]
 8007bac:	e14a      	b.n	8007e44 <UART_SetConfig+0x348>
 8007bae:	2308      	movs	r3, #8
 8007bb0:	77fb      	strb	r3, [r7, #31]
 8007bb2:	e147      	b.n	8007e44 <UART_SetConfig+0x348>
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	77fb      	strb	r3, [r7, #31]
 8007bb8:	e144      	b.n	8007e44 <UART_SetConfig+0x348>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a83      	ldr	r2, [pc, #524]	; (8007dcc <UART_SetConfig+0x2d0>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d132      	bne.n	8007c2a <UART_SetConfig+0x12e>
 8007bc4:	4b80      	ldr	r3, [pc, #512]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bca:	f003 030c 	and.w	r3, r3, #12
 8007bce:	2b0c      	cmp	r3, #12
 8007bd0:	d828      	bhi.n	8007c24 <UART_SetConfig+0x128>
 8007bd2:	a201      	add	r2, pc, #4	; (adr r2, 8007bd8 <UART_SetConfig+0xdc>)
 8007bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd8:	08007c0d 	.word	0x08007c0d
 8007bdc:	08007c25 	.word	0x08007c25
 8007be0:	08007c25 	.word	0x08007c25
 8007be4:	08007c25 	.word	0x08007c25
 8007be8:	08007c19 	.word	0x08007c19
 8007bec:	08007c25 	.word	0x08007c25
 8007bf0:	08007c25 	.word	0x08007c25
 8007bf4:	08007c25 	.word	0x08007c25
 8007bf8:	08007c13 	.word	0x08007c13
 8007bfc:	08007c25 	.word	0x08007c25
 8007c00:	08007c25 	.word	0x08007c25
 8007c04:	08007c25 	.word	0x08007c25
 8007c08:	08007c1f 	.word	0x08007c1f
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	77fb      	strb	r3, [r7, #31]
 8007c10:	e118      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c12:	2302      	movs	r3, #2
 8007c14:	77fb      	strb	r3, [r7, #31]
 8007c16:	e115      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c18:	2304      	movs	r3, #4
 8007c1a:	77fb      	strb	r3, [r7, #31]
 8007c1c:	e112      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c1e:	2308      	movs	r3, #8
 8007c20:	77fb      	strb	r3, [r7, #31]
 8007c22:	e10f      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c24:	2310      	movs	r3, #16
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e10c      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a68      	ldr	r2, [pc, #416]	; (8007dd0 <UART_SetConfig+0x2d4>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d120      	bne.n	8007c76 <UART_SetConfig+0x17a>
 8007c34:	4b64      	ldr	r3, [pc, #400]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c3e:	2b30      	cmp	r3, #48	; 0x30
 8007c40:	d013      	beq.n	8007c6a <UART_SetConfig+0x16e>
 8007c42:	2b30      	cmp	r3, #48	; 0x30
 8007c44:	d814      	bhi.n	8007c70 <UART_SetConfig+0x174>
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d009      	beq.n	8007c5e <UART_SetConfig+0x162>
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d810      	bhi.n	8007c70 <UART_SetConfig+0x174>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <UART_SetConfig+0x15c>
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d006      	beq.n	8007c64 <UART_SetConfig+0x168>
 8007c56:	e00b      	b.n	8007c70 <UART_SetConfig+0x174>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e0f2      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	77fb      	strb	r3, [r7, #31]
 8007c62:	e0ef      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c64:	2304      	movs	r3, #4
 8007c66:	77fb      	strb	r3, [r7, #31]
 8007c68:	e0ec      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c6a:	2308      	movs	r3, #8
 8007c6c:	77fb      	strb	r3, [r7, #31]
 8007c6e:	e0e9      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c70:	2310      	movs	r3, #16
 8007c72:	77fb      	strb	r3, [r7, #31]
 8007c74:	e0e6      	b.n	8007e44 <UART_SetConfig+0x348>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a56      	ldr	r2, [pc, #344]	; (8007dd4 <UART_SetConfig+0x2d8>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d120      	bne.n	8007cc2 <UART_SetConfig+0x1c6>
 8007c80:	4b51      	ldr	r3, [pc, #324]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c8c:	d013      	beq.n	8007cb6 <UART_SetConfig+0x1ba>
 8007c8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c90:	d814      	bhi.n	8007cbc <UART_SetConfig+0x1c0>
 8007c92:	2b80      	cmp	r3, #128	; 0x80
 8007c94:	d009      	beq.n	8007caa <UART_SetConfig+0x1ae>
 8007c96:	2b80      	cmp	r3, #128	; 0x80
 8007c98:	d810      	bhi.n	8007cbc <UART_SetConfig+0x1c0>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <UART_SetConfig+0x1a8>
 8007c9e:	2b40      	cmp	r3, #64	; 0x40
 8007ca0:	d006      	beq.n	8007cb0 <UART_SetConfig+0x1b4>
 8007ca2:	e00b      	b.n	8007cbc <UART_SetConfig+0x1c0>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e0cc      	b.n	8007e44 <UART_SetConfig+0x348>
 8007caa:	2302      	movs	r3, #2
 8007cac:	77fb      	strb	r3, [r7, #31]
 8007cae:	e0c9      	b.n	8007e44 <UART_SetConfig+0x348>
 8007cb0:	2304      	movs	r3, #4
 8007cb2:	77fb      	strb	r3, [r7, #31]
 8007cb4:	e0c6      	b.n	8007e44 <UART_SetConfig+0x348>
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	77fb      	strb	r3, [r7, #31]
 8007cba:	e0c3      	b.n	8007e44 <UART_SetConfig+0x348>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	77fb      	strb	r3, [r7, #31]
 8007cc0:	e0c0      	b.n	8007e44 <UART_SetConfig+0x348>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a44      	ldr	r2, [pc, #272]	; (8007dd8 <UART_SetConfig+0x2dc>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d125      	bne.n	8007d18 <UART_SetConfig+0x21c>
 8007ccc:	4b3e      	ldr	r3, [pc, #248]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cda:	d017      	beq.n	8007d0c <UART_SetConfig+0x210>
 8007cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ce0:	d817      	bhi.n	8007d12 <UART_SetConfig+0x216>
 8007ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce6:	d00b      	beq.n	8007d00 <UART_SetConfig+0x204>
 8007ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cec:	d811      	bhi.n	8007d12 <UART_SetConfig+0x216>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <UART_SetConfig+0x1fe>
 8007cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf6:	d006      	beq.n	8007d06 <UART_SetConfig+0x20a>
 8007cf8:	e00b      	b.n	8007d12 <UART_SetConfig+0x216>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e0a1      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d00:	2302      	movs	r3, #2
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e09e      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d06:	2304      	movs	r3, #4
 8007d08:	77fb      	strb	r3, [r7, #31]
 8007d0a:	e09b      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d0c:	2308      	movs	r3, #8
 8007d0e:	77fb      	strb	r3, [r7, #31]
 8007d10:	e098      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d12:	2310      	movs	r3, #16
 8007d14:	77fb      	strb	r3, [r7, #31]
 8007d16:	e095      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a2f      	ldr	r2, [pc, #188]	; (8007ddc <UART_SetConfig+0x2e0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d125      	bne.n	8007d6e <UART_SetConfig+0x272>
 8007d22:	4b29      	ldr	r3, [pc, #164]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d30:	d017      	beq.n	8007d62 <UART_SetConfig+0x266>
 8007d32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d36:	d817      	bhi.n	8007d68 <UART_SetConfig+0x26c>
 8007d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d3c:	d00b      	beq.n	8007d56 <UART_SetConfig+0x25a>
 8007d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d42:	d811      	bhi.n	8007d68 <UART_SetConfig+0x26c>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <UART_SetConfig+0x254>
 8007d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d4c:	d006      	beq.n	8007d5c <UART_SetConfig+0x260>
 8007d4e:	e00b      	b.n	8007d68 <UART_SetConfig+0x26c>
 8007d50:	2301      	movs	r3, #1
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e076      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d56:	2302      	movs	r3, #2
 8007d58:	77fb      	strb	r3, [r7, #31]
 8007d5a:	e073      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d5c:	2304      	movs	r3, #4
 8007d5e:	77fb      	strb	r3, [r7, #31]
 8007d60:	e070      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d62:	2308      	movs	r3, #8
 8007d64:	77fb      	strb	r3, [r7, #31]
 8007d66:	e06d      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d68:	2310      	movs	r3, #16
 8007d6a:	77fb      	strb	r3, [r7, #31]
 8007d6c:	e06a      	b.n	8007e44 <UART_SetConfig+0x348>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1b      	ldr	r2, [pc, #108]	; (8007de0 <UART_SetConfig+0x2e4>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d138      	bne.n	8007dea <UART_SetConfig+0x2ee>
 8007d78:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <UART_SetConfig+0x2cc>)
 8007d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d86:	d017      	beq.n	8007db8 <UART_SetConfig+0x2bc>
 8007d88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d8c:	d82a      	bhi.n	8007de4 <UART_SetConfig+0x2e8>
 8007d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d92:	d00b      	beq.n	8007dac <UART_SetConfig+0x2b0>
 8007d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d98:	d824      	bhi.n	8007de4 <UART_SetConfig+0x2e8>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <UART_SetConfig+0x2aa>
 8007d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da2:	d006      	beq.n	8007db2 <UART_SetConfig+0x2b6>
 8007da4:	e01e      	b.n	8007de4 <UART_SetConfig+0x2e8>
 8007da6:	2300      	movs	r3, #0
 8007da8:	77fb      	strb	r3, [r7, #31]
 8007daa:	e04b      	b.n	8007e44 <UART_SetConfig+0x348>
 8007dac:	2302      	movs	r3, #2
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e048      	b.n	8007e44 <UART_SetConfig+0x348>
 8007db2:	2304      	movs	r3, #4
 8007db4:	77fb      	strb	r3, [r7, #31]
 8007db6:	e045      	b.n	8007e44 <UART_SetConfig+0x348>
 8007db8:	2308      	movs	r3, #8
 8007dba:	77fb      	strb	r3, [r7, #31]
 8007dbc:	e042      	b.n	8007e44 <UART_SetConfig+0x348>
 8007dbe:	bf00      	nop
 8007dc0:	efff69f3 	.word	0xefff69f3
 8007dc4:	40011000 	.word	0x40011000
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	40004400 	.word	0x40004400
 8007dd0:	40004800 	.word	0x40004800
 8007dd4:	40004c00 	.word	0x40004c00
 8007dd8:	40005000 	.word	0x40005000
 8007ddc:	40011400 	.word	0x40011400
 8007de0:	40007800 	.word	0x40007800
 8007de4:	2310      	movs	r3, #16
 8007de6:	77fb      	strb	r3, [r7, #31]
 8007de8:	e02c      	b.n	8007e44 <UART_SetConfig+0x348>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a72      	ldr	r2, [pc, #456]	; (8007fb8 <UART_SetConfig+0x4bc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d125      	bne.n	8007e40 <UART_SetConfig+0x344>
 8007df4:	4b71      	ldr	r3, [pc, #452]	; (8007fbc <UART_SetConfig+0x4c0>)
 8007df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e02:	d017      	beq.n	8007e34 <UART_SetConfig+0x338>
 8007e04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e08:	d817      	bhi.n	8007e3a <UART_SetConfig+0x33e>
 8007e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e0e:	d00b      	beq.n	8007e28 <UART_SetConfig+0x32c>
 8007e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e14:	d811      	bhi.n	8007e3a <UART_SetConfig+0x33e>
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <UART_SetConfig+0x326>
 8007e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1e:	d006      	beq.n	8007e2e <UART_SetConfig+0x332>
 8007e20:	e00b      	b.n	8007e3a <UART_SetConfig+0x33e>
 8007e22:	2300      	movs	r3, #0
 8007e24:	77fb      	strb	r3, [r7, #31]
 8007e26:	e00d      	b.n	8007e44 <UART_SetConfig+0x348>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e00a      	b.n	8007e44 <UART_SetConfig+0x348>
 8007e2e:	2304      	movs	r3, #4
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e007      	b.n	8007e44 <UART_SetConfig+0x348>
 8007e34:	2308      	movs	r3, #8
 8007e36:	77fb      	strb	r3, [r7, #31]
 8007e38:	e004      	b.n	8007e44 <UART_SetConfig+0x348>
 8007e3a:	2310      	movs	r3, #16
 8007e3c:	77fb      	strb	r3, [r7, #31]
 8007e3e:	e001      	b.n	8007e44 <UART_SetConfig+0x348>
 8007e40:	2310      	movs	r3, #16
 8007e42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e4c:	d15b      	bne.n	8007f06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e4e:	7ffb      	ldrb	r3, [r7, #31]
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d828      	bhi.n	8007ea6 <UART_SetConfig+0x3aa>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <UART_SetConfig+0x360>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e81 	.word	0x08007e81
 8007e60:	08007e89 	.word	0x08007e89
 8007e64:	08007e91 	.word	0x08007e91
 8007e68:	08007ea7 	.word	0x08007ea7
 8007e6c:	08007e97 	.word	0x08007e97
 8007e70:	08007ea7 	.word	0x08007ea7
 8007e74:	08007ea7 	.word	0x08007ea7
 8007e78:	08007ea7 	.word	0x08007ea7
 8007e7c:	08007e9f 	.word	0x08007e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e80:	f7fd f914 	bl	80050ac <HAL_RCC_GetPCLK1Freq>
 8007e84:	61b8      	str	r0, [r7, #24]
        break;
 8007e86:	e013      	b.n	8007eb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e88:	f7fd f924 	bl	80050d4 <HAL_RCC_GetPCLK2Freq>
 8007e8c:	61b8      	str	r0, [r7, #24]
        break;
 8007e8e:	e00f      	b.n	8007eb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e90:	4b4b      	ldr	r3, [pc, #300]	; (8007fc0 <UART_SetConfig+0x4c4>)
 8007e92:	61bb      	str	r3, [r7, #24]
        break;
 8007e94:	e00c      	b.n	8007eb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e96:	f7fc fff7 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8007e9a:	61b8      	str	r0, [r7, #24]
        break;
 8007e9c:	e008      	b.n	8007eb0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea2:	61bb      	str	r3, [r7, #24]
        break;
 8007ea4:	e004      	b.n	8007eb0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	77bb      	strb	r3, [r7, #30]
        break;
 8007eae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d074      	beq.n	8007fa0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	005a      	lsls	r2, r3, #1
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	085b      	lsrs	r3, r3, #1
 8007ec0:	441a      	add	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	2b0f      	cmp	r3, #15
 8007ed0:	d916      	bls.n	8007f00 <UART_SetConfig+0x404>
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed8:	d212      	bcs.n	8007f00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f023 030f 	bic.w	r3, r3, #15
 8007ee2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	085b      	lsrs	r3, r3, #1
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	89fb      	ldrh	r3, [r7, #14]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	89fa      	ldrh	r2, [r7, #14]
 8007efc:	60da      	str	r2, [r3, #12]
 8007efe:	e04f      	b.n	8007fa0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	77bb      	strb	r3, [r7, #30]
 8007f04:	e04c      	b.n	8007fa0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f06:	7ffb      	ldrb	r3, [r7, #31]
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d828      	bhi.n	8007f5e <UART_SetConfig+0x462>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <UART_SetConfig+0x418>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f49 	.word	0x08007f49
 8007f20:	08007f5f 	.word	0x08007f5f
 8007f24:	08007f4f 	.word	0x08007f4f
 8007f28:	08007f5f 	.word	0x08007f5f
 8007f2c:	08007f5f 	.word	0x08007f5f
 8007f30:	08007f5f 	.word	0x08007f5f
 8007f34:	08007f57 	.word	0x08007f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f38:	f7fd f8b8 	bl	80050ac <HAL_RCC_GetPCLK1Freq>
 8007f3c:	61b8      	str	r0, [r7, #24]
        break;
 8007f3e:	e013      	b.n	8007f68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f40:	f7fd f8c8 	bl	80050d4 <HAL_RCC_GetPCLK2Freq>
 8007f44:	61b8      	str	r0, [r7, #24]
        break;
 8007f46:	e00f      	b.n	8007f68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f48:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <UART_SetConfig+0x4c4>)
 8007f4a:	61bb      	str	r3, [r7, #24]
        break;
 8007f4c:	e00c      	b.n	8007f68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f4e:	f7fc ff9b 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8007f52:	61b8      	str	r0, [r7, #24]
        break;
 8007f54:	e008      	b.n	8007f68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f5a:	61bb      	str	r3, [r7, #24]
        break;
 8007f5c:	e004      	b.n	8007f68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	77bb      	strb	r3, [r7, #30]
        break;
 8007f66:	bf00      	nop
    }

    if (pclk != 0U)
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d018      	beq.n	8007fa0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	085a      	lsrs	r2, r3, #1
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	441a      	add	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b0f      	cmp	r3, #15
 8007f86:	d909      	bls.n	8007f9c <UART_SetConfig+0x4a0>
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f8e:	d205      	bcs.n	8007f9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60da      	str	r2, [r3, #12]
 8007f9a:	e001      	b.n	8007fa0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007fac:	7fbb      	ldrb	r3, [r7, #30]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40007c00 	.word	0x40007c00
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	00f42400 	.word	0x00f42400

08007fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01a      	beq.n	80080da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080c2:	d10a      	bne.n	80080da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	605a      	str	r2, [r3, #4]
  }
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af02      	add	r7, sp, #8
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008118:	f7fa ff2e 	bl	8002f78 <HAL_GetTick>
 800811c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b08      	cmp	r3, #8
 800812a:	d10e      	bne.n	800814a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800812c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f831 	bl	80081a2 <UART_WaitOnFlagUntilTimeout>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e027      	b.n	800819a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b04      	cmp	r3, #4
 8008156:	d10e      	bne.n	8008176 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f81b 	bl	80081a2 <UART_WaitOnFlagUntilTimeout>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e011      	b.n	800819a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b09c      	sub	sp, #112	; 0x70
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	603b      	str	r3, [r7, #0]
 80081ae:	4613      	mov	r3, r2
 80081b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b2:	e0a7      	b.n	8008304 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ba:	f000 80a3 	beq.w	8008304 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081be:	f7fa fedb 	bl	8002f78 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d302      	bcc.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80081ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d13f      	bne.n	8008254 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081e8:	667b      	str	r3, [r7, #100]	; 0x64
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e6      	bne.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	663b      	str	r3, [r7, #96]	; 0x60
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3308      	adds	r3, #8
 8008224:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008226:	64ba      	str	r2, [r7, #72]	; 0x48
 8008228:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800822c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e5      	bne.n	8008206 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2220      	movs	r2, #32
 800823e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2220      	movs	r2, #32
 8008244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e068      	b.n	8008326 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b00      	cmp	r3, #0
 8008260:	d050      	beq.n	8008304 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800826c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008270:	d148      	bne.n	8008304 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800827a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008290:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800829a:	637b      	str	r3, [r7, #52]	; 0x34
 800829c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e6      	bne.n	800827c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	613b      	str	r3, [r7, #16]
   return(result);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f023 0301 	bic.w	r3, r3, #1
 80082c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3308      	adds	r3, #8
 80082cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082ce:	623a      	str	r2, [r7, #32]
 80082d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	69f9      	ldr	r1, [r7, #28]
 80082d4:	6a3a      	ldr	r2, [r7, #32]
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	61bb      	str	r3, [r7, #24]
   return(result);
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e5      	bne.n	80082ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2220      	movs	r2, #32
 80082e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e010      	b.n	8008326 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69da      	ldr	r2, [r3, #28]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	4013      	ands	r3, r2
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	429a      	cmp	r2, r3
 8008312:	bf0c      	ite	eq
 8008314:	2301      	moveq	r3, #1
 8008316:	2300      	movne	r3, #0
 8008318:	b2db      	uxtb	r3, r3
 800831a:	461a      	mov	r2, r3
 800831c:	79fb      	ldrb	r3, [r7, #7]
 800831e:	429a      	cmp	r2, r3
 8008320:	f43f af48 	beq.w	80081b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3770      	adds	r7, #112	; 0x70
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800832e:	b480      	push	{r7}
 8008330:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008332:	bf00      	nop
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008342:	f3ef 8305 	mrs	r3, IPSR
 8008346:	60bb      	str	r3, [r7, #8]
  return(result);
 8008348:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10f      	bne.n	800836e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800834e:	f3ef 8310 	mrs	r3, PRIMASK
 8008352:	607b      	str	r3, [r7, #4]
  return(result);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800835a:	f3ef 8311 	mrs	r3, BASEPRI
 800835e:	603b      	str	r3, [r7, #0]
  return(result);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d007      	beq.n	8008376 <osKernelInitialize+0x3a>
 8008366:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <osKernelInitialize+0x64>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b02      	cmp	r3, #2
 800836c:	d103      	bne.n	8008376 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800836e:	f06f 0305 	mvn.w	r3, #5
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e00c      	b.n	8008390 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008376:	4b0a      	ldr	r3, [pc, #40]	; (80083a0 <osKernelInitialize+0x64>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d105      	bne.n	800838a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800837e:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <osKernelInitialize+0x64>)
 8008380:	2201      	movs	r2, #1
 8008382:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	e002      	b.n	8008390 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800838a:	f04f 33ff 	mov.w	r3, #4294967295
 800838e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008390:	68fb      	ldr	r3, [r7, #12]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000848 	.word	0x20000848

080083a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083aa:	f3ef 8305 	mrs	r3, IPSR
 80083ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80083b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10f      	bne.n	80083d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083b6:	f3ef 8310 	mrs	r3, PRIMASK
 80083ba:	607b      	str	r3, [r7, #4]
  return(result);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d105      	bne.n	80083ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083c2:	f3ef 8311 	mrs	r3, BASEPRI
 80083c6:	603b      	str	r3, [r7, #0]
  return(result);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d007      	beq.n	80083de <osKernelStart+0x3a>
 80083ce:	4b0f      	ldr	r3, [pc, #60]	; (800840c <osKernelStart+0x68>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d103      	bne.n	80083de <osKernelStart+0x3a>
    stat = osErrorISR;
 80083d6:	f06f 0305 	mvn.w	r3, #5
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	e010      	b.n	8008400 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083de:	4b0b      	ldr	r3, [pc, #44]	; (800840c <osKernelStart+0x68>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d109      	bne.n	80083fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80083e6:	f7ff ffa2 	bl	800832e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80083ea:	4b08      	ldr	r3, [pc, #32]	; (800840c <osKernelStart+0x68>)
 80083ec:	2202      	movs	r2, #2
 80083ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80083f0:	f001 ff5e 	bl	800a2b0 <vTaskStartScheduler>
      stat = osOK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	e002      	b.n	8008400 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80083fa:	f04f 33ff 	mov.w	r3, #4294967295
 80083fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008400:	68fb      	ldr	r3, [r7, #12]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000848 	.word	0x20000848

08008410 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008410:	b580      	push	{r7, lr}
 8008412:	b090      	sub	sp, #64	; 0x40
 8008414:	af04      	add	r7, sp, #16
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800841c:	2300      	movs	r3, #0
 800841e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008420:	f3ef 8305 	mrs	r3, IPSR
 8008424:	61fb      	str	r3, [r7, #28]
  return(result);
 8008426:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008428:	2b00      	cmp	r3, #0
 800842a:	f040 808f 	bne.w	800854c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800842e:	f3ef 8310 	mrs	r3, PRIMASK
 8008432:	61bb      	str	r3, [r7, #24]
  return(result);
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d105      	bne.n	8008446 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800843a:	f3ef 8311 	mrs	r3, BASEPRI
 800843e:	617b      	str	r3, [r7, #20]
  return(result);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <osThreadNew+0x3e>
 8008446:	4b44      	ldr	r3, [pc, #272]	; (8008558 <osThreadNew+0x148>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b02      	cmp	r3, #2
 800844c:	d07e      	beq.n	800854c <osThreadNew+0x13c>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d07b      	beq.n	800854c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008454:	2380      	movs	r3, #128	; 0x80
 8008456:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008458:	2318      	movs	r3, #24
 800845a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800845c:	2300      	movs	r3, #0
 800845e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008460:	f04f 33ff 	mov.w	r3, #4294967295
 8008464:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d045      	beq.n	80084f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <osThreadNew+0x6a>
        name = attr->name;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	2b00      	cmp	r3, #0
 800848c:	d008      	beq.n	80084a0 <osThreadNew+0x90>
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	2b38      	cmp	r3, #56	; 0x38
 8008492:	d805      	bhi.n	80084a0 <osThreadNew+0x90>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <osThreadNew+0x94>
        return (NULL);
 80084a0:	2300      	movs	r3, #0
 80084a2:	e054      	b.n	800854e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	089b      	lsrs	r3, r3, #2
 80084b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00e      	beq.n	80084da <osThreadNew+0xca>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	2b5b      	cmp	r3, #91	; 0x5b
 80084c2:	d90a      	bls.n	80084da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d006      	beq.n	80084da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <osThreadNew+0xca>
        mem = 1;
 80084d4:	2301      	movs	r3, #1
 80084d6:	623b      	str	r3, [r7, #32]
 80084d8:	e010      	b.n	80084fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10c      	bne.n	80084fc <osThreadNew+0xec>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d108      	bne.n	80084fc <osThreadNew+0xec>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d104      	bne.n	80084fc <osThreadNew+0xec>
          mem = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	623b      	str	r3, [r7, #32]
 80084f6:	e001      	b.n	80084fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d110      	bne.n	8008524 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800850a:	9202      	str	r2, [sp, #8]
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f001 fd1f 	bl	8009f5c <xTaskCreateStatic>
 800851e:	4603      	mov	r3, r0
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	e013      	b.n	800854c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d110      	bne.n	800854c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	b29a      	uxth	r2, r3
 800852e:	f107 0310 	add.w	r3, r7, #16
 8008532:	9301      	str	r3, [sp, #4]
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f001 fd70 	bl	800a022 <xTaskCreate>
 8008542:	4603      	mov	r3, r0
 8008544:	2b01      	cmp	r3, #1
 8008546:	d001      	beq.n	800854c <osThreadNew+0x13c>
          hTask = NULL;
 8008548:	2300      	movs	r3, #0
 800854a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800854c:	693b      	ldr	r3, [r7, #16]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3730      	adds	r7, #48	; 0x30
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20000848 	.word	0x20000848

0800855c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800855c:	b580      	push	{r7, lr}
 800855e:	b08a      	sub	sp, #40	; 0x28
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008568:	f3ef 8305 	mrs	r3, IPSR
 800856c:	613b      	str	r3, [r7, #16]
  return(result);
 800856e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008570:	2b00      	cmp	r3, #0
 8008572:	f040 8085 	bne.w	8008680 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008576:	f3ef 8310 	mrs	r3, PRIMASK
 800857a:	60fb      	str	r3, [r7, #12]
  return(result);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d105      	bne.n	800858e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008582:	f3ef 8311 	mrs	r3, BASEPRI
 8008586:	60bb      	str	r3, [r7, #8]
  return(result);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <osMutexNew+0x3a>
 800858e:	4b3f      	ldr	r3, [pc, #252]	; (800868c <osMutexNew+0x130>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d074      	beq.n	8008680 <osMutexNew+0x124>
    if (attr != NULL) {
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	623b      	str	r3, [r7, #32]
 80085a2:	e001      	b.n	80085a8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <osMutexNew+0x5c>
      rmtx = 1U;
 80085b2:	2301      	movs	r3, #1
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	e001      	b.n	80085bc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	f003 0308 	and.w	r3, r3, #8
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d15c      	bne.n	8008680 <osMutexNew+0x124>
      mem = -1;
 80085c6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ca:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d015      	beq.n	80085fe <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d006      	beq.n	80085e8 <osMutexNew+0x8c>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	2b4f      	cmp	r3, #79	; 0x4f
 80085e0:	d902      	bls.n	80085e8 <osMutexNew+0x8c>
          mem = 1;
 80085e2:	2301      	movs	r3, #1
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	e00c      	b.n	8008602 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d108      	bne.n	8008602 <osMutexNew+0xa6>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d104      	bne.n	8008602 <osMutexNew+0xa6>
            mem = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	61bb      	str	r3, [r7, #24]
 80085fc:	e001      	b.n	8008602 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80085fe:	2300      	movs	r3, #0
 8008600:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d112      	bne.n	800862e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	4619      	mov	r1, r3
 8008614:	2004      	movs	r0, #4
 8008616:	f000 fd82 	bl	800911e <xQueueCreateMutexStatic>
 800861a:	6278      	str	r0, [r7, #36]	; 0x24
 800861c:	e016      	b.n	800864c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	4619      	mov	r1, r3
 8008624:	2001      	movs	r0, #1
 8008626:	f000 fd7a 	bl	800911e <xQueueCreateMutexStatic>
 800862a:	6278      	str	r0, [r7, #36]	; 0x24
 800862c:	e00e      	b.n	800864c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10b      	bne.n	800864c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800863a:	2004      	movs	r0, #4
 800863c:	f000 fd57 	bl	80090ee <xQueueCreateMutex>
 8008640:	6278      	str	r0, [r7, #36]	; 0x24
 8008642:	e003      	b.n	800864c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008644:	2001      	movs	r0, #1
 8008646:	f000 fd52 	bl	80090ee <xQueueCreateMutex>
 800864a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00c      	beq.n	800866c <osMutexNew+0x110>
        if (attr != NULL) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <osMutexNew+0x104>
          name = attr->name;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	e001      	b.n	8008664 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008664:	6979      	ldr	r1, [r7, #20]
 8008666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008668:	f001 fbf0 	bl	8009e4c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <osMutexNew+0x124>
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	f043 0301 	orr.w	r3, r3, #1
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008682:	4618      	mov	r0, r3
 8008684:	3728      	adds	r7, #40	; 0x28
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20000848 	.word	0x20000848

08008690 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008690:	b580      	push	{r7, lr}
 8008692:	b08c      	sub	sp, #48	; 0x30
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800869c:	2300      	movs	r3, #0
 800869e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a0:	f3ef 8305 	mrs	r3, IPSR
 80086a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80086a6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f040 8086 	bne.w	80087ba <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ae:	f3ef 8310 	mrs	r3, PRIMASK
 80086b2:	617b      	str	r3, [r7, #20]
  return(result);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d105      	bne.n	80086c6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086ba:	f3ef 8311 	mrs	r3, BASEPRI
 80086be:	613b      	str	r3, [r7, #16]
  return(result);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <osSemaphoreNew+0x3e>
 80086c6:	4b3f      	ldr	r3, [pc, #252]	; (80087c4 <osSemaphoreNew+0x134>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d075      	beq.n	80087ba <osSemaphoreNew+0x12a>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d072      	beq.n	80087ba <osSemaphoreNew+0x12a>
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d86e      	bhi.n	80087ba <osSemaphoreNew+0x12a>
    mem = -1;
 80086dc:	f04f 33ff 	mov.w	r3, #4294967295
 80086e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d015      	beq.n	8008714 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d006      	beq.n	80086fe <osSemaphoreNew+0x6e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	2b4f      	cmp	r3, #79	; 0x4f
 80086f6:	d902      	bls.n	80086fe <osSemaphoreNew+0x6e>
        mem = 1;
 80086f8:	2301      	movs	r3, #1
 80086fa:	623b      	str	r3, [r7, #32]
 80086fc:	e00c      	b.n	8008718 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d108      	bne.n	8008718 <osSemaphoreNew+0x88>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <osSemaphoreNew+0x88>
          mem = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	623b      	str	r3, [r7, #32]
 8008712:	e001      	b.n	8008718 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871e:	d04c      	beq.n	80087ba <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d128      	bne.n	8008778 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d10a      	bne.n	8008742 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	2203      	movs	r2, #3
 8008732:	9200      	str	r2, [sp, #0]
 8008734:	2200      	movs	r2, #0
 8008736:	2100      	movs	r1, #0
 8008738:	2001      	movs	r0, #1
 800873a:	f000 fbd7 	bl	8008eec <xQueueGenericCreateStatic>
 800873e:	6278      	str	r0, [r7, #36]	; 0x24
 8008740:	e005      	b.n	800874e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008742:	2203      	movs	r2, #3
 8008744:	2100      	movs	r1, #0
 8008746:	2001      	movs	r0, #1
 8008748:	f000 fc52 	bl	8008ff0 <xQueueGenericCreate>
 800874c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d022      	beq.n	800879a <osSemaphoreNew+0x10a>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01f      	beq.n	800879a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800875a:	2300      	movs	r3, #0
 800875c:	2200      	movs	r2, #0
 800875e:	2100      	movs	r1, #0
 8008760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008762:	f000 fd69 	bl	8009238 <xQueueGenericSend>
 8008766:	4603      	mov	r3, r0
 8008768:	2b01      	cmp	r3, #1
 800876a:	d016      	beq.n	800879a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800876c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800876e:	f001 fa1f 	bl	8009bb0 <vQueueDelete>
            hSemaphore = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
 8008776:	e010      	b.n	800879a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d108      	bne.n	8008790 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	461a      	mov	r2, r3
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fce4 	bl	8009154 <xQueueCreateCountingSemaphoreStatic>
 800878c:	6278      	str	r0, [r7, #36]	; 0x24
 800878e:	e004      	b.n	800879a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 fd19 	bl	80091ca <xQueueCreateCountingSemaphore>
 8008798:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00c      	beq.n	80087ba <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <osSemaphoreNew+0x11e>
          name = attr->name;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	61fb      	str	r3, [r7, #28]
 80087ac:	e001      	b.n	80087b2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80087b2:	69f9      	ldr	r1, [r7, #28]
 80087b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087b6:	f001 fb49 	bl	8009e4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3728      	adds	r7, #40	; 0x28
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	20000848 	.word	0x20000848

080087c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80087e0:	f06f 0303 	mvn.w	r3, #3
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	e04b      	b.n	8008880 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087e8:	f3ef 8305 	mrs	r3, IPSR
 80087ec:	617b      	str	r3, [r7, #20]
  return(result);
 80087ee:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10f      	bne.n	8008814 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f4:	f3ef 8310 	mrs	r3, PRIMASK
 80087f8:	613b      	str	r3, [r7, #16]
  return(result);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d105      	bne.n	800880c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008800:	f3ef 8311 	mrs	r3, BASEPRI
 8008804:	60fb      	str	r3, [r7, #12]
  return(result);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d026      	beq.n	800885a <osSemaphoreAcquire+0x92>
 800880c:	4b1f      	ldr	r3, [pc, #124]	; (800888c <osSemaphoreAcquire+0xc4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d122      	bne.n	800885a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800881a:	f06f 0303 	mvn.w	r3, #3
 800881e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008820:	e02d      	b.n	800887e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008822:	2300      	movs	r3, #0
 8008824:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008826:	f107 0308 	add.w	r3, r7, #8
 800882a:	461a      	mov	r2, r3
 800882c:	2100      	movs	r1, #0
 800882e:	69b8      	ldr	r0, [r7, #24]
 8008830:	f001 f938 	bl	8009aa4 <xQueueReceiveFromISR>
 8008834:	4603      	mov	r3, r0
 8008836:	2b01      	cmp	r3, #1
 8008838:	d003      	beq.n	8008842 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800883a:	f06f 0302 	mvn.w	r3, #2
 800883e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008840:	e01d      	b.n	800887e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01a      	beq.n	800887e <osSemaphoreAcquire+0xb6>
 8008848:	4b11      	ldr	r3, [pc, #68]	; (8008890 <osSemaphoreAcquire+0xc8>)
 800884a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008858:	e011      	b.n	800887e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	69b8      	ldr	r0, [r7, #24]
 800885e:	f001 f80d 	bl	800987c <xQueueSemaphoreTake>
 8008862:	4603      	mov	r3, r0
 8008864:	2b01      	cmp	r3, #1
 8008866:	d00b      	beq.n	8008880 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800886e:	f06f 0301 	mvn.w	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	e004      	b.n	8008880 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008876:	f06f 0302 	mvn.w	r3, #2
 800887a:	61fb      	str	r3, [r7, #28]
 800887c:	e000      	b.n	8008880 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800887e:	bf00      	nop
      }
    }
  }

  return (stat);
 8008880:	69fb      	ldr	r3, [r7, #28]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000848 	.word	0x20000848
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d103      	bne.n	80088b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80088aa:	f06f 0303 	mvn.w	r3, #3
 80088ae:	61fb      	str	r3, [r7, #28]
 80088b0:	e03e      	b.n	8008930 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088b2:	f3ef 8305 	mrs	r3, IPSR
 80088b6:	617b      	str	r3, [r7, #20]
  return(result);
 80088b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10f      	bne.n	80088de <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088be:	f3ef 8310 	mrs	r3, PRIMASK
 80088c2:	613b      	str	r3, [r7, #16]
  return(result);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d105      	bne.n	80088d6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088ca:	f3ef 8311 	mrs	r3, BASEPRI
 80088ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01e      	beq.n	8008914 <osSemaphoreRelease+0x80>
 80088d6:	4b19      	ldr	r3, [pc, #100]	; (800893c <osSemaphoreRelease+0xa8>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d11a      	bne.n	8008914 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80088de:	2300      	movs	r3, #0
 80088e0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80088e2:	f107 0308 	add.w	r3, r7, #8
 80088e6:	4619      	mov	r1, r3
 80088e8:	69b8      	ldr	r0, [r7, #24]
 80088ea:	f000 fe4b 	bl	8009584 <xQueueGiveFromISR>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d003      	beq.n	80088fc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80088f4:	f06f 0302 	mvn.w	r3, #2
 80088f8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80088fa:	e018      	b.n	800892e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d015      	beq.n	800892e <osSemaphoreRelease+0x9a>
 8008902:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <osSemaphoreRelease+0xac>)
 8008904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008912:	e00c      	b.n	800892e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008914:	2300      	movs	r3, #0
 8008916:	2200      	movs	r2, #0
 8008918:	2100      	movs	r1, #0
 800891a:	69b8      	ldr	r0, [r7, #24]
 800891c:	f000 fc8c 	bl	8009238 <xQueueGenericSend>
 8008920:	4603      	mov	r3, r0
 8008922:	2b01      	cmp	r3, #1
 8008924:	d004      	beq.n	8008930 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008926:	f06f 0302 	mvn.w	r3, #2
 800892a:	61fb      	str	r3, [r7, #28]
 800892c:	e000      	b.n	8008930 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800892e:	bf00      	nop
    }
  }

  return (stat);
 8008930:	69fb      	ldr	r3, [r7, #28]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3720      	adds	r7, #32
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20000848 	.word	0x20000848
 8008940:	e000ed04 	.word	0xe000ed04

08008944 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008944:	b580      	push	{r7, lr}
 8008946:	b08c      	sub	sp, #48	; 0x30
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008950:	2300      	movs	r3, #0
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008954:	f3ef 8305 	mrs	r3, IPSR
 8008958:	61bb      	str	r3, [r7, #24]
  return(result);
 800895a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800895c:	2b00      	cmp	r3, #0
 800895e:	d16f      	bne.n	8008a40 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008960:	f3ef 8310 	mrs	r3, PRIMASK
 8008964:	617b      	str	r3, [r7, #20]
  return(result);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d105      	bne.n	8008978 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800896c:	f3ef 8311 	mrs	r3, BASEPRI
 8008970:	613b      	str	r3, [r7, #16]
  return(result);
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <osMessageQueueNew+0x3c>
 8008978:	4b34      	ldr	r3, [pc, #208]	; (8008a4c <osMessageQueueNew+0x108>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d05f      	beq.n	8008a40 <osMessageQueueNew+0xfc>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d05c      	beq.n	8008a40 <osMessageQueueNew+0xfc>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d059      	beq.n	8008a40 <osMessageQueueNew+0xfc>
    mem = -1;
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d029      	beq.n	80089ec <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d012      	beq.n	80089c6 <osMessageQueueNew+0x82>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b4f      	cmp	r3, #79	; 0x4f
 80089a6:	d90e      	bls.n	80089c6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00a      	beq.n	80089c6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	695a      	ldr	r2, [r3, #20]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	68b9      	ldr	r1, [r7, #8]
 80089b8:	fb01 f303 	mul.w	r3, r1, r3
 80089bc:	429a      	cmp	r2, r3
 80089be:	d302      	bcc.n	80089c6 <osMessageQueueNew+0x82>
        mem = 1;
 80089c0:	2301      	movs	r3, #1
 80089c2:	623b      	str	r3, [r7, #32]
 80089c4:	e014      	b.n	80089f0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d110      	bne.n	80089f0 <osMessageQueueNew+0xac>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10c      	bne.n	80089f0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d108      	bne.n	80089f0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d104      	bne.n	80089f0 <osMessageQueueNew+0xac>
          mem = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	623b      	str	r3, [r7, #32]
 80089ea:	e001      	b.n	80089f0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d10b      	bne.n	8008a0e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	691a      	ldr	r2, [r3, #16]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	2100      	movs	r1, #0
 8008a00:	9100      	str	r1, [sp, #0]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fa71 	bl	8008eec <xQueueGenericCreateStatic>
 8008a0a:	6278      	str	r0, [r7, #36]	; 0x24
 8008a0c:	e008      	b.n	8008a20 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008a14:	2200      	movs	r2, #0
 8008a16:	68b9      	ldr	r1, [r7, #8]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fae9 	bl	8008ff0 <xQueueGenericCreate>
 8008a1e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00c      	beq.n	8008a40 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <osMessageQueueNew+0xf0>
        name = attr->name;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	61fb      	str	r3, [r7, #28]
 8008a32:	e001      	b.n	8008a38 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008a34:	2300      	movs	r3, #0
 8008a36:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008a38:	69f9      	ldr	r1, [r7, #28]
 8008a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a3c:	f001 fa06 	bl	8009e4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3728      	adds	r7, #40	; 0x28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20000848 	.word	0x20000848

08008a50 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	; 0x28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a68:	f3ef 8305 	mrs	r3, IPSR
 8008a6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008a6e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10f      	bne.n	8008a94 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a74:	f3ef 8310 	mrs	r3, PRIMASK
 8008a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d105      	bne.n	8008a8c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a80:	f3ef 8311 	mrs	r3, BASEPRI
 8008a84:	617b      	str	r3, [r7, #20]
  return(result);
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d02c      	beq.n	8008ae6 <osMessageQueuePut+0x96>
 8008a8c:	4b28      	ldr	r3, [pc, #160]	; (8008b30 <osMessageQueuePut+0xe0>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d128      	bne.n	8008ae6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a94:	6a3b      	ldr	r3, [r7, #32]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <osMessageQueuePut+0x56>
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <osMessageQueuePut+0x56>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008aa6:	f06f 0303 	mvn.w	r3, #3
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008aac:	e039      	b.n	8008b22 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008ab2:	f107 0210 	add.w	r2, r7, #16
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	6a38      	ldr	r0, [r7, #32]
 8008abc:	f000 fcc2 	bl	8009444 <xQueueGenericSendFromISR>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d003      	beq.n	8008ace <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008ac6:	f06f 0302 	mvn.w	r3, #2
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008acc:	e029      	b.n	8008b22 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d026      	beq.n	8008b22 <osMessageQueuePut+0xd2>
 8008ad4:	4b17      	ldr	r3, [pc, #92]	; (8008b34 <osMessageQueuePut+0xe4>)
 8008ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ae4:	e01d      	b.n	8008b22 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <osMessageQueuePut+0xa2>
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d103      	bne.n	8008afa <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008af2:	f06f 0303 	mvn.w	r3, #3
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
 8008af8:	e014      	b.n	8008b24 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008afa:	2300      	movs	r3, #0
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	68b9      	ldr	r1, [r7, #8]
 8008b00:	6a38      	ldr	r0, [r7, #32]
 8008b02:	f000 fb99 	bl	8009238 <xQueueGenericSend>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d00b      	beq.n	8008b24 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008b12:	f06f 0301 	mvn.w	r3, #1
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
 8008b18:	e004      	b.n	8008b24 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008b1a:	f06f 0302 	mvn.w	r3, #2
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b20:	e000      	b.n	8008b24 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b22:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3728      	adds	r7, #40	; 0x28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000848 	.word	0x20000848
 8008b34:	e000ed04 	.word	0xe000ed04

08008b38 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	; 0x28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
 8008b44:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b4e:	f3ef 8305 	mrs	r3, IPSR
 8008b52:	61fb      	str	r3, [r7, #28]
  return(result);
 8008b54:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10f      	bne.n	8008b7a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d105      	bne.n	8008b72 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b66:	f3ef 8311 	mrs	r3, BASEPRI
 8008b6a:	617b      	str	r3, [r7, #20]
  return(result);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d02c      	beq.n	8008bcc <osMessageQueueGet+0x94>
 8008b72:	4b28      	ldr	r3, [pc, #160]	; (8008c14 <osMessageQueueGet+0xdc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d128      	bne.n	8008bcc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <osMessageQueueGet+0x54>
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <osMessageQueueGet+0x54>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008b8c:	f06f 0303 	mvn.w	r3, #3
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b92:	e038      	b.n	8008c06 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008b98:	f107 0310 	add.w	r3, r7, #16
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	6a38      	ldr	r0, [r7, #32]
 8008ba2:	f000 ff7f 	bl	8009aa4 <xQueueReceiveFromISR>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d003      	beq.n	8008bb4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008bac:	f06f 0302 	mvn.w	r3, #2
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008bb2:	e028      	b.n	8008c06 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d025      	beq.n	8008c06 <osMessageQueueGet+0xce>
 8008bba:	4b17      	ldr	r3, [pc, #92]	; (8008c18 <osMessageQueueGet+0xe0>)
 8008bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008bca:	e01c      	b.n	8008c06 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <osMessageQueueGet+0xa0>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d103      	bne.n	8008be0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008bd8:	f06f 0303 	mvn.w	r3, #3
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bde:	e013      	b.n	8008c08 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	6a38      	ldr	r0, [r7, #32]
 8008be6:	f000 fd63 	bl	80096b0 <xQueueReceive>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d00b      	beq.n	8008c08 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008bf6:	f06f 0301 	mvn.w	r3, #1
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008bfc:	e004      	b.n	8008c08 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008bfe:	f06f 0302 	mvn.w	r3, #2
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
 8008c04:	e000      	b.n	8008c08 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c06:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3728      	adds	r7, #40	; 0x28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000848 	.word	0x20000848
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <osMessageQueueGetCapacity>:

uint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id) {
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	60bb      	str	r3, [r7, #8]
  uint32_t capacity;

  if (mq == NULL) {
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <osMessageQueueGetCapacity+0x18>
    capacity = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	e002      	b.n	8008c3a <osMessageQueueGetCapacity+0x1e>
  } else {
    /* capacity = pxQueue->uxLength */
    capacity = mq->uxDummy4[1];
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c38:	60fb      	str	r3, [r7, #12]
  }

  return (capacity);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4a07      	ldr	r2, [pc, #28]	; (8008c74 <vApplicationGetIdleTaskMemory+0x2c>)
 8008c58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	4a06      	ldr	r2, [pc, #24]	; (8008c78 <vApplicationGetIdleTaskMemory+0x30>)
 8008c5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2280      	movs	r2, #128	; 0x80
 8008c64:	601a      	str	r2, [r3, #0]
}
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	2000084c 	.word	0x2000084c
 8008c78:	200008a8 	.word	0x200008a8

08008c7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4a07      	ldr	r2, [pc, #28]	; (8008ca8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	4a06      	ldr	r2, [pc, #24]	; (8008cac <vApplicationGetTimerTaskMemory+0x30>)
 8008c92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c9a:	601a      	str	r2, [r3, #0]
}
 8008c9c:	bf00      	nop
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	20000aa8 	.word	0x20000aa8
 8008cac:	20000b04 	.word	0x20000b04

08008cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f103 0208 	add.w	r2, r3, #8
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f103 0208 	add.w	r2, r3, #8
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f103 0208 	add.w	r2, r3, #8
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b085      	sub	sp, #20
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	601a      	str	r2, [r3, #0]
}
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d68:	d103      	bne.n	8008d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	e00c      	b.n	8008d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	3308      	adds	r3, #8
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	e002      	b.n	8008d80 <vListInsert+0x2e>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d2f6      	bcs.n	8008d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
}
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	6892      	ldr	r2, [r2, #8]
 8008dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6852      	ldr	r2, [r2, #4]
 8008de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d103      	bne.n	8008df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	1e5a      	subs	r2, r3, #1
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10c      	bne.n	8008e46 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e30:	b672      	cpsid	i
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	b662      	cpsie	i
 8008e40:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008e42:	bf00      	nop
 8008e44:	e7fe      	b.n	8008e44 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008e46:	f002 fce1 	bl	800b80c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e52:	68f9      	ldr	r1, [r7, #12]
 8008e54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e56:	fb01 f303 	mul.w	r3, r1, r3
 8008e5a:	441a      	add	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e76:	3b01      	subs	r3, #1
 8008e78:	68f9      	ldr	r1, [r7, #12]
 8008e7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e7c:	fb01 f303 	mul.w	r3, r1, r3
 8008e80:	441a      	add	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	22ff      	movs	r2, #255	; 0xff
 8008e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	22ff      	movs	r2, #255	; 0xff
 8008e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d114      	bne.n	8008ec6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01a      	beq.n	8008eda <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3310      	adds	r3, #16
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f001 fc99 	bl	800a7e0 <xTaskRemoveFromEventList>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d012      	beq.n	8008eda <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <xQueueGenericReset+0xd0>)
 8008eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	e009      	b.n	8008eda <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3310      	adds	r3, #16
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff fef0 	bl	8008cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3324      	adds	r3, #36	; 0x24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff feeb 	bl	8008cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008eda:	f002 fccb 	bl	800b874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ede:	2301      	movs	r3, #1
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	e000ed04 	.word	0xe000ed04

08008eec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08e      	sub	sp, #56	; 0x38
 8008ef0:	af02      	add	r7, sp, #8
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10c      	bne.n	8008f1a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	b672      	cpsid	i
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	b662      	cpsie	i
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10c      	bne.n	8008f3a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	b672      	cpsid	i
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	b662      	cpsie	i
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f36:	bf00      	nop
 8008f38:	e7fe      	b.n	8008f38 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <xQueueGenericCreateStatic+0x5a>
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <xQueueGenericCreateStatic+0x5e>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <xQueueGenericCreateStatic+0x60>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10c      	bne.n	8008f6a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	b672      	cpsid	i
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	b662      	cpsie	i
 8008f64:	623b      	str	r3, [r7, #32]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <xQueueGenericCreateStatic+0x8a>
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <xQueueGenericCreateStatic+0x8e>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e000      	b.n	8008f7c <xQueueGenericCreateStatic+0x90>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10c      	bne.n	8008f9a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	b672      	cpsid	i
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	b662      	cpsie	i
 8008f94:	61fb      	str	r3, [r7, #28]
}
 8008f96:	bf00      	nop
 8008f98:	e7fe      	b.n	8008f98 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f9a:	2350      	movs	r3, #80	; 0x50
 8008f9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b50      	cmp	r3, #80	; 0x50
 8008fa2:	d00c      	beq.n	8008fbe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	b672      	cpsid	i
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	b662      	cpsie	i
 8008fb8:	61bb      	str	r3, [r7, #24]
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008fbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00d      	beq.n	8008fe6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 f847 	bl	8009074 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3730      	adds	r7, #48	; 0x30
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08a      	sub	sp, #40	; 0x28
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10c      	bne.n	800901e <xQueueGenericCreate+0x2e>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	b672      	cpsid	i
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	b662      	cpsie	i
 8009018:	613b      	str	r3, [r7, #16]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009024:	2300      	movs	r3, #0
 8009026:	61fb      	str	r3, [r7, #28]
 8009028:	e004      	b.n	8009034 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	fb02 f303 	mul.w	r3, r2, r3
 8009032:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	3350      	adds	r3, #80	; 0x50
 8009038:	4618      	mov	r0, r3
 800903a:	f002 fd13 	bl	800ba64 <pvPortMalloc>
 800903e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d011      	beq.n	800906a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	3350      	adds	r3, #80	; 0x50
 800904e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009058:	79fa      	ldrb	r2, [r7, #7]
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	4613      	mov	r3, r2
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	68b9      	ldr	r1, [r7, #8]
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f805 	bl	8009074 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800906a:	69bb      	ldr	r3, [r7, #24]
	}
 800906c:	4618      	mov	r0, r3
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d103      	bne.n	8009090 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	e002      	b.n	8009096 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80090a2:	2101      	movs	r1, #1
 80090a4:	69b8      	ldr	r0, [r7, #24]
 80090a6:	f7ff feb7 	bl	8008e18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	78fa      	ldrb	r2, [r7, #3]
 80090ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00e      	beq.n	80090e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80090da:	2300      	movs	r3, #0
 80090dc:	2200      	movs	r2, #0
 80090de:	2100      	movs	r1, #0
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f8a9 	bl	8009238 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b086      	sub	sp, #24
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	4603      	mov	r3, r0
 80090f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80090f8:	2301      	movs	r3, #1
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	2300      	movs	r3, #0
 80090fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	461a      	mov	r2, r3
 8009104:	6939      	ldr	r1, [r7, #16]
 8009106:	6978      	ldr	r0, [r7, #20]
 8009108:	f7ff ff72 	bl	8008ff0 <xQueueGenericCreate>
 800910c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7ff ffd3 	bl	80090ba <prvInitialiseMutex>

		return xNewQueue;
 8009114:	68fb      	ldr	r3, [r7, #12]
	}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800911e:	b580      	push	{r7, lr}
 8009120:	b088      	sub	sp, #32
 8009122:	af02      	add	r7, sp, #8
 8009124:	4603      	mov	r3, r0
 8009126:	6039      	str	r1, [r7, #0]
 8009128:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800912a:	2301      	movs	r3, #1
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	2300      	movs	r3, #0
 8009130:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2200      	movs	r2, #0
 800913a:	6939      	ldr	r1, [r7, #16]
 800913c:	6978      	ldr	r0, [r7, #20]
 800913e:	f7ff fed5 	bl	8008eec <xQueueGenericCreateStatic>
 8009142:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff ffb8 	bl	80090ba <prvInitialiseMutex>

		return xNewQueue;
 800914a:	68fb      	ldr	r3, [r7, #12]
	}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009154:	b580      	push	{r7, lr}
 8009156:	b08a      	sub	sp, #40	; 0x28
 8009158:	af02      	add	r7, sp, #8
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10c      	bne.n	8009180 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	b672      	cpsid	i
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	b662      	cpsie	i
 800917a:	61bb      	str	r3, [r7, #24]
}
 800917c:	bf00      	nop
 800917e:	e7fe      	b.n	800917e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	429a      	cmp	r2, r3
 8009186:	d90c      	bls.n	80091a2 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	b672      	cpsid	i
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	b662      	cpsie	i
 800919c:	617b      	str	r3, [r7, #20]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80091a2:	2302      	movs	r3, #2
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	2100      	movs	r1, #0
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f7ff fe9d 	bl	8008eec <xQueueGenericCreateStatic>
 80091b2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80091c0:	69fb      	ldr	r3, [r7, #28]
	}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3720      	adds	r7, #32
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10c      	bne.n	80091f4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	b672      	cpsid	i
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	b662      	cpsie	i
 80091ee:	613b      	str	r3, [r7, #16]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d90c      	bls.n	8009216 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	b672      	cpsid	i
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	b662      	cpsie	i
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009216:	2202      	movs	r2, #2
 8009218:	2100      	movs	r1, #0
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff fee8 	bl	8008ff0 <xQueueGenericCreate>
 8009220:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d002      	beq.n	800922e <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800922e:	697b      	ldr	r3, [r7, #20]
	}
 8009230:	4618      	mov	r0, r3
 8009232:	3718      	adds	r7, #24
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08e      	sub	sp, #56	; 0x38
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009246:	2300      	movs	r3, #0
 8009248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10c      	bne.n	800926e <xQueueGenericSend+0x36>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	b672      	cpsid	i
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	b662      	cpsie	i
 8009268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <xQueueGenericSend+0x44>
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <xQueueGenericSend+0x48>
 800927c:	2301      	movs	r3, #1
 800927e:	e000      	b.n	8009282 <xQueueGenericSend+0x4a>
 8009280:	2300      	movs	r3, #0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10c      	bne.n	80092a0 <xQueueGenericSend+0x68>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	b672      	cpsid	i
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	b662      	cpsie	i
 800929a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800929c:	bf00      	nop
 800929e:	e7fe      	b.n	800929e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d103      	bne.n	80092ae <xQueueGenericSend+0x76>
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <xQueueGenericSend+0x7a>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <xQueueGenericSend+0x7c>
 80092b2:	2300      	movs	r3, #0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10c      	bne.n	80092d2 <xQueueGenericSend+0x9a>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	b672      	cpsid	i
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	b662      	cpsie	i
 80092cc:	623b      	str	r3, [r7, #32]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092d2:	f001 fc4b 	bl	800ab6c <xTaskGetSchedulerState>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <xQueueGenericSend+0xaa>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <xQueueGenericSend+0xae>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e000      	b.n	80092e8 <xQueueGenericSend+0xb0>
 80092e6:	2300      	movs	r3, #0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10c      	bne.n	8009306 <xQueueGenericSend+0xce>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	b672      	cpsid	i
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	b662      	cpsie	i
 8009300:	61fb      	str	r3, [r7, #28]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009306:	f002 fa81 	bl	800b80c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009312:	429a      	cmp	r2, r3
 8009314:	d302      	bcc.n	800931c <xQueueGenericSend+0xe4>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d129      	bne.n	8009370 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009322:	f000 fc82 	bl	8009c2a <prvCopyDataToQueue>
 8009326:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	2b00      	cmp	r3, #0
 800932e:	d010      	beq.n	8009352 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	3324      	adds	r3, #36	; 0x24
 8009334:	4618      	mov	r0, r3
 8009336:	f001 fa53 	bl	800a7e0 <xTaskRemoveFromEventList>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d013      	beq.n	8009368 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009340:	4b3f      	ldr	r3, [pc, #252]	; (8009440 <xQueueGenericSend+0x208>)
 8009342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	e00a      	b.n	8009368 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d007      	beq.n	8009368 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009358:	4b39      	ldr	r3, [pc, #228]	; (8009440 <xQueueGenericSend+0x208>)
 800935a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009368:	f002 fa84 	bl	800b874 <vPortExitCritical>
				return pdPASS;
 800936c:	2301      	movs	r3, #1
 800936e:	e063      	b.n	8009438 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d103      	bne.n	800937e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009376:	f002 fa7d 	bl	800b874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800937a:	2300      	movs	r3, #0
 800937c:	e05c      	b.n	8009438 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009380:	2b00      	cmp	r3, #0
 8009382:	d106      	bne.n	8009392 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009384:	f107 0314 	add.w	r3, r7, #20
 8009388:	4618      	mov	r0, r3
 800938a:	f001 fa8f 	bl	800a8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800938e:	2301      	movs	r3, #1
 8009390:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009392:	f002 fa6f 	bl	800b874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009396:	f000 fff5 	bl	800a384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800939a:	f002 fa37 	bl	800b80c <vPortEnterCritical>
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093a4:	b25b      	sxtb	r3, r3
 80093a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093aa:	d103      	bne.n	80093b4 <xQueueGenericSend+0x17c>
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ba:	b25b      	sxtb	r3, r3
 80093bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c0:	d103      	bne.n	80093ca <xQueueGenericSend+0x192>
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093ca:	f002 fa53 	bl	800b874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093ce:	1d3a      	adds	r2, r7, #4
 80093d0:	f107 0314 	add.w	r3, r7, #20
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f001 fa7e 	bl	800a8d8 <xTaskCheckForTimeOut>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d124      	bne.n	800942c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093e4:	f000 fd19 	bl	8009e1a <prvIsQueueFull>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d018      	beq.n	8009420 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	3310      	adds	r3, #16
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	4611      	mov	r1, r2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f001 f99e 	bl	800a738 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093fe:	f000 fca4 	bl	8009d4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009402:	f000 ffcd 	bl	800a3a0 <xTaskResumeAll>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	f47f af7c 	bne.w	8009306 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800940e:	4b0c      	ldr	r3, [pc, #48]	; (8009440 <xQueueGenericSend+0x208>)
 8009410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	e772      	b.n	8009306 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009422:	f000 fc92 	bl	8009d4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009426:	f000 ffbb 	bl	800a3a0 <xTaskResumeAll>
 800942a:	e76c      	b.n	8009306 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800942c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800942e:	f000 fc8c 	bl	8009d4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009432:	f000 ffb5 	bl	800a3a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009436:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009438:	4618      	mov	r0, r3
 800943a:	3738      	adds	r7, #56	; 0x38
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08e      	sub	sp, #56	; 0x38
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10c      	bne.n	8009476 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800945c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009460:	b672      	cpsid	i
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	b662      	cpsie	i
 8009470:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009472:	bf00      	nop
 8009474:	e7fe      	b.n	8009474 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d103      	bne.n	8009484 <xQueueGenericSendFromISR+0x40>
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <xQueueGenericSendFromISR+0x44>
 8009484:	2301      	movs	r3, #1
 8009486:	e000      	b.n	800948a <xQueueGenericSendFromISR+0x46>
 8009488:	2300      	movs	r3, #0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10c      	bne.n	80094a8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	b672      	cpsid	i
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	b662      	cpsie	i
 80094a2:	623b      	str	r3, [r7, #32]
}
 80094a4:	bf00      	nop
 80094a6:	e7fe      	b.n	80094a6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d103      	bne.n	80094b6 <xQueueGenericSendFromISR+0x72>
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d101      	bne.n	80094ba <xQueueGenericSendFromISR+0x76>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e000      	b.n	80094bc <xQueueGenericSendFromISR+0x78>
 80094ba:	2300      	movs	r3, #0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10c      	bne.n	80094da <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	b672      	cpsid	i
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	b662      	cpsie	i
 80094d4:	61fb      	str	r3, [r7, #28]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094da:	f002 fa7f 	bl	800b9dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094de:	f3ef 8211 	mrs	r2, BASEPRI
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	b672      	cpsid	i
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	b662      	cpsie	i
 80094f6:	61ba      	str	r2, [r7, #24]
 80094f8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094fa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009506:	429a      	cmp	r2, r3
 8009508:	d302      	bcc.n	8009510 <xQueueGenericSendFromISR+0xcc>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d12c      	bne.n	800956a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	68b9      	ldr	r1, [r7, #8]
 800951e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009520:	f000 fb83 	bl	8009c2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009524:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952c:	d112      	bne.n	8009554 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	2b00      	cmp	r3, #0
 8009534:	d016      	beq.n	8009564 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009538:	3324      	adds	r3, #36	; 0x24
 800953a:	4618      	mov	r0, r3
 800953c:	f001 f950 	bl	800a7e0 <xTaskRemoveFromEventList>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00e      	beq.n	8009564 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00b      	beq.n	8009564 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	e007      	b.n	8009564 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009554:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009558:	3301      	adds	r3, #1
 800955a:	b2db      	uxtb	r3, r3
 800955c:	b25a      	sxtb	r2, r3
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009564:	2301      	movs	r3, #1
 8009566:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009568:	e001      	b.n	800956e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800956a:	2300      	movs	r3, #0
 800956c:	637b      	str	r3, [r7, #52]	; 0x34
 800956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009570:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009578:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800957a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800957c:	4618      	mov	r0, r3
 800957e:	3738      	adds	r7, #56	; 0x38
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08e      	sub	sp, #56	; 0x38
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10c      	bne.n	80095b2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	b672      	cpsid	i
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	b662      	cpsie	i
 80095ac:	623b      	str	r3, [r7, #32]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00c      	beq.n	80095d4 <xQueueGiveFromISR+0x50>
	__asm volatile
 80095ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095be:	b672      	cpsid	i
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	b662      	cpsie	i
 80095ce:	61fb      	str	r3, [r7, #28]
}
 80095d0:	bf00      	nop
 80095d2:	e7fe      	b.n	80095d2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d103      	bne.n	80095e4 <xQueueGiveFromISR+0x60>
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <xQueueGiveFromISR+0x64>
 80095e4:	2301      	movs	r3, #1
 80095e6:	e000      	b.n	80095ea <xQueueGiveFromISR+0x66>
 80095e8:	2300      	movs	r3, #0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10c      	bne.n	8009608 <xQueueGiveFromISR+0x84>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	b672      	cpsid	i
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	b662      	cpsie	i
 8009602:	61bb      	str	r3, [r7, #24]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009608:	f002 f9e8 	bl	800b9dc <vPortValidateInterruptPriority>
	__asm volatile
 800960c:	f3ef 8211 	mrs	r2, BASEPRI
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	b672      	cpsid	i
 8009616:	f383 8811 	msr	BASEPRI, r3
 800961a:	f3bf 8f6f 	isb	sy
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	b662      	cpsie	i
 8009624:	617a      	str	r2, [r7, #20]
 8009626:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009628:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800962a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009638:	429a      	cmp	r2, r3
 800963a:	d22b      	bcs.n	8009694 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800964e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009656:	d112      	bne.n	800967e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	2b00      	cmp	r3, #0
 800965e:	d016      	beq.n	800968e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009662:	3324      	adds	r3, #36	; 0x24
 8009664:	4618      	mov	r0, r3
 8009666:	f001 f8bb 	bl	800a7e0 <xTaskRemoveFromEventList>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00e      	beq.n	800968e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00b      	beq.n	800968e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2201      	movs	r2, #1
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	e007      	b.n	800968e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800967e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009682:	3301      	adds	r3, #1
 8009684:	b2db      	uxtb	r3, r3
 8009686:	b25a      	sxtb	r2, r3
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800968e:	2301      	movs	r3, #1
 8009690:	637b      	str	r3, [r7, #52]	; 0x34
 8009692:	e001      	b.n	8009698 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009694:	2300      	movs	r3, #0
 8009696:	637b      	str	r3, [r7, #52]	; 0x34
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f383 8811 	msr	BASEPRI, r3
}
 80096a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3738      	adds	r7, #56	; 0x38
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
	...

080096b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08c      	sub	sp, #48	; 0x30
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096bc:	2300      	movs	r3, #0
 80096be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10c      	bne.n	80096e4 <xQueueReceive+0x34>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	b672      	cpsid	i
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	b662      	cpsie	i
 80096de:	623b      	str	r3, [r7, #32]
}
 80096e0:	bf00      	nop
 80096e2:	e7fe      	b.n	80096e2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d103      	bne.n	80096f2 <xQueueReceive+0x42>
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <xQueueReceive+0x46>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <xQueueReceive+0x48>
 80096f6:	2300      	movs	r3, #0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10c      	bne.n	8009716 <xQueueReceive+0x66>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	b672      	cpsid	i
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	b662      	cpsie	i
 8009710:	61fb      	str	r3, [r7, #28]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009716:	f001 fa29 	bl	800ab6c <xTaskGetSchedulerState>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d102      	bne.n	8009726 <xQueueReceive+0x76>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <xQueueReceive+0x7a>
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <xQueueReceive+0x7c>
 800972a:	2300      	movs	r3, #0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10c      	bne.n	800974a <xQueueReceive+0x9a>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	b672      	cpsid	i
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	b662      	cpsie	i
 8009744:	61bb      	str	r3, [r7, #24]
}
 8009746:	bf00      	nop
 8009748:	e7fe      	b.n	8009748 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800974a:	f002 f85f 	bl	800b80c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d01f      	beq.n	800979a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800975a:	68b9      	ldr	r1, [r7, #8]
 800975c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975e:	f000 face 	bl	8009cfe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	1e5a      	subs	r2, r3, #1
 8009766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009768:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00f      	beq.n	8009792 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	3310      	adds	r3, #16
 8009776:	4618      	mov	r0, r3
 8009778:	f001 f832 	bl	800a7e0 <xTaskRemoveFromEventList>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d007      	beq.n	8009792 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009782:	4b3d      	ldr	r3, [pc, #244]	; (8009878 <xQueueReceive+0x1c8>)
 8009784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009792:	f002 f86f 	bl	800b874 <vPortExitCritical>
				return pdPASS;
 8009796:	2301      	movs	r3, #1
 8009798:	e069      	b.n	800986e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d103      	bne.n	80097a8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097a0:	f002 f868 	bl	800b874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e062      	b.n	800986e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d106      	bne.n	80097bc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097ae:	f107 0310 	add.w	r3, r7, #16
 80097b2:	4618      	mov	r0, r3
 80097b4:	f001 f87a 	bl	800a8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097bc:	f002 f85a 	bl	800b874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097c0:	f000 fde0 	bl	800a384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097c4:	f002 f822 	bl	800b80c <vPortEnterCritical>
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097ce:	b25b      	sxtb	r3, r3
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d103      	bne.n	80097de <xQueueReceive+0x12e>
 80097d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097e4:	b25b      	sxtb	r3, r3
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d103      	bne.n	80097f4 <xQueueReceive+0x144>
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097f4:	f002 f83e 	bl	800b874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097f8:	1d3a      	adds	r2, r7, #4
 80097fa:	f107 0310 	add.w	r3, r7, #16
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f001 f869 	bl	800a8d8 <xTaskCheckForTimeOut>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d123      	bne.n	8009854 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800980c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800980e:	f000 faee 	bl	8009dee <prvIsQueueEmpty>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d017      	beq.n	8009848 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	3324      	adds	r3, #36	; 0x24
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f000 ff89 	bl	800a738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009828:	f000 fa8f 	bl	8009d4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800982c:	f000 fdb8 	bl	800a3a0 <xTaskResumeAll>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d189      	bne.n	800974a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009836:	4b10      	ldr	r3, [pc, #64]	; (8009878 <xQueueReceive+0x1c8>)
 8009838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	e780      	b.n	800974a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984a:	f000 fa7e 	bl	8009d4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800984e:	f000 fda7 	bl	800a3a0 <xTaskResumeAll>
 8009852:	e77a      	b.n	800974a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009856:	f000 fa78 	bl	8009d4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800985a:	f000 fda1 	bl	800a3a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800985e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009860:	f000 fac5 	bl	8009dee <prvIsQueueEmpty>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	f43f af6f 	beq.w	800974a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800986c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800986e:	4618      	mov	r0, r3
 8009870:	3730      	adds	r7, #48	; 0x30
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	e000ed04 	.word	0xe000ed04

0800987c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08e      	sub	sp, #56	; 0x38
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800988e:	2300      	movs	r3, #0
 8009890:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10c      	bne.n	80098b2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	b672      	cpsid	i
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	b662      	cpsie	i
 80098ac:	623b      	str	r3, [r7, #32]
}
 80098ae:	bf00      	nop
 80098b0:	e7fe      	b.n	80098b0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00c      	beq.n	80098d4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	b672      	cpsid	i
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	b662      	cpsie	i
 80098ce:	61fb      	str	r3, [r7, #28]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098d4:	f001 f94a 	bl	800ab6c <xTaskGetSchedulerState>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d102      	bne.n	80098e4 <xQueueSemaphoreTake+0x68>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <xQueueSemaphoreTake+0x6c>
 80098e4:	2301      	movs	r3, #1
 80098e6:	e000      	b.n	80098ea <xQueueSemaphoreTake+0x6e>
 80098e8:	2300      	movs	r3, #0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10c      	bne.n	8009908 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	b672      	cpsid	i
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	b662      	cpsie	i
 8009902:	61bb      	str	r3, [r7, #24]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009908:	f001 ff80 	bl	800b80c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009910:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	2b00      	cmp	r3, #0
 8009916:	d024      	beq.n	8009962 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	1e5a      	subs	r2, r3, #1
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d104      	bne.n	8009932 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009928:	f001 fa9e 	bl	800ae68 <pvTaskIncrementMutexHeldCount>
 800992c:	4602      	mov	r2, r0
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00f      	beq.n	800995a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	3310      	adds	r3, #16
 800993e:	4618      	mov	r0, r3
 8009940:	f000 ff4e 	bl	800a7e0 <xTaskRemoveFromEventList>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d007      	beq.n	800995a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800994a:	4b55      	ldr	r3, [pc, #340]	; (8009aa0 <xQueueSemaphoreTake+0x224>)
 800994c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800995a:	f001 ff8b 	bl	800b874 <vPortExitCritical>
				return pdPASS;
 800995e:	2301      	movs	r3, #1
 8009960:	e099      	b.n	8009a96 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d113      	bne.n	8009990 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00c      	beq.n	8009988 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	b672      	cpsid	i
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	b662      	cpsie	i
 8009982:	617b      	str	r3, [r7, #20]
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009988:	f001 ff74 	bl	800b874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800998c:	2300      	movs	r3, #0
 800998e:	e082      	b.n	8009a96 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009992:	2b00      	cmp	r3, #0
 8009994:	d106      	bne.n	80099a4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009996:	f107 030c 	add.w	r3, r7, #12
 800999a:	4618      	mov	r0, r3
 800999c:	f000 ff86 	bl	800a8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099a0:	2301      	movs	r3, #1
 80099a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099a4:	f001 ff66 	bl	800b874 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099a8:	f000 fcec 	bl	800a384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099ac:	f001 ff2e 	bl	800b80c <vPortEnterCritical>
 80099b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b6:	b25b      	sxtb	r3, r3
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099bc:	d103      	bne.n	80099c6 <xQueueSemaphoreTake+0x14a>
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099cc:	b25b      	sxtb	r3, r3
 80099ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d2:	d103      	bne.n	80099dc <xQueueSemaphoreTake+0x160>
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099dc:	f001 ff4a 	bl	800b874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099e0:	463a      	mov	r2, r7
 80099e2:	f107 030c 	add.w	r3, r7, #12
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 ff75 	bl	800a8d8 <xTaskCheckForTimeOut>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d132      	bne.n	8009a5a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099f6:	f000 f9fa 	bl	8009dee <prvIsQueueEmpty>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d026      	beq.n	8009a4e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d109      	bne.n	8009a1c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009a08:	f001 ff00 	bl	800b80c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 f8c9 	bl	800aba8 <xTaskPriorityInherit>
 8009a16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009a18:	f001 ff2c 	bl	800b874 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	3324      	adds	r3, #36	; 0x24
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fe87 	bl	800a738 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a2c:	f000 f98d 	bl	8009d4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a30:	f000 fcb6 	bl	800a3a0 <xTaskResumeAll>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f47f af66 	bne.w	8009908 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009a3c:	4b18      	ldr	r3, [pc, #96]	; (8009aa0 <xQueueSemaphoreTake+0x224>)
 8009a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	e75c      	b.n	8009908 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a50:	f000 f97b 	bl	8009d4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a54:	f000 fca4 	bl	800a3a0 <xTaskResumeAll>
 8009a58:	e756      	b.n	8009908 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a5c:	f000 f975 	bl	8009d4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a60:	f000 fc9e 	bl	800a3a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a66:	f000 f9c2 	bl	8009dee <prvIsQueueEmpty>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f43f af4b 	beq.w	8009908 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00d      	beq.n	8009a94 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009a78:	f001 fec8 	bl	800b80c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a7e:	f000 f8bc 	bl	8009bfa <prvGetDisinheritPriorityAfterTimeout>
 8009a82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f001 f966 	bl	800ad5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a90:	f001 fef0 	bl	800b874 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3738      	adds	r7, #56	; 0x38
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	e000ed04 	.word	0xe000ed04

08009aa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08e      	sub	sp, #56	; 0x38
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10c      	bne.n	8009ad4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	b672      	cpsid	i
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	b662      	cpsie	i
 8009ace:	623b      	str	r3, [r7, #32]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d103      	bne.n	8009ae2 <xQueueReceiveFromISR+0x3e>
 8009ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <xQueueReceiveFromISR+0x42>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e000      	b.n	8009ae8 <xQueueReceiveFromISR+0x44>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10c      	bne.n	8009b06 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	b672      	cpsid	i
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	b662      	cpsie	i
 8009b00:	61fb      	str	r3, [r7, #28]
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b06:	f001 ff69 	bl	800b9dc <vPortValidateInterruptPriority>
	__asm volatile
 8009b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	b672      	cpsid	i
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	b662      	cpsie	i
 8009b22:	61ba      	str	r2, [r7, #24]
 8009b24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d02f      	beq.n	8009b96 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b44:	f000 f8db 	bl	8009cfe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4a:	1e5a      	subs	r2, r3, #1
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b58:	d112      	bne.n	8009b80 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d016      	beq.n	8009b90 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	3310      	adds	r3, #16
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fe3a 	bl	800a7e0 <xTaskRemoveFromEventList>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00e      	beq.n	8009b90 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00b      	beq.n	8009b90 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	e007      	b.n	8009b90 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b84:	3301      	adds	r3, #1
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	b25a      	sxtb	r2, r3
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009b90:	2301      	movs	r3, #1
 8009b92:	637b      	str	r3, [r7, #52]	; 0x34
 8009b94:	e001      	b.n	8009b9a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	637b      	str	r3, [r7, #52]	; 0x34
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	f383 8811 	msr	BASEPRI, r3
}
 8009ba4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3738      	adds	r7, #56	; 0x38
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10c      	bne.n	8009bdc <vQueueDelete+0x2c>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	b672      	cpsid	i
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	b662      	cpsie	i
 8009bd6:	60bb      	str	r3, [r7, #8]
}
 8009bd8:	bf00      	nop
 8009bda:	e7fe      	b.n	8009bda <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f95f 	bl	8009ea0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d102      	bne.n	8009bf2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f002 f803 	bl	800bbf8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009bf2:	bf00      	nop
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b085      	sub	sp, #20
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d006      	beq.n	8009c18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	e001      	b.n	8009c1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
	}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b086      	sub	sp, #24
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c36:	2300      	movs	r3, #0
 8009c38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10d      	bne.n	8009c64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d14d      	bne.n	8009cec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 f80f 	bl	800ac78 <xTaskPriorityDisinherit>
 8009c5a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	609a      	str	r2, [r3, #8]
 8009c62:	e043      	b.n	8009cec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d119      	bne.n	8009c9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6858      	ldr	r0, [r3, #4]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c72:	461a      	mov	r2, r3
 8009c74:	68b9      	ldr	r1, [r7, #8]
 8009c76:	f002 f903 	bl	800be80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	685a      	ldr	r2, [r3, #4]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c82:	441a      	add	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d32b      	bcc.n	8009cec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	605a      	str	r2, [r3, #4]
 8009c9c:	e026      	b.n	8009cec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	68d8      	ldr	r0, [r3, #12]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	68b9      	ldr	r1, [r7, #8]
 8009caa:	f002 f8e9 	bl	800be80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	68da      	ldr	r2, [r3, #12]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb6:	425b      	negs	r3, r3
 8009cb8:	441a      	add	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d207      	bcs.n	8009cda <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	425b      	negs	r3, r3
 8009cd4:	441a      	add	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d105      	bne.n	8009cec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009cf4:	697b      	ldr	r3, [r7, #20]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d018      	beq.n	8009d42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	441a      	add	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68da      	ldr	r2, [r3, #12]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d303      	bcc.n	8009d32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68d9      	ldr	r1, [r3, #12]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	6838      	ldr	r0, [r7, #0]
 8009d3e:	f002 f89f 	bl	800be80 <memcpy>
	}
}
 8009d42:	bf00      	nop
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d52:	f001 fd5b 	bl	800b80c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d5e:	e011      	b.n	8009d84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d012      	beq.n	8009d8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3324      	adds	r3, #36	; 0x24
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fd37 	bl	800a7e0 <xTaskRemoveFromEventList>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d78:	f000 fe14 	bl	800a9a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	dce9      	bgt.n	8009d60 <prvUnlockQueue+0x16>
 8009d8c:	e000      	b.n	8009d90 <prvUnlockQueue+0x46>
					break;
 8009d8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	22ff      	movs	r2, #255	; 0xff
 8009d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d98:	f001 fd6c 	bl	800b874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d9c:	f001 fd36 	bl	800b80c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009da6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009da8:	e011      	b.n	8009dce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d012      	beq.n	8009dd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3310      	adds	r3, #16
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fd12 	bl	800a7e0 <xTaskRemoveFromEventList>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009dc2:	f000 fdef 	bl	800a9a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	dce9      	bgt.n	8009daa <prvUnlockQueue+0x60>
 8009dd6:	e000      	b.n	8009dda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009dd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	22ff      	movs	r2, #255	; 0xff
 8009dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009de2:	f001 fd47 	bl	800b874 <vPortExitCritical>
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009df6:	f001 fd09 	bl	800b80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e02:	2301      	movs	r3, #1
 8009e04:	60fb      	str	r3, [r7, #12]
 8009e06:	e001      	b.n	8009e0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e0c:	f001 fd32 	bl	800b874 <vPortExitCritical>

	return xReturn;
 8009e10:	68fb      	ldr	r3, [r7, #12]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e22:	f001 fcf3 	bl	800b80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d102      	bne.n	8009e38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e32:	2301      	movs	r3, #1
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	e001      	b.n	8009e3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e3c:	f001 fd1a 	bl	800b874 <vPortExitCritical>

	return xReturn;
 8009e40:	68fb      	ldr	r3, [r7, #12]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	e014      	b.n	8009e86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e5c:	4a0f      	ldr	r2, [pc, #60]	; (8009e9c <vQueueAddToRegistry+0x50>)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10b      	bne.n	8009e80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e68:	490c      	ldr	r1, [pc, #48]	; (8009e9c <vQueueAddToRegistry+0x50>)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e72:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <vQueueAddToRegistry+0x50>)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	00db      	lsls	r3, r3, #3
 8009e78:	4413      	add	r3, r2
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e7e:	e006      	b.n	8009e8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	3301      	adds	r3, #1
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2b07      	cmp	r3, #7
 8009e8a:	d9e7      	bls.n	8009e5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	20000f04 	.word	0x20000f04

08009ea0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	e016      	b.n	8009edc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009eae:	4a10      	ldr	r2, [pc, #64]	; (8009ef0 <vQueueUnregisterQueue+0x50>)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	4413      	add	r3, r2
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d10b      	bne.n	8009ed6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009ebe:	4a0c      	ldr	r2, [pc, #48]	; (8009ef0 <vQueueUnregisterQueue+0x50>)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009ec8:	4a09      	ldr	r2, [pc, #36]	; (8009ef0 <vQueueUnregisterQueue+0x50>)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	4413      	add	r3, r2
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	605a      	str	r2, [r3, #4]
				break;
 8009ed4:	e006      	b.n	8009ee4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b07      	cmp	r3, #7
 8009ee0:	d9e5      	bls.n	8009eae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009ee2:	bf00      	nop
 8009ee4:	bf00      	nop
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	20000f04 	.word	0x20000f04

08009ef4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f04:	f001 fc82 	bl	800b80c <vPortEnterCritical>
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f0e:	b25b      	sxtb	r3, r3
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f14:	d103      	bne.n	8009f1e <vQueueWaitForMessageRestricted+0x2a>
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f24:	b25b      	sxtb	r3, r3
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2a:	d103      	bne.n	8009f34 <vQueueWaitForMessageRestricted+0x40>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f34:	f001 fc9e 	bl	800b874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	3324      	adds	r3, #36	; 0x24
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	68b9      	ldr	r1, [r7, #8]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 fc1b 	bl	800a784 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f4e:	6978      	ldr	r0, [r7, #20]
 8009f50:	f7ff fefb 	bl	8009d4a <prvUnlockQueue>
	}
 8009f54:	bf00      	nop
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08e      	sub	sp, #56	; 0x38
 8009f60:	af04      	add	r7, sp, #16
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10c      	bne.n	8009f8a <xTaskCreateStatic+0x2e>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	b672      	cpsid	i
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	b662      	cpsie	i
 8009f84:	623b      	str	r3, [r7, #32]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10c      	bne.n	8009faa <xTaskCreateStatic+0x4e>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	b672      	cpsid	i
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	b662      	cpsie	i
 8009fa4:	61fb      	str	r3, [r7, #28]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009faa:	235c      	movs	r3, #92	; 0x5c
 8009fac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b5c      	cmp	r3, #92	; 0x5c
 8009fb2:	d00c      	beq.n	8009fce <xTaskCreateStatic+0x72>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	b672      	cpsid	i
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	b662      	cpsie	i
 8009fc8:	61bb      	str	r3, [r7, #24]
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009fce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d01e      	beq.n	800a014 <xTaskCreateStatic+0xb8>
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01b      	beq.n	800a014 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fe4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe8:	2202      	movs	r2, #2
 8009fea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009fee:	2300      	movs	r3, #0
 8009ff0:	9303      	str	r3, [sp, #12]
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	9302      	str	r3, [sp, #8]
 8009ff6:	f107 0314 	add.w	r3, r7, #20
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 f850 	bl	800a0ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a00e:	f000 f8df 	bl	800a1d0 <prvAddNewTaskToReadyList>
 800a012:	e001      	b.n	800a018 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a018:	697b      	ldr	r3, [r7, #20]
	}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3728      	adds	r7, #40	; 0x28
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a022:	b580      	push	{r7, lr}
 800a024:	b08c      	sub	sp, #48	; 0x30
 800a026:	af04      	add	r7, sp, #16
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	603b      	str	r3, [r7, #0]
 800a02e:	4613      	mov	r3, r2
 800a030:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a032:	88fb      	ldrh	r3, [r7, #6]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4618      	mov	r0, r3
 800a038:	f001 fd14 	bl	800ba64 <pvPortMalloc>
 800a03c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00e      	beq.n	800a062 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a044:	205c      	movs	r0, #92	; 0x5c
 800a046:	f001 fd0d 	bl	800ba64 <pvPortMalloc>
 800a04a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d003      	beq.n	800a05a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	631a      	str	r2, [r3, #48]	; 0x30
 800a058:	e005      	b.n	800a066 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a05a:	6978      	ldr	r0, [r7, #20]
 800a05c:	f001 fdcc 	bl	800bbf8 <vPortFree>
 800a060:	e001      	b.n	800a066 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d017      	beq.n	800a09c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a074:	88fa      	ldrh	r2, [r7, #6]
 800a076:	2300      	movs	r3, #0
 800a078:	9303      	str	r3, [sp, #12]
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	9302      	str	r3, [sp, #8]
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	68b9      	ldr	r1, [r7, #8]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f80e 	bl	800a0ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a090:	69f8      	ldr	r0, [r7, #28]
 800a092:	f000 f89d 	bl	800a1d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a096:	2301      	movs	r3, #1
 800a098:	61bb      	str	r3, [r7, #24]
 800a09a:	e002      	b.n	800a0a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a09c:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0a2:	69bb      	ldr	r3, [r7, #24]
	}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b088      	sub	sp, #32
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	21a5      	movs	r1, #165	; 0xa5
 800a0c6:	f001 fee9 	bl	800be9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a0d4:	440b      	add	r3, r1
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	f023 0307 	bic.w	r3, r3, #7
 800a0e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00c      	beq.n	800a108 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	b672      	cpsid	i
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	b662      	cpsie	i
 800a102:	617b      	str	r3, [r7, #20]
}
 800a104:	bf00      	nop
 800a106:	e7fe      	b.n	800a106 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d01f      	beq.n	800a14e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	e012      	b.n	800a13a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	4413      	add	r3, r2
 800a11a:	7819      	ldrb	r1, [r3, #0]
 800a11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	4413      	add	r3, r2
 800a122:	3334      	adds	r3, #52	; 0x34
 800a124:	460a      	mov	r2, r1
 800a126:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	4413      	add	r3, r2
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d006      	beq.n	800a142 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	3301      	adds	r3, #1
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	2b0f      	cmp	r3, #15
 800a13e:	d9e9      	bls.n	800a114 <prvInitialiseNewTask+0x68>
 800a140:	e000      	b.n	800a144 <prvInitialiseNewTask+0x98>
			{
				break;
 800a142:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a14c:	e003      	b.n	800a156 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	2b37      	cmp	r3, #55	; 0x37
 800a15a:	d901      	bls.n	800a160 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a15c:	2337      	movs	r3, #55	; 0x37
 800a15e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a164:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a16a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	2200      	movs	r2, #0
 800a170:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	3304      	adds	r3, #4
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fdba 	bl	8008cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	3318      	adds	r3, #24
 800a180:	4618      	mov	r0, r3
 800a182:	f7fe fdb5 	bl	8008cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a18a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a19a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19e:	2200      	movs	r2, #0
 800a1a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	68f9      	ldr	r1, [r7, #12]
 800a1ae:	69b8      	ldr	r0, [r7, #24]
 800a1b0:	f001 fa1e 	bl	800b5f0 <pxPortInitialiseStack>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1c6:	bf00      	nop
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a1d8:	f001 fb18 	bl	800b80c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a1dc:	4b2d      	ldr	r3, [pc, #180]	; (800a294 <prvAddNewTaskToReadyList+0xc4>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	4a2c      	ldr	r2, [pc, #176]	; (800a294 <prvAddNewTaskToReadyList+0xc4>)
 800a1e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a1e6:	4b2c      	ldr	r3, [pc, #176]	; (800a298 <prvAddNewTaskToReadyList+0xc8>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d109      	bne.n	800a202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a1ee:	4a2a      	ldr	r2, [pc, #168]	; (800a298 <prvAddNewTaskToReadyList+0xc8>)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1f4:	4b27      	ldr	r3, [pc, #156]	; (800a294 <prvAddNewTaskToReadyList+0xc4>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d110      	bne.n	800a21e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a1fc:	f000 fbf6 	bl	800a9ec <prvInitialiseTaskLists>
 800a200:	e00d      	b.n	800a21e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a202:	4b26      	ldr	r3, [pc, #152]	; (800a29c <prvAddNewTaskToReadyList+0xcc>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d109      	bne.n	800a21e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a20a:	4b23      	ldr	r3, [pc, #140]	; (800a298 <prvAddNewTaskToReadyList+0xc8>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a214:	429a      	cmp	r2, r3
 800a216:	d802      	bhi.n	800a21e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a218:	4a1f      	ldr	r2, [pc, #124]	; (800a298 <prvAddNewTaskToReadyList+0xc8>)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a21e:	4b20      	ldr	r3, [pc, #128]	; (800a2a0 <prvAddNewTaskToReadyList+0xd0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	3301      	adds	r3, #1
 800a224:	4a1e      	ldr	r2, [pc, #120]	; (800a2a0 <prvAddNewTaskToReadyList+0xd0>)
 800a226:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a228:	4b1d      	ldr	r3, [pc, #116]	; (800a2a0 <prvAddNewTaskToReadyList+0xd0>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a234:	4b1b      	ldr	r3, [pc, #108]	; (800a2a4 <prvAddNewTaskToReadyList+0xd4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d903      	bls.n	800a244 <prvAddNewTaskToReadyList+0x74>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	4a18      	ldr	r2, [pc, #96]	; (800a2a4 <prvAddNewTaskToReadyList+0xd4>)
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a248:	4613      	mov	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4a15      	ldr	r2, [pc, #84]	; (800a2a8 <prvAddNewTaskToReadyList+0xd8>)
 800a252:	441a      	add	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3304      	adds	r3, #4
 800a258:	4619      	mov	r1, r3
 800a25a:	4610      	mov	r0, r2
 800a25c:	f7fe fd55 	bl	8008d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a260:	f001 fb08 	bl	800b874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a264:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <prvAddNewTaskToReadyList+0xcc>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00e      	beq.n	800a28a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a26c:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <prvAddNewTaskToReadyList+0xc8>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a276:	429a      	cmp	r2, r3
 800a278:	d207      	bcs.n	800a28a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a27a:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <prvAddNewTaskToReadyList+0xdc>)
 800a27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a28a:	bf00      	nop
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20001418 	.word	0x20001418
 800a298:	20000f44 	.word	0x20000f44
 800a29c:	20001424 	.word	0x20001424
 800a2a0:	20001434 	.word	0x20001434
 800a2a4:	20001420 	.word	0x20001420
 800a2a8:	20000f48 	.word	0x20000f48
 800a2ac:	e000ed04 	.word	0xe000ed04

0800a2b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08a      	sub	sp, #40	; 0x28
 800a2b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2be:	463a      	mov	r2, r7
 800a2c0:	1d39      	adds	r1, r7, #4
 800a2c2:	f107 0308 	add.w	r3, r7, #8
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fe fcbe 	bl	8008c48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	9202      	str	r2, [sp, #8]
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	460a      	mov	r2, r1
 800a2de:	4923      	ldr	r1, [pc, #140]	; (800a36c <vTaskStartScheduler+0xbc>)
 800a2e0:	4823      	ldr	r0, [pc, #140]	; (800a370 <vTaskStartScheduler+0xc0>)
 800a2e2:	f7ff fe3b 	bl	8009f5c <xTaskCreateStatic>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	4a22      	ldr	r2, [pc, #136]	; (800a374 <vTaskStartScheduler+0xc4>)
 800a2ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2ec:	4b21      	ldr	r3, [pc, #132]	; (800a374 <vTaskStartScheduler+0xc4>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	617b      	str	r3, [r7, #20]
 800a2f8:	e001      	b.n	800a2fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d102      	bne.n	800a30a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a304:	f000 fe18 	bl	800af38 <xTimerCreateTimerTask>
 800a308:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d118      	bne.n	800a342 <vTaskStartScheduler+0x92>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a314:	b672      	cpsid	i
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	b662      	cpsie	i
 800a324:	613b      	str	r3, [r7, #16]
}
 800a326:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a328:	4b13      	ldr	r3, [pc, #76]	; (800a378 <vTaskStartScheduler+0xc8>)
 800a32a:	f04f 32ff 	mov.w	r2, #4294967295
 800a32e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a330:	4b12      	ldr	r3, [pc, #72]	; (800a37c <vTaskStartScheduler+0xcc>)
 800a332:	2201      	movs	r2, #1
 800a334:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a336:	4b12      	ldr	r3, [pc, #72]	; (800a380 <vTaskStartScheduler+0xd0>)
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a33c:	f001 f9e8 	bl	800b710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a340:	e010      	b.n	800a364 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a348:	d10c      	bne.n	800a364 <vTaskStartScheduler+0xb4>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	b672      	cpsid	i
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	b662      	cpsie	i
 800a35e:	60fb      	str	r3, [r7, #12]
}
 800a360:	bf00      	nop
 800a362:	e7fe      	b.n	800a362 <vTaskStartScheduler+0xb2>
}
 800a364:	bf00      	nop
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	0800ce48 	.word	0x0800ce48
 800a370:	0800a9bd 	.word	0x0800a9bd
 800a374:	2000143c 	.word	0x2000143c
 800a378:	20001438 	.word	0x20001438
 800a37c:	20001424 	.word	0x20001424
 800a380:	2000141c 	.word	0x2000141c

0800a384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a384:	b480      	push	{r7}
 800a386:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a388:	4b04      	ldr	r3, [pc, #16]	; (800a39c <vTaskSuspendAll+0x18>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3301      	adds	r3, #1
 800a38e:	4a03      	ldr	r2, [pc, #12]	; (800a39c <vTaskSuspendAll+0x18>)
 800a390:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a392:	bf00      	nop
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	20001440 	.word	0x20001440

0800a3a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3ae:	4b43      	ldr	r3, [pc, #268]	; (800a4bc <xTaskResumeAll+0x11c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10c      	bne.n	800a3d0 <xTaskResumeAll+0x30>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ba:	b672      	cpsid	i
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	b662      	cpsie	i
 800a3ca:	603b      	str	r3, [r7, #0]
}
 800a3cc:	bf00      	nop
 800a3ce:	e7fe      	b.n	800a3ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3d0:	f001 fa1c 	bl	800b80c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3d4:	4b39      	ldr	r3, [pc, #228]	; (800a4bc <xTaskResumeAll+0x11c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	4a38      	ldr	r2, [pc, #224]	; (800a4bc <xTaskResumeAll+0x11c>)
 800a3dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3de:	4b37      	ldr	r3, [pc, #220]	; (800a4bc <xTaskResumeAll+0x11c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d162      	bne.n	800a4ac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3e6:	4b36      	ldr	r3, [pc, #216]	; (800a4c0 <xTaskResumeAll+0x120>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d05e      	beq.n	800a4ac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3ee:	e02f      	b.n	800a450 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3f0:	4b34      	ldr	r3, [pc, #208]	; (800a4c4 <xTaskResumeAll+0x124>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	3318      	adds	r3, #24
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fe fce1 	bl	8008dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3304      	adds	r3, #4
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe fcdc 	bl	8008dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	4b2d      	ldr	r3, [pc, #180]	; (800a4c8 <xTaskResumeAll+0x128>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d903      	bls.n	800a420 <xTaskResumeAll+0x80>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41c:	4a2a      	ldr	r2, [pc, #168]	; (800a4c8 <xTaskResumeAll+0x128>)
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4a27      	ldr	r2, [pc, #156]	; (800a4cc <xTaskResumeAll+0x12c>)
 800a42e:	441a      	add	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3304      	adds	r3, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f7fe fc67 	bl	8008d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	4b23      	ldr	r3, [pc, #140]	; (800a4d0 <xTaskResumeAll+0x130>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a446:	429a      	cmp	r2, r3
 800a448:	d302      	bcc.n	800a450 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a44a:	4b22      	ldr	r3, [pc, #136]	; (800a4d4 <xTaskResumeAll+0x134>)
 800a44c:	2201      	movs	r2, #1
 800a44e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a450:	4b1c      	ldr	r3, [pc, #112]	; (800a4c4 <xTaskResumeAll+0x124>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1cb      	bne.n	800a3f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a45e:	f000 fb65 	bl	800ab2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a462:	4b1d      	ldr	r3, [pc, #116]	; (800a4d8 <xTaskResumeAll+0x138>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d010      	beq.n	800a490 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a46e:	f000 f847 	bl	800a500 <xTaskIncrementTick>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a478:	4b16      	ldr	r3, [pc, #88]	; (800a4d4 <xTaskResumeAll+0x134>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3b01      	subs	r3, #1
 800a482:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1f1      	bne.n	800a46e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a48a:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <xTaskResumeAll+0x138>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a490:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <xTaskResumeAll+0x134>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d009      	beq.n	800a4ac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a498:	2301      	movs	r3, #1
 800a49a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a49c:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <xTaskResumeAll+0x13c>)
 800a49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4ac:	f001 f9e2 	bl	800b874 <vPortExitCritical>

	return xAlreadyYielded;
 800a4b0:	68bb      	ldr	r3, [r7, #8]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20001440 	.word	0x20001440
 800a4c0:	20001418 	.word	0x20001418
 800a4c4:	200013d8 	.word	0x200013d8
 800a4c8:	20001420 	.word	0x20001420
 800a4cc:	20000f48 	.word	0x20000f48
 800a4d0:	20000f44 	.word	0x20000f44
 800a4d4:	2000142c 	.word	0x2000142c
 800a4d8:	20001428 	.word	0x20001428
 800a4dc:	e000ed04 	.word	0xe000ed04

0800a4e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4e6:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <xTaskGetTickCount+0x1c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4ec:	687b      	ldr	r3, [r7, #4]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	2000141c 	.word	0x2000141c

0800a500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a506:	2300      	movs	r3, #0
 800a508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a50a:	4b50      	ldr	r3, [pc, #320]	; (800a64c <xTaskIncrementTick+0x14c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 808b 	bne.w	800a62a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a514:	4b4e      	ldr	r3, [pc, #312]	; (800a650 <xTaskIncrementTick+0x150>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3301      	adds	r3, #1
 800a51a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a51c:	4a4c      	ldr	r2, [pc, #304]	; (800a650 <xTaskIncrementTick+0x150>)
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d122      	bne.n	800a56e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a528:	4b4a      	ldr	r3, [pc, #296]	; (800a654 <xTaskIncrementTick+0x154>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00c      	beq.n	800a54c <xTaskIncrementTick+0x4c>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	b672      	cpsid	i
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	b662      	cpsie	i
 800a546:	603b      	str	r3, [r7, #0]
}
 800a548:	bf00      	nop
 800a54a:	e7fe      	b.n	800a54a <xTaskIncrementTick+0x4a>
 800a54c:	4b41      	ldr	r3, [pc, #260]	; (800a654 <xTaskIncrementTick+0x154>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	4b41      	ldr	r3, [pc, #260]	; (800a658 <xTaskIncrementTick+0x158>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a3f      	ldr	r2, [pc, #252]	; (800a654 <xTaskIncrementTick+0x154>)
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	4a3f      	ldr	r2, [pc, #252]	; (800a658 <xTaskIncrementTick+0x158>)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	4b3e      	ldr	r3, [pc, #248]	; (800a65c <xTaskIncrementTick+0x15c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3301      	adds	r3, #1
 800a566:	4a3d      	ldr	r2, [pc, #244]	; (800a65c <xTaskIncrementTick+0x15c>)
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	f000 fadf 	bl	800ab2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a56e:	4b3c      	ldr	r3, [pc, #240]	; (800a660 <xTaskIncrementTick+0x160>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	429a      	cmp	r2, r3
 800a576:	d349      	bcc.n	800a60c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a578:	4b36      	ldr	r3, [pc, #216]	; (800a654 <xTaskIncrementTick+0x154>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d104      	bne.n	800a58c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a582:	4b37      	ldr	r3, [pc, #220]	; (800a660 <xTaskIncrementTick+0x160>)
 800a584:	f04f 32ff 	mov.w	r2, #4294967295
 800a588:	601a      	str	r2, [r3, #0]
					break;
 800a58a:	e03f      	b.n	800a60c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a58c:	4b31      	ldr	r3, [pc, #196]	; (800a654 <xTaskIncrementTick+0x154>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d203      	bcs.n	800a5ac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5a4:	4a2e      	ldr	r2, [pc, #184]	; (800a660 <xTaskIncrementTick+0x160>)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5aa:	e02f      	b.n	800a60c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fc07 	bl	8008dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d004      	beq.n	800a5c8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	3318      	adds	r3, #24
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fe fbfe 	bl	8008dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5cc:	4b25      	ldr	r3, [pc, #148]	; (800a664 <xTaskIncrementTick+0x164>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d903      	bls.n	800a5dc <xTaskIncrementTick+0xdc>
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d8:	4a22      	ldr	r2, [pc, #136]	; (800a664 <xTaskIncrementTick+0x164>)
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4a1f      	ldr	r2, [pc, #124]	; (800a668 <xTaskIncrementTick+0x168>)
 800a5ea:	441a      	add	r2, r3
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	f7fe fb89 	bl	8008d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5fc:	4b1b      	ldr	r3, [pc, #108]	; (800a66c <xTaskIncrementTick+0x16c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a602:	429a      	cmp	r2, r3
 800a604:	d3b8      	bcc.n	800a578 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a606:	2301      	movs	r3, #1
 800a608:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a60a:	e7b5      	b.n	800a578 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a60c:	4b17      	ldr	r3, [pc, #92]	; (800a66c <xTaskIncrementTick+0x16c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a612:	4915      	ldr	r1, [pc, #84]	; (800a668 <xTaskIncrementTick+0x168>)
 800a614:	4613      	mov	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	440b      	add	r3, r1
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d907      	bls.n	800a634 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a624:	2301      	movs	r3, #1
 800a626:	617b      	str	r3, [r7, #20]
 800a628:	e004      	b.n	800a634 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a62a:	4b11      	ldr	r3, [pc, #68]	; (800a670 <xTaskIncrementTick+0x170>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3301      	adds	r3, #1
 800a630:	4a0f      	ldr	r2, [pc, #60]	; (800a670 <xTaskIncrementTick+0x170>)
 800a632:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a634:	4b0f      	ldr	r3, [pc, #60]	; (800a674 <xTaskIncrementTick+0x174>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a63c:	2301      	movs	r3, #1
 800a63e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a640:	697b      	ldr	r3, [r7, #20]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20001440 	.word	0x20001440
 800a650:	2000141c 	.word	0x2000141c
 800a654:	200013d0 	.word	0x200013d0
 800a658:	200013d4 	.word	0x200013d4
 800a65c:	20001430 	.word	0x20001430
 800a660:	20001438 	.word	0x20001438
 800a664:	20001420 	.word	0x20001420
 800a668:	20000f48 	.word	0x20000f48
 800a66c:	20000f44 	.word	0x20000f44
 800a670:	20001428 	.word	0x20001428
 800a674:	2000142c 	.word	0x2000142c

0800a678 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a67e:	4b29      	ldr	r3, [pc, #164]	; (800a724 <vTaskSwitchContext+0xac>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a686:	4b28      	ldr	r3, [pc, #160]	; (800a728 <vTaskSwitchContext+0xb0>)
 800a688:	2201      	movs	r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a68c:	e043      	b.n	800a716 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800a68e:	4b26      	ldr	r3, [pc, #152]	; (800a728 <vTaskSwitchContext+0xb0>)
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a694:	4b25      	ldr	r3, [pc, #148]	; (800a72c <vTaskSwitchContext+0xb4>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	e012      	b.n	800a6c2 <vTaskSwitchContext+0x4a>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10c      	bne.n	800a6bc <vTaskSwitchContext+0x44>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	b672      	cpsid	i
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	b662      	cpsie	i
 800a6b6:	607b      	str	r3, [r7, #4]
}
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <vTaskSwitchContext+0x42>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	60fb      	str	r3, [r7, #12]
 800a6c2:	491b      	ldr	r1, [pc, #108]	; (800a730 <vTaskSwitchContext+0xb8>)
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	440b      	add	r3, r1
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0e2      	beq.n	800a69c <vTaskSwitchContext+0x24>
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4a13      	ldr	r2, [pc, #76]	; (800a730 <vTaskSwitchContext+0xb8>)
 800a6e2:	4413      	add	r3, r2
 800a6e4:	60bb      	str	r3, [r7, #8]
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	605a      	str	r2, [r3, #4]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d104      	bne.n	800a706 <vTaskSwitchContext+0x8e>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	605a      	str	r2, [r3, #4]
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	4a09      	ldr	r2, [pc, #36]	; (800a734 <vTaskSwitchContext+0xbc>)
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	4a06      	ldr	r2, [pc, #24]	; (800a72c <vTaskSwitchContext+0xb4>)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6013      	str	r3, [r2, #0]
}
 800a716:	bf00      	nop
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20001440 	.word	0x20001440
 800a728:	2000142c 	.word	0x2000142c
 800a72c:	20001420 	.word	0x20001420
 800a730:	20000f48 	.word	0x20000f48
 800a734:	20000f44 	.word	0x20000f44

0800a738 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10c      	bne.n	800a762 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	b672      	cpsid	i
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	b662      	cpsie	i
 800a75c:	60fb      	str	r3, [r7, #12]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a762:	4b07      	ldr	r3, [pc, #28]	; (800a780 <vTaskPlaceOnEventList+0x48>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3318      	adds	r3, #24
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7fe faf1 	bl	8008d52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a770:	2101      	movs	r1, #1
 800a772:	6838      	ldr	r0, [r7, #0]
 800a774:	f000 fb8c 	bl	800ae90 <prvAddCurrentTaskToDelayedList>
}
 800a778:	bf00      	nop
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20000f44 	.word	0x20000f44

0800a784 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10c      	bne.n	800a7b0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	b672      	cpsid	i
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	b662      	cpsie	i
 800a7aa:	617b      	str	r3, [r7, #20]
}
 800a7ac:	bf00      	nop
 800a7ae:	e7fe      	b.n	800a7ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <vTaskPlaceOnEventListRestricted+0x58>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3318      	adds	r3, #24
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f7fe faa6 	bl	8008d0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7ca:	6879      	ldr	r1, [r7, #4]
 800a7cc:	68b8      	ldr	r0, [r7, #8]
 800a7ce:	f000 fb5f 	bl	800ae90 <prvAddCurrentTaskToDelayedList>
	}
 800a7d2:	bf00      	nop
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000f44 	.word	0x20000f44

0800a7e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10c      	bne.n	800a810 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	b672      	cpsid	i
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	b662      	cpsie	i
 800a80a:	60fb      	str	r3, [r7, #12]
}
 800a80c:	bf00      	nop
 800a80e:	e7fe      	b.n	800a80e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	3318      	adds	r3, #24
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe fad5 	bl	8008dc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a81a:	4b1e      	ldr	r3, [pc, #120]	; (800a894 <xTaskRemoveFromEventList+0xb4>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d11d      	bne.n	800a85e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	3304      	adds	r3, #4
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe facc 	bl	8008dc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a830:	4b19      	ldr	r3, [pc, #100]	; (800a898 <xTaskRemoveFromEventList+0xb8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	429a      	cmp	r2, r3
 800a836:	d903      	bls.n	800a840 <xTaskRemoveFromEventList+0x60>
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83c:	4a16      	ldr	r2, [pc, #88]	; (800a898 <xTaskRemoveFromEventList+0xb8>)
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a844:	4613      	mov	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4a13      	ldr	r2, [pc, #76]	; (800a89c <xTaskRemoveFromEventList+0xbc>)
 800a84e:	441a      	add	r2, r3
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	3304      	adds	r3, #4
 800a854:	4619      	mov	r1, r3
 800a856:	4610      	mov	r0, r2
 800a858:	f7fe fa57 	bl	8008d0a <vListInsertEnd>
 800a85c:	e005      	b.n	800a86a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	3318      	adds	r3, #24
 800a862:	4619      	mov	r1, r3
 800a864:	480e      	ldr	r0, [pc, #56]	; (800a8a0 <xTaskRemoveFromEventList+0xc0>)
 800a866:	f7fe fa50 	bl	8008d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a86e:	4b0d      	ldr	r3, [pc, #52]	; (800a8a4 <xTaskRemoveFromEventList+0xc4>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a874:	429a      	cmp	r2, r3
 800a876:	d905      	bls.n	800a884 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a878:	2301      	movs	r3, #1
 800a87a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a87c:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <xTaskRemoveFromEventList+0xc8>)
 800a87e:	2201      	movs	r2, #1
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	e001      	b.n	800a888 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a884:	2300      	movs	r3, #0
 800a886:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a888:	697b      	ldr	r3, [r7, #20]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	20001440 	.word	0x20001440
 800a898:	20001420 	.word	0x20001420
 800a89c:	20000f48 	.word	0x20000f48
 800a8a0:	200013d8 	.word	0x200013d8
 800a8a4:	20000f44 	.word	0x20000f44
 800a8a8:	2000142c 	.word	0x2000142c

0800a8ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8b4:	4b06      	ldr	r3, [pc, #24]	; (800a8d0 <vTaskInternalSetTimeOutState+0x24>)
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8bc:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <vTaskInternalSetTimeOutState+0x28>)
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	605a      	str	r2, [r3, #4]
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	20001430 	.word	0x20001430
 800a8d4:	2000141c 	.word	0x2000141c

0800a8d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10c      	bne.n	800a902 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	b672      	cpsid	i
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	b662      	cpsie	i
 800a8fc:	613b      	str	r3, [r7, #16]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10c      	bne.n	800a922 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	b672      	cpsid	i
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	b662      	cpsie	i
 800a91c:	60fb      	str	r3, [r7, #12]
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a922:	f000 ff73 	bl	800b80c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a926:	4b1d      	ldr	r3, [pc, #116]	; (800a99c <xTaskCheckForTimeOut+0xc4>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93e:	d102      	bne.n	800a946 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	61fb      	str	r3, [r7, #28]
 800a944:	e023      	b.n	800a98e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	4b15      	ldr	r3, [pc, #84]	; (800a9a0 <xTaskCheckForTimeOut+0xc8>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d007      	beq.n	800a962 <xTaskCheckForTimeOut+0x8a>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d302      	bcc.n	800a962 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a95c:	2301      	movs	r3, #1
 800a95e:	61fb      	str	r3, [r7, #28]
 800a960:	e015      	b.n	800a98e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d20b      	bcs.n	800a984 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	1ad2      	subs	r2, r2, r3
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff ff97 	bl	800a8ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a97e:	2300      	movs	r3, #0
 800a980:	61fb      	str	r3, [r7, #28]
 800a982:	e004      	b.n	800a98e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2200      	movs	r2, #0
 800a988:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a98a:	2301      	movs	r3, #1
 800a98c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a98e:	f000 ff71 	bl	800b874 <vPortExitCritical>

	return xReturn;
 800a992:	69fb      	ldr	r3, [r7, #28]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3720      	adds	r7, #32
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	2000141c 	.word	0x2000141c
 800a9a0:	20001430 	.word	0x20001430

0800a9a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a9a8:	4b03      	ldr	r3, [pc, #12]	; (800a9b8 <vTaskMissedYield+0x14>)
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]
}
 800a9ae:	bf00      	nop
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr
 800a9b8:	2000142c 	.word	0x2000142c

0800a9bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9c4:	f000 f852 	bl	800aa6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9c8:	4b06      	ldr	r3, [pc, #24]	; (800a9e4 <prvIdleTask+0x28>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d9f9      	bls.n	800a9c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <prvIdleTask+0x2c>)
 800a9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d6:	601a      	str	r2, [r3, #0]
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a9e0:	e7f0      	b.n	800a9c4 <prvIdleTask+0x8>
 800a9e2:	bf00      	nop
 800a9e4:	20000f48 	.word	0x20000f48
 800a9e8:	e000ed04 	.word	0xe000ed04

0800a9ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	607b      	str	r3, [r7, #4]
 800a9f6:	e00c      	b.n	800aa12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4a12      	ldr	r2, [pc, #72]	; (800aa4c <prvInitialiseTaskLists+0x60>)
 800aa04:	4413      	add	r3, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe f952 	bl	8008cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	607b      	str	r3, [r7, #4]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b37      	cmp	r3, #55	; 0x37
 800aa16:	d9ef      	bls.n	800a9f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa18:	480d      	ldr	r0, [pc, #52]	; (800aa50 <prvInitialiseTaskLists+0x64>)
 800aa1a:	f7fe f949 	bl	8008cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa1e:	480d      	ldr	r0, [pc, #52]	; (800aa54 <prvInitialiseTaskLists+0x68>)
 800aa20:	f7fe f946 	bl	8008cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa24:	480c      	ldr	r0, [pc, #48]	; (800aa58 <prvInitialiseTaskLists+0x6c>)
 800aa26:	f7fe f943 	bl	8008cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa2a:	480c      	ldr	r0, [pc, #48]	; (800aa5c <prvInitialiseTaskLists+0x70>)
 800aa2c:	f7fe f940 	bl	8008cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa30:	480b      	ldr	r0, [pc, #44]	; (800aa60 <prvInitialiseTaskLists+0x74>)
 800aa32:	f7fe f93d 	bl	8008cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa36:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <prvInitialiseTaskLists+0x78>)
 800aa38:	4a05      	ldr	r2, [pc, #20]	; (800aa50 <prvInitialiseTaskLists+0x64>)
 800aa3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <prvInitialiseTaskLists+0x7c>)
 800aa3e:	4a05      	ldr	r2, [pc, #20]	; (800aa54 <prvInitialiseTaskLists+0x68>)
 800aa40:	601a      	str	r2, [r3, #0]
}
 800aa42:	bf00      	nop
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20000f48 	.word	0x20000f48
 800aa50:	200013a8 	.word	0x200013a8
 800aa54:	200013bc 	.word	0x200013bc
 800aa58:	200013d8 	.word	0x200013d8
 800aa5c:	200013ec 	.word	0x200013ec
 800aa60:	20001404 	.word	0x20001404
 800aa64:	200013d0 	.word	0x200013d0
 800aa68:	200013d4 	.word	0x200013d4

0800aa6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa72:	e019      	b.n	800aaa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa74:	f000 feca 	bl	800b80c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa78:	4b10      	ldr	r3, [pc, #64]	; (800aabc <prvCheckTasksWaitingTermination+0x50>)
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3304      	adds	r3, #4
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe f99d 	bl	8008dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa8a:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <prvCheckTasksWaitingTermination+0x54>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	4a0b      	ldr	r2, [pc, #44]	; (800aac0 <prvCheckTasksWaitingTermination+0x54>)
 800aa92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa94:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <prvCheckTasksWaitingTermination+0x58>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	4a0a      	ldr	r2, [pc, #40]	; (800aac4 <prvCheckTasksWaitingTermination+0x58>)
 800aa9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa9e:	f000 fee9 	bl	800b874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f810 	bl	800aac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaa8:	4b06      	ldr	r3, [pc, #24]	; (800aac4 <prvCheckTasksWaitingTermination+0x58>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1e1      	bne.n	800aa74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aab0:	bf00      	nop
 800aab2:	bf00      	nop
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	200013ec 	.word	0x200013ec
 800aac0:	20001418 	.word	0x20001418
 800aac4:	20001400 	.word	0x20001400

0800aac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d108      	bne.n	800aaec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aade:	4618      	mov	r0, r3
 800aae0:	f001 f88a 	bl	800bbf8 <vPortFree>
				vPortFree( pxTCB );
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 f887 	bl	800bbf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aaea:	e01a      	b.n	800ab22 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d103      	bne.n	800aafe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 f87e 	bl	800bbf8 <vPortFree>
	}
 800aafc:	e011      	b.n	800ab22 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	d00c      	beq.n	800ab22 <prvDeleteTCB+0x5a>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0c:	b672      	cpsid	i
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	b662      	cpsie	i
 800ab1c:	60fb      	str	r3, [r7, #12]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <prvDeleteTCB+0x58>
	}
 800ab22:	bf00      	nop
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab32:	4b0c      	ldr	r3, [pc, #48]	; (800ab64 <prvResetNextTaskUnblockTime+0x38>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d104      	bne.n	800ab46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <prvResetNextTaskUnblockTime+0x3c>)
 800ab3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab44:	e008      	b.n	800ab58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab46:	4b07      	ldr	r3, [pc, #28]	; (800ab64 <prvResetNextTaskUnblockTime+0x38>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	4a04      	ldr	r2, [pc, #16]	; (800ab68 <prvResetNextTaskUnblockTime+0x3c>)
 800ab56:	6013      	str	r3, [r2, #0]
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr
 800ab64:	200013d0 	.word	0x200013d0
 800ab68:	20001438 	.word	0x20001438

0800ab6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab72:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <xTaskGetSchedulerState+0x34>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d102      	bne.n	800ab80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	607b      	str	r3, [r7, #4]
 800ab7e:	e008      	b.n	800ab92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab80:	4b08      	ldr	r3, [pc, #32]	; (800aba4 <xTaskGetSchedulerState+0x38>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d102      	bne.n	800ab8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab88:	2302      	movs	r3, #2
 800ab8a:	607b      	str	r3, [r7, #4]
 800ab8c:	e001      	b.n	800ab92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab92:	687b      	ldr	r3, [r7, #4]
	}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	20001424 	.word	0x20001424
 800aba4:	20001440 	.word	0x20001440

0800aba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800abb4:	2300      	movs	r3, #0
 800abb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d051      	beq.n	800ac62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc2:	4b2a      	ldr	r3, [pc, #168]	; (800ac6c <xTaskPriorityInherit+0xc4>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	429a      	cmp	r2, r3
 800abca:	d241      	bcs.n	800ac50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	699b      	ldr	r3, [r3, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	db06      	blt.n	800abe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abd4:	4b25      	ldr	r3, [pc, #148]	; (800ac6c <xTaskPriorityInherit+0xc4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	6959      	ldr	r1, [r3, #20]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abea:	4613      	mov	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4a1f      	ldr	r2, [pc, #124]	; (800ac70 <xTaskPriorityInherit+0xc8>)
 800abf4:	4413      	add	r3, r2
 800abf6:	4299      	cmp	r1, r3
 800abf8:	d122      	bne.n	800ac40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fe f8e0 	bl	8008dc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac04:	4b19      	ldr	r3, [pc, #100]	; (800ac6c <xTaskPriorityInherit+0xc4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac12:	4b18      	ldr	r3, [pc, #96]	; (800ac74 <xTaskPriorityInherit+0xcc>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d903      	bls.n	800ac22 <xTaskPriorityInherit+0x7a>
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	4a15      	ldr	r2, [pc, #84]	; (800ac74 <xTaskPriorityInherit+0xcc>)
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	4a10      	ldr	r2, [pc, #64]	; (800ac70 <xTaskPriorityInherit+0xc8>)
 800ac30:	441a      	add	r2, r3
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	3304      	adds	r3, #4
 800ac36:	4619      	mov	r1, r3
 800ac38:	4610      	mov	r0, r2
 800ac3a:	f7fe f866 	bl	8008d0a <vListInsertEnd>
 800ac3e:	e004      	b.n	800ac4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac40:	4b0a      	ldr	r3, [pc, #40]	; (800ac6c <xTaskPriorityInherit+0xc4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	e008      	b.n	800ac62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac54:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <xTaskPriorityInherit+0xc4>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d201      	bcs.n	800ac62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac62:	68fb      	ldr	r3, [r7, #12]
	}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	20000f44 	.word	0x20000f44
 800ac70:	20000f48 	.word	0x20000f48
 800ac74:	20001420 	.word	0x20001420

0800ac78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac84:	2300      	movs	r3, #0
 800ac86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d05a      	beq.n	800ad44 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac8e:	4b30      	ldr	r3, [pc, #192]	; (800ad50 <xTaskPriorityDisinherit+0xd8>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d00c      	beq.n	800acb2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ac98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9c:	b672      	cpsid	i
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	b662      	cpsie	i
 800acac:	60fb      	str	r3, [r7, #12]
}
 800acae:	bf00      	nop
 800acb0:	e7fe      	b.n	800acb0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10c      	bne.n	800acd4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	b672      	cpsid	i
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	b662      	cpsie	i
 800acce:	60bb      	str	r3, [r7, #8]
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd8:	1e5a      	subs	r2, r3, #1
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d02c      	beq.n	800ad44 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d128      	bne.n	800ad44 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	3304      	adds	r3, #4
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fe f864 	bl	8008dc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad14:	4b0f      	ldr	r3, [pc, #60]	; (800ad54 <xTaskPriorityDisinherit+0xdc>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d903      	bls.n	800ad24 <xTaskPriorityDisinherit+0xac>
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	4a0c      	ldr	r2, [pc, #48]	; (800ad54 <xTaskPriorityDisinherit+0xdc>)
 800ad22:	6013      	str	r3, [r2, #0]
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4a09      	ldr	r2, [pc, #36]	; (800ad58 <xTaskPriorityDisinherit+0xe0>)
 800ad32:	441a      	add	r2, r3
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	3304      	adds	r3, #4
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	f7fd ffe5 	bl	8008d0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad40:	2301      	movs	r3, #1
 800ad42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad44:	697b      	ldr	r3, [r7, #20]
	}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000f44 	.word	0x20000f44
 800ad54:	20001420 	.word	0x20001420
 800ad58:	20000f48 	.word	0x20000f48

0800ad5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d06e      	beq.n	800ae52 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10c      	bne.n	800ad96 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	b672      	cpsid	i
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	b662      	cpsie	i
 800ad90:	60fb      	str	r3, [r7, #12]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d902      	bls.n	800ada6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	61fb      	str	r3, [r7, #28]
 800ada4:	e002      	b.n	800adac <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adaa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	69fa      	ldr	r2, [r7, #28]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d04d      	beq.n	800ae52 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d148      	bne.n	800ae52 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800adc0:	4b26      	ldr	r3, [pc, #152]	; (800ae5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	69ba      	ldr	r2, [r7, #24]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d10c      	bne.n	800ade4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	b672      	cpsid	i
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	b662      	cpsie	i
 800adde:	60bb      	str	r3, [r7, #8]
}
 800ade0:	bf00      	nop
 800ade2:	e7fe      	b.n	800ade2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	69fa      	ldr	r2, [r7, #28]
 800adee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	db04      	blt.n	800ae02 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	6959      	ldr	r1, [r3, #20]
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4a13      	ldr	r2, [pc, #76]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae12:	4413      	add	r3, r2
 800ae14:	4299      	cmp	r1, r3
 800ae16:	d11c      	bne.n	800ae52 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fd ffd1 	bl	8008dc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae26:	4b0f      	ldr	r3, [pc, #60]	; (800ae64 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d903      	bls.n	800ae36 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	4a0c      	ldr	r2, [pc, #48]	; (800ae64 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4a07      	ldr	r2, [pc, #28]	; (800ae60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ae44:	441a      	add	r2, r3
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	f7fd ff5c 	bl	8008d0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae52:	bf00      	nop
 800ae54:	3720      	adds	r7, #32
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20000f44 	.word	0x20000f44
 800ae60:	20000f48 	.word	0x20000f48
 800ae64:	20001420 	.word	0x20001420

0800ae68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae6c:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <pvTaskIncrementMutexHeldCount+0x24>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d004      	beq.n	800ae7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae74:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <pvTaskIncrementMutexHeldCount+0x24>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae7a:	3201      	adds	r2, #1
 800ae7c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ae7e:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <pvTaskIncrementMutexHeldCount+0x24>)
 800ae80:	681b      	ldr	r3, [r3, #0]
	}
 800ae82:	4618      	mov	r0, r3
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	20000f44 	.word	0x20000f44

0800ae90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae9a:	4b21      	ldr	r3, [pc, #132]	; (800af20 <prvAddCurrentTaskToDelayedList+0x90>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aea0:	4b20      	ldr	r3, [pc, #128]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3304      	adds	r3, #4
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fd ff8c 	bl	8008dc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb2:	d10a      	bne.n	800aeca <prvAddCurrentTaskToDelayedList+0x3a>
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeba:	4b1a      	ldr	r3, [pc, #104]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3304      	adds	r3, #4
 800aec0:	4619      	mov	r1, r3
 800aec2:	4819      	ldr	r0, [pc, #100]	; (800af28 <prvAddCurrentTaskToDelayedList+0x98>)
 800aec4:	f7fd ff21 	bl	8008d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aec8:	e026      	b.n	800af18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4413      	add	r3, r2
 800aed0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aed2:	4b14      	ldr	r3, [pc, #80]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d209      	bcs.n	800aef6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aee2:	4b12      	ldr	r3, [pc, #72]	; (800af2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3304      	adds	r3, #4
 800aeec:	4619      	mov	r1, r3
 800aeee:	4610      	mov	r0, r2
 800aef0:	f7fd ff2f 	bl	8008d52 <vListInsert>
}
 800aef4:	e010      	b.n	800af18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aef6:	4b0e      	ldr	r3, [pc, #56]	; (800af30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	4b0a      	ldr	r3, [pc, #40]	; (800af24 <prvAddCurrentTaskToDelayedList+0x94>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	3304      	adds	r3, #4
 800af00:	4619      	mov	r1, r3
 800af02:	4610      	mov	r0, r2
 800af04:	f7fd ff25 	bl	8008d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af08:	4b0a      	ldr	r3, [pc, #40]	; (800af34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d202      	bcs.n	800af18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800af12:	4a08      	ldr	r2, [pc, #32]	; (800af34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	6013      	str	r3, [r2, #0]
}
 800af18:	bf00      	nop
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	2000141c 	.word	0x2000141c
 800af24:	20000f44 	.word	0x20000f44
 800af28:	20001404 	.word	0x20001404
 800af2c:	200013d4 	.word	0x200013d4
 800af30:	200013d0 	.word	0x200013d0
 800af34:	20001438 	.word	0x20001438

0800af38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08a      	sub	sp, #40	; 0x28
 800af3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af42:	f000 fb15 	bl	800b570 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af46:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <xTimerCreateTimerTask+0x84>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d021      	beq.n	800af92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af56:	1d3a      	adds	r2, r7, #4
 800af58:	f107 0108 	add.w	r1, r7, #8
 800af5c:	f107 030c 	add.w	r3, r7, #12
 800af60:	4618      	mov	r0, r3
 800af62:	f7fd fe8b 	bl	8008c7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	9202      	str	r2, [sp, #8]
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	2302      	movs	r3, #2
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	2300      	movs	r3, #0
 800af76:	460a      	mov	r2, r1
 800af78:	4911      	ldr	r1, [pc, #68]	; (800afc0 <xTimerCreateTimerTask+0x88>)
 800af7a:	4812      	ldr	r0, [pc, #72]	; (800afc4 <xTimerCreateTimerTask+0x8c>)
 800af7c:	f7fe ffee 	bl	8009f5c <xTaskCreateStatic>
 800af80:	4603      	mov	r3, r0
 800af82:	4a11      	ldr	r2, [pc, #68]	; (800afc8 <xTimerCreateTimerTask+0x90>)
 800af84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af86:	4b10      	ldr	r3, [pc, #64]	; (800afc8 <xTimerCreateTimerTask+0x90>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af8e:	2301      	movs	r3, #1
 800af90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10c      	bne.n	800afb2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	b672      	cpsid	i
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	b662      	cpsie	i
 800afac:	613b      	str	r3, [r7, #16]
}
 800afae:	bf00      	nop
 800afb0:	e7fe      	b.n	800afb0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800afb2:	697b      	ldr	r3, [r7, #20]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	20001474 	.word	0x20001474
 800afc0:	0800ce50 	.word	0x0800ce50
 800afc4:	0800b109 	.word	0x0800b109
 800afc8:	20001478 	.word	0x20001478

0800afcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08a      	sub	sp, #40	; 0x28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800afda:	2300      	movs	r3, #0
 800afdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10c      	bne.n	800affe <xTimerGenericCommand+0x32>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe8:	b672      	cpsid	i
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	b662      	cpsie	i
 800aff8:	623b      	str	r3, [r7, #32]
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800affe:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <xTimerGenericCommand+0x9c>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d02a      	beq.n	800b05c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2b05      	cmp	r3, #5
 800b016:	dc18      	bgt.n	800b04a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b018:	f7ff fda8 	bl	800ab6c <xTaskGetSchedulerState>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b02      	cmp	r3, #2
 800b020:	d109      	bne.n	800b036 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b022:	4b11      	ldr	r3, [pc, #68]	; (800b068 <xTimerGenericCommand+0x9c>)
 800b024:	6818      	ldr	r0, [r3, #0]
 800b026:	f107 0110 	add.w	r1, r7, #16
 800b02a:	2300      	movs	r3, #0
 800b02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b02e:	f7fe f903 	bl	8009238 <xQueueGenericSend>
 800b032:	6278      	str	r0, [r7, #36]	; 0x24
 800b034:	e012      	b.n	800b05c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b036:	4b0c      	ldr	r3, [pc, #48]	; (800b068 <xTimerGenericCommand+0x9c>)
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	f107 0110 	add.w	r1, r7, #16
 800b03e:	2300      	movs	r3, #0
 800b040:	2200      	movs	r2, #0
 800b042:	f7fe f8f9 	bl	8009238 <xQueueGenericSend>
 800b046:	6278      	str	r0, [r7, #36]	; 0x24
 800b048:	e008      	b.n	800b05c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b04a:	4b07      	ldr	r3, [pc, #28]	; (800b068 <xTimerGenericCommand+0x9c>)
 800b04c:	6818      	ldr	r0, [r3, #0]
 800b04e:	f107 0110 	add.w	r1, r7, #16
 800b052:	2300      	movs	r3, #0
 800b054:	683a      	ldr	r2, [r7, #0]
 800b056:	f7fe f9f5 	bl	8009444 <xQueueGenericSendFromISR>
 800b05a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3728      	adds	r7, #40	; 0x28
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20001474 	.word	0x20001474

0800b06c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af02      	add	r7, sp, #8
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b076:	4b23      	ldr	r3, [pc, #140]	; (800b104 <prvProcessExpiredTimer+0x98>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	3304      	adds	r3, #4
 800b084:	4618      	mov	r0, r3
 800b086:	f7fd fe9d 	bl	8008dc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b090:	f003 0304 	and.w	r3, r3, #4
 800b094:	2b00      	cmp	r3, #0
 800b096:	d024      	beq.n	800b0e2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	699a      	ldr	r2, [r3, #24]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	18d1      	adds	r1, r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	683a      	ldr	r2, [r7, #0]
 800b0a4:	6978      	ldr	r0, [r7, #20]
 800b0a6:	f000 f8d3 	bl	800b250 <prvInsertTimerInActiveList>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d021      	beq.n	800b0f4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	6978      	ldr	r0, [r7, #20]
 800b0bc:	f7ff ff86 	bl	800afcc <xTimerGenericCommand>
 800b0c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d115      	bne.n	800b0f4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0cc:	b672      	cpsid	i
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	b662      	cpsie	i
 800b0dc:	60fb      	str	r3, [r7, #12]
}
 800b0de:	bf00      	nop
 800b0e0:	e7fe      	b.n	800b0e0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0e8:	f023 0301 	bic.w	r3, r3, #1
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	6978      	ldr	r0, [r7, #20]
 800b0fa:	4798      	blx	r3
}
 800b0fc:	bf00      	nop
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	2000146c 	.word	0x2000146c

0800b108 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b110:	f107 0308 	add.w	r3, r7, #8
 800b114:	4618      	mov	r0, r3
 800b116:	f000 f857 	bl	800b1c8 <prvGetNextExpireTime>
 800b11a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	4619      	mov	r1, r3
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 f803 	bl	800b12c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b126:	f000 f8d5 	bl	800b2d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b12a:	e7f1      	b.n	800b110 <prvTimerTask+0x8>

0800b12c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b136:	f7ff f925 	bl	800a384 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b13a:	f107 0308 	add.w	r3, r7, #8
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 f866 	bl	800b210 <prvSampleTimeNow>
 800b144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d130      	bne.n	800b1ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <prvProcessTimerOrBlockTask+0x3c>
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	429a      	cmp	r2, r3
 800b158:	d806      	bhi.n	800b168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b15a:	f7ff f921 	bl	800a3a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b15e:	68f9      	ldr	r1, [r7, #12]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff ff83 	bl	800b06c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b166:	e024      	b.n	800b1b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d008      	beq.n	800b180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b16e:	4b13      	ldr	r3, [pc, #76]	; (800b1bc <prvProcessTimerOrBlockTask+0x90>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <prvProcessTimerOrBlockTask+0x50>
 800b178:	2301      	movs	r3, #1
 800b17a:	e000      	b.n	800b17e <prvProcessTimerOrBlockTask+0x52>
 800b17c:	2300      	movs	r3, #0
 800b17e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b180:	4b0f      	ldr	r3, [pc, #60]	; (800b1c0 <prvProcessTimerOrBlockTask+0x94>)
 800b182:	6818      	ldr	r0, [r3, #0]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	4619      	mov	r1, r3
 800b18e:	f7fe feb1 	bl	8009ef4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b192:	f7ff f905 	bl	800a3a0 <xTaskResumeAll>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10a      	bne.n	800b1b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b19c:	4b09      	ldr	r3, [pc, #36]	; (800b1c4 <prvProcessTimerOrBlockTask+0x98>)
 800b19e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a2:	601a      	str	r2, [r3, #0]
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	f3bf 8f6f 	isb	sy
}
 800b1ac:	e001      	b.n	800b1b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b1ae:	f7ff f8f7 	bl	800a3a0 <xTaskResumeAll>
}
 800b1b2:	bf00      	nop
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20001470 	.word	0x20001470
 800b1c0:	20001474 	.word	0x20001474
 800b1c4:	e000ed04 	.word	0xe000ed04

0800b1c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b1d0:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <prvGetNextExpireTime+0x44>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <prvGetNextExpireTime+0x16>
 800b1da:	2201      	movs	r2, #1
 800b1dc:	e000      	b.n	800b1e0 <prvGetNextExpireTime+0x18>
 800b1de:	2200      	movs	r2, #0
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d105      	bne.n	800b1f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1ec:	4b07      	ldr	r3, [pc, #28]	; (800b20c <prvGetNextExpireTime+0x44>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	e001      	b.n	800b1fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	2000146c 	.word	0x2000146c

0800b210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b218:	f7ff f962 	bl	800a4e0 <xTaskGetTickCount>
 800b21c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b21e:	4b0b      	ldr	r3, [pc, #44]	; (800b24c <prvSampleTimeNow+0x3c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	429a      	cmp	r2, r3
 800b226:	d205      	bcs.n	800b234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b228:	f000 f93c 	bl	800b4a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	e002      	b.n	800b23a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b23a:	4a04      	ldr	r2, [pc, #16]	; (800b24c <prvSampleTimeNow+0x3c>)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b240:	68fb      	ldr	r3, [r7, #12]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	2000147c 	.word	0x2000147c

0800b250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b25e:	2300      	movs	r3, #0
 800b260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	429a      	cmp	r2, r3
 800b274:	d812      	bhi.n	800b29c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	1ad2      	subs	r2, r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	429a      	cmp	r2, r3
 800b282:	d302      	bcc.n	800b28a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b284:	2301      	movs	r3, #1
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	e01b      	b.n	800b2c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b28a:	4b10      	ldr	r3, [pc, #64]	; (800b2cc <prvInsertTimerInActiveList+0x7c>)
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3304      	adds	r3, #4
 800b292:	4619      	mov	r1, r3
 800b294:	4610      	mov	r0, r2
 800b296:	f7fd fd5c 	bl	8008d52 <vListInsert>
 800b29a:	e012      	b.n	800b2c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d206      	bcs.n	800b2b2 <prvInsertTimerInActiveList+0x62>
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d302      	bcc.n	800b2b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e007      	b.n	800b2c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2b2:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <prvInsertTimerInActiveList+0x80>)
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4610      	mov	r0, r2
 800b2be:	f7fd fd48 	bl	8008d52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b2c2:	697b      	ldr	r3, [r7, #20]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	20001470 	.word	0x20001470
 800b2d0:	2000146c 	.word	0x2000146c

0800b2d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08e      	sub	sp, #56	; 0x38
 800b2d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2da:	e0d0      	b.n	800b47e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	da1a      	bge.n	800b318 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b2e2:	1d3b      	adds	r3, r7, #4
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10c      	bne.n	800b308 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f2:	b672      	cpsid	i
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	b662      	cpsie	i
 800b302:	61fb      	str	r3, [r7, #28]
}
 800b304:	bf00      	nop
 800b306:	e7fe      	b.n	800b306 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b30e:	6850      	ldr	r0, [r2, #4]
 800b310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b312:	6892      	ldr	r2, [r2, #8]
 800b314:	4611      	mov	r1, r2
 800b316:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f2c0 80ae 	blt.w	800b47c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d004      	beq.n	800b336 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32e:	3304      	adds	r3, #4
 800b330:	4618      	mov	r0, r3
 800b332:	f7fd fd47 	bl	8008dc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b336:	463b      	mov	r3, r7
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff ff69 	bl	800b210 <prvSampleTimeNow>
 800b33e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b09      	cmp	r3, #9
 800b344:	f200 809b 	bhi.w	800b47e <prvProcessReceivedCommands+0x1aa>
 800b348:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <prvProcessReceivedCommands+0x7c>)
 800b34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34e:	bf00      	nop
 800b350:	0800b379 	.word	0x0800b379
 800b354:	0800b379 	.word	0x0800b379
 800b358:	0800b379 	.word	0x0800b379
 800b35c:	0800b3f1 	.word	0x0800b3f1
 800b360:	0800b405 	.word	0x0800b405
 800b364:	0800b453 	.word	0x0800b453
 800b368:	0800b379 	.word	0x0800b379
 800b36c:	0800b379 	.word	0x0800b379
 800b370:	0800b3f1 	.word	0x0800b3f1
 800b374:	0800b405 	.word	0x0800b405
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b37e:	f043 0301 	orr.w	r3, r3, #1
 800b382:	b2da      	uxtb	r2, r3
 800b384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	18d1      	adds	r1, r2, r3
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b398:	f7ff ff5a 	bl	800b250 <prvInsertTimerInActiveList>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d06d      	beq.n	800b47e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3b0:	f003 0304 	and.w	r3, r3, #4
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d062      	beq.n	800b47e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	441a      	add	r2, r3
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3ca:	f7ff fdff 	bl	800afcc <xTimerGenericCommand>
 800b3ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d153      	bne.n	800b47e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3da:	b672      	cpsid	i
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	b662      	cpsie	i
 800b3ea:	61bb      	str	r3, [r7, #24]
}
 800b3ec:	bf00      	nop
 800b3ee:	e7fe      	b.n	800b3ee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3f6:	f023 0301 	bic.w	r3, r3, #1
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b402:	e03c      	b.n	800b47e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b40a:	f043 0301 	orr.w	r3, r3, #1
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10c      	bne.n	800b43e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	b672      	cpsid	i
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	b662      	cpsie	i
 800b438:	617b      	str	r3, [r7, #20]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b440:	699a      	ldr	r2, [r3, #24]
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	18d1      	adds	r1, r2, r3
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b44c:	f7ff ff00 	bl	800b250 <prvInsertTimerInActiveList>
					break;
 800b450:	e015      	b.n	800b47e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b458:	f003 0302 	and.w	r3, r3, #2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d103      	bne.n	800b468 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b462:	f000 fbc9 	bl	800bbf8 <vPortFree>
 800b466:	e00a      	b.n	800b47e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b46a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b46e:	f023 0301 	bic.w	r3, r3, #1
 800b472:	b2da      	uxtb	r2, r3
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b47a:	e000      	b.n	800b47e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b47c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b47e:	4b08      	ldr	r3, [pc, #32]	; (800b4a0 <prvProcessReceivedCommands+0x1cc>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	1d39      	adds	r1, r7, #4
 800b484:	2200      	movs	r2, #0
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe f912 	bl	80096b0 <xQueueReceive>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f47f af24 	bne.w	800b2dc <prvProcessReceivedCommands+0x8>
	}
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop
 800b498:	3730      	adds	r7, #48	; 0x30
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	20001474 	.word	0x20001474

0800b4a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4aa:	e04a      	b.n	800b542 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4ac:	4b2e      	ldr	r3, [pc, #184]	; (800b568 <prvSwitchTimerLists+0xc4>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4b6:	4b2c      	ldr	r3, [pc, #176]	; (800b568 <prvSwitchTimerLists+0xc4>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fd fc7d 	bl	8008dc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4d8:	f003 0304 	and.w	r3, r3, #4
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d030      	beq.n	800b542 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	693a      	ldr	r2, [r7, #16]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d90e      	bls.n	800b510 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4fe:	4b1a      	ldr	r3, [pc, #104]	; (800b568 <prvSwitchTimerLists+0xc4>)
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3304      	adds	r3, #4
 800b506:	4619      	mov	r1, r3
 800b508:	4610      	mov	r0, r2
 800b50a:	f7fd fc22 	bl	8008d52 <vListInsert>
 800b50e:	e018      	b.n	800b542 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b510:	2300      	movs	r3, #0
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	2300      	movs	r3, #0
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	2100      	movs	r1, #0
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f7ff fd56 	bl	800afcc <xTimerGenericCommand>
 800b520:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10c      	bne.n	800b542 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52c:	b672      	cpsid	i
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	b662      	cpsie	i
 800b53c:	603b      	str	r3, [r7, #0]
}
 800b53e:	bf00      	nop
 800b540:	e7fe      	b.n	800b540 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b542:	4b09      	ldr	r3, [pc, #36]	; (800b568 <prvSwitchTimerLists+0xc4>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1af      	bne.n	800b4ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <prvSwitchTimerLists+0xc4>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b552:	4b06      	ldr	r3, [pc, #24]	; (800b56c <prvSwitchTimerLists+0xc8>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a04      	ldr	r2, [pc, #16]	; (800b568 <prvSwitchTimerLists+0xc4>)
 800b558:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b55a:	4a04      	ldr	r2, [pc, #16]	; (800b56c <prvSwitchTimerLists+0xc8>)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	6013      	str	r3, [r2, #0]
}
 800b560:	bf00      	nop
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	2000146c 	.word	0x2000146c
 800b56c:	20001470 	.word	0x20001470

0800b570 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b576:	f000 f949 	bl	800b80c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b57a:	4b15      	ldr	r3, [pc, #84]	; (800b5d0 <prvCheckForValidListAndQueue+0x60>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d120      	bne.n	800b5c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b582:	4814      	ldr	r0, [pc, #80]	; (800b5d4 <prvCheckForValidListAndQueue+0x64>)
 800b584:	f7fd fb94 	bl	8008cb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b588:	4813      	ldr	r0, [pc, #76]	; (800b5d8 <prvCheckForValidListAndQueue+0x68>)
 800b58a:	f7fd fb91 	bl	8008cb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b58e:	4b13      	ldr	r3, [pc, #76]	; (800b5dc <prvCheckForValidListAndQueue+0x6c>)
 800b590:	4a10      	ldr	r2, [pc, #64]	; (800b5d4 <prvCheckForValidListAndQueue+0x64>)
 800b592:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b594:	4b12      	ldr	r3, [pc, #72]	; (800b5e0 <prvCheckForValidListAndQueue+0x70>)
 800b596:	4a10      	ldr	r2, [pc, #64]	; (800b5d8 <prvCheckForValidListAndQueue+0x68>)
 800b598:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b59a:	2300      	movs	r3, #0
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	4b11      	ldr	r3, [pc, #68]	; (800b5e4 <prvCheckForValidListAndQueue+0x74>)
 800b5a0:	4a11      	ldr	r2, [pc, #68]	; (800b5e8 <prvCheckForValidListAndQueue+0x78>)
 800b5a2:	2110      	movs	r1, #16
 800b5a4:	200a      	movs	r0, #10
 800b5a6:	f7fd fca1 	bl	8008eec <xQueueGenericCreateStatic>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	4a08      	ldr	r2, [pc, #32]	; (800b5d0 <prvCheckForValidListAndQueue+0x60>)
 800b5ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b5b0:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <prvCheckForValidListAndQueue+0x60>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d005      	beq.n	800b5c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b5b8:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <prvCheckForValidListAndQueue+0x60>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	490b      	ldr	r1, [pc, #44]	; (800b5ec <prvCheckForValidListAndQueue+0x7c>)
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe fc44 	bl	8009e4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5c4:	f000 f956 	bl	800b874 <vPortExitCritical>
}
 800b5c8:	bf00      	nop
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	20001474 	.word	0x20001474
 800b5d4:	20001444 	.word	0x20001444
 800b5d8:	20001458 	.word	0x20001458
 800b5dc:	2000146c 	.word	0x2000146c
 800b5e0:	20001470 	.word	0x20001470
 800b5e4:	20001520 	.word	0x20001520
 800b5e8:	20001480 	.word	0x20001480
 800b5ec:	0800ce58 	.word	0x0800ce58

0800b5f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3b04      	subs	r3, #4
 800b600:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	3b04      	subs	r3, #4
 800b60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	f023 0201 	bic.w	r2, r3, #1
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3b04      	subs	r3, #4
 800b61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b620:	4a0c      	ldr	r2, [pc, #48]	; (800b654 <pxPortInitialiseStack+0x64>)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	3b14      	subs	r3, #20
 800b62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	3b04      	subs	r3, #4
 800b636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f06f 0202 	mvn.w	r2, #2
 800b63e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	3b20      	subs	r3, #32
 800b644:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b646:	68fb      	ldr	r3, [r7, #12]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	0800b659 	.word	0x0800b659

0800b658 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b662:	4b14      	ldr	r3, [pc, #80]	; (800b6b4 <prvTaskExitError+0x5c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66a:	d00c      	beq.n	800b686 <prvTaskExitError+0x2e>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	b672      	cpsid	i
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	b662      	cpsie	i
 800b680:	60fb      	str	r3, [r7, #12]
}
 800b682:	bf00      	nop
 800b684:	e7fe      	b.n	800b684 <prvTaskExitError+0x2c>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	b672      	cpsid	i
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	b662      	cpsie	i
 800b69a:	60bb      	str	r3, [r7, #8]
}
 800b69c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b69e:	bf00      	nop
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d0fc      	beq.n	800b6a0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6a6:	bf00      	nop
 800b6a8:	bf00      	nop
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr
 800b6b4:	20000018 	.word	0x20000018
	...

0800b6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6c0:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <pxCurrentTCBConst2>)
 800b6c2:	6819      	ldr	r1, [r3, #0]
 800b6c4:	6808      	ldr	r0, [r1, #0]
 800b6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ca:	f380 8809 	msr	PSP, r0
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f04f 0000 	mov.w	r0, #0
 800b6d6:	f380 8811 	msr	BASEPRI, r0
 800b6da:	4770      	bx	lr
 800b6dc:	f3af 8000 	nop.w

0800b6e0 <pxCurrentTCBConst2>:
 800b6e0:	20000f44 	.word	0x20000f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b6e4:	bf00      	nop
 800b6e6:	bf00      	nop

0800b6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b6e8:	4808      	ldr	r0, [pc, #32]	; (800b70c <prvPortStartFirstTask+0x24>)
 800b6ea:	6800      	ldr	r0, [r0, #0]
 800b6ec:	6800      	ldr	r0, [r0, #0]
 800b6ee:	f380 8808 	msr	MSP, r0
 800b6f2:	f04f 0000 	mov.w	r0, #0
 800b6f6:	f380 8814 	msr	CONTROL, r0
 800b6fa:	b662      	cpsie	i
 800b6fc:	b661      	cpsie	f
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	df00      	svc	0
 800b708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b70a:	bf00      	nop
 800b70c:	e000ed08 	.word	0xe000ed08

0800b710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b716:	4b37      	ldr	r3, [pc, #220]	; (800b7f4 <xPortStartScheduler+0xe4>)
 800b718:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	22ff      	movs	r2, #255	; 0xff
 800b726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	b2db      	uxtb	r3, r3
 800b734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	4b2f      	ldr	r3, [pc, #188]	; (800b7f8 <xPortStartScheduler+0xe8>)
 800b73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b73e:	4b2f      	ldr	r3, [pc, #188]	; (800b7fc <xPortStartScheduler+0xec>)
 800b740:	2207      	movs	r2, #7
 800b742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b744:	e009      	b.n	800b75a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b746:	4b2d      	ldr	r3, [pc, #180]	; (800b7fc <xPortStartScheduler+0xec>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	4a2b      	ldr	r2, [pc, #172]	; (800b7fc <xPortStartScheduler+0xec>)
 800b74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b750:	78fb      	ldrb	r3, [r7, #3]
 800b752:	b2db      	uxtb	r3, r3
 800b754:	005b      	lsls	r3, r3, #1
 800b756:	b2db      	uxtb	r3, r3
 800b758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b762:	2b80      	cmp	r3, #128	; 0x80
 800b764:	d0ef      	beq.n	800b746 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b766:	4b25      	ldr	r3, [pc, #148]	; (800b7fc <xPortStartScheduler+0xec>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f1c3 0307 	rsb	r3, r3, #7
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d00c      	beq.n	800b78c <xPortStartScheduler+0x7c>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	b672      	cpsid	i
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	b662      	cpsie	i
 800b786:	60bb      	str	r3, [r7, #8]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b78c:	4b1b      	ldr	r3, [pc, #108]	; (800b7fc <xPortStartScheduler+0xec>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	021b      	lsls	r3, r3, #8
 800b792:	4a1a      	ldr	r2, [pc, #104]	; (800b7fc <xPortStartScheduler+0xec>)
 800b794:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b796:	4b19      	ldr	r3, [pc, #100]	; (800b7fc <xPortStartScheduler+0xec>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b79e:	4a17      	ldr	r2, [pc, #92]	; (800b7fc <xPortStartScheduler+0xec>)
 800b7a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	b2da      	uxtb	r2, r3
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b7aa:	4b15      	ldr	r3, [pc, #84]	; (800b800 <xPortStartScheduler+0xf0>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a14      	ldr	r2, [pc, #80]	; (800b800 <xPortStartScheduler+0xf0>)
 800b7b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b7b6:	4b12      	ldr	r3, [pc, #72]	; (800b800 <xPortStartScheduler+0xf0>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a11      	ldr	r2, [pc, #68]	; (800b800 <xPortStartScheduler+0xf0>)
 800b7bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b7c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b7c2:	f000 f8dd 	bl	800b980 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b7c6:	4b0f      	ldr	r3, [pc, #60]	; (800b804 <xPortStartScheduler+0xf4>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b7cc:	f000 f8fc 	bl	800b9c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7d0:	4b0d      	ldr	r3, [pc, #52]	; (800b808 <xPortStartScheduler+0xf8>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a0c      	ldr	r2, [pc, #48]	; (800b808 <xPortStartScheduler+0xf8>)
 800b7d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b7da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b7dc:	f7ff ff84 	bl	800b6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b7e0:	f7fe ff4a 	bl	800a678 <vTaskSwitchContext>
	prvTaskExitError();
 800b7e4:	f7ff ff38 	bl	800b658 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	e000e400 	.word	0xe000e400
 800b7f8:	20001570 	.word	0x20001570
 800b7fc:	20001574 	.word	0x20001574
 800b800:	e000ed20 	.word	0xe000ed20
 800b804:	20000018 	.word	0x20000018
 800b808:	e000ef34 	.word	0xe000ef34

0800b80c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	b672      	cpsid	i
 800b818:	f383 8811 	msr	BASEPRI, r3
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	f3bf 8f4f 	dsb	sy
 800b824:	b662      	cpsie	i
 800b826:	607b      	str	r3, [r7, #4]
}
 800b828:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b82a:	4b10      	ldr	r3, [pc, #64]	; (800b86c <vPortEnterCritical+0x60>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3301      	adds	r3, #1
 800b830:	4a0e      	ldr	r2, [pc, #56]	; (800b86c <vPortEnterCritical+0x60>)
 800b832:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b834:	4b0d      	ldr	r3, [pc, #52]	; (800b86c <vPortEnterCritical+0x60>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d111      	bne.n	800b860 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b83c:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <vPortEnterCritical+0x64>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00c      	beq.n	800b860 <vPortEnterCritical+0x54>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	b672      	cpsid	i
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	b662      	cpsie	i
 800b85a:	603b      	str	r3, [r7, #0]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <vPortEnterCritical+0x52>
	}
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	20000018 	.word	0x20000018
 800b870:	e000ed04 	.word	0xe000ed04

0800b874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b87a:	4b13      	ldr	r3, [pc, #76]	; (800b8c8 <vPortExitCritical+0x54>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10c      	bne.n	800b89c <vPortExitCritical+0x28>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b886:	b672      	cpsid	i
 800b888:	f383 8811 	msr	BASEPRI, r3
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	b662      	cpsie	i
 800b896:	607b      	str	r3, [r7, #4]
}
 800b898:	bf00      	nop
 800b89a:	e7fe      	b.n	800b89a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b89c:	4b0a      	ldr	r3, [pc, #40]	; (800b8c8 <vPortExitCritical+0x54>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	4a09      	ldr	r2, [pc, #36]	; (800b8c8 <vPortExitCritical+0x54>)
 800b8a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8a6:	4b08      	ldr	r3, [pc, #32]	; (800b8c8 <vPortExitCritical+0x54>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d105      	bne.n	800b8ba <vPortExitCritical+0x46>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	f383 8811 	msr	BASEPRI, r3
}
 800b8b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b8ba:	bf00      	nop
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	20000018 	.word	0x20000018
 800b8cc:	00000000 	.word	0x00000000

0800b8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b8d0:	f3ef 8009 	mrs	r0, PSP
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	4b15      	ldr	r3, [pc, #84]	; (800b930 <pxCurrentTCBConst>)
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	f01e 0f10 	tst.w	lr, #16
 800b8e0:	bf08      	it	eq
 800b8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ea:	6010      	str	r0, [r2, #0]
 800b8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8f4:	b672      	cpsid	i
 800b8f6:	f380 8811 	msr	BASEPRI, r0
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	b662      	cpsie	i
 800b904:	f7fe feb8 	bl	800a678 <vTaskSwitchContext>
 800b908:	f04f 0000 	mov.w	r0, #0
 800b90c:	f380 8811 	msr	BASEPRI, r0
 800b910:	bc09      	pop	{r0, r3}
 800b912:	6819      	ldr	r1, [r3, #0]
 800b914:	6808      	ldr	r0, [r1, #0]
 800b916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91a:	f01e 0f10 	tst.w	lr, #16
 800b91e:	bf08      	it	eq
 800b920:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b924:	f380 8809 	msr	PSP, r0
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop

0800b930 <pxCurrentTCBConst>:
 800b930:	20000f44 	.word	0x20000f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop

0800b938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	b672      	cpsid	i
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	b662      	cpsie	i
 800b952:	607b      	str	r3, [r7, #4]
}
 800b954:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b956:	f7fe fdd3 	bl	800a500 <xTaskIncrementTick>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b960:	4b06      	ldr	r3, [pc, #24]	; (800b97c <SysTick_Handler+0x44>)
 800b962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b966:	601a      	str	r2, [r3, #0]
 800b968:	2300      	movs	r3, #0
 800b96a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	f383 8811 	msr	BASEPRI, r3
}
 800b972:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b974:	bf00      	nop
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	e000ed04 	.word	0xe000ed04

0800b980 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b980:	b480      	push	{r7}
 800b982:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b984:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <vPortSetupTimerInterrupt+0x34>)
 800b986:	2200      	movs	r2, #0
 800b988:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b98a:	4b0b      	ldr	r3, [pc, #44]	; (800b9b8 <vPortSetupTimerInterrupt+0x38>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b990:	4b0a      	ldr	r3, [pc, #40]	; (800b9bc <vPortSetupTimerInterrupt+0x3c>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a0a      	ldr	r2, [pc, #40]	; (800b9c0 <vPortSetupTimerInterrupt+0x40>)
 800b996:	fba2 2303 	umull	r2, r3, r2, r3
 800b99a:	099b      	lsrs	r3, r3, #6
 800b99c:	4a09      	ldr	r2, [pc, #36]	; (800b9c4 <vPortSetupTimerInterrupt+0x44>)
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9a2:	4b04      	ldr	r3, [pc, #16]	; (800b9b4 <vPortSetupTimerInterrupt+0x34>)
 800b9a4:	2207      	movs	r2, #7
 800b9a6:	601a      	str	r2, [r3, #0]
}
 800b9a8:	bf00      	nop
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	e000e010 	.word	0xe000e010
 800b9b8:	e000e018 	.word	0xe000e018
 800b9bc:	2000000c 	.word	0x2000000c
 800b9c0:	10624dd3 	.word	0x10624dd3
 800b9c4:	e000e014 	.word	0xe000e014

0800b9c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b9c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b9d8 <vPortEnableVFP+0x10>
 800b9cc:	6801      	ldr	r1, [r0, #0]
 800b9ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b9d2:	6001      	str	r1, [r0, #0]
 800b9d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b9d6:	bf00      	nop
 800b9d8:	e000ed88 	.word	0xe000ed88

0800b9dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9e2:	f3ef 8305 	mrs	r3, IPSR
 800b9e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2b0f      	cmp	r3, #15
 800b9ec:	d916      	bls.n	800ba1c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9ee:	4a19      	ldr	r2, [pc, #100]	; (800ba54 <vPortValidateInterruptPriority+0x78>)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9f8:	4b17      	ldr	r3, [pc, #92]	; (800ba58 <vPortValidateInterruptPriority+0x7c>)
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	7afa      	ldrb	r2, [r7, #11]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d20c      	bcs.n	800ba1c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba06:	b672      	cpsid	i
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	b662      	cpsie	i
 800ba16:	607b      	str	r3, [r7, #4]
}
 800ba18:	bf00      	nop
 800ba1a:	e7fe      	b.n	800ba1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba1c:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <vPortValidateInterruptPriority+0x80>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba24:	4b0e      	ldr	r3, [pc, #56]	; (800ba60 <vPortValidateInterruptPriority+0x84>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d90c      	bls.n	800ba46 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba30:	b672      	cpsid	i
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	b662      	cpsie	i
 800ba40:	603b      	str	r3, [r7, #0]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <vPortValidateInterruptPriority+0x68>
	}
 800ba46:	bf00      	nop
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	e000e3f0 	.word	0xe000e3f0
 800ba58:	20001570 	.word	0x20001570
 800ba5c:	e000ed0c 	.word	0xe000ed0c
 800ba60:	20001574 	.word	0x20001574

0800ba64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b08a      	sub	sp, #40	; 0x28
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba70:	f7fe fc88 	bl	800a384 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba74:	4b5b      	ldr	r3, [pc, #364]	; (800bbe4 <pvPortMalloc+0x180>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba7c:	f000 f91a 	bl	800bcb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba80:	4b59      	ldr	r3, [pc, #356]	; (800bbe8 <pvPortMalloc+0x184>)
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4013      	ands	r3, r2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f040 8092 	bne.w	800bbb2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d01f      	beq.n	800bad4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ba94:	2208      	movs	r2, #8
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4413      	add	r3, r2
 800ba9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f003 0307 	and.w	r3, r3, #7
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d016      	beq.n	800bad4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f023 0307 	bic.w	r3, r3, #7
 800baac:	3308      	adds	r3, #8
 800baae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f003 0307 	and.w	r3, r3, #7
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00c      	beq.n	800bad4 <pvPortMalloc+0x70>
	__asm volatile
 800baba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babe:	b672      	cpsid	i
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	b662      	cpsie	i
 800bace:	617b      	str	r3, [r7, #20]
}
 800bad0:	bf00      	nop
 800bad2:	e7fe      	b.n	800bad2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d06b      	beq.n	800bbb2 <pvPortMalloc+0x14e>
 800bada:	4b44      	ldr	r3, [pc, #272]	; (800bbec <pvPortMalloc+0x188>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d866      	bhi.n	800bbb2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bae4:	4b42      	ldr	r3, [pc, #264]	; (800bbf0 <pvPortMalloc+0x18c>)
 800bae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bae8:	4b41      	ldr	r3, [pc, #260]	; (800bbf0 <pvPortMalloc+0x18c>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800baee:	e004      	b.n	800bafa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d903      	bls.n	800bb0c <pvPortMalloc+0xa8>
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1f1      	bne.n	800baf0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb0c:	4b35      	ldr	r3, [pc, #212]	; (800bbe4 <pvPortMalloc+0x180>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d04d      	beq.n	800bbb2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2208      	movs	r2, #8
 800bb1c:	4413      	add	r3, r2
 800bb1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	6a3b      	ldr	r3, [r7, #32]
 800bb26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	1ad2      	subs	r2, r2, r3
 800bb30:	2308      	movs	r3, #8
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d921      	bls.n	800bb7c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	f003 0307 	and.w	r3, r3, #7
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00c      	beq.n	800bb64 <pvPortMalloc+0x100>
	__asm volatile
 800bb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4e:	b672      	cpsid	i
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	b662      	cpsie	i
 800bb5e:	613b      	str	r3, [r7, #16]
}
 800bb60:	bf00      	nop
 800bb62:	e7fe      	b.n	800bb62 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	1ad2      	subs	r2, r2, r3
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb76:	69b8      	ldr	r0, [r7, #24]
 800bb78:	f000 f8fe 	bl	800bd78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb7c:	4b1b      	ldr	r3, [pc, #108]	; (800bbec <pvPortMalloc+0x188>)
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	4a19      	ldr	r2, [pc, #100]	; (800bbec <pvPortMalloc+0x188>)
 800bb88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb8a:	4b18      	ldr	r3, [pc, #96]	; (800bbec <pvPortMalloc+0x188>)
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	4b19      	ldr	r3, [pc, #100]	; (800bbf4 <pvPortMalloc+0x190>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d203      	bcs.n	800bb9e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb96:	4b15      	ldr	r3, [pc, #84]	; (800bbec <pvPortMalloc+0x188>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a16      	ldr	r2, [pc, #88]	; (800bbf4 <pvPortMalloc+0x190>)
 800bb9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	4b11      	ldr	r3, [pc, #68]	; (800bbe8 <pvPortMalloc+0x184>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	431a      	orrs	r2, r3
 800bba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbae:	2200      	movs	r2, #0
 800bbb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bbb2:	f7fe fbf5 	bl	800a3a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	f003 0307 	and.w	r3, r3, #7
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00c      	beq.n	800bbda <pvPortMalloc+0x176>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	b672      	cpsid	i
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	b662      	cpsie	i
 800bbd4:	60fb      	str	r3, [r7, #12]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <pvPortMalloc+0x174>
	return pvReturn;
 800bbda:	69fb      	ldr	r3, [r7, #28]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3728      	adds	r7, #40	; 0x28
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	20005180 	.word	0x20005180
 800bbe8:	2000518c 	.word	0x2000518c
 800bbec:	20005184 	.word	0x20005184
 800bbf0:	20005178 	.word	0x20005178
 800bbf4:	20005188 	.word	0x20005188

0800bbf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d04c      	beq.n	800bca4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc0a:	2308      	movs	r3, #8
 800bc0c:	425b      	negs	r3, r3
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	4413      	add	r3, r2
 800bc12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	4b23      	ldr	r3, [pc, #140]	; (800bcac <vPortFree+0xb4>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4013      	ands	r3, r2
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10c      	bne.n	800bc40 <vPortFree+0x48>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	b672      	cpsid	i
 800bc2c:	f383 8811 	msr	BASEPRI, r3
 800bc30:	f3bf 8f6f 	isb	sy
 800bc34:	f3bf 8f4f 	dsb	sy
 800bc38:	b662      	cpsie	i
 800bc3a:	60fb      	str	r3, [r7, #12]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00c      	beq.n	800bc62 <vPortFree+0x6a>
	__asm volatile
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	b672      	cpsid	i
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	b662      	cpsie	i
 800bc5c:	60bb      	str	r3, [r7, #8]
}
 800bc5e:	bf00      	nop
 800bc60:	e7fe      	b.n	800bc60 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	4b11      	ldr	r3, [pc, #68]	; (800bcac <vPortFree+0xb4>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d019      	beq.n	800bca4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d115      	bne.n	800bca4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	4b0b      	ldr	r3, [pc, #44]	; (800bcac <vPortFree+0xb4>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	43db      	mvns	r3, r3
 800bc82:	401a      	ands	r2, r3
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc88:	f7fe fb7c 	bl	800a384 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <vPortFree+0xb8>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4413      	add	r3, r2
 800bc96:	4a06      	ldr	r2, [pc, #24]	; (800bcb0 <vPortFree+0xb8>)
 800bc98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc9a:	6938      	ldr	r0, [r7, #16]
 800bc9c:	f000 f86c 	bl	800bd78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bca0:	f7fe fb7e 	bl	800a3a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bca4:	bf00      	nop
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	2000518c 	.word	0x2000518c
 800bcb0:	20005184 	.word	0x20005184

0800bcb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bcbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcc0:	4b27      	ldr	r3, [pc, #156]	; (800bd60 <prvHeapInit+0xac>)
 800bcc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f003 0307 	and.w	r3, r3, #7
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00c      	beq.n	800bce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3307      	adds	r3, #7
 800bcd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f023 0307 	bic.w	r3, r3, #7
 800bcda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	4a1f      	ldr	r2, [pc, #124]	; (800bd60 <prvHeapInit+0xac>)
 800bce4:	4413      	add	r3, r2
 800bce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcec:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <prvHeapInit+0xb0>)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <prvHeapInit+0xb0>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd00:	2208      	movs	r2, #8
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	1a9b      	subs	r3, r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 0307 	bic.w	r3, r3, #7
 800bd0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	4a15      	ldr	r2, [pc, #84]	; (800bd68 <prvHeapInit+0xb4>)
 800bd14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd16:	4b14      	ldr	r3, [pc, #80]	; (800bd68 <prvHeapInit+0xb4>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd1e:	4b12      	ldr	r3, [pc, #72]	; (800bd68 <prvHeapInit+0xb4>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2200      	movs	r2, #0
 800bd24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	1ad2      	subs	r2, r2, r3
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd34:	4b0c      	ldr	r3, [pc, #48]	; (800bd68 <prvHeapInit+0xb4>)
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	4a0a      	ldr	r2, [pc, #40]	; (800bd6c <prvHeapInit+0xb8>)
 800bd42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	4a09      	ldr	r2, [pc, #36]	; (800bd70 <prvHeapInit+0xbc>)
 800bd4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd4c:	4b09      	ldr	r3, [pc, #36]	; (800bd74 <prvHeapInit+0xc0>)
 800bd4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd52:	601a      	str	r2, [r3, #0]
}
 800bd54:	bf00      	nop
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	20001578 	.word	0x20001578
 800bd64:	20005178 	.word	0x20005178
 800bd68:	20005180 	.word	0x20005180
 800bd6c:	20005188 	.word	0x20005188
 800bd70:	20005184 	.word	0x20005184
 800bd74:	2000518c 	.word	0x2000518c

0800bd78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd80:	4b28      	ldr	r3, [pc, #160]	; (800be24 <prvInsertBlockIntoFreeList+0xac>)
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e002      	b.n	800bd8c <prvInsertBlockIntoFreeList+0x14>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d8f7      	bhi.n	800bd86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4413      	add	r3, r2
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d108      	bne.n	800bdba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	685a      	ldr	r2, [r3, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	441a      	add	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	441a      	add	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d118      	bne.n	800be00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	4b15      	ldr	r3, [pc, #84]	; (800be28 <prvInsertBlockIntoFreeList+0xb0>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d00d      	beq.n	800bdf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	441a      	add	r2, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	e008      	b.n	800be08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bdf6:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <prvInsertBlockIntoFreeList+0xb0>)
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	e003      	b.n	800be08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d002      	beq.n	800be16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	20005178 	.word	0x20005178
 800be28:	20005180 	.word	0x20005180

0800be2c <__errno>:
 800be2c:	4b01      	ldr	r3, [pc, #4]	; (800be34 <__errno+0x8>)
 800be2e:	6818      	ldr	r0, [r3, #0]
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	2000001c 	.word	0x2000001c

0800be38 <__libc_init_array>:
 800be38:	b570      	push	{r4, r5, r6, lr}
 800be3a:	4d0d      	ldr	r5, [pc, #52]	; (800be70 <__libc_init_array+0x38>)
 800be3c:	4c0d      	ldr	r4, [pc, #52]	; (800be74 <__libc_init_array+0x3c>)
 800be3e:	1b64      	subs	r4, r4, r5
 800be40:	10a4      	asrs	r4, r4, #2
 800be42:	2600      	movs	r6, #0
 800be44:	42a6      	cmp	r6, r4
 800be46:	d109      	bne.n	800be5c <__libc_init_array+0x24>
 800be48:	4d0b      	ldr	r5, [pc, #44]	; (800be78 <__libc_init_array+0x40>)
 800be4a:	4c0c      	ldr	r4, [pc, #48]	; (800be7c <__libc_init_array+0x44>)
 800be4c:	f000 ffbc 	bl	800cdc8 <_init>
 800be50:	1b64      	subs	r4, r4, r5
 800be52:	10a4      	asrs	r4, r4, #2
 800be54:	2600      	movs	r6, #0
 800be56:	42a6      	cmp	r6, r4
 800be58:	d105      	bne.n	800be66 <__libc_init_array+0x2e>
 800be5a:	bd70      	pop	{r4, r5, r6, pc}
 800be5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800be60:	4798      	blx	r3
 800be62:	3601      	adds	r6, #1
 800be64:	e7ee      	b.n	800be44 <__libc_init_array+0xc>
 800be66:	f855 3b04 	ldr.w	r3, [r5], #4
 800be6a:	4798      	blx	r3
 800be6c:	3601      	adds	r6, #1
 800be6e:	e7f2      	b.n	800be56 <__libc_init_array+0x1e>
 800be70:	0800cfbc 	.word	0x0800cfbc
 800be74:	0800cfbc 	.word	0x0800cfbc
 800be78:	0800cfbc 	.word	0x0800cfbc
 800be7c:	0800cfc0 	.word	0x0800cfc0

0800be80 <memcpy>:
 800be80:	440a      	add	r2, r1
 800be82:	4291      	cmp	r1, r2
 800be84:	f100 33ff 	add.w	r3, r0, #4294967295
 800be88:	d100      	bne.n	800be8c <memcpy+0xc>
 800be8a:	4770      	bx	lr
 800be8c:	b510      	push	{r4, lr}
 800be8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be96:	4291      	cmp	r1, r2
 800be98:	d1f9      	bne.n	800be8e <memcpy+0xe>
 800be9a:	bd10      	pop	{r4, pc}

0800be9c <memset>:
 800be9c:	4402      	add	r2, r0
 800be9e:	4603      	mov	r3, r0
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d100      	bne.n	800bea6 <memset+0xa>
 800bea4:	4770      	bx	lr
 800bea6:	f803 1b01 	strb.w	r1, [r3], #1
 800beaa:	e7f9      	b.n	800bea0 <memset+0x4>

0800beac <iprintf>:
 800beac:	b40f      	push	{r0, r1, r2, r3}
 800beae:	4b0a      	ldr	r3, [pc, #40]	; (800bed8 <iprintf+0x2c>)
 800beb0:	b513      	push	{r0, r1, r4, lr}
 800beb2:	681c      	ldr	r4, [r3, #0]
 800beb4:	b124      	cbz	r4, 800bec0 <iprintf+0x14>
 800beb6:	69a3      	ldr	r3, [r4, #24]
 800beb8:	b913      	cbnz	r3, 800bec0 <iprintf+0x14>
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 f866 	bl	800bf8c <__sinit>
 800bec0:	ab05      	add	r3, sp, #20
 800bec2:	9a04      	ldr	r2, [sp, #16]
 800bec4:	68a1      	ldr	r1, [r4, #8]
 800bec6:	9301      	str	r3, [sp, #4]
 800bec8:	4620      	mov	r0, r4
 800beca:	f000 f9bd 	bl	800c248 <_vfiprintf_r>
 800bece:	b002      	add	sp, #8
 800bed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed4:	b004      	add	sp, #16
 800bed6:	4770      	bx	lr
 800bed8:	2000001c 	.word	0x2000001c

0800bedc <std>:
 800bedc:	2300      	movs	r3, #0
 800bede:	b510      	push	{r4, lr}
 800bee0:	4604      	mov	r4, r0
 800bee2:	e9c0 3300 	strd	r3, r3, [r0]
 800bee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800beea:	6083      	str	r3, [r0, #8]
 800beec:	8181      	strh	r1, [r0, #12]
 800beee:	6643      	str	r3, [r0, #100]	; 0x64
 800bef0:	81c2      	strh	r2, [r0, #14]
 800bef2:	6183      	str	r3, [r0, #24]
 800bef4:	4619      	mov	r1, r3
 800bef6:	2208      	movs	r2, #8
 800bef8:	305c      	adds	r0, #92	; 0x5c
 800befa:	f7ff ffcf 	bl	800be9c <memset>
 800befe:	4b05      	ldr	r3, [pc, #20]	; (800bf14 <std+0x38>)
 800bf00:	6263      	str	r3, [r4, #36]	; 0x24
 800bf02:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <std+0x3c>)
 800bf04:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf06:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <std+0x40>)
 800bf08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf0a:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <std+0x44>)
 800bf0c:	6224      	str	r4, [r4, #32]
 800bf0e:	6323      	str	r3, [r4, #48]	; 0x30
 800bf10:	bd10      	pop	{r4, pc}
 800bf12:	bf00      	nop
 800bf14:	0800c7f1 	.word	0x0800c7f1
 800bf18:	0800c813 	.word	0x0800c813
 800bf1c:	0800c84b 	.word	0x0800c84b
 800bf20:	0800c86f 	.word	0x0800c86f

0800bf24 <_cleanup_r>:
 800bf24:	4901      	ldr	r1, [pc, #4]	; (800bf2c <_cleanup_r+0x8>)
 800bf26:	f000 b8af 	b.w	800c088 <_fwalk_reent>
 800bf2a:	bf00      	nop
 800bf2c:	0800cb49 	.word	0x0800cb49

0800bf30 <__sfmoreglue>:
 800bf30:	b570      	push	{r4, r5, r6, lr}
 800bf32:	2268      	movs	r2, #104	; 0x68
 800bf34:	1e4d      	subs	r5, r1, #1
 800bf36:	4355      	muls	r5, r2
 800bf38:	460e      	mov	r6, r1
 800bf3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf3e:	f000 f8e5 	bl	800c10c <_malloc_r>
 800bf42:	4604      	mov	r4, r0
 800bf44:	b140      	cbz	r0, 800bf58 <__sfmoreglue+0x28>
 800bf46:	2100      	movs	r1, #0
 800bf48:	e9c0 1600 	strd	r1, r6, [r0]
 800bf4c:	300c      	adds	r0, #12
 800bf4e:	60a0      	str	r0, [r4, #8]
 800bf50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf54:	f7ff ffa2 	bl	800be9c <memset>
 800bf58:	4620      	mov	r0, r4
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}

0800bf5c <__sfp_lock_acquire>:
 800bf5c:	4801      	ldr	r0, [pc, #4]	; (800bf64 <__sfp_lock_acquire+0x8>)
 800bf5e:	f000 b8b3 	b.w	800c0c8 <__retarget_lock_acquire_recursive>
 800bf62:	bf00      	nop
 800bf64:	20005191 	.word	0x20005191

0800bf68 <__sfp_lock_release>:
 800bf68:	4801      	ldr	r0, [pc, #4]	; (800bf70 <__sfp_lock_release+0x8>)
 800bf6a:	f000 b8ae 	b.w	800c0ca <__retarget_lock_release_recursive>
 800bf6e:	bf00      	nop
 800bf70:	20005191 	.word	0x20005191

0800bf74 <__sinit_lock_acquire>:
 800bf74:	4801      	ldr	r0, [pc, #4]	; (800bf7c <__sinit_lock_acquire+0x8>)
 800bf76:	f000 b8a7 	b.w	800c0c8 <__retarget_lock_acquire_recursive>
 800bf7a:	bf00      	nop
 800bf7c:	20005192 	.word	0x20005192

0800bf80 <__sinit_lock_release>:
 800bf80:	4801      	ldr	r0, [pc, #4]	; (800bf88 <__sinit_lock_release+0x8>)
 800bf82:	f000 b8a2 	b.w	800c0ca <__retarget_lock_release_recursive>
 800bf86:	bf00      	nop
 800bf88:	20005192 	.word	0x20005192

0800bf8c <__sinit>:
 800bf8c:	b510      	push	{r4, lr}
 800bf8e:	4604      	mov	r4, r0
 800bf90:	f7ff fff0 	bl	800bf74 <__sinit_lock_acquire>
 800bf94:	69a3      	ldr	r3, [r4, #24]
 800bf96:	b11b      	cbz	r3, 800bfa0 <__sinit+0x14>
 800bf98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf9c:	f7ff bff0 	b.w	800bf80 <__sinit_lock_release>
 800bfa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bfa4:	6523      	str	r3, [r4, #80]	; 0x50
 800bfa6:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <__sinit+0x68>)
 800bfa8:	4a13      	ldr	r2, [pc, #76]	; (800bff8 <__sinit+0x6c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfae:	42a3      	cmp	r3, r4
 800bfb0:	bf04      	itt	eq
 800bfb2:	2301      	moveq	r3, #1
 800bfb4:	61a3      	streq	r3, [r4, #24]
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 f820 	bl	800bffc <__sfp>
 800bfbc:	6060      	str	r0, [r4, #4]
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 f81c 	bl	800bffc <__sfp>
 800bfc4:	60a0      	str	r0, [r4, #8]
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 f818 	bl	800bffc <__sfp>
 800bfcc:	2200      	movs	r2, #0
 800bfce:	60e0      	str	r0, [r4, #12]
 800bfd0:	2104      	movs	r1, #4
 800bfd2:	6860      	ldr	r0, [r4, #4]
 800bfd4:	f7ff ff82 	bl	800bedc <std>
 800bfd8:	68a0      	ldr	r0, [r4, #8]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	2109      	movs	r1, #9
 800bfde:	f7ff ff7d 	bl	800bedc <std>
 800bfe2:	68e0      	ldr	r0, [r4, #12]
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	2112      	movs	r1, #18
 800bfe8:	f7ff ff78 	bl	800bedc <std>
 800bfec:	2301      	movs	r3, #1
 800bfee:	61a3      	str	r3, [r4, #24]
 800bff0:	e7d2      	b.n	800bf98 <__sinit+0xc>
 800bff2:	bf00      	nop
 800bff4:	0800cf1c 	.word	0x0800cf1c
 800bff8:	0800bf25 	.word	0x0800bf25

0800bffc <__sfp>:
 800bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffe:	4607      	mov	r7, r0
 800c000:	f7ff ffac 	bl	800bf5c <__sfp_lock_acquire>
 800c004:	4b1e      	ldr	r3, [pc, #120]	; (800c080 <__sfp+0x84>)
 800c006:	681e      	ldr	r6, [r3, #0]
 800c008:	69b3      	ldr	r3, [r6, #24]
 800c00a:	b913      	cbnz	r3, 800c012 <__sfp+0x16>
 800c00c:	4630      	mov	r0, r6
 800c00e:	f7ff ffbd 	bl	800bf8c <__sinit>
 800c012:	3648      	adds	r6, #72	; 0x48
 800c014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c018:	3b01      	subs	r3, #1
 800c01a:	d503      	bpl.n	800c024 <__sfp+0x28>
 800c01c:	6833      	ldr	r3, [r6, #0]
 800c01e:	b30b      	cbz	r3, 800c064 <__sfp+0x68>
 800c020:	6836      	ldr	r6, [r6, #0]
 800c022:	e7f7      	b.n	800c014 <__sfp+0x18>
 800c024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c028:	b9d5      	cbnz	r5, 800c060 <__sfp+0x64>
 800c02a:	4b16      	ldr	r3, [pc, #88]	; (800c084 <__sfp+0x88>)
 800c02c:	60e3      	str	r3, [r4, #12]
 800c02e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c032:	6665      	str	r5, [r4, #100]	; 0x64
 800c034:	f000 f847 	bl	800c0c6 <__retarget_lock_init_recursive>
 800c038:	f7ff ff96 	bl	800bf68 <__sfp_lock_release>
 800c03c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c040:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c044:	6025      	str	r5, [r4, #0]
 800c046:	61a5      	str	r5, [r4, #24]
 800c048:	2208      	movs	r2, #8
 800c04a:	4629      	mov	r1, r5
 800c04c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c050:	f7ff ff24 	bl	800be9c <memset>
 800c054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c05c:	4620      	mov	r0, r4
 800c05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c060:	3468      	adds	r4, #104	; 0x68
 800c062:	e7d9      	b.n	800c018 <__sfp+0x1c>
 800c064:	2104      	movs	r1, #4
 800c066:	4638      	mov	r0, r7
 800c068:	f7ff ff62 	bl	800bf30 <__sfmoreglue>
 800c06c:	4604      	mov	r4, r0
 800c06e:	6030      	str	r0, [r6, #0]
 800c070:	2800      	cmp	r0, #0
 800c072:	d1d5      	bne.n	800c020 <__sfp+0x24>
 800c074:	f7ff ff78 	bl	800bf68 <__sfp_lock_release>
 800c078:	230c      	movs	r3, #12
 800c07a:	603b      	str	r3, [r7, #0]
 800c07c:	e7ee      	b.n	800c05c <__sfp+0x60>
 800c07e:	bf00      	nop
 800c080:	0800cf1c 	.word	0x0800cf1c
 800c084:	ffff0001 	.word	0xffff0001

0800c088 <_fwalk_reent>:
 800c088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c08c:	4606      	mov	r6, r0
 800c08e:	4688      	mov	r8, r1
 800c090:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c094:	2700      	movs	r7, #0
 800c096:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c09a:	f1b9 0901 	subs.w	r9, r9, #1
 800c09e:	d505      	bpl.n	800c0ac <_fwalk_reent+0x24>
 800c0a0:	6824      	ldr	r4, [r4, #0]
 800c0a2:	2c00      	cmp	r4, #0
 800c0a4:	d1f7      	bne.n	800c096 <_fwalk_reent+0xe>
 800c0a6:	4638      	mov	r0, r7
 800c0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ac:	89ab      	ldrh	r3, [r5, #12]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d907      	bls.n	800c0c2 <_fwalk_reent+0x3a>
 800c0b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	d003      	beq.n	800c0c2 <_fwalk_reent+0x3a>
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	4630      	mov	r0, r6
 800c0be:	47c0      	blx	r8
 800c0c0:	4307      	orrs	r7, r0
 800c0c2:	3568      	adds	r5, #104	; 0x68
 800c0c4:	e7e9      	b.n	800c09a <_fwalk_reent+0x12>

0800c0c6 <__retarget_lock_init_recursive>:
 800c0c6:	4770      	bx	lr

0800c0c8 <__retarget_lock_acquire_recursive>:
 800c0c8:	4770      	bx	lr

0800c0ca <__retarget_lock_release_recursive>:
 800c0ca:	4770      	bx	lr

0800c0cc <sbrk_aligned>:
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	4e0e      	ldr	r6, [pc, #56]	; (800c108 <sbrk_aligned+0x3c>)
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	6831      	ldr	r1, [r6, #0]
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	b911      	cbnz	r1, 800c0de <sbrk_aligned+0x12>
 800c0d8:	f000 fb7a 	bl	800c7d0 <_sbrk_r>
 800c0dc:	6030      	str	r0, [r6, #0]
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	f000 fb75 	bl	800c7d0 <_sbrk_r>
 800c0e6:	1c43      	adds	r3, r0, #1
 800c0e8:	d00a      	beq.n	800c100 <sbrk_aligned+0x34>
 800c0ea:	1cc4      	adds	r4, r0, #3
 800c0ec:	f024 0403 	bic.w	r4, r4, #3
 800c0f0:	42a0      	cmp	r0, r4
 800c0f2:	d007      	beq.n	800c104 <sbrk_aligned+0x38>
 800c0f4:	1a21      	subs	r1, r4, r0
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	f000 fb6a 	bl	800c7d0 <_sbrk_r>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	d101      	bne.n	800c104 <sbrk_aligned+0x38>
 800c100:	f04f 34ff 	mov.w	r4, #4294967295
 800c104:	4620      	mov	r0, r4
 800c106:	bd70      	pop	{r4, r5, r6, pc}
 800c108:	20005198 	.word	0x20005198

0800c10c <_malloc_r>:
 800c10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c110:	1ccd      	adds	r5, r1, #3
 800c112:	f025 0503 	bic.w	r5, r5, #3
 800c116:	3508      	adds	r5, #8
 800c118:	2d0c      	cmp	r5, #12
 800c11a:	bf38      	it	cc
 800c11c:	250c      	movcc	r5, #12
 800c11e:	2d00      	cmp	r5, #0
 800c120:	4607      	mov	r7, r0
 800c122:	db01      	blt.n	800c128 <_malloc_r+0x1c>
 800c124:	42a9      	cmp	r1, r5
 800c126:	d905      	bls.n	800c134 <_malloc_r+0x28>
 800c128:	230c      	movs	r3, #12
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	2600      	movs	r6, #0
 800c12e:	4630      	mov	r0, r6
 800c130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c134:	4e2e      	ldr	r6, [pc, #184]	; (800c1f0 <_malloc_r+0xe4>)
 800c136:	f000 fdbb 	bl	800ccb0 <__malloc_lock>
 800c13a:	6833      	ldr	r3, [r6, #0]
 800c13c:	461c      	mov	r4, r3
 800c13e:	bb34      	cbnz	r4, 800c18e <_malloc_r+0x82>
 800c140:	4629      	mov	r1, r5
 800c142:	4638      	mov	r0, r7
 800c144:	f7ff ffc2 	bl	800c0cc <sbrk_aligned>
 800c148:	1c43      	adds	r3, r0, #1
 800c14a:	4604      	mov	r4, r0
 800c14c:	d14d      	bne.n	800c1ea <_malloc_r+0xde>
 800c14e:	6834      	ldr	r4, [r6, #0]
 800c150:	4626      	mov	r6, r4
 800c152:	2e00      	cmp	r6, #0
 800c154:	d140      	bne.n	800c1d8 <_malloc_r+0xcc>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	4631      	mov	r1, r6
 800c15a:	4638      	mov	r0, r7
 800c15c:	eb04 0803 	add.w	r8, r4, r3
 800c160:	f000 fb36 	bl	800c7d0 <_sbrk_r>
 800c164:	4580      	cmp	r8, r0
 800c166:	d13a      	bne.n	800c1de <_malloc_r+0xd2>
 800c168:	6821      	ldr	r1, [r4, #0]
 800c16a:	3503      	adds	r5, #3
 800c16c:	1a6d      	subs	r5, r5, r1
 800c16e:	f025 0503 	bic.w	r5, r5, #3
 800c172:	3508      	adds	r5, #8
 800c174:	2d0c      	cmp	r5, #12
 800c176:	bf38      	it	cc
 800c178:	250c      	movcc	r5, #12
 800c17a:	4629      	mov	r1, r5
 800c17c:	4638      	mov	r0, r7
 800c17e:	f7ff ffa5 	bl	800c0cc <sbrk_aligned>
 800c182:	3001      	adds	r0, #1
 800c184:	d02b      	beq.n	800c1de <_malloc_r+0xd2>
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	442b      	add	r3, r5
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	e00e      	b.n	800c1ac <_malloc_r+0xa0>
 800c18e:	6822      	ldr	r2, [r4, #0]
 800c190:	1b52      	subs	r2, r2, r5
 800c192:	d41e      	bmi.n	800c1d2 <_malloc_r+0xc6>
 800c194:	2a0b      	cmp	r2, #11
 800c196:	d916      	bls.n	800c1c6 <_malloc_r+0xba>
 800c198:	1961      	adds	r1, r4, r5
 800c19a:	42a3      	cmp	r3, r4
 800c19c:	6025      	str	r5, [r4, #0]
 800c19e:	bf18      	it	ne
 800c1a0:	6059      	strne	r1, [r3, #4]
 800c1a2:	6863      	ldr	r3, [r4, #4]
 800c1a4:	bf08      	it	eq
 800c1a6:	6031      	streq	r1, [r6, #0]
 800c1a8:	5162      	str	r2, [r4, r5]
 800c1aa:	604b      	str	r3, [r1, #4]
 800c1ac:	4638      	mov	r0, r7
 800c1ae:	f104 060b 	add.w	r6, r4, #11
 800c1b2:	f000 fd83 	bl	800ccbc <__malloc_unlock>
 800c1b6:	f026 0607 	bic.w	r6, r6, #7
 800c1ba:	1d23      	adds	r3, r4, #4
 800c1bc:	1af2      	subs	r2, r6, r3
 800c1be:	d0b6      	beq.n	800c12e <_malloc_r+0x22>
 800c1c0:	1b9b      	subs	r3, r3, r6
 800c1c2:	50a3      	str	r3, [r4, r2]
 800c1c4:	e7b3      	b.n	800c12e <_malloc_r+0x22>
 800c1c6:	6862      	ldr	r2, [r4, #4]
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	bf0c      	ite	eq
 800c1cc:	6032      	streq	r2, [r6, #0]
 800c1ce:	605a      	strne	r2, [r3, #4]
 800c1d0:	e7ec      	b.n	800c1ac <_malloc_r+0xa0>
 800c1d2:	4623      	mov	r3, r4
 800c1d4:	6864      	ldr	r4, [r4, #4]
 800c1d6:	e7b2      	b.n	800c13e <_malloc_r+0x32>
 800c1d8:	4634      	mov	r4, r6
 800c1da:	6876      	ldr	r6, [r6, #4]
 800c1dc:	e7b9      	b.n	800c152 <_malloc_r+0x46>
 800c1de:	230c      	movs	r3, #12
 800c1e0:	603b      	str	r3, [r7, #0]
 800c1e2:	4638      	mov	r0, r7
 800c1e4:	f000 fd6a 	bl	800ccbc <__malloc_unlock>
 800c1e8:	e7a1      	b.n	800c12e <_malloc_r+0x22>
 800c1ea:	6025      	str	r5, [r4, #0]
 800c1ec:	e7de      	b.n	800c1ac <_malloc_r+0xa0>
 800c1ee:	bf00      	nop
 800c1f0:	20005194 	.word	0x20005194

0800c1f4 <__sfputc_r>:
 800c1f4:	6893      	ldr	r3, [r2, #8]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	b410      	push	{r4}
 800c1fc:	6093      	str	r3, [r2, #8]
 800c1fe:	da08      	bge.n	800c212 <__sfputc_r+0x1e>
 800c200:	6994      	ldr	r4, [r2, #24]
 800c202:	42a3      	cmp	r3, r4
 800c204:	db01      	blt.n	800c20a <__sfputc_r+0x16>
 800c206:	290a      	cmp	r1, #10
 800c208:	d103      	bne.n	800c212 <__sfputc_r+0x1e>
 800c20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c20e:	f000 bb33 	b.w	800c878 <__swbuf_r>
 800c212:	6813      	ldr	r3, [r2, #0]
 800c214:	1c58      	adds	r0, r3, #1
 800c216:	6010      	str	r0, [r2, #0]
 800c218:	7019      	strb	r1, [r3, #0]
 800c21a:	4608      	mov	r0, r1
 800c21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <__sfputs_r>:
 800c222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c224:	4606      	mov	r6, r0
 800c226:	460f      	mov	r7, r1
 800c228:	4614      	mov	r4, r2
 800c22a:	18d5      	adds	r5, r2, r3
 800c22c:	42ac      	cmp	r4, r5
 800c22e:	d101      	bne.n	800c234 <__sfputs_r+0x12>
 800c230:	2000      	movs	r0, #0
 800c232:	e007      	b.n	800c244 <__sfputs_r+0x22>
 800c234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c238:	463a      	mov	r2, r7
 800c23a:	4630      	mov	r0, r6
 800c23c:	f7ff ffda 	bl	800c1f4 <__sfputc_r>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d1f3      	bne.n	800c22c <__sfputs_r+0xa>
 800c244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c248 <_vfiprintf_r>:
 800c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24c:	460d      	mov	r5, r1
 800c24e:	b09d      	sub	sp, #116	; 0x74
 800c250:	4614      	mov	r4, r2
 800c252:	4698      	mov	r8, r3
 800c254:	4606      	mov	r6, r0
 800c256:	b118      	cbz	r0, 800c260 <_vfiprintf_r+0x18>
 800c258:	6983      	ldr	r3, [r0, #24]
 800c25a:	b90b      	cbnz	r3, 800c260 <_vfiprintf_r+0x18>
 800c25c:	f7ff fe96 	bl	800bf8c <__sinit>
 800c260:	4b89      	ldr	r3, [pc, #548]	; (800c488 <_vfiprintf_r+0x240>)
 800c262:	429d      	cmp	r5, r3
 800c264:	d11b      	bne.n	800c29e <_vfiprintf_r+0x56>
 800c266:	6875      	ldr	r5, [r6, #4]
 800c268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c26a:	07d9      	lsls	r1, r3, #31
 800c26c:	d405      	bmi.n	800c27a <_vfiprintf_r+0x32>
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	059a      	lsls	r2, r3, #22
 800c272:	d402      	bmi.n	800c27a <_vfiprintf_r+0x32>
 800c274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c276:	f7ff ff27 	bl	800c0c8 <__retarget_lock_acquire_recursive>
 800c27a:	89ab      	ldrh	r3, [r5, #12]
 800c27c:	071b      	lsls	r3, r3, #28
 800c27e:	d501      	bpl.n	800c284 <_vfiprintf_r+0x3c>
 800c280:	692b      	ldr	r3, [r5, #16]
 800c282:	b9eb      	cbnz	r3, 800c2c0 <_vfiprintf_r+0x78>
 800c284:	4629      	mov	r1, r5
 800c286:	4630      	mov	r0, r6
 800c288:	f000 fb5a 	bl	800c940 <__swsetup_r>
 800c28c:	b1c0      	cbz	r0, 800c2c0 <_vfiprintf_r+0x78>
 800c28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c290:	07dc      	lsls	r4, r3, #31
 800c292:	d50e      	bpl.n	800c2b2 <_vfiprintf_r+0x6a>
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	b01d      	add	sp, #116	; 0x74
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	4b7b      	ldr	r3, [pc, #492]	; (800c48c <_vfiprintf_r+0x244>)
 800c2a0:	429d      	cmp	r5, r3
 800c2a2:	d101      	bne.n	800c2a8 <_vfiprintf_r+0x60>
 800c2a4:	68b5      	ldr	r5, [r6, #8]
 800c2a6:	e7df      	b.n	800c268 <_vfiprintf_r+0x20>
 800c2a8:	4b79      	ldr	r3, [pc, #484]	; (800c490 <_vfiprintf_r+0x248>)
 800c2aa:	429d      	cmp	r5, r3
 800c2ac:	bf08      	it	eq
 800c2ae:	68f5      	ldreq	r5, [r6, #12]
 800c2b0:	e7da      	b.n	800c268 <_vfiprintf_r+0x20>
 800c2b2:	89ab      	ldrh	r3, [r5, #12]
 800c2b4:	0598      	lsls	r0, r3, #22
 800c2b6:	d4ed      	bmi.n	800c294 <_vfiprintf_r+0x4c>
 800c2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ba:	f7ff ff06 	bl	800c0ca <__retarget_lock_release_recursive>
 800c2be:	e7e9      	b.n	800c294 <_vfiprintf_r+0x4c>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	2320      	movs	r3, #32
 800c2c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ce:	2330      	movs	r3, #48	; 0x30
 800c2d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c494 <_vfiprintf_r+0x24c>
 800c2d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2d8:	f04f 0901 	mov.w	r9, #1
 800c2dc:	4623      	mov	r3, r4
 800c2de:	469a      	mov	sl, r3
 800c2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e4:	b10a      	cbz	r2, 800c2ea <_vfiprintf_r+0xa2>
 800c2e6:	2a25      	cmp	r2, #37	; 0x25
 800c2e8:	d1f9      	bne.n	800c2de <_vfiprintf_r+0x96>
 800c2ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ee:	d00b      	beq.n	800c308 <_vfiprintf_r+0xc0>
 800c2f0:	465b      	mov	r3, fp
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	f7ff ff93 	bl	800c222 <__sfputs_r>
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	f000 80aa 	beq.w	800c456 <_vfiprintf_r+0x20e>
 800c302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c304:	445a      	add	r2, fp
 800c306:	9209      	str	r2, [sp, #36]	; 0x24
 800c308:	f89a 3000 	ldrb.w	r3, [sl]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f000 80a2 	beq.w	800c456 <_vfiprintf_r+0x20e>
 800c312:	2300      	movs	r3, #0
 800c314:	f04f 32ff 	mov.w	r2, #4294967295
 800c318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c31c:	f10a 0a01 	add.w	sl, sl, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	9307      	str	r3, [sp, #28]
 800c324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c328:	931a      	str	r3, [sp, #104]	; 0x68
 800c32a:	4654      	mov	r4, sl
 800c32c:	2205      	movs	r2, #5
 800c32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c332:	4858      	ldr	r0, [pc, #352]	; (800c494 <_vfiprintf_r+0x24c>)
 800c334:	f7f3 ff84 	bl	8000240 <memchr>
 800c338:	9a04      	ldr	r2, [sp, #16]
 800c33a:	b9d8      	cbnz	r0, 800c374 <_vfiprintf_r+0x12c>
 800c33c:	06d1      	lsls	r1, r2, #27
 800c33e:	bf44      	itt	mi
 800c340:	2320      	movmi	r3, #32
 800c342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c346:	0713      	lsls	r3, r2, #28
 800c348:	bf44      	itt	mi
 800c34a:	232b      	movmi	r3, #43	; 0x2b
 800c34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c350:	f89a 3000 	ldrb.w	r3, [sl]
 800c354:	2b2a      	cmp	r3, #42	; 0x2a
 800c356:	d015      	beq.n	800c384 <_vfiprintf_r+0x13c>
 800c358:	9a07      	ldr	r2, [sp, #28]
 800c35a:	4654      	mov	r4, sl
 800c35c:	2000      	movs	r0, #0
 800c35e:	f04f 0c0a 	mov.w	ip, #10
 800c362:	4621      	mov	r1, r4
 800c364:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c368:	3b30      	subs	r3, #48	; 0x30
 800c36a:	2b09      	cmp	r3, #9
 800c36c:	d94e      	bls.n	800c40c <_vfiprintf_r+0x1c4>
 800c36e:	b1b0      	cbz	r0, 800c39e <_vfiprintf_r+0x156>
 800c370:	9207      	str	r2, [sp, #28]
 800c372:	e014      	b.n	800c39e <_vfiprintf_r+0x156>
 800c374:	eba0 0308 	sub.w	r3, r0, r8
 800c378:	fa09 f303 	lsl.w	r3, r9, r3
 800c37c:	4313      	orrs	r3, r2
 800c37e:	9304      	str	r3, [sp, #16]
 800c380:	46a2      	mov	sl, r4
 800c382:	e7d2      	b.n	800c32a <_vfiprintf_r+0xe2>
 800c384:	9b03      	ldr	r3, [sp, #12]
 800c386:	1d19      	adds	r1, r3, #4
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	9103      	str	r1, [sp, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bfbb      	ittet	lt
 800c390:	425b      	neglt	r3, r3
 800c392:	f042 0202 	orrlt.w	r2, r2, #2
 800c396:	9307      	strge	r3, [sp, #28]
 800c398:	9307      	strlt	r3, [sp, #28]
 800c39a:	bfb8      	it	lt
 800c39c:	9204      	strlt	r2, [sp, #16]
 800c39e:	7823      	ldrb	r3, [r4, #0]
 800c3a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a2:	d10c      	bne.n	800c3be <_vfiprintf_r+0x176>
 800c3a4:	7863      	ldrb	r3, [r4, #1]
 800c3a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3a8:	d135      	bne.n	800c416 <_vfiprintf_r+0x1ce>
 800c3aa:	9b03      	ldr	r3, [sp, #12]
 800c3ac:	1d1a      	adds	r2, r3, #4
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	9203      	str	r2, [sp, #12]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	bfb8      	it	lt
 800c3b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3ba:	3402      	adds	r4, #2
 800c3bc:	9305      	str	r3, [sp, #20]
 800c3be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4a4 <_vfiprintf_r+0x25c>
 800c3c2:	7821      	ldrb	r1, [r4, #0]
 800c3c4:	2203      	movs	r2, #3
 800c3c6:	4650      	mov	r0, sl
 800c3c8:	f7f3 ff3a 	bl	8000240 <memchr>
 800c3cc:	b140      	cbz	r0, 800c3e0 <_vfiprintf_r+0x198>
 800c3ce:	2340      	movs	r3, #64	; 0x40
 800c3d0:	eba0 000a 	sub.w	r0, r0, sl
 800c3d4:	fa03 f000 	lsl.w	r0, r3, r0
 800c3d8:	9b04      	ldr	r3, [sp, #16]
 800c3da:	4303      	orrs	r3, r0
 800c3dc:	3401      	adds	r4, #1
 800c3de:	9304      	str	r3, [sp, #16]
 800c3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e4:	482c      	ldr	r0, [pc, #176]	; (800c498 <_vfiprintf_r+0x250>)
 800c3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ea:	2206      	movs	r2, #6
 800c3ec:	f7f3 ff28 	bl	8000240 <memchr>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d03f      	beq.n	800c474 <_vfiprintf_r+0x22c>
 800c3f4:	4b29      	ldr	r3, [pc, #164]	; (800c49c <_vfiprintf_r+0x254>)
 800c3f6:	bb1b      	cbnz	r3, 800c440 <_vfiprintf_r+0x1f8>
 800c3f8:	9b03      	ldr	r3, [sp, #12]
 800c3fa:	3307      	adds	r3, #7
 800c3fc:	f023 0307 	bic.w	r3, r3, #7
 800c400:	3308      	adds	r3, #8
 800c402:	9303      	str	r3, [sp, #12]
 800c404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c406:	443b      	add	r3, r7
 800c408:	9309      	str	r3, [sp, #36]	; 0x24
 800c40a:	e767      	b.n	800c2dc <_vfiprintf_r+0x94>
 800c40c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c410:	460c      	mov	r4, r1
 800c412:	2001      	movs	r0, #1
 800c414:	e7a5      	b.n	800c362 <_vfiprintf_r+0x11a>
 800c416:	2300      	movs	r3, #0
 800c418:	3401      	adds	r4, #1
 800c41a:	9305      	str	r3, [sp, #20]
 800c41c:	4619      	mov	r1, r3
 800c41e:	f04f 0c0a 	mov.w	ip, #10
 800c422:	4620      	mov	r0, r4
 800c424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c428:	3a30      	subs	r2, #48	; 0x30
 800c42a:	2a09      	cmp	r2, #9
 800c42c:	d903      	bls.n	800c436 <_vfiprintf_r+0x1ee>
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0c5      	beq.n	800c3be <_vfiprintf_r+0x176>
 800c432:	9105      	str	r1, [sp, #20]
 800c434:	e7c3      	b.n	800c3be <_vfiprintf_r+0x176>
 800c436:	fb0c 2101 	mla	r1, ip, r1, r2
 800c43a:	4604      	mov	r4, r0
 800c43c:	2301      	movs	r3, #1
 800c43e:	e7f0      	b.n	800c422 <_vfiprintf_r+0x1da>
 800c440:	ab03      	add	r3, sp, #12
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	462a      	mov	r2, r5
 800c446:	4b16      	ldr	r3, [pc, #88]	; (800c4a0 <_vfiprintf_r+0x258>)
 800c448:	a904      	add	r1, sp, #16
 800c44a:	4630      	mov	r0, r6
 800c44c:	f3af 8000 	nop.w
 800c450:	4607      	mov	r7, r0
 800c452:	1c78      	adds	r0, r7, #1
 800c454:	d1d6      	bne.n	800c404 <_vfiprintf_r+0x1bc>
 800c456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c458:	07d9      	lsls	r1, r3, #31
 800c45a:	d405      	bmi.n	800c468 <_vfiprintf_r+0x220>
 800c45c:	89ab      	ldrh	r3, [r5, #12]
 800c45e:	059a      	lsls	r2, r3, #22
 800c460:	d402      	bmi.n	800c468 <_vfiprintf_r+0x220>
 800c462:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c464:	f7ff fe31 	bl	800c0ca <__retarget_lock_release_recursive>
 800c468:	89ab      	ldrh	r3, [r5, #12]
 800c46a:	065b      	lsls	r3, r3, #25
 800c46c:	f53f af12 	bmi.w	800c294 <_vfiprintf_r+0x4c>
 800c470:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c472:	e711      	b.n	800c298 <_vfiprintf_r+0x50>
 800c474:	ab03      	add	r3, sp, #12
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	462a      	mov	r2, r5
 800c47a:	4b09      	ldr	r3, [pc, #36]	; (800c4a0 <_vfiprintf_r+0x258>)
 800c47c:	a904      	add	r1, sp, #16
 800c47e:	4630      	mov	r0, r6
 800c480:	f000 f880 	bl	800c584 <_printf_i>
 800c484:	e7e4      	b.n	800c450 <_vfiprintf_r+0x208>
 800c486:	bf00      	nop
 800c488:	0800cf40 	.word	0x0800cf40
 800c48c:	0800cf60 	.word	0x0800cf60
 800c490:	0800cf20 	.word	0x0800cf20
 800c494:	0800cf80 	.word	0x0800cf80
 800c498:	0800cf8a 	.word	0x0800cf8a
 800c49c:	00000000 	.word	0x00000000
 800c4a0:	0800c223 	.word	0x0800c223
 800c4a4:	0800cf86 	.word	0x0800cf86

0800c4a8 <_printf_common>:
 800c4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ac:	4616      	mov	r6, r2
 800c4ae:	4699      	mov	r9, r3
 800c4b0:	688a      	ldr	r2, [r1, #8]
 800c4b2:	690b      	ldr	r3, [r1, #16]
 800c4b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	bfb8      	it	lt
 800c4bc:	4613      	movlt	r3, r2
 800c4be:	6033      	str	r3, [r6, #0]
 800c4c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4c4:	4607      	mov	r7, r0
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	b10a      	cbz	r2, 800c4ce <_printf_common+0x26>
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	6033      	str	r3, [r6, #0]
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	0699      	lsls	r1, r3, #26
 800c4d2:	bf42      	ittt	mi
 800c4d4:	6833      	ldrmi	r3, [r6, #0]
 800c4d6:	3302      	addmi	r3, #2
 800c4d8:	6033      	strmi	r3, [r6, #0]
 800c4da:	6825      	ldr	r5, [r4, #0]
 800c4dc:	f015 0506 	ands.w	r5, r5, #6
 800c4e0:	d106      	bne.n	800c4f0 <_printf_common+0x48>
 800c4e2:	f104 0a19 	add.w	sl, r4, #25
 800c4e6:	68e3      	ldr	r3, [r4, #12]
 800c4e8:	6832      	ldr	r2, [r6, #0]
 800c4ea:	1a9b      	subs	r3, r3, r2
 800c4ec:	42ab      	cmp	r3, r5
 800c4ee:	dc26      	bgt.n	800c53e <_printf_common+0x96>
 800c4f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4f4:	1e13      	subs	r3, r2, #0
 800c4f6:	6822      	ldr	r2, [r4, #0]
 800c4f8:	bf18      	it	ne
 800c4fa:	2301      	movne	r3, #1
 800c4fc:	0692      	lsls	r2, r2, #26
 800c4fe:	d42b      	bmi.n	800c558 <_printf_common+0xb0>
 800c500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c504:	4649      	mov	r1, r9
 800c506:	4638      	mov	r0, r7
 800c508:	47c0      	blx	r8
 800c50a:	3001      	adds	r0, #1
 800c50c:	d01e      	beq.n	800c54c <_printf_common+0xa4>
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	68e5      	ldr	r5, [r4, #12]
 800c512:	6832      	ldr	r2, [r6, #0]
 800c514:	f003 0306 	and.w	r3, r3, #6
 800c518:	2b04      	cmp	r3, #4
 800c51a:	bf08      	it	eq
 800c51c:	1aad      	subeq	r5, r5, r2
 800c51e:	68a3      	ldr	r3, [r4, #8]
 800c520:	6922      	ldr	r2, [r4, #16]
 800c522:	bf0c      	ite	eq
 800c524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c528:	2500      	movne	r5, #0
 800c52a:	4293      	cmp	r3, r2
 800c52c:	bfc4      	itt	gt
 800c52e:	1a9b      	subgt	r3, r3, r2
 800c530:	18ed      	addgt	r5, r5, r3
 800c532:	2600      	movs	r6, #0
 800c534:	341a      	adds	r4, #26
 800c536:	42b5      	cmp	r5, r6
 800c538:	d11a      	bne.n	800c570 <_printf_common+0xc8>
 800c53a:	2000      	movs	r0, #0
 800c53c:	e008      	b.n	800c550 <_printf_common+0xa8>
 800c53e:	2301      	movs	r3, #1
 800c540:	4652      	mov	r2, sl
 800c542:	4649      	mov	r1, r9
 800c544:	4638      	mov	r0, r7
 800c546:	47c0      	blx	r8
 800c548:	3001      	adds	r0, #1
 800c54a:	d103      	bne.n	800c554 <_printf_common+0xac>
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295
 800c550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c554:	3501      	adds	r5, #1
 800c556:	e7c6      	b.n	800c4e6 <_printf_common+0x3e>
 800c558:	18e1      	adds	r1, r4, r3
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	2030      	movs	r0, #48	; 0x30
 800c55e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c562:	4422      	add	r2, r4
 800c564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c56c:	3302      	adds	r3, #2
 800c56e:	e7c7      	b.n	800c500 <_printf_common+0x58>
 800c570:	2301      	movs	r3, #1
 800c572:	4622      	mov	r2, r4
 800c574:	4649      	mov	r1, r9
 800c576:	4638      	mov	r0, r7
 800c578:	47c0      	blx	r8
 800c57a:	3001      	adds	r0, #1
 800c57c:	d0e6      	beq.n	800c54c <_printf_common+0xa4>
 800c57e:	3601      	adds	r6, #1
 800c580:	e7d9      	b.n	800c536 <_printf_common+0x8e>
	...

0800c584 <_printf_i>:
 800c584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c588:	7e0f      	ldrb	r7, [r1, #24]
 800c58a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c58c:	2f78      	cmp	r7, #120	; 0x78
 800c58e:	4691      	mov	r9, r2
 800c590:	4680      	mov	r8, r0
 800c592:	460c      	mov	r4, r1
 800c594:	469a      	mov	sl, r3
 800c596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c59a:	d807      	bhi.n	800c5ac <_printf_i+0x28>
 800c59c:	2f62      	cmp	r7, #98	; 0x62
 800c59e:	d80a      	bhi.n	800c5b6 <_printf_i+0x32>
 800c5a0:	2f00      	cmp	r7, #0
 800c5a2:	f000 80d8 	beq.w	800c756 <_printf_i+0x1d2>
 800c5a6:	2f58      	cmp	r7, #88	; 0x58
 800c5a8:	f000 80a3 	beq.w	800c6f2 <_printf_i+0x16e>
 800c5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5b4:	e03a      	b.n	800c62c <_printf_i+0xa8>
 800c5b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5ba:	2b15      	cmp	r3, #21
 800c5bc:	d8f6      	bhi.n	800c5ac <_printf_i+0x28>
 800c5be:	a101      	add	r1, pc, #4	; (adr r1, 800c5c4 <_printf_i+0x40>)
 800c5c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5c4:	0800c61d 	.word	0x0800c61d
 800c5c8:	0800c631 	.word	0x0800c631
 800c5cc:	0800c5ad 	.word	0x0800c5ad
 800c5d0:	0800c5ad 	.word	0x0800c5ad
 800c5d4:	0800c5ad 	.word	0x0800c5ad
 800c5d8:	0800c5ad 	.word	0x0800c5ad
 800c5dc:	0800c631 	.word	0x0800c631
 800c5e0:	0800c5ad 	.word	0x0800c5ad
 800c5e4:	0800c5ad 	.word	0x0800c5ad
 800c5e8:	0800c5ad 	.word	0x0800c5ad
 800c5ec:	0800c5ad 	.word	0x0800c5ad
 800c5f0:	0800c73d 	.word	0x0800c73d
 800c5f4:	0800c661 	.word	0x0800c661
 800c5f8:	0800c71f 	.word	0x0800c71f
 800c5fc:	0800c5ad 	.word	0x0800c5ad
 800c600:	0800c5ad 	.word	0x0800c5ad
 800c604:	0800c75f 	.word	0x0800c75f
 800c608:	0800c5ad 	.word	0x0800c5ad
 800c60c:	0800c661 	.word	0x0800c661
 800c610:	0800c5ad 	.word	0x0800c5ad
 800c614:	0800c5ad 	.word	0x0800c5ad
 800c618:	0800c727 	.word	0x0800c727
 800c61c:	682b      	ldr	r3, [r5, #0]
 800c61e:	1d1a      	adds	r2, r3, #4
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	602a      	str	r2, [r5, #0]
 800c624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c62c:	2301      	movs	r3, #1
 800c62e:	e0a3      	b.n	800c778 <_printf_i+0x1f4>
 800c630:	6820      	ldr	r0, [r4, #0]
 800c632:	6829      	ldr	r1, [r5, #0]
 800c634:	0606      	lsls	r6, r0, #24
 800c636:	f101 0304 	add.w	r3, r1, #4
 800c63a:	d50a      	bpl.n	800c652 <_printf_i+0xce>
 800c63c:	680e      	ldr	r6, [r1, #0]
 800c63e:	602b      	str	r3, [r5, #0]
 800c640:	2e00      	cmp	r6, #0
 800c642:	da03      	bge.n	800c64c <_printf_i+0xc8>
 800c644:	232d      	movs	r3, #45	; 0x2d
 800c646:	4276      	negs	r6, r6
 800c648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c64c:	485e      	ldr	r0, [pc, #376]	; (800c7c8 <_printf_i+0x244>)
 800c64e:	230a      	movs	r3, #10
 800c650:	e019      	b.n	800c686 <_printf_i+0x102>
 800c652:	680e      	ldr	r6, [r1, #0]
 800c654:	602b      	str	r3, [r5, #0]
 800c656:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c65a:	bf18      	it	ne
 800c65c:	b236      	sxthne	r6, r6
 800c65e:	e7ef      	b.n	800c640 <_printf_i+0xbc>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	6820      	ldr	r0, [r4, #0]
 800c664:	1d19      	adds	r1, r3, #4
 800c666:	6029      	str	r1, [r5, #0]
 800c668:	0601      	lsls	r1, r0, #24
 800c66a:	d501      	bpl.n	800c670 <_printf_i+0xec>
 800c66c:	681e      	ldr	r6, [r3, #0]
 800c66e:	e002      	b.n	800c676 <_printf_i+0xf2>
 800c670:	0646      	lsls	r6, r0, #25
 800c672:	d5fb      	bpl.n	800c66c <_printf_i+0xe8>
 800c674:	881e      	ldrh	r6, [r3, #0]
 800c676:	4854      	ldr	r0, [pc, #336]	; (800c7c8 <_printf_i+0x244>)
 800c678:	2f6f      	cmp	r7, #111	; 0x6f
 800c67a:	bf0c      	ite	eq
 800c67c:	2308      	moveq	r3, #8
 800c67e:	230a      	movne	r3, #10
 800c680:	2100      	movs	r1, #0
 800c682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c686:	6865      	ldr	r5, [r4, #4]
 800c688:	60a5      	str	r5, [r4, #8]
 800c68a:	2d00      	cmp	r5, #0
 800c68c:	bfa2      	ittt	ge
 800c68e:	6821      	ldrge	r1, [r4, #0]
 800c690:	f021 0104 	bicge.w	r1, r1, #4
 800c694:	6021      	strge	r1, [r4, #0]
 800c696:	b90e      	cbnz	r6, 800c69c <_printf_i+0x118>
 800c698:	2d00      	cmp	r5, #0
 800c69a:	d04d      	beq.n	800c738 <_printf_i+0x1b4>
 800c69c:	4615      	mov	r5, r2
 800c69e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6a2:	fb03 6711 	mls	r7, r3, r1, r6
 800c6a6:	5dc7      	ldrb	r7, [r0, r7]
 800c6a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6ac:	4637      	mov	r7, r6
 800c6ae:	42bb      	cmp	r3, r7
 800c6b0:	460e      	mov	r6, r1
 800c6b2:	d9f4      	bls.n	800c69e <_printf_i+0x11a>
 800c6b4:	2b08      	cmp	r3, #8
 800c6b6:	d10b      	bne.n	800c6d0 <_printf_i+0x14c>
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	07de      	lsls	r6, r3, #31
 800c6bc:	d508      	bpl.n	800c6d0 <_printf_i+0x14c>
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	6861      	ldr	r1, [r4, #4]
 800c6c2:	4299      	cmp	r1, r3
 800c6c4:	bfde      	ittt	le
 800c6c6:	2330      	movle	r3, #48	; 0x30
 800c6c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c6d0:	1b52      	subs	r2, r2, r5
 800c6d2:	6122      	str	r2, [r4, #16]
 800c6d4:	f8cd a000 	str.w	sl, [sp]
 800c6d8:	464b      	mov	r3, r9
 800c6da:	aa03      	add	r2, sp, #12
 800c6dc:	4621      	mov	r1, r4
 800c6de:	4640      	mov	r0, r8
 800c6e0:	f7ff fee2 	bl	800c4a8 <_printf_common>
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d14c      	bne.n	800c782 <_printf_i+0x1fe>
 800c6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ec:	b004      	add	sp, #16
 800c6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f2:	4835      	ldr	r0, [pc, #212]	; (800c7c8 <_printf_i+0x244>)
 800c6f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c6f8:	6829      	ldr	r1, [r5, #0]
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c700:	6029      	str	r1, [r5, #0]
 800c702:	061d      	lsls	r5, r3, #24
 800c704:	d514      	bpl.n	800c730 <_printf_i+0x1ac>
 800c706:	07df      	lsls	r7, r3, #31
 800c708:	bf44      	itt	mi
 800c70a:	f043 0320 	orrmi.w	r3, r3, #32
 800c70e:	6023      	strmi	r3, [r4, #0]
 800c710:	b91e      	cbnz	r6, 800c71a <_printf_i+0x196>
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	f023 0320 	bic.w	r3, r3, #32
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	2310      	movs	r3, #16
 800c71c:	e7b0      	b.n	800c680 <_printf_i+0xfc>
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	f043 0320 	orr.w	r3, r3, #32
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	2378      	movs	r3, #120	; 0x78
 800c728:	4828      	ldr	r0, [pc, #160]	; (800c7cc <_printf_i+0x248>)
 800c72a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c72e:	e7e3      	b.n	800c6f8 <_printf_i+0x174>
 800c730:	0659      	lsls	r1, r3, #25
 800c732:	bf48      	it	mi
 800c734:	b2b6      	uxthmi	r6, r6
 800c736:	e7e6      	b.n	800c706 <_printf_i+0x182>
 800c738:	4615      	mov	r5, r2
 800c73a:	e7bb      	b.n	800c6b4 <_printf_i+0x130>
 800c73c:	682b      	ldr	r3, [r5, #0]
 800c73e:	6826      	ldr	r6, [r4, #0]
 800c740:	6961      	ldr	r1, [r4, #20]
 800c742:	1d18      	adds	r0, r3, #4
 800c744:	6028      	str	r0, [r5, #0]
 800c746:	0635      	lsls	r5, r6, #24
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	d501      	bpl.n	800c750 <_printf_i+0x1cc>
 800c74c:	6019      	str	r1, [r3, #0]
 800c74e:	e002      	b.n	800c756 <_printf_i+0x1d2>
 800c750:	0670      	lsls	r0, r6, #25
 800c752:	d5fb      	bpl.n	800c74c <_printf_i+0x1c8>
 800c754:	8019      	strh	r1, [r3, #0]
 800c756:	2300      	movs	r3, #0
 800c758:	6123      	str	r3, [r4, #16]
 800c75a:	4615      	mov	r5, r2
 800c75c:	e7ba      	b.n	800c6d4 <_printf_i+0x150>
 800c75e:	682b      	ldr	r3, [r5, #0]
 800c760:	1d1a      	adds	r2, r3, #4
 800c762:	602a      	str	r2, [r5, #0]
 800c764:	681d      	ldr	r5, [r3, #0]
 800c766:	6862      	ldr	r2, [r4, #4]
 800c768:	2100      	movs	r1, #0
 800c76a:	4628      	mov	r0, r5
 800c76c:	f7f3 fd68 	bl	8000240 <memchr>
 800c770:	b108      	cbz	r0, 800c776 <_printf_i+0x1f2>
 800c772:	1b40      	subs	r0, r0, r5
 800c774:	6060      	str	r0, [r4, #4]
 800c776:	6863      	ldr	r3, [r4, #4]
 800c778:	6123      	str	r3, [r4, #16]
 800c77a:	2300      	movs	r3, #0
 800c77c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c780:	e7a8      	b.n	800c6d4 <_printf_i+0x150>
 800c782:	6923      	ldr	r3, [r4, #16]
 800c784:	462a      	mov	r2, r5
 800c786:	4649      	mov	r1, r9
 800c788:	4640      	mov	r0, r8
 800c78a:	47d0      	blx	sl
 800c78c:	3001      	adds	r0, #1
 800c78e:	d0ab      	beq.n	800c6e8 <_printf_i+0x164>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	079b      	lsls	r3, r3, #30
 800c794:	d413      	bmi.n	800c7be <_printf_i+0x23a>
 800c796:	68e0      	ldr	r0, [r4, #12]
 800c798:	9b03      	ldr	r3, [sp, #12]
 800c79a:	4298      	cmp	r0, r3
 800c79c:	bfb8      	it	lt
 800c79e:	4618      	movlt	r0, r3
 800c7a0:	e7a4      	b.n	800c6ec <_printf_i+0x168>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	47d0      	blx	sl
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d09b      	beq.n	800c6e8 <_printf_i+0x164>
 800c7b0:	3501      	adds	r5, #1
 800c7b2:	68e3      	ldr	r3, [r4, #12]
 800c7b4:	9903      	ldr	r1, [sp, #12]
 800c7b6:	1a5b      	subs	r3, r3, r1
 800c7b8:	42ab      	cmp	r3, r5
 800c7ba:	dcf2      	bgt.n	800c7a2 <_printf_i+0x21e>
 800c7bc:	e7eb      	b.n	800c796 <_printf_i+0x212>
 800c7be:	2500      	movs	r5, #0
 800c7c0:	f104 0619 	add.w	r6, r4, #25
 800c7c4:	e7f5      	b.n	800c7b2 <_printf_i+0x22e>
 800c7c6:	bf00      	nop
 800c7c8:	0800cf91 	.word	0x0800cf91
 800c7cc:	0800cfa2 	.word	0x0800cfa2

0800c7d0 <_sbrk_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d06      	ldr	r5, [pc, #24]	; (800c7ec <_sbrk_r+0x1c>)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	602b      	str	r3, [r5, #0]
 800c7dc:	f7f6 fb36 	bl	8002e4c <_sbrk>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d102      	bne.n	800c7ea <_sbrk_r+0x1a>
 800c7e4:	682b      	ldr	r3, [r5, #0]
 800c7e6:	b103      	cbz	r3, 800c7ea <_sbrk_r+0x1a>
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	bd38      	pop	{r3, r4, r5, pc}
 800c7ec:	2000519c 	.word	0x2000519c

0800c7f0 <__sread>:
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f8:	f000 fab2 	bl	800cd60 <_read_r>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	bfab      	itete	ge
 800c800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c802:	89a3      	ldrhlt	r3, [r4, #12]
 800c804:	181b      	addge	r3, r3, r0
 800c806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c80a:	bfac      	ite	ge
 800c80c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c80e:	81a3      	strhlt	r3, [r4, #12]
 800c810:	bd10      	pop	{r4, pc}

0800c812 <__swrite>:
 800c812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c816:	461f      	mov	r7, r3
 800c818:	898b      	ldrh	r3, [r1, #12]
 800c81a:	05db      	lsls	r3, r3, #23
 800c81c:	4605      	mov	r5, r0
 800c81e:	460c      	mov	r4, r1
 800c820:	4616      	mov	r6, r2
 800c822:	d505      	bpl.n	800c830 <__swrite+0x1e>
 800c824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c828:	2302      	movs	r3, #2
 800c82a:	2200      	movs	r2, #0
 800c82c:	f000 f9c8 	bl	800cbc0 <_lseek_r>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c83a:	81a3      	strh	r3, [r4, #12]
 800c83c:	4632      	mov	r2, r6
 800c83e:	463b      	mov	r3, r7
 800c840:	4628      	mov	r0, r5
 800c842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c846:	f000 b869 	b.w	800c91c <_write_r>

0800c84a <__sseek>:
 800c84a:	b510      	push	{r4, lr}
 800c84c:	460c      	mov	r4, r1
 800c84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c852:	f000 f9b5 	bl	800cbc0 <_lseek_r>
 800c856:	1c43      	adds	r3, r0, #1
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	bf15      	itete	ne
 800c85c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c85e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c866:	81a3      	strheq	r3, [r4, #12]
 800c868:	bf18      	it	ne
 800c86a:	81a3      	strhne	r3, [r4, #12]
 800c86c:	bd10      	pop	{r4, pc}

0800c86e <__sclose>:
 800c86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c872:	f000 b8d3 	b.w	800ca1c <_close_r>
	...

0800c878 <__swbuf_r>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	460e      	mov	r6, r1
 800c87c:	4614      	mov	r4, r2
 800c87e:	4605      	mov	r5, r0
 800c880:	b118      	cbz	r0, 800c88a <__swbuf_r+0x12>
 800c882:	6983      	ldr	r3, [r0, #24]
 800c884:	b90b      	cbnz	r3, 800c88a <__swbuf_r+0x12>
 800c886:	f7ff fb81 	bl	800bf8c <__sinit>
 800c88a:	4b21      	ldr	r3, [pc, #132]	; (800c910 <__swbuf_r+0x98>)
 800c88c:	429c      	cmp	r4, r3
 800c88e:	d12b      	bne.n	800c8e8 <__swbuf_r+0x70>
 800c890:	686c      	ldr	r4, [r5, #4]
 800c892:	69a3      	ldr	r3, [r4, #24]
 800c894:	60a3      	str	r3, [r4, #8]
 800c896:	89a3      	ldrh	r3, [r4, #12]
 800c898:	071a      	lsls	r2, r3, #28
 800c89a:	d52f      	bpl.n	800c8fc <__swbuf_r+0x84>
 800c89c:	6923      	ldr	r3, [r4, #16]
 800c89e:	b36b      	cbz	r3, 800c8fc <__swbuf_r+0x84>
 800c8a0:	6923      	ldr	r3, [r4, #16]
 800c8a2:	6820      	ldr	r0, [r4, #0]
 800c8a4:	1ac0      	subs	r0, r0, r3
 800c8a6:	6963      	ldr	r3, [r4, #20]
 800c8a8:	b2f6      	uxtb	r6, r6
 800c8aa:	4283      	cmp	r3, r0
 800c8ac:	4637      	mov	r7, r6
 800c8ae:	dc04      	bgt.n	800c8ba <__swbuf_r+0x42>
 800c8b0:	4621      	mov	r1, r4
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f000 f948 	bl	800cb48 <_fflush_r>
 800c8b8:	bb30      	cbnz	r0, 800c908 <__swbuf_r+0x90>
 800c8ba:	68a3      	ldr	r3, [r4, #8]
 800c8bc:	3b01      	subs	r3, #1
 800c8be:	60a3      	str	r3, [r4, #8]
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	6022      	str	r2, [r4, #0]
 800c8c6:	701e      	strb	r6, [r3, #0]
 800c8c8:	6963      	ldr	r3, [r4, #20]
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	4283      	cmp	r3, r0
 800c8ce:	d004      	beq.n	800c8da <__swbuf_r+0x62>
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	07db      	lsls	r3, r3, #31
 800c8d4:	d506      	bpl.n	800c8e4 <__swbuf_r+0x6c>
 800c8d6:	2e0a      	cmp	r6, #10
 800c8d8:	d104      	bne.n	800c8e4 <__swbuf_r+0x6c>
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f000 f933 	bl	800cb48 <_fflush_r>
 800c8e2:	b988      	cbnz	r0, 800c908 <__swbuf_r+0x90>
 800c8e4:	4638      	mov	r0, r7
 800c8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e8:	4b0a      	ldr	r3, [pc, #40]	; (800c914 <__swbuf_r+0x9c>)
 800c8ea:	429c      	cmp	r4, r3
 800c8ec:	d101      	bne.n	800c8f2 <__swbuf_r+0x7a>
 800c8ee:	68ac      	ldr	r4, [r5, #8]
 800c8f0:	e7cf      	b.n	800c892 <__swbuf_r+0x1a>
 800c8f2:	4b09      	ldr	r3, [pc, #36]	; (800c918 <__swbuf_r+0xa0>)
 800c8f4:	429c      	cmp	r4, r3
 800c8f6:	bf08      	it	eq
 800c8f8:	68ec      	ldreq	r4, [r5, #12]
 800c8fa:	e7ca      	b.n	800c892 <__swbuf_r+0x1a>
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	4628      	mov	r0, r5
 800c900:	f000 f81e 	bl	800c940 <__swsetup_r>
 800c904:	2800      	cmp	r0, #0
 800c906:	d0cb      	beq.n	800c8a0 <__swbuf_r+0x28>
 800c908:	f04f 37ff 	mov.w	r7, #4294967295
 800c90c:	e7ea      	b.n	800c8e4 <__swbuf_r+0x6c>
 800c90e:	bf00      	nop
 800c910:	0800cf40 	.word	0x0800cf40
 800c914:	0800cf60 	.word	0x0800cf60
 800c918:	0800cf20 	.word	0x0800cf20

0800c91c <_write_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d07      	ldr	r5, [pc, #28]	; (800c93c <_write_r+0x20>)
 800c920:	4604      	mov	r4, r0
 800c922:	4608      	mov	r0, r1
 800c924:	4611      	mov	r1, r2
 800c926:	2200      	movs	r2, #0
 800c928:	602a      	str	r2, [r5, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	f7f6 fa3d 	bl	8002daa <_write>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d102      	bne.n	800c93a <_write_r+0x1e>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	b103      	cbz	r3, 800c93a <_write_r+0x1e>
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	2000519c 	.word	0x2000519c

0800c940 <__swsetup_r>:
 800c940:	4b32      	ldr	r3, [pc, #200]	; (800ca0c <__swsetup_r+0xcc>)
 800c942:	b570      	push	{r4, r5, r6, lr}
 800c944:	681d      	ldr	r5, [r3, #0]
 800c946:	4606      	mov	r6, r0
 800c948:	460c      	mov	r4, r1
 800c94a:	b125      	cbz	r5, 800c956 <__swsetup_r+0x16>
 800c94c:	69ab      	ldr	r3, [r5, #24]
 800c94e:	b913      	cbnz	r3, 800c956 <__swsetup_r+0x16>
 800c950:	4628      	mov	r0, r5
 800c952:	f7ff fb1b 	bl	800bf8c <__sinit>
 800c956:	4b2e      	ldr	r3, [pc, #184]	; (800ca10 <__swsetup_r+0xd0>)
 800c958:	429c      	cmp	r4, r3
 800c95a:	d10f      	bne.n	800c97c <__swsetup_r+0x3c>
 800c95c:	686c      	ldr	r4, [r5, #4]
 800c95e:	89a3      	ldrh	r3, [r4, #12]
 800c960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c964:	0719      	lsls	r1, r3, #28
 800c966:	d42c      	bmi.n	800c9c2 <__swsetup_r+0x82>
 800c968:	06dd      	lsls	r5, r3, #27
 800c96a:	d411      	bmi.n	800c990 <__swsetup_r+0x50>
 800c96c:	2309      	movs	r3, #9
 800c96e:	6033      	str	r3, [r6, #0]
 800c970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c974:	81a3      	strh	r3, [r4, #12]
 800c976:	f04f 30ff 	mov.w	r0, #4294967295
 800c97a:	e03e      	b.n	800c9fa <__swsetup_r+0xba>
 800c97c:	4b25      	ldr	r3, [pc, #148]	; (800ca14 <__swsetup_r+0xd4>)
 800c97e:	429c      	cmp	r4, r3
 800c980:	d101      	bne.n	800c986 <__swsetup_r+0x46>
 800c982:	68ac      	ldr	r4, [r5, #8]
 800c984:	e7eb      	b.n	800c95e <__swsetup_r+0x1e>
 800c986:	4b24      	ldr	r3, [pc, #144]	; (800ca18 <__swsetup_r+0xd8>)
 800c988:	429c      	cmp	r4, r3
 800c98a:	bf08      	it	eq
 800c98c:	68ec      	ldreq	r4, [r5, #12]
 800c98e:	e7e6      	b.n	800c95e <__swsetup_r+0x1e>
 800c990:	0758      	lsls	r0, r3, #29
 800c992:	d512      	bpl.n	800c9ba <__swsetup_r+0x7a>
 800c994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c996:	b141      	cbz	r1, 800c9aa <__swsetup_r+0x6a>
 800c998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c99c:	4299      	cmp	r1, r3
 800c99e:	d002      	beq.n	800c9a6 <__swsetup_r+0x66>
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	f000 f991 	bl	800ccc8 <_free_r>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	6363      	str	r3, [r4, #52]	; 0x34
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9b0:	81a3      	strh	r3, [r4, #12]
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	6063      	str	r3, [r4, #4]
 800c9b6:	6923      	ldr	r3, [r4, #16]
 800c9b8:	6023      	str	r3, [r4, #0]
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	f043 0308 	orr.w	r3, r3, #8
 800c9c0:	81a3      	strh	r3, [r4, #12]
 800c9c2:	6923      	ldr	r3, [r4, #16]
 800c9c4:	b94b      	cbnz	r3, 800c9da <__swsetup_r+0x9a>
 800c9c6:	89a3      	ldrh	r3, [r4, #12]
 800c9c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9d0:	d003      	beq.n	800c9da <__swsetup_r+0x9a>
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f000 f92b 	bl	800cc30 <__smakebuf_r>
 800c9da:	89a0      	ldrh	r0, [r4, #12]
 800c9dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9e0:	f010 0301 	ands.w	r3, r0, #1
 800c9e4:	d00a      	beq.n	800c9fc <__swsetup_r+0xbc>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	60a3      	str	r3, [r4, #8]
 800c9ea:	6963      	ldr	r3, [r4, #20]
 800c9ec:	425b      	negs	r3, r3
 800c9ee:	61a3      	str	r3, [r4, #24]
 800c9f0:	6923      	ldr	r3, [r4, #16]
 800c9f2:	b943      	cbnz	r3, 800ca06 <__swsetup_r+0xc6>
 800c9f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9f8:	d1ba      	bne.n	800c970 <__swsetup_r+0x30>
 800c9fa:	bd70      	pop	{r4, r5, r6, pc}
 800c9fc:	0781      	lsls	r1, r0, #30
 800c9fe:	bf58      	it	pl
 800ca00:	6963      	ldrpl	r3, [r4, #20]
 800ca02:	60a3      	str	r3, [r4, #8]
 800ca04:	e7f4      	b.n	800c9f0 <__swsetup_r+0xb0>
 800ca06:	2000      	movs	r0, #0
 800ca08:	e7f7      	b.n	800c9fa <__swsetup_r+0xba>
 800ca0a:	bf00      	nop
 800ca0c:	2000001c 	.word	0x2000001c
 800ca10:	0800cf40 	.word	0x0800cf40
 800ca14:	0800cf60 	.word	0x0800cf60
 800ca18:	0800cf20 	.word	0x0800cf20

0800ca1c <_close_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d06      	ldr	r5, [pc, #24]	; (800ca38 <_close_r+0x1c>)
 800ca20:	2300      	movs	r3, #0
 800ca22:	4604      	mov	r4, r0
 800ca24:	4608      	mov	r0, r1
 800ca26:	602b      	str	r3, [r5, #0]
 800ca28:	f7f6 f9db 	bl	8002de2 <_close>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_close_r+0x1a>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_close_r+0x1a>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	2000519c 	.word	0x2000519c

0800ca3c <__sflush_r>:
 800ca3c:	898a      	ldrh	r2, [r1, #12]
 800ca3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca42:	4605      	mov	r5, r0
 800ca44:	0710      	lsls	r0, r2, #28
 800ca46:	460c      	mov	r4, r1
 800ca48:	d458      	bmi.n	800cafc <__sflush_r+0xc0>
 800ca4a:	684b      	ldr	r3, [r1, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	dc05      	bgt.n	800ca5c <__sflush_r+0x20>
 800ca50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	dc02      	bgt.n	800ca5c <__sflush_r+0x20>
 800ca56:	2000      	movs	r0, #0
 800ca58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca5e:	2e00      	cmp	r6, #0
 800ca60:	d0f9      	beq.n	800ca56 <__sflush_r+0x1a>
 800ca62:	2300      	movs	r3, #0
 800ca64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca68:	682f      	ldr	r7, [r5, #0]
 800ca6a:	602b      	str	r3, [r5, #0]
 800ca6c:	d032      	beq.n	800cad4 <__sflush_r+0x98>
 800ca6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	075a      	lsls	r2, r3, #29
 800ca74:	d505      	bpl.n	800ca82 <__sflush_r+0x46>
 800ca76:	6863      	ldr	r3, [r4, #4]
 800ca78:	1ac0      	subs	r0, r0, r3
 800ca7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca7c:	b10b      	cbz	r3, 800ca82 <__sflush_r+0x46>
 800ca7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca80:	1ac0      	subs	r0, r0, r3
 800ca82:	2300      	movs	r3, #0
 800ca84:	4602      	mov	r2, r0
 800ca86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca88:	6a21      	ldr	r1, [r4, #32]
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	47b0      	blx	r6
 800ca8e:	1c43      	adds	r3, r0, #1
 800ca90:	89a3      	ldrh	r3, [r4, #12]
 800ca92:	d106      	bne.n	800caa2 <__sflush_r+0x66>
 800ca94:	6829      	ldr	r1, [r5, #0]
 800ca96:	291d      	cmp	r1, #29
 800ca98:	d82c      	bhi.n	800caf4 <__sflush_r+0xb8>
 800ca9a:	4a2a      	ldr	r2, [pc, #168]	; (800cb44 <__sflush_r+0x108>)
 800ca9c:	40ca      	lsrs	r2, r1
 800ca9e:	07d6      	lsls	r6, r2, #31
 800caa0:	d528      	bpl.n	800caf4 <__sflush_r+0xb8>
 800caa2:	2200      	movs	r2, #0
 800caa4:	6062      	str	r2, [r4, #4]
 800caa6:	04d9      	lsls	r1, r3, #19
 800caa8:	6922      	ldr	r2, [r4, #16]
 800caaa:	6022      	str	r2, [r4, #0]
 800caac:	d504      	bpl.n	800cab8 <__sflush_r+0x7c>
 800caae:	1c42      	adds	r2, r0, #1
 800cab0:	d101      	bne.n	800cab6 <__sflush_r+0x7a>
 800cab2:	682b      	ldr	r3, [r5, #0]
 800cab4:	b903      	cbnz	r3, 800cab8 <__sflush_r+0x7c>
 800cab6:	6560      	str	r0, [r4, #84]	; 0x54
 800cab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caba:	602f      	str	r7, [r5, #0]
 800cabc:	2900      	cmp	r1, #0
 800cabe:	d0ca      	beq.n	800ca56 <__sflush_r+0x1a>
 800cac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cac4:	4299      	cmp	r1, r3
 800cac6:	d002      	beq.n	800cace <__sflush_r+0x92>
 800cac8:	4628      	mov	r0, r5
 800caca:	f000 f8fd 	bl	800ccc8 <_free_r>
 800cace:	2000      	movs	r0, #0
 800cad0:	6360      	str	r0, [r4, #52]	; 0x34
 800cad2:	e7c1      	b.n	800ca58 <__sflush_r+0x1c>
 800cad4:	6a21      	ldr	r1, [r4, #32]
 800cad6:	2301      	movs	r3, #1
 800cad8:	4628      	mov	r0, r5
 800cada:	47b0      	blx	r6
 800cadc:	1c41      	adds	r1, r0, #1
 800cade:	d1c7      	bne.n	800ca70 <__sflush_r+0x34>
 800cae0:	682b      	ldr	r3, [r5, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d0c4      	beq.n	800ca70 <__sflush_r+0x34>
 800cae6:	2b1d      	cmp	r3, #29
 800cae8:	d001      	beq.n	800caee <__sflush_r+0xb2>
 800caea:	2b16      	cmp	r3, #22
 800caec:	d101      	bne.n	800caf2 <__sflush_r+0xb6>
 800caee:	602f      	str	r7, [r5, #0]
 800caf0:	e7b1      	b.n	800ca56 <__sflush_r+0x1a>
 800caf2:	89a3      	ldrh	r3, [r4, #12]
 800caf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caf8:	81a3      	strh	r3, [r4, #12]
 800cafa:	e7ad      	b.n	800ca58 <__sflush_r+0x1c>
 800cafc:	690f      	ldr	r7, [r1, #16]
 800cafe:	2f00      	cmp	r7, #0
 800cb00:	d0a9      	beq.n	800ca56 <__sflush_r+0x1a>
 800cb02:	0793      	lsls	r3, r2, #30
 800cb04:	680e      	ldr	r6, [r1, #0]
 800cb06:	bf08      	it	eq
 800cb08:	694b      	ldreq	r3, [r1, #20]
 800cb0a:	600f      	str	r7, [r1, #0]
 800cb0c:	bf18      	it	ne
 800cb0e:	2300      	movne	r3, #0
 800cb10:	eba6 0807 	sub.w	r8, r6, r7
 800cb14:	608b      	str	r3, [r1, #8]
 800cb16:	f1b8 0f00 	cmp.w	r8, #0
 800cb1a:	dd9c      	ble.n	800ca56 <__sflush_r+0x1a>
 800cb1c:	6a21      	ldr	r1, [r4, #32]
 800cb1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb20:	4643      	mov	r3, r8
 800cb22:	463a      	mov	r2, r7
 800cb24:	4628      	mov	r0, r5
 800cb26:	47b0      	blx	r6
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	dc06      	bgt.n	800cb3a <__sflush_r+0xfe>
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb32:	81a3      	strh	r3, [r4, #12]
 800cb34:	f04f 30ff 	mov.w	r0, #4294967295
 800cb38:	e78e      	b.n	800ca58 <__sflush_r+0x1c>
 800cb3a:	4407      	add	r7, r0
 800cb3c:	eba8 0800 	sub.w	r8, r8, r0
 800cb40:	e7e9      	b.n	800cb16 <__sflush_r+0xda>
 800cb42:	bf00      	nop
 800cb44:	20400001 	.word	0x20400001

0800cb48 <_fflush_r>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	690b      	ldr	r3, [r1, #16]
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	460c      	mov	r4, r1
 800cb50:	b913      	cbnz	r3, 800cb58 <_fflush_r+0x10>
 800cb52:	2500      	movs	r5, #0
 800cb54:	4628      	mov	r0, r5
 800cb56:	bd38      	pop	{r3, r4, r5, pc}
 800cb58:	b118      	cbz	r0, 800cb62 <_fflush_r+0x1a>
 800cb5a:	6983      	ldr	r3, [r0, #24]
 800cb5c:	b90b      	cbnz	r3, 800cb62 <_fflush_r+0x1a>
 800cb5e:	f7ff fa15 	bl	800bf8c <__sinit>
 800cb62:	4b14      	ldr	r3, [pc, #80]	; (800cbb4 <_fflush_r+0x6c>)
 800cb64:	429c      	cmp	r4, r3
 800cb66:	d11b      	bne.n	800cba0 <_fflush_r+0x58>
 800cb68:	686c      	ldr	r4, [r5, #4]
 800cb6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d0ef      	beq.n	800cb52 <_fflush_r+0xa>
 800cb72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb74:	07d0      	lsls	r0, r2, #31
 800cb76:	d404      	bmi.n	800cb82 <_fflush_r+0x3a>
 800cb78:	0599      	lsls	r1, r3, #22
 800cb7a:	d402      	bmi.n	800cb82 <_fflush_r+0x3a>
 800cb7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb7e:	f7ff faa3 	bl	800c0c8 <__retarget_lock_acquire_recursive>
 800cb82:	4628      	mov	r0, r5
 800cb84:	4621      	mov	r1, r4
 800cb86:	f7ff ff59 	bl	800ca3c <__sflush_r>
 800cb8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb8c:	07da      	lsls	r2, r3, #31
 800cb8e:	4605      	mov	r5, r0
 800cb90:	d4e0      	bmi.n	800cb54 <_fflush_r+0xc>
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	059b      	lsls	r3, r3, #22
 800cb96:	d4dd      	bmi.n	800cb54 <_fflush_r+0xc>
 800cb98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb9a:	f7ff fa96 	bl	800c0ca <__retarget_lock_release_recursive>
 800cb9e:	e7d9      	b.n	800cb54 <_fflush_r+0xc>
 800cba0:	4b05      	ldr	r3, [pc, #20]	; (800cbb8 <_fflush_r+0x70>)
 800cba2:	429c      	cmp	r4, r3
 800cba4:	d101      	bne.n	800cbaa <_fflush_r+0x62>
 800cba6:	68ac      	ldr	r4, [r5, #8]
 800cba8:	e7df      	b.n	800cb6a <_fflush_r+0x22>
 800cbaa:	4b04      	ldr	r3, [pc, #16]	; (800cbbc <_fflush_r+0x74>)
 800cbac:	429c      	cmp	r4, r3
 800cbae:	bf08      	it	eq
 800cbb0:	68ec      	ldreq	r4, [r5, #12]
 800cbb2:	e7da      	b.n	800cb6a <_fflush_r+0x22>
 800cbb4:	0800cf40 	.word	0x0800cf40
 800cbb8:	0800cf60 	.word	0x0800cf60
 800cbbc:	0800cf20 	.word	0x0800cf20

0800cbc0 <_lseek_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4d07      	ldr	r5, [pc, #28]	; (800cbe0 <_lseek_r+0x20>)
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	4608      	mov	r0, r1
 800cbc8:	4611      	mov	r1, r2
 800cbca:	2200      	movs	r2, #0
 800cbcc:	602a      	str	r2, [r5, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	f7f6 f92e 	bl	8002e30 <_lseek>
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d102      	bne.n	800cbde <_lseek_r+0x1e>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	b103      	cbz	r3, 800cbde <_lseek_r+0x1e>
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	2000519c 	.word	0x2000519c

0800cbe4 <__swhatbuf_r>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	460e      	mov	r6, r1
 800cbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbec:	2900      	cmp	r1, #0
 800cbee:	b096      	sub	sp, #88	; 0x58
 800cbf0:	4614      	mov	r4, r2
 800cbf2:	461d      	mov	r5, r3
 800cbf4:	da08      	bge.n	800cc08 <__swhatbuf_r+0x24>
 800cbf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	602a      	str	r2, [r5, #0]
 800cbfe:	061a      	lsls	r2, r3, #24
 800cc00:	d410      	bmi.n	800cc24 <__swhatbuf_r+0x40>
 800cc02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc06:	e00e      	b.n	800cc26 <__swhatbuf_r+0x42>
 800cc08:	466a      	mov	r2, sp
 800cc0a:	f000 f8bb 	bl	800cd84 <_fstat_r>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	dbf1      	blt.n	800cbf6 <__swhatbuf_r+0x12>
 800cc12:	9a01      	ldr	r2, [sp, #4]
 800cc14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc1c:	425a      	negs	r2, r3
 800cc1e:	415a      	adcs	r2, r3
 800cc20:	602a      	str	r2, [r5, #0]
 800cc22:	e7ee      	b.n	800cc02 <__swhatbuf_r+0x1e>
 800cc24:	2340      	movs	r3, #64	; 0x40
 800cc26:	2000      	movs	r0, #0
 800cc28:	6023      	str	r3, [r4, #0]
 800cc2a:	b016      	add	sp, #88	; 0x58
 800cc2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc30 <__smakebuf_r>:
 800cc30:	898b      	ldrh	r3, [r1, #12]
 800cc32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc34:	079d      	lsls	r5, r3, #30
 800cc36:	4606      	mov	r6, r0
 800cc38:	460c      	mov	r4, r1
 800cc3a:	d507      	bpl.n	800cc4c <__smakebuf_r+0x1c>
 800cc3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	6123      	str	r3, [r4, #16]
 800cc44:	2301      	movs	r3, #1
 800cc46:	6163      	str	r3, [r4, #20]
 800cc48:	b002      	add	sp, #8
 800cc4a:	bd70      	pop	{r4, r5, r6, pc}
 800cc4c:	ab01      	add	r3, sp, #4
 800cc4e:	466a      	mov	r2, sp
 800cc50:	f7ff ffc8 	bl	800cbe4 <__swhatbuf_r>
 800cc54:	9900      	ldr	r1, [sp, #0]
 800cc56:	4605      	mov	r5, r0
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f7ff fa57 	bl	800c10c <_malloc_r>
 800cc5e:	b948      	cbnz	r0, 800cc74 <__smakebuf_r+0x44>
 800cc60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc64:	059a      	lsls	r2, r3, #22
 800cc66:	d4ef      	bmi.n	800cc48 <__smakebuf_r+0x18>
 800cc68:	f023 0303 	bic.w	r3, r3, #3
 800cc6c:	f043 0302 	orr.w	r3, r3, #2
 800cc70:	81a3      	strh	r3, [r4, #12]
 800cc72:	e7e3      	b.n	800cc3c <__smakebuf_r+0xc>
 800cc74:	4b0d      	ldr	r3, [pc, #52]	; (800ccac <__smakebuf_r+0x7c>)
 800cc76:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	6020      	str	r0, [r4, #0]
 800cc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc80:	81a3      	strh	r3, [r4, #12]
 800cc82:	9b00      	ldr	r3, [sp, #0]
 800cc84:	6163      	str	r3, [r4, #20]
 800cc86:	9b01      	ldr	r3, [sp, #4]
 800cc88:	6120      	str	r0, [r4, #16]
 800cc8a:	b15b      	cbz	r3, 800cca4 <__smakebuf_r+0x74>
 800cc8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc90:	4630      	mov	r0, r6
 800cc92:	f000 f889 	bl	800cda8 <_isatty_r>
 800cc96:	b128      	cbz	r0, 800cca4 <__smakebuf_r+0x74>
 800cc98:	89a3      	ldrh	r3, [r4, #12]
 800cc9a:	f023 0303 	bic.w	r3, r3, #3
 800cc9e:	f043 0301 	orr.w	r3, r3, #1
 800cca2:	81a3      	strh	r3, [r4, #12]
 800cca4:	89a0      	ldrh	r0, [r4, #12]
 800cca6:	4305      	orrs	r5, r0
 800cca8:	81a5      	strh	r5, [r4, #12]
 800ccaa:	e7cd      	b.n	800cc48 <__smakebuf_r+0x18>
 800ccac:	0800bf25 	.word	0x0800bf25

0800ccb0 <__malloc_lock>:
 800ccb0:	4801      	ldr	r0, [pc, #4]	; (800ccb8 <__malloc_lock+0x8>)
 800ccb2:	f7ff ba09 	b.w	800c0c8 <__retarget_lock_acquire_recursive>
 800ccb6:	bf00      	nop
 800ccb8:	20005190 	.word	0x20005190

0800ccbc <__malloc_unlock>:
 800ccbc:	4801      	ldr	r0, [pc, #4]	; (800ccc4 <__malloc_unlock+0x8>)
 800ccbe:	f7ff ba04 	b.w	800c0ca <__retarget_lock_release_recursive>
 800ccc2:	bf00      	nop
 800ccc4:	20005190 	.word	0x20005190

0800ccc8 <_free_r>:
 800ccc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccca:	2900      	cmp	r1, #0
 800cccc:	d044      	beq.n	800cd58 <_free_r+0x90>
 800ccce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccd2:	9001      	str	r0, [sp, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f1a1 0404 	sub.w	r4, r1, #4
 800ccda:	bfb8      	it	lt
 800ccdc:	18e4      	addlt	r4, r4, r3
 800ccde:	f7ff ffe7 	bl	800ccb0 <__malloc_lock>
 800cce2:	4a1e      	ldr	r2, [pc, #120]	; (800cd5c <_free_r+0x94>)
 800cce4:	9801      	ldr	r0, [sp, #4]
 800cce6:	6813      	ldr	r3, [r2, #0]
 800cce8:	b933      	cbnz	r3, 800ccf8 <_free_r+0x30>
 800ccea:	6063      	str	r3, [r4, #4]
 800ccec:	6014      	str	r4, [r2, #0]
 800ccee:	b003      	add	sp, #12
 800ccf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccf4:	f7ff bfe2 	b.w	800ccbc <__malloc_unlock>
 800ccf8:	42a3      	cmp	r3, r4
 800ccfa:	d908      	bls.n	800cd0e <_free_r+0x46>
 800ccfc:	6825      	ldr	r5, [r4, #0]
 800ccfe:	1961      	adds	r1, r4, r5
 800cd00:	428b      	cmp	r3, r1
 800cd02:	bf01      	itttt	eq
 800cd04:	6819      	ldreq	r1, [r3, #0]
 800cd06:	685b      	ldreq	r3, [r3, #4]
 800cd08:	1949      	addeq	r1, r1, r5
 800cd0a:	6021      	streq	r1, [r4, #0]
 800cd0c:	e7ed      	b.n	800ccea <_free_r+0x22>
 800cd0e:	461a      	mov	r2, r3
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	b10b      	cbz	r3, 800cd18 <_free_r+0x50>
 800cd14:	42a3      	cmp	r3, r4
 800cd16:	d9fa      	bls.n	800cd0e <_free_r+0x46>
 800cd18:	6811      	ldr	r1, [r2, #0]
 800cd1a:	1855      	adds	r5, r2, r1
 800cd1c:	42a5      	cmp	r5, r4
 800cd1e:	d10b      	bne.n	800cd38 <_free_r+0x70>
 800cd20:	6824      	ldr	r4, [r4, #0]
 800cd22:	4421      	add	r1, r4
 800cd24:	1854      	adds	r4, r2, r1
 800cd26:	42a3      	cmp	r3, r4
 800cd28:	6011      	str	r1, [r2, #0]
 800cd2a:	d1e0      	bne.n	800ccee <_free_r+0x26>
 800cd2c:	681c      	ldr	r4, [r3, #0]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	6053      	str	r3, [r2, #4]
 800cd32:	4421      	add	r1, r4
 800cd34:	6011      	str	r1, [r2, #0]
 800cd36:	e7da      	b.n	800ccee <_free_r+0x26>
 800cd38:	d902      	bls.n	800cd40 <_free_r+0x78>
 800cd3a:	230c      	movs	r3, #12
 800cd3c:	6003      	str	r3, [r0, #0]
 800cd3e:	e7d6      	b.n	800ccee <_free_r+0x26>
 800cd40:	6825      	ldr	r5, [r4, #0]
 800cd42:	1961      	adds	r1, r4, r5
 800cd44:	428b      	cmp	r3, r1
 800cd46:	bf04      	itt	eq
 800cd48:	6819      	ldreq	r1, [r3, #0]
 800cd4a:	685b      	ldreq	r3, [r3, #4]
 800cd4c:	6063      	str	r3, [r4, #4]
 800cd4e:	bf04      	itt	eq
 800cd50:	1949      	addeq	r1, r1, r5
 800cd52:	6021      	streq	r1, [r4, #0]
 800cd54:	6054      	str	r4, [r2, #4]
 800cd56:	e7ca      	b.n	800ccee <_free_r+0x26>
 800cd58:	b003      	add	sp, #12
 800cd5a:	bd30      	pop	{r4, r5, pc}
 800cd5c:	20005194 	.word	0x20005194

0800cd60 <_read_r>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	4d07      	ldr	r5, [pc, #28]	; (800cd80 <_read_r+0x20>)
 800cd64:	4604      	mov	r4, r0
 800cd66:	4608      	mov	r0, r1
 800cd68:	4611      	mov	r1, r2
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	602a      	str	r2, [r5, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	f7f5 fffe 	bl	8002d70 <_read>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d102      	bne.n	800cd7e <_read_r+0x1e>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	b103      	cbz	r3, 800cd7e <_read_r+0x1e>
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	2000519c 	.word	0x2000519c

0800cd84 <_fstat_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4d07      	ldr	r5, [pc, #28]	; (800cda4 <_fstat_r+0x20>)
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	4611      	mov	r1, r2
 800cd90:	602b      	str	r3, [r5, #0]
 800cd92:	f7f6 f832 	bl	8002dfa <_fstat>
 800cd96:	1c43      	adds	r3, r0, #1
 800cd98:	d102      	bne.n	800cda0 <_fstat_r+0x1c>
 800cd9a:	682b      	ldr	r3, [r5, #0]
 800cd9c:	b103      	cbz	r3, 800cda0 <_fstat_r+0x1c>
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	bd38      	pop	{r3, r4, r5, pc}
 800cda2:	bf00      	nop
 800cda4:	2000519c 	.word	0x2000519c

0800cda8 <_isatty_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d06      	ldr	r5, [pc, #24]	; (800cdc4 <_isatty_r+0x1c>)
 800cdac:	2300      	movs	r3, #0
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	602b      	str	r3, [r5, #0]
 800cdb4:	f7f6 f831 	bl	8002e1a <_isatty>
 800cdb8:	1c43      	adds	r3, r0, #1
 800cdba:	d102      	bne.n	800cdc2 <_isatty_r+0x1a>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	b103      	cbz	r3, 800cdc2 <_isatty_r+0x1a>
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	2000519c 	.word	0x2000519c

0800cdc8 <_init>:
 800cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdca:	bf00      	nop
 800cdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdce:	bc08      	pop	{r3}
 800cdd0:	469e      	mov	lr, r3
 800cdd2:	4770      	bx	lr

0800cdd4 <_fini>:
 800cdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd6:	bf00      	nop
 800cdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdda:	bc08      	pop	{r3}
 800cddc:	469e      	mov	lr, r3
 800cdde:	4770      	bx	lr
